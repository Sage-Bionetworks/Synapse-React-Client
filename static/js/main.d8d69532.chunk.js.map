{"version":3,"sources":["lib/utils/functions/getEndpoint.ts","lib/assets/ButtonContent.tsx","lib/assets/GoogleIcon.tsx","lib/utils/SynapseConstants.ts","lib/utils/SynapseClient.ts","lib/containers/Login.tsx","lib/utils/functions/colorPalette.ts","lib/containers/ColorGradient.tsx","lib/utils/functions/facetUtils.ts","lib/containers/table/SynapseTableConstants.ts","lib/containers/TotalQueryResults.tsx","lib/containers/Facets.tsx","lib/containers/QueryCount.tsx","lib/utils/functions/queryUtils.ts","lib/containers/QueryWrapper.tsx","lib/utils/functions/unCamelCase.ts","lib/containers/StackedBarChart.tsx","lib/containers/widgets/ElementWithTooltip.tsx","lib/utils/functions/getUserData.ts","lib/containers/row_renderers/utils/CardFooter.tsx","lib/containers/row_renderers/utils/ChipContainer.tsx","lib/containers/row_renderers/utils/Icon.tsx","lib/assets/themed_icons/Publication.tsx","lib/assets/themed_icons/Study.tsx","lib/assets/themed_icons/ToolExperimental.tsx","lib/assets/themed_icons/ToolComputational.tsx","lib/assets/themed_icons/ToolClinical.tsx","lib/assets/themed_icons/Project.tsx","lib/containers/row_renderers/utils/ShowMore.tsx","lib/containers/UserCardSmall.tsx","lib/containers/UserCardContextMenu.tsx","lib/containers/UserCardLarge.tsx","lib/assets/icons/IconCopy.tsx","lib/containers/UserCardMedium.tsx","lib/containers/download_list/DownloadConfirmation.tsx","lib/containers/UserCard.tsx","lib/containers/widgets/Bookmarks.tsx","lib/containers/widgets/SynapseImage.tsx","lib/containers/widgets/SynapsePlot.tsx","lib/containers/MarkdownSynapse.tsx","lib/containers/HeaderCard.tsx","lib/containers/GenericCard.tsx","lib/utils/functions/sqlFunctions.ts","lib/utils/functions/testDownloadSpeed.ts","lib/utils/functions/calculateFriendlyFileSize.ts","lib/containers/download_list/DownloadDetails.tsx","lib/containers/EntityLink.tsx","lib/containers/HasAccess.tsx","lib/containers/ModalDownload.FormSchema.ts","lib/containers/ModalDownload.tsx","lib/containers/table/table-top/DownloadLoginModal.tsx","lib/containers/table/table-top/EllipsisDropdown.tsx","lib/containers/table/table-top/ExpandTable.tsx","lib/containers/table/table-top/DownloadOptions.tsx","lib/containers/table/table-top/ColumnSelection.tsx","lib/containers/table/table-top/FacetFilter.tsx","lib/containers/widgets/Range.tsx","lib/containers/widgets/RangeSlider.tsx","lib/containers/widgets/query-filter/RangeFacetFilter.tsx","lib/containers/widgets/RadioGroup.tsx","lib/containers/widgets/Checkbox.tsx","lib/utils/hooks/useGetProfiles.ts","lib/containers/widgets/query-filter/EnumFacetFilter.tsx","lib/utils/hooks/useGetEntityHeaders.ts","lib/containers/widgets/query-filter/QueryFilter.tsx","lib/containers/table/SynapseTable.tsx","lib/containers/row_renderers/Dataset.tsx","lib/containers/row_renderers/Funder.tsx","lib/containers/UserCardList.tsx","lib/containers/CardContainer.tsx","lib/containers/Search.tsx","lib/containers/QueryWrapperMenu.tsx","lib/containers/Uploader.tsx","lib/containers/FileContentDownloadUploadDemo.tsx","lib/containers/StatisticsPlot.tsx","demo/containers/Demo.tsx","demo/containers/playground/QueryWrapperMenuDemo.tsx","lib/containers/CardContainerLogic.tsx","lib/containers/download_list/CreatePackage.tsx","lib/containers/download_list/DownloadListTable.tsx","lib/containers/EntityForm.tsx","lib/containers/synapse_form_wrapper/types.ts","lib/containers/synapse_form_wrapper/Header.tsx","lib/containers/synapse_form_wrapper/StepsSideNav.tsx","lib/containers/synapse_form_wrapper/NavButtons.tsx","lib/containers/synapse_form_wrapper/DataDebug.tsx","lib/containers/synapse_form_wrapper/SummaryTable.tsx","lib/containers/synapse_form_wrapper/WarningModal.tsx","lib/containers/synapse_form_wrapper/SynapseForm.tsx","lib/containers/synapse_form_wrapper/SynapseFormWrapper.tsx","lib/containers/synapse_form_wrapper/SynapseFormSubmissionsGrid.tsx","lib/containers/RssFeed.tsx","lib/containers/TwitterFeed.tsx","lib/containers/NewsFeedMenu.tsx","lib/containers/widgets/themes-plot/DotPlot.tsx","lib/containers/widgets/themes-plot/BarPlot.tsx","lib/containers/widgets/themes-plot/ThemesPlot.tsx","lib/containers/access_requirement_list/AccessRequirementList.tsx","demo/containers/playground/CardContainerLogicDemo.tsx","demo/containers/playground/SearchDemo.tsx","demo/containers/playground/ModalDownloadDemo.tsx","demo/containers/playground/UserCardDemo.tsx","demo/containers/playground/MarkdownSynapseDemo.tsx","demo/containers/playground/NewsFeedDemo.tsx","demo/containers/playground/FormServicesIntegrationDemo.tsx","lib/containers/FacetsPlotNav.tsx","lib/containers/QueryWrapperPlotNav.tsx","demo/containers/playground/QueryWrapperPlotNavDemo.tsx","demo/containers/playground/WidgetDemo.tsx","lib/containers/access_requirement_list/SelfSignAccessRequirement.tsx","lib/containers/access_requirement_list/TermsOfUseAccessRequirement.tsx","demo/containers/playground/AccessRequirementDemo.tsx","lib/containers/TemplateComponent.tsx","demo/containers/playground/TemplateComponentDemo.tsx","demo/containers/playground/Playground.tsx","demo/containers/App.tsx","index.tsx","lib/utils/synapseTypes/EvaluationQueryTable/index.ts","lib/assets/icons/Data2.svg","lib/utils/synapseTypes/index.ts","lib/utils/synapseTypes/Download/index.ts","lib/utils/synapseTypes/Table/index.ts","lib/utils/synapseTypes/Table/ColumnType.ts","lib/utils/synapseTypes/AccessRequirement/index.ts","lib/utils/synapseTypes/AccessRequirement/AccessRequirement.ts","lib/utils/synapseTypes/BulkFileDownloadRequest.ts","lib/utils/synapseTypes/FileDownloadSummary.ts","lib/utils/synapseTypes/FileHandleAssociation.ts","lib/utils/synapseTypes/Forms.ts","lib/utils/synapseTypes/RestrictionInformation.ts","lib/utils/synapseTypes/AccessApproval.ts","images/logo.svg","lib/assets/icons/study-active.svg","lib/assets/icons/study-complete.svg","lib/assets/icons/DNA_Two.svg","lib/assets/icons/expand.svg","lib/assets/icons/shrink.svg","lib/assets/icons/columns.svg","lib/assets/icons/file-dotted.svg","lib/assets/icons/json-form-tool-no-submissions.svg","demo/containers/playground/icons/brain.svg","demo/containers/playground/icons/circle.svg","demo/containers/playground/icons/mouse.svg","demo/containers/playground/icons/resiliencead.svg"],"names":["BackendDestinationEnum","children","style","paddingRight","fontWeight","paddingLeft","icon","paddingTop","paddingBottom","textAlign","width","active","background","borderRadius","height","xmlns","fill","fillRule","d","BUNDLE_MASK_QUERY_RESULTS","BUNDLE_MASK_QUERY_COUNT","BUNDLE_MASK_QUERY_SELECT_COLUMNS","BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE","BUNDLE_MASK_QUERY_COLUMN_MODELS","BUNDLE_MASK_QUERY_FACETS","BUNDLE_MASK_SUM_FILES_SIZE_BYTES","ENTITY_BUNDLE_MASK_ENTITY","ENTITY_BUNDLE_MASK_ANNOTATIONS","ENTITY_BUNDLE_MASK_PERMISSIONS","ENTITY_BUNDLE_MASK_ENTITY_PATH","ENTITY_BUNDLE_MASK_HAS_CHILDREN","ENTITY_BUNDLE_MASK_ACL","ENTITY_BUNDLE_MASK_FILE_HANDLES","ENTITY_BUNDLE_MASK_TABLE_DATA","ENTITY_BUNDLE_MASK_ROOT_WIKI_ID","ENTITY_BUNDLE_MASK_BENEFACTOR_ACL","ENTITY_BUNDLE_MASK_DOI","ENTITY_BUNDLE_MASK_FILE_NAME","ENTITY_BUNDLE_MASK_THREAD_COUNT","ENTITY_BUNDLE_MASK_RESTRICTION_INFORMATION","STUDY","VALUE_NOT_SET","STUDY_ACTIVE","STUDY_COMPLETE","DATASET","AMP_CONSORTIUM","FUNDER","PUBLICATION","TOOL","GENERIC_CARD","COMPUTATIONAL","EXPERIMENTAL","CLINICAL","PROJECT","PAGE_SIZE","SMALL_USER_CARD","MEDIUM_USER_CARD","LARGE_USER_CARD","SEPERATOR","AUTHENTICATED_USERS","_TIME_DELAY","SRC_SIGN_IN_CLASS","PRODUCTION_ENDPOINT_CONFIG","REPO","PORTAL","getEndpoint","endpoint","endpoint_config","window","SRC","OVERRIDE_ENDPOINT_CONFIG","Error","PORTAL_ENDPOINT","cookies","UniversalCookies","IS_OUTSIDE_SYNAPSE_ORG","location","hostname","toLowerCase","includes","SESSION_TOKEN_COOKIE_KEY","AUTH_PROVIDER","SYNAPSE_STORAGE_LOCATION_ID","getRootURL","portString","port","protocol","delay","t","Promise","resolve","setTimeout","bind","retryFetch","url","options","delayMs","then","fetchWithExponentialTimeout","retries","fetch","resp","status","text","json","JSON","parse","ok","reject","error","catch","reason","doPost","requestJsonObject","sessionToken","initCredentials","body","stringify","headers","Accept","method","mode","credentials","usedEndpoint","doGet","doDelete","undefined","doPut","putRefreshSessionToken","REPO_ENDPOINT","getVersion","addFilesToDownloadList","request","updateParentState","requestUrl","token","getAsyncResultFromJobId","getDownloadFromTableRequest","entityId","getFileHandleById","handleId","getFileHandleByIdURL","urlRequest","jobState","asyncJobStatus","getQueryTableResults","queryBundleRequest","getFullQueryTableResults","a","async","maxPageSize","offset","query","rest","queryRequest","limit","response","data","isDone","queryResult","queryResults","rows","length","push","login","username","password","authenticationReceipt","oAuthUrlRequest","provider","redirectUrl","oAuthSessionRequest","authenticationCode","createEntity","entity","createProject","name","concreteType","getUserProfile","getUserProfileById","ownerId","getUserBundle","id","mask","getGroupHeadersBatch","ids","join","getUserProfiles","list","getEntityChildren","lookupChildEntity","getFiles","getBulkFiles","bulkFileDownloadRequest","asyncJobId","err","console","getEntity","versionNumber","getEntityHeader","references","getAllEntityHeader","fn","getAllOfPaginatedService","updateEntity","deleteEntity","getEntityBundleForVersion","version","partsMask","getEntityWiki","wikiId","getUserFavorites","getUserTeamList","getTeamList","fragment","getWikiAttachmentsFromEntity","getWikiAttachmentsFromEvaluation","setSessionTokenCookie","sessionCallback","set","maxAge","remove","_","getSessionTokenFromCookie","get","getPrincipalAliasRequest","alias","type","detectSSOCode","redirectURL","code","URL","href","searchParams","synToken","originalUrl","localStorage","getItem","removeItem","replace","signOut","uploadFile","filename","file","fileUploadResolve","fileUploadReject","partSize","Math","max","size","contentType","fileName","fileSizeBytes","partSizeBytes","storageLocationId","calculateMd5","md5","contentMD5Hex","startMultipartUpload","fileBlob","blobSlice","File","prototype","slice","chunks","ceil","spark","SparkMD5","ArrayBuffer","fileReader","FileReader","currentChunk","onload","e","log","append","result","loadNext","end","info","onerror","warn","start","readAsArrayBuffer","call","processFilePart","partNumber","multipartUploadStatus","clientSidePartsState","uploadId","presignedUploadUrlRequest","partNumbers","presignedUrlUrl","presignedUrlResponse","presignedUrl","partPresignedUrls","uploadPresignedUrl","startByte","endByte","fileSlice","uploadFilePart","addPartUrl","addPartResponse","addPartState","checkUploadComplete","fileHandleName","every","v","newStatus","fileHandleId","resultFileHandleId","partsState","split","map","bit","i","getFileEntityContent","fileEntity","fileHandleAssociationList","associateObjectId","associateObjectType","dataFileHandleId","includeFileHandles","includePreSignedURLs","includePreviewPreSignedURLs","requestedFiles","preSignedURL","fileHandle","getFileHandleContent","content","getFileEntityFileHandle","FileHandleAssociateType","FileEntity","getFileHandleContentFromID","getFileHandleByIdPromise","getFileHandlePresignedUrlPromis","all","values","contentSize","cache","createACL","acl","submitToEvaluation","submission","etag","getEvaluation","evalId","getEvaluationSubmissions","encodeURI","getOAuth2RequestDescription","oidcAuthRequest","hasUserAuthorizedOAuthClient","getOAuth2Client","clientId","consentToOAuth2Request","createFormGroup","getFormACL","formGroupId","updateFormACL","newAcl","createFormData","newFormData","updateFormData","formDataId","updatedFormData","deleteFormData","submitFormData","listFormData","listFormDataAsFormAdmin","acceptFormData","rejectFormData","formRejection","getProjectStatistics","getRestrictionInformation","getAccessRequirement","getAllAccessRequirements","postAccessApproval","accessApproval","getDownloadList","getDownloadOrder","zipFileName","baseURL","existsMoreData","results","deleteDownloadListFiles","deleteDownloadList","Login","props","authenticationReceiptKey","state","email","errorMessage","hasLoginInFailed","isSignedIn","handleChange","handleLogin","getLoginFailureView","onGoogleSignIn","event","target","currentTarget","value","newState","this","setState","clickEvent","preventDefault","SynapseClient","setItem","className","googleRedirectUrl","authUrl","authorizationUrl","theme","googleTheme","onClick","GoogleIcon","key","ButtonContent","marginRight","alt","src","onSubmit","autoComplete","placeholder","onChange","React","COLOR_PALETTE_EVEN","COLOR_PALETTE_ODD","getColorPallette","colorPalleteSelection","textColors","colorPalette","textColor","color","getIsValueSelected","isLoading","lastFacetSelection","curFacetSelection","columnName","facetValue","isSelected","selector","SELECT_SINGLE_FACET","readFacetValues","htmlCheckboxes","facet","facetValues","checkbox","checked","newQueryRequest","selectedFacets","specificFacet","find","el","facetColumnValuesRequest","ICON_STATE","TotalQueryResults","total","calculateTotal","prevProps","facets","curFacetsIndex","findIndex","facetType","curFacets","anyTrue","totalAllFalseCase","totalStandardCase","count","queryCount","unitDescription","frontText","loader","marginLeft","library","add","faPlus","CheckboxGroup","facetColumnResult","showAllFacets","rgbIndex","isAllFilterSelected","ref","sort","b","forEach","facetColumnResultValues","index","curColor","backgroundClass","displayValue","applyChanges","childrenView","Facets","isAllFilterSelectedForFacet","chartSelectionIndex","Array","from","current","querySelectorAll","getLastQueryRequest","executeQueryRequest","showButtons","curFacetsLength","showBarChart","curFacet","showFacetFilter","QueryCount","storedSqlQueryCount","isCalculatingQueryCountForSql","calculateRowCount","sql","partMask","SynapseConstants","toLocaleString","getNextPageOfData","newData","oldData","cloneDeep","hasMoreData","QueryWrapper","executeInitialQueryRequest","getInitQueryRequest","initialState","loadNow","loadNowStarted","initQueryRequest","lastQueryRequest","isLoadingNewData","filter","isAllFalse","isAllTrue","isByDefaultSelected","update","facetAliases","childrenWithProps","child","queryWrapperChildProps","loadingCusrorClass","defaultProps","unCamelCase","str","toUpperCase","faAngleLeft","faAngleRight","StackedBarChart","handleClick","dict","_event","handleArrowClick","direction","extractPropsData","Object","keys","handleHover","handleExit","getTextForChartSelection","onMeasureResize","dimensions","bounds","top","left","right","bottom","boxShadow","xData","facetValueDisplay","filterDisplay","loadingScreen","progressMessage","hasOwnProperty","originalColor","onResize","contentRect","measureRef","obj","rectStyle","rgbColor","svgWidth","label","tooltipId","numCharsInValue","toString","data-for","data-tip","svgHeight","onMouseEnter","onMouseLeave","textAnchor","fontFamily","x","y","delayShow","getFileCount","link","linkText","fontSize","item","ElementWithTooltip","tooltipTrigger","image","idForToolTip","callbackFn","tooltipText","imageColor","tooltipVisualProps","place","effect","tooltipTriggerContents","svgImg","altText","getTooltipTriggerContents","outerChild","cloneElement","padding","tabIndex","onKeyPress","aria-label","Dropdown","Toggle","variant","getUserProfileWithProfilePicAttached","principalIds","withProfilePic","profilePicureFileHandleId","fileHandleList","matchingPersonIndex","clientPreSignedURL","getUserProfileWithProfilePic","userProfile","firstElement","COLORS","getColor","userName","hashedUserName","val","reduce","prevHash","currVal","charCodeAt","abs","hash","faLongArrowAltUp","faLongArrowAltDown","URL_REGEX","CardFooter","renderRowValue","textColorClass","isHeader","match","DOI_REGEX","data-search-handle","rel","renderRows","isDesktop","kv","hideClass","isShowMoreOn","toggleShowMore","updatePredicate","addEventListener","removeEventListener","innerWidth","secondaryLabelLimit","valuesFiltered","hasMoreValuesThanLimit","Infinity","margin","ChipContainer","chipsFormatted","chips","defaultIcons","Data2Svg","DNA_TwoSvg","studyActiveSvg","studyCompleteSvg","clipPath","clipRule","transform","Icon","iconOptions","iconSet","datasetIconClass","faCircle","UserCardSmall","img","hideText","hideTooltip","linkLocation","displayName","firstName","lastName","position","backgroundImage","multiline","whiteSpace","UserCardContextMenu","menuActions","aria-labelledby","menuAction","callback","field","listStyle","UserCardLarge","summary","industry","faEllipsisV","faCopy","svg","viewBox","StatusEnum","UserCardMedium","htmlDivRef","copyToClipboard","document","createElement","setAttribute","appendChild","select","execCommand","removeChild","showModal","toggleContextMenu","isContextMenuOpen","pageClick","isLarge","hideEmail","disableLink","company","mediumCard","classNames","timeout","enter","exit","IconCopy","outline","fixedWidth","border","UserCard","aliasData","principalId","userProfileAtRender","preSignedURLAtRender","propsForChild","Bookmarks","renderBookmarks","matchedGroup","copyFootnotes","String","footnotes","regex","output","exec","isBeforeLastElement","dangerouslySetInnerHTML","__html","SynapseImage","getSynapseFiles","synapseId","fileResults","WikiAttachment","params","align","alignLowerCase","Plot","createPlotlyComponent","Plotly","SynapsePlot","isLoaded","queryData","fetchPlotlyData","showPlot","widgetparamsMapped","parseEntityIdFromSqlStatement","title","xtitle","ytitle","xaxistype","showlegend","isHorizontal","horizontal","layout","xaxis","yaxis","plotData","orientation","row","j","rowValues","TOC_CLASS","1","2","3","4","5","6","md","markdownit","html","MarkdownSynapse","markupRef","markdownitSynapse","init_markdown_it","markdownitSub","markdownitSup","markdownitCentertext","markdownitSynapseHeading","markdownitSynapseTable","markdownitStrikethroughAlt","markdownitContainer","markdownitEmphasisAlt","markdownitInlineComments","markdownitBr","use","markdownitMath","markdown","fileHandles","handleLinkClicks","renderMarkdown","recursiveRender","processMath","getWikiAttachments","getWikiPageMarkdown","renderWidget","renderSynapseButton","renderSynapseImage","renderSynapsePlot","renderSynapseTOC","getErrorView","createHTML","addBookmarks","addIdsToReferenceWidgets","addIdsToTocWidgets","genericElement","tagName","anchor","substring","referenceNumber","Number","goTo","querySelector","scrollIntoView","behavior","block","inline","getAttribute","idOfContent","initText","renderInline","render","sanitizeHtml","allowedAttributes","button","div","h1","h2","h3","h4","h5","h6","li","ol","span","table","th","thead","ul","allowedTags","element","textContent","katex","throwOnError","resetFootnotes","footnotesHtml","wikiPage","errorMessageView","ErrorView","referenceCount","tocIdCount","curTocId","markup","DOMParser","parseFromString","nodeType","Node","TEXT_NODE","ELEMENT_NODE","HTMLElement","widgetParams","processHTMLWidgetMapping","attributes","attribute","childNodes","xml","escapedOneToXmlSpecialMap","originalMarkup","decodedWidgetParams","decodeXml","questionIndex","indexOf","widgetType","keyPair","decodeURIComponent","reactKey","renderUserBadge","buttonClasses","highlight","role","elements","p1","p2","p3","p4","data-anchor","bookmarks","HeaderCard","subTitle","description","iconValue","backgroundColor","isAlignToLeftNav","descriptionLinkConfig","descriptionElement","useState","docTitle","docDescription","useEffect","borderTop","marginTop","SYNAPSE_REGX","GenericCard","getCutoff","previewText","summarySplit","trim","hasClickedShowMore","renderTitleLink","renderLabel","renderLongDescription","renderShortDescription","titleLink","schema","linkDisplay","matchColumnName","URLColumnName","indexInData","labelLink","isMarkdown","genericCardSchema","selectColumns","titleLinkConfig","labelLinkConfig","genericCardSchemaDefined","linkValue","secondaryLabels","selectedColumnOrUndefined","isMultiValue","columnType","columnDisplayName","keyValue","showFooter","marginBottom","titleSearchHandle","stubTitleSearchHandle","descriptionSubTitle","show","cursor","GROUP_BY_REGEX","isGroupByInSql","test","generateTokenUsingOperator","literal","operator","usedMatchForLike","insertConditionsFromSearchParams","tokens","lexer","tokenize","foundIndex","whereClauseIndex","indexAfterWhereClause","splice","searchParamsLen","unshift","formatSQLFromParser","synId","newSql","parser","splitString","matches","substr","resultToJson","headerColumns","rowColumns","column","cellIndex","testDownloadSpeed","cachedSpeedExpireTime","cachedSpeed","Date","getTime","startMs","now","sufixes","calculateFriendlyFileSize","bytes","floor","pow","toFixed","DownloadDetails","downloadSpeed","numFiles","numBytes","speed","timeEstimateInSeconds","friendlyTime","moment","duration","humanize","isInactive","iconClassName","getFilesInformation","queryBundleRequestSizeInformation","sumFileSizes","estimatedDownloadBytesPerSecond","durationSeconds","fileCount","fileSize","downloadEstimate","INFO","addToDownload","req","downloadList","SUCCESS","ERROR","faFile","faDatabase","faClock","StatusConstruct","infoText","closeText","PROCESSING","LOADING_INFO","DownloadConfirmation","fnClose","getContent","faLink","faFolder","faListAlt","faTable","faThList","faArchive","ExternalFileHandleConcreteTypeEnum","GoogleCloudFileHandleEnum","EntityTypeIcon","splitType","iconType","getIconTypeForEntity","EntityLink","entityHeader","faUnlockAlt","FileHandleDownloadTypeEnum","GIGABYTE_SIZE","getDownloadTypeForFileHandle","isInDownloadList","Accessible","TooLarge","GoogleCloudFileHandle","ExternalCloudFile","ExternalFileLink","HasAccess","entityVersionNumber","fileHandleDownloadType","updateStateFileHandleAccessBlocked","NoFileHandle","AccessBlocked","AccessBlockedToAnonymous","restrictionInformation","restrictableObjectType","RestrictableObjectType","ENTITY","objectId","renderIconHelper","iconProp","classColor","renderIcon","downloadType","hasUnmetAccessRequirement","faLock","renderARsLink","restrictionLevel","RestrictionLevel","OPEN","viewARsLink","csvOption","formSchemaArray","properties","oneOf","const","Contents","items","enum","uniqueItems","formSchemaUIArray","faTimes","ModalDownload","handleSubmit","step","handleDownloadSetup","onDownload","formData","fileType","contents","onClose","separator","writeHeader","includeRowIdAndRowVersion","downloadFromTableRequest","csvTableDescriptor","resultsFileHandleId","Modal","animation","centered","onHide","Header","zIndex","uiSchema","backgroundSize","DownloadLoginModal","ModalHeader","closeButton","ModalBody","ModalFooter","Button","EllipsisDropdown","onDownloadFiles","onDownloadTableOnly","onShowColumns","onFullScreen","isExpanded","setShowModal","Menu","alignRight","isGroupedQuery","isFileView","Item","isUnauthenticated","Divider","ExpandTable","onExpand","ShrinkSvg","ExpandSvg","DownloadOptions","onExportMetadata","faDownload","ColumnSelection","isColumnSelected","visibleColumnCount","onToggle","toggleColumnSelection","metadata","ColumnsSvg","header","isCurrentColumnSelected","iconStyle","visibility","maybeShowPrimaryColor","FacetFilter","overflowY","maxHeight","_show","source","allRef","click","facetColumnResultValueCount","isValueSelected","inputRef","Range","setError","initialValues","min","format","setValues","isValid","display","flexWrap","callBackFn","handleAppyChanges","errorText","Handle","domain","handle","percent","getHandleProps","aria-valuemin","aria-valuemax","aria-valuenow","Track","getTrackProps","Tick","tick","getInitialValues","RadioValuesEnum","RangeSlider","doUpdateOnApply","stringArrToNumArr","inputArr","numDomain","ticksCount","maxTickCount","handleSliderChange","getRailProps","handles","tracks","ticks","RadioGroup","option","RangeFacetFilter","facetResult","columnModel","NOT_SET","ANY","RANGE","columnMin","columnMax","selectedMin","selectedMax","hasAnyValue","rangeType","radioValue","setRadioValue","onChangeCallback","handleRadioGroupChange","Checkbox","setChecked","useGetProfiles","setData","curList","nonNullIds","newValues","without","newIds","concat","getData","valueToLabel","profiles","entityHeaders","profile","eh","EnumFacetFilter","onClear","isShowAll","setIsShowAll","userProfiles","incomingList","targetId","newReferences","useGetEntityHeaders","visibleItemsCount","formatFacetValuesForDisplay","isChecked","convertFacetToFacetColumnValuesRequest","patchRequestFacets","changedFacet","lastRequest","selections","changedFacetIndex","isEmptyValuesFacet","applyChangesToValuesColumn","onChangeFn","facetName","applyChangesToRangeColumn","convertFacetColumnRangeRequest","QueryFilter","columnModels","model","EMPTY_HEADER","versionLabel","benefactorId","createdBy","createdOn","modifiedBy","modifiedOn","faColumns","faSort","faSortAmountUp","faSortAmountDown","faCheck","faFilter","faCog","faUsers","faGlobeAmericas","SORT_STATE","SynapseTable","showGroupRowData","selectedRow","queryCopy","parsed","getSqlUnderlyingDataForRow","queryJSON","encodedQuery","btoa","renderDropdownDownloadOptions","partialState","isModalDownloadOpen","showDownload","renderColumnSelection","showColumnSelection","onToggleColumnSelectionShow","renderTable","pastZero","showAccessColumn","zeroMarginRight","nextBtn","handlePaginationClick","previousBtn","isShowingAccessColumn","rowId","minHeight","isDownloadConfirmationOpen","createTableHeader","createTableRows","renderTableTop","enableLeftFacetFilter","onDownloadTableOnlyArguments","onExpandArguments","isShowLeftFilter","advancedSearch","eventType","currentOffset","handleColumnSortPress","columnIconSortState","getLengthOfPropsData","sortedColumnSelection","findSelectionIndex","defaultSelection","lengthOfPropsData","applyChangesFromQueryFilter","isUserModifiedQuery","configureFacetDropdown","mapEntityIdToHeader","mapUserIdToHeader","getEntityHeadersInData","getColumnIndiciesWithType","getTableConcreteType","currentTableId","tableId","previousTableId","entityData","entityIdColumnIndicies","userIdColumnIndicies","distinctEntityIds","getUniqueEntities","distinctUserIds","referenceList","userPorfileIds","isIndividual","mapIdToHeader","indicies","distinctEntities","Set","colIndex","columnTypes","columnsOfTypeEntity","NoData","fontStyle","newFacets","dialogClassName","Body","originalSql","indexes","selectIndex","fromIndex","columnIndex","columnReferences","foundFunctionForColumn","toLocaleLowerCase","rowValue","pop","rowsFormatted","entityColumnIndicies","userColumnIndicies","dateColumnIndicies","dateListColumnIndicies","booleanListColumnIndicies","otherListColumnIndicies","isColumnSelectedLen","countColumnIndexes","getCountFunctionColumnIndexes","markdownColumns","rowIndex","rowContent","columnValue","isMarkdownColumn","isColumnActiveInitLoad","isColumnActivePastInitLoad","isCountColumn","isBold","renderTableCell","rowSynapseId","rowFormatted","jsonData","longString","maxCharCount","getShortString","displayString","noop","usedVisibleColumnCount","tableColumnHeaderElements","initRender","subsequentRender","facetIndex","isFacetSelection","isSelectedIconClass","sortSpanBackgoundClass","displayColumnName","synTable","open","enableDownloadConfirmation","facetColumnResults","Dataset","handleLinkClick","datasetName","tumorType","diseaseFocus","fundingAgency","Funder","organizationName","organizationPath","website","logoHref","logo","orgPath","origin","websiteDisplayName","charAt","showOrgLink","isOnOrgPath","UserCardList","userProfileMap","priorListOfIds","newEntries","firstNameIndex","lastNameIndex","institutionIndex","fauxUserProfilesList","manuallyExtractData","fauxUserProfileIndex","fauxUserProfile","CardContainer","renderCard","handleViewMore","cards","showViewMore","showViewMoreButton","userIdColumnIndex","listIds","rowData","propsForCard","faCaretDown","faCaretUp","faSearch","Search","toggleDropdown","setDropdownIndex","focus","dropdownIndex","highlightText","submittedSearchText","searchable","isQueryWrapperMenuChild","searchItem","outerHTML","innerText","searchItemView","SEARCH_CLASS_CSS","textElement","innerHTML","RegExp","clearSearchText","searchText","search","lastQueryRequestDeepCopy","addEscapeCharacters","lastSearchedFacet","searchableItem","fieldStyle","alignItems","curFacetDisplayText","lastSearchedFacetDisplayText","usedUnitDescription","flex","borderRight","justifyContent","onSelect","hintText","escapedSearchText","QueryWrapperMenu","handleHoverLogic","classList","contains","switchFacet","menuIndexIn","accordionIndexIn","activeMenuIndices","isClickingCurrentSelection","accordionGroupIndex","toggleGroupAccordionIndex","accordionGroupIndexIn","getCurrentSqlFromActiveTab","menuConfig","facetValueFromSearchParams","config","isSelectedFromURL","getSelectedFacets","accordionConfig","facetIndexFromFacetSearchParam","indexFromURLOrDefaultZero","getUnitDescription","getPartMask","getSqlWithAdditionalClause","getTableLoadingScreen","_prevState","stackedBarChartConfiguration","globalQueryCountSql","hasGroupByInSql","menuDropdown","renderMenuDropdown","queryWrapper","renderQueryChildren","queryConfig","groupIndex","isConsistent","cardConfiguration","tableConfiguration","searchConfiguration","showSearch","aliasedFacet","searchClass","tableLoadingScreen","isAccordionConfigDefined","renderQueryChild","isActive","primaryColor","indicatorClasses","borderTopColor","hoverEnter","hoverLeave","component","appear","renderFacetMenu","curLevel","defaultColor","searchIconStyle","opacity","isSearchConfig","selectedStyling","borderLeftColor","infoEnter","infoLeave","facetDisplayValue","Uploader","inputOpenFileRef","showOpenFileDlg","files","handleFilesChanged","finishedProcessingOneFile","incrementedFilesUploadedCount","filesUploadedCount","isStillUploading","totalFilesToUploadCount","isUploading","successfullyUploaded","handleUploadError","selectorFiles","newFileEntity","parentId","parentContainerId","entityLookupRequest","entityName","existingEntity","updateEntityFile","fileUploadComplete","isCreate","multiple","FileContentDownloadUploadDemo","updateFileContent","targetEntity","fileContent","newFileContent","Blob","handleContentChange","targetEntityId","months","StatisticsPlot","getTrace","traceName","stats","markerColor","trace","marker","hovertemplate","statPoint","statPointDate","rangeStart","getUTCMonth","getUTCFullYear","filesCount","barmode","hovermode","traces","fileDownloads","fileUploads","displayModeBar","displaylogo","modeBarButtonsToRemove","useResizeHandler","Demo","entityFormRef","showMarkdown","showTabOne","tabOne","tabTwo","onRunDownloadSpeedTest","submitForm","userFormDataSynId","QueryWrapperMenuDemo","experimentalSql","computationalSql","activeTab","tabFour","tabThree","grant","removeHandler","updatedState","CardContainerLogic","defaultState","prevSearchParams","currentSearchParams","hasSearchParamsChanged","isEqual","hasTokenBeenAquired","hasSqlChanged","sqlUsed","sqlOperator","queryRequestWithoutCount","totalResultsNoFacet","CreatePackage","setIsLoading","setZipFileName","message","alert","setAlert","bulkFileDownloadResponse","setBulkFileDownloadResponse","updateDownloadList","createPackageHandler","fileNameWithZipExtension","downloadOrder","zipFileFormat","ZipFileFormat","Flat","transition","resultZipFileHandleId","fileSummary","numfilesDownloaded","FileDownloadStatus","faTrash","DownloadListTable","batchFileResult","fileBeingDeleted","setFileBeingDeleted","fetchData","filesToDownload","invokeDownloadListUpdatedEvent","batchFileRequest","referenceCall","batchFile","failureCode","listUpdatedCallback","responsive","isCurrentlyBeingDeletedClass","fileResult","fileRes","canDownload","deleteFileFromList","StepStateEnum","NavActionEnum","bodyText","isSubmitted","StepsSideNav","nonChildSteps","stepList","getIcon","isExcluded","isStatic","isSubmit","iconDef","flip","faBan","COMPLETED","faCheckCircle","faExclamationCircle","getItemClass","isInProgress","liClassName","getListItem","isWizard","isRenderChild","renderStepName","inProgress","final","excluded","static","itemClass","onStepChange","isWizardMode","stepChildId","childStep","NavButtons","previousButton","previousStepIds","steps","currentStep","canGoBack","onNavAction","PREVIOUS","faChevronLeft","nextButton","NEXT","faChevronRight","saveButton","disabled","isFormSubmitted","SAVE","NextStepLink","nextStep","nextStepId","DataDebug","myData","hidden","findLabel","regex1","propArr","labelFromSchema","labelFromUi","arrayLabelFromSchema","arrayLabelFromUiSchema","indexMatch","first","isNaN","parseInt","SummaryTable","flatFormData","flatData","flatten","object","flattenedObject","prefix","isArray","isString","isObject","prevVal","isDate","boundary","screen","order","getFlatData","prevScreenId","line","print","WarningModal","onCancel","Title","copy","Footer","onOK","callbackArgs","confirmCopy","SynapseForm","excludeWarningText","excludeWarningHeader","unsavedDataWarning","formRef","formDivRef","navAction","NONE","extraErrors","isNewForm","getFirstStep","onUnload","ev","hasUnsavedChanges","returnValue","setupBeforeUnloadListener","_setIncludedPropInFormDataNonWizard","currentState","schemaScreens","currentStateFormData","_setIncludedPropInFormDataWizard","firstStepId","newStateData","getSchema","pick","getNextStepId","rules","default","engine","Engine","run","events","next","moveStep","isError","previousStack","errorSchema","isMoveForwardInWizardMode","currentStepState","TODO","included","saveStepState","hasValidated","doShowErrors","goPrevious","previousStepId","isSubmitScreen","currentIndex","isUndefined","triggerAction","onSave","runCustomValidation","submit","triggerStepChange","GO_TO_STEP","onError","args","VALIDATE","modifiedSteps","setStepStatusForFailedValidation","scrollTo","isLoadingSaved","errors","currentSchemaProperties","stepsWithError","trimStart","property","stepsInCurrentSchema","performAction","showExcludeStateWarningModal","stepId","isUpdateFlattenedData","modalContext","action","toggleExcludeStep","arguments","isExclude","prevState","stp","formDataUpdated","renderNotification","SAVE_SUCCESS","SUBMIT_SUCCESS","PROGRESS","renderTextForStaticScreen","renderOptionalFormSubheader","renderHelpToggle","showHelp","checkedIcon","uncheckedIcon","offColor","allSteps","validationRules","acc","allRules","rule","paramProp","path","newRule","allowUndefinedFacts","stack","transformErrors","extraError","SUBMIT","parentPath","lastIndexOf","renderErrorListTemplate","currentLis","propPath","arrayLabelFromUI","renderTransformedErrorObject","stringToElementForProp","srcObject","some","k","navSchema","doShowHelp","shouldUpdate","callbackStatus","isSuccess","history","back","hasError","when","formTitle","liveValidate","handleOnChange","form","showErrorList","ErrorList","screenId","formClass","SynapseFormWrapper","getFileEntityData","entityContent","newError","getFileEntityDataDereferenced","$RefParser","dereference","derefContent","formSchemaVersion","uiSchemaVersion","navSchemaVersion","submitted","fileData","promises","formSchemaEntityId","formUiSchemaEntityId","formNavSchemaEntityId","configData","formSchema","formUiSchema","formNavSchema","finishedProcessing","notification","saveToFile","createOrUpdateFormDataFile","fileContentsBlob","newFileHandleId","fileNamePath","errorTitle","searchString","isReadyToDisplayForm","ERROR_CRITICAL","renderLoader","Alert","Heading","renderUnauthenticatedView","SynapseFormSubmissionGrid","modalTitle","listingText","subhead","noRecords","modalCopy","getTypeFileListing","nextPageToken","groupId","cleanUpName","filterByState","fileList","page","getMore","fileListType","statusList","requestFilter","SUBMITTED","IN_PROGRESS","getUserFileListing","deleteFile","setModalConfirmationState","renderLoading","renderSubmissionsTable","pathpart","textSource","tableTitleRow","viewMore","dataFileRecord","calendar","aria-hidden","submissionStatus","isShowInfoModal","faPhone","renderSubmissionsTables","NoSubmissionsIcon","refresh","itemNoun","WAITING_FOR_SUBMISSION","SUBMITTED_WAITING_FOR_REVIEW","ACCEPTED","REJECTED","rssParser","Parser","RssFeed","_isMounted","onToggleReadMore","itemId","feedItemContentDiv","getElementById","itemId2MoreItem","isShow","foundMoreItem","newText","newIcon","onClickShowMoreItems","isShowingMoreItems","rssFeed","isLoadingError","responseData","parseString","rss","parsedHtml","bodyElement","moreElement","foundMoreElement","isItemVisible","defaultItemsToShow","showMoreText","showMoreIcon","guid","documentElement","TwitterFeed","twttr","widgets","load","data-height","data-theme","NewsFeedMenu","getMenuIndex","menuIndex","feedKeyValue","renderMenu","feedName","feedDescription","feedUrl","mailChimpUrl","twitterFeedUrl","mailChimpListName","modifiedFeedUrl","getOwnPropertyNames","routeToNewsFeed","urlParams","URLSearchParams","to","pathname","getLayout","dotPlotLayoutConfig","layoutOptions","showticklabels","range","maxValue","visible","isXAxis","isLegend","l","r","pad","zeroline","showgrid","showline","createArrayOfGroupValues","getPlotDataPoints","graphItems","markerStyle","ySorted","isFakeData","groups","uniq","group","symbols","symbol","DotPlot","optionsConfig","layoutConfig","xMax","pointsTypes","getBarPlotDataPoints","colors","defaultColors","isTop","BarPlot","scrollZoom","editable","autosizable","dragmode","legend","font","xanchor","fixedrange","linecolor","autotick","tickcolor","gridcolor","automargin","barLayoutConfig","TableCellStyle","boxSizing","lineHeight","overflow","xField","yField","groupField","whereClause","infoField","getTotalsByY","resultObject","res","SUPPORTED_ACCESS_REQUIREMENTS","fadeColors","ThemesPlot","dotPlot","topBarPlot","sideBarPlot","tooltipProps","onPointClick","setIsLoaded","dotPlotQueryData","setDotPlotQueryData","topBarPlotData","setTopBarQueryData","sideBarPlotData","setSideBarQueryData","dotPlotData","xLabels","yLabelsForDotPlot","xLabelsForTopBarPlot","xMaxForDotPlot","xMaxForSideBarPlot","topBarPlotDataSorted","totalsByDotPlotY","orderBy","float","staticPlot","countLabel","pointData","points","getClickTargetData","CardContainerLogicDemo","circleSvg","brainSvg","mouseSvg","resilienceadSvg","Program","SearchDemo","contributor","diagnosis","ModalDownloadDemo","onOpen","UserBadgeSmallDemo","_el","MarkdownSynapseDemo","markdownPropsArray","NewsFeedDemo","FormServicesIntegrationDemo","listMyFormData","formGroup","myFormDataList","listFormAdminFormData","formAdminFormDataList","onReadFormDataFileHandleContents","onCreateFormGroup","onCreateFormData","onUpdateFormData","onSubmitFormData","TokenContext","Consumer","rejectionMessage","FacetsPlotNav","plotPointData","facetValueClicked","facetEnumerationValues","pointNumber","isResetPossible","isShowingMore","extractPlotDataArray","onReset","showMoreButton","resetButton","plotDataToShow","rowCount","grid","columns","annotations","facetsToPlot","enumerationFacets","singlePieChartData","labels","textposition","textinfo","pull","QueryWrapperPlotNav","QueryWrapperPlotNavDemo","tableProps","WidgetDemo","check1","setCheck1","check2","setCheck2","optionValue","setOptionValue","rangeNumberValue","setRangeNumberValue","toISOString","rangeDateValue","setRangeDateValue","rangeSliderValue","setRangeSliderValue","topBarPlotProps","sideBarPlotProps","SelfSignAccessRequirement","accessRequirement","TermsOfUseAccessRequirement","AccessRequirementList","accessRequirements","setAccessRequirements","incomingAccessRequirements","prevAcessRequirements","getAccessRequirements","renderAccessRequirement","AccessRequirementDemo","TemplateComponent","userId","setCount","TemplateComponentDemo","App","exact","getSession","signedInState","notSignedInState","Provider","basename","process","logoSvg","renderLoginAndSignout","Playground","searchParamsProps","ReactDOM","module","exports","ColumnType","ACCESS_TYPE","FileDownloadCode","ApprovalState"],"mappings":"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BACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,gBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,iBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,iBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,gBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,iBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,iBACA,kBAGIC,GAA8B,CAClC,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,gBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,iBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,iBACA,iBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,gBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,iBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,iBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,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","file":"static/js/main.d8d69532.chunk.js","sourcesContent":["export enum BackendDestinationEnum {\n  REPO_ENDPOINT,\n  PORTAL_ENDPOINT,\n}\n\n// Encodes the portal and repo service destinations\ntype EndpointObject = {\n  REPO: string\n  PORTAL: string\n}\n\nexport const PRODUCTION_ENDPOINT_CONFIG: EndpointObject = {\n  REPO: 'https://repo-prod.prod.sagebase.org/',\n  PORTAL: 'https://www.synapse.org/',\n}\n\n// Given an endpoint will return the specific stack object\nexport const getEndpoint = (endpoint: BackendDestinationEnum): string => {\n  let endpoint_config = PRODUCTION_ENDPOINT_CONFIG\n  // @ts-ignore if overriding endpoint config\n  if (window.SRC && window.SRC.OVERRIDE_ENDPOINT_CONFIG) {\n    // @ts-ignore\n    endpoint_config = window.SRC && window.SRC.OVERRIDE_ENDPOINT_CONFIG\n  }\n  const { PORTAL, REPO } = endpoint_config\n  if (!PORTAL || !REPO) {\n    throw Error('Error failed to specify endpoints, cannot make call')\n  }\n  if (endpoint === BackendDestinationEnum.PORTAL_ENDPOINT) {\n    return PORTAL\n  }\n  return REPO\n}\n","import * as React from 'react'\n\nexport default ({ children, icon }: { children: any; icon?: any }) => {\n  const style: React.CSSProperties = {\n    paddingRight: 10,\n    fontWeight: 500,\n    paddingLeft: icon ? 0 : 10,\n    paddingTop: 10,\n    paddingBottom: 10,\n    textAlign: 'center',\n    width: '100%',\n  }\n  return <span style={style}>{children}</span>\n}\n","import * as React from 'react'\n// @ts-nocheck\nexport default ({ active }: { active: boolean }) => (\n  <div\n    style={{\n      background: active ? '#fff' : '#eee',\n      paddingTop: 7,\n      paddingRight: 10,\n      paddingBottom: 4,\n      paddingLeft: 10,\n      borderRadius: 2,\n    }}\n  >\n    <svg width=\"18\" height=\"18\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g fill=\"#000\" fillRule=\"evenodd\">\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M9 3.48c1.69 0 2.83.73 3.48 1.34l2.54-2.48C13.46.89 11.43 0 9 0 5.48 0 2.44 2.02.96 4.96l2.91 2.26C4.6 5.05 6.62 3.48 9 3.48z\"\n          fill=\"#EA4335\"\n        />\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M17.64 9.2c0-.74-.06-1.28-.19-1.84H9v3.34h4.96c-.1.83-.64 2.08-1.84 2.92l2.84 2.2c1.7-1.57 2.68-3.88 2.68-6.62z\"\n          fill=\"#4285F4\"\n        />\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M3.88 10.78A5.54 5.54 0 0 1 3.58 9c0-.62.11-1.22.29-1.78L.96 4.96A9.008 9.008 0 0 0 0 9c0 1.45.35 2.82.96 4.04l2.92-2.26z\"\n          fill=\"#FBBC05\"\n        />\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M9 18c2.43 0 4.47-.8 5.96-2.18l-2.84-2.2c-.76.53-1.78.9-3.12.9-2.38 0-4.4-1.57-5.12-3.74L.97 13.04C2.45 15.98 5.48 18 9 18z\"\n          fill=\"#34A853\"\n        />\n        <path fill=\"none\" d=\"M0 0h18v18H0z\" />\n      </g>\n    </svg>\n  </div>\n)\n","import { UserCardSize } from '../containers/UserCard'\n\n/** QueryBundleRequest constants */\nexport const BUNDLE_MASK_QUERY_RESULTS: number = 1\nexport const BUNDLE_MASK_QUERY_COUNT: number = 2\nexport const BUNDLE_MASK_QUERY_SELECT_COLUMNS: number = 4\nexport const BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE: number = 8\nexport const BUNDLE_MASK_QUERY_COLUMN_MODELS: number = 16\nexport const BUNDLE_MASK_QUERY_FACETS: number = 32\nexport const BUNDLE_MASK_SUM_FILES_SIZE_BYTES: number = 64\n/** EntityBundle constants */\nexport const ENTITY_BUNDLE_MASK_ENTITY: number = 1\nexport const ENTITY_BUNDLE_MASK_ANNOTATIONS: number = 2\nexport const ENTITY_BUNDLE_MASK_PERMISSIONS: number = 4\nexport const ENTITY_BUNDLE_MASK_ENTITY_PATH: number = 8\nexport const ENTITY_BUNDLE_MASK_HAS_CHILDREN: number = 32\nexport const ENTITY_BUNDLE_MASK_ACL: number = 64\nexport const ENTITY_BUNDLE_MASK_FILE_HANDLES: number = 2048\nexport const ENTITY_BUNDLE_MASK_TABLE_DATA: number = 4096\nexport const ENTITY_BUNDLE_MASK_ROOT_WIKI_ID: number = 8192\nexport const ENTITY_BUNDLE_MASK_BENEFACTOR_ACL: number = 16384\nexport const ENTITY_BUNDLE_MASK_DOI: number = 32768\nexport const ENTITY_BUNDLE_MASK_FILE_NAME: number = 65536\nexport const ENTITY_BUNDLE_MASK_THREAD_COUNT: number = 131072\nexport const ENTITY_BUNDLE_MASK_RESTRICTION_INFORMATION: number = 262144\n/** Row Types  */\nexport const STUDY: string = 'study'\n/** Not set value for query */\nexport const VALUE_NOT_SET = 'org.sagebionetworks.UNDEFINED_NULL_NOTSET'\n// for study icons\nexport const STUDY_ACTIVE: string = 'study active'\nexport const STUDY_COMPLETE: string = 'study complete'\nexport const DATASET: string = 'dataset'\nexport const AMP_CONSORTIUM: string = 'AMP_Consortium'\nexport const FUNDER: string = 'funder'\nexport const PUBLICATION: string = 'publication'\nexport const TOOL: string = 'tool'\nexport const GENERIC_CARD: string = 'GENERIC_CARD'\nexport const COMPUTATIONAL: string = 'computational'\nexport const EXPERIMENTAL: string = 'experimental'\nexport const CLINICAL: string = 'clinical'\nexport const PROJECT: string = 'Project'\nexport const PAGE_SIZE: number = 25\n// For User Profile Cards\nexport const SMALL_USER_CARD: UserCardSize = 'SMALL USER CARD'\nexport const MEDIUM_USER_CARD: UserCardSize = 'MEDIUM USER CARD'\nexport const LARGE_USER_CARD: UserCardSize = 'LARGE USER CARD'\nexport const SEPERATOR = 'SEPERATOR'\nexport const AUTHENTICATED_USERS = 'AUTHENTICATED_USERS'\n// For internal testing only\nexport const _TIME_DELAY = 75\nexport const SRC_SIGN_IN_CLASS = 'SRC-SIGN-IN-CLASS'\n","import SparkMD5 from 'spark-md5'\nimport { BackendDestinationEnum, getEndpoint } from './functions/getEndpoint'\nimport {\n  AccessCodeResponse,\n  AccessControlList,\n  AddFilesToDownloadListRequest,\n  AddFilesToDownloadListResponse,\n  AddPartResponse,\n  AsyncJobId,\n  BatchFileRequest,\n  BatchFileResult,\n  BatchPresignedUploadUrlRequest,\n  BatchPresignedUploadUrlResponse,\n  BulkFileDownloadRequest,\n  BulkFileDownloadResponse,\n  DownloadFromTableRequest,\n  DownloadFromTableResult,\n  DownloadList,\n  DownloadOrder,\n  Entity,\n  EntityHeader,\n  EntityLookupRequest,\n  FileEntity,\n  FileHandle,\n  FileHandleAssociation,\n  FileHandleResults,\n  FileUploadComplete,\n  FormChangeRequest,\n  FormData,\n  FormGroup,\n  FormRejection,\n  ListRequest,\n  ListResponse,\n  LoginResponse,\n  MultipartUploadRequest,\n  MultipartUploadStatus,\n  OAuthClientPublic,\n  OAuthConsentGrantedResponse,\n  OIDCAuthorizationRequest,\n  OIDCAuthorizationRequestDescription,\n  PaginatedResults,\n  ProjectFilesStatisticsRequest,\n  ProjectFilesStatisticsResponse,\n  QueryBundleRequest,\n  QueryResultBundle,\n  QueryTableResults,\n  ReferenceList,\n  RestrictionInformationRequest,\n  RestrictionInformationResponse,\n  Submission,\n  SynapseVersion,\n  UserBundle,\n  UserGroupHeaderResponsePage,\n  UserProfile,\n  WikiPage,\n  AccessRequirement,\n  AccessApproval,\n  EntityId,\n  FileHandleAssociateType,\n} from './synapseTypes/'\nimport UniversalCookies from 'universal-cookie'\n\nconst cookies = new UniversalCookies()\n\n// TODO: Create JSON response types for all return types\nexport const IS_OUTSIDE_SYNAPSE_ORG = window.location.hostname\n  .toLowerCase()\n  .includes('.synapse.org')\n  ? false\n  : true\n\nexport const SESSION_TOKEN_COOKIE_KEY =\n  'org.sagebionetworks.security.user.login.token'\n\n// Max size file that we will allow the caller to read into memory (5MB)\nconst MAX_JS_FILE_DOWNLOAD_SIZE = 5242880\nexport const AUTH_PROVIDER = 'GOOGLE_OAUTH_2_0'\n// This corresponds to the Synapse-managed S3 storage location:\nexport const SYNAPSE_STORAGE_LOCATION_ID = 1\nexport const getRootURL = () => {\n  const portString = window.location.port ? `:${window.location.port}` : ''\n  return `${window.location.protocol}//${window.location.hostname}${portString}/`\n}\n\n/**\n * Waits t number of milliseconds\n *\n * @export\n * @param {number} t milliseconds\n * @returns after t milliseconds\n */\nexport function delay(t: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve.bind(null, {}), t)\n  })\n}\n\ntype SynapseError = {\n  reason: string\n}\n\nconst retryFetch = <T>(\n  url: RequestInfo,\n  options: RequestInit,\n  delayMs: number,\n) => {\n  return delay(delayMs).then(() => {\n    return fetchWithExponentialTimeout<T>(url, options, delayMs * 2)\n  })\n}\n\n// remove parseJson, combine ok and not okay response, except for 0 and 429..., make sure string responses got through\nconst fetchWithExponentialTimeout = <T>(\n  url: RequestInfo,\n  options: RequestInit,\n  delayMs: number = 1000,\n  retries: number = 5,\n): Promise<T> => {\n  return fetch(url, options)\n    .then(resp => {\n      if ((retries > 0 && resp.status === 429) || resp.status === 0) {\n        // TOO_MANY_REQUESTS_STATUS_CODE, or network connection is down.  Retry after a couple of seconds.\n        return retryFetch<T>(url, options, delayMs)\n      }\n      return resp\n        .text()\n        .then(text => {\n          // try to parse it as json\n          try {\n            const json = JSON.parse(text)\n            return resp.ok ? Promise.resolve(json) : Promise.reject<T>(json)\n          } catch (error) {\n            // failed to parse json, return text\n            return resp.ok ? Promise.resolve(text) : Promise.reject<T>(text)\n          }\n        })\n        .catch((error: SynapseError) => {\n          if (resp.ok) {\n            // possible empty response\n            return Promise.resolve({\n              reason: error,\n              status: resp.status,\n            })\n          }\n          if (error.reason && resp.status) {\n            // successfull return from server but invalid call\n            return Promise.reject({\n              reason: error.reason,\n              status: resp.status,\n            })\n          }\n          // This occurs if the response is not ok and does not have json or is empty\n          return Promise.reject({\n            reason: error,\n            status: resp.status,\n          })\n        })\n    })\n    .catch(error => {\n      if (\n        retries === 0 ||\n        (error.status && error.status !== 429 && error.status !== 0)\n      ) {\n        // If there is an error response and the error is nether a throttled response\n        // or disconnected network\n        return Promise.reject(error)\n      }\n      return retryFetch(url, options, delayMs)\n    })\n}\n\nexport const doPost = <T>(\n  url: string,\n  requestJsonObject: any,\n  sessionToken: string | undefined,\n  initCredentials: RequestInit['credentials'],\n  endpoint: BackendDestinationEnum,\n): Promise<T> => {\n  const options: RequestInit = {\n    body: JSON.stringify(requestJsonObject),\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken',\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    mode: 'cors',\n    credentials: initCredentials,\n  }\n  if (sessionToken) {\n    // @ts-ignore\n    options.headers.sessionToken = sessionToken\n  }\n  const usedEndpoint = getEndpoint(endpoint)\n  return fetchWithExponentialTimeout<T>(usedEndpoint + url, options)\n}\nexport const doGet = <T>(\n  url: string,\n  sessionToken: string | undefined,\n  initCredentials: RequestInit['credentials'],\n  endpoint: BackendDestinationEnum,\n) => {\n  const options: RequestInit = {\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken',\n    },\n    method: 'GET',\n    mode: 'cors',\n    credentials: initCredentials,\n  }\n  if (sessionToken) {\n    // @ts-ignore\n    options.headers.sessionToken = sessionToken\n  }\n  const usedEndpoint = getEndpoint(endpoint)\n  return fetchWithExponentialTimeout<T>(usedEndpoint + url, options)\n}\n\nexport const doDelete = (\n  url: string,\n  requestJsonObject: any | undefined = undefined,\n  sessionToken: string | undefined,\n  initCredentials: RequestInit['credentials'],\n  endpoint: BackendDestinationEnum,\n) => {\n  const options: RequestInit = {\n    body: JSON.stringify(requestJsonObject),\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken',\n    },\n    method: 'DELETE',\n    mode: 'cors',\n    credentials: initCredentials,\n  }\n  if (sessionToken) {\n    // @ts-ignore\n    options.headers.sessionToken = sessionToken\n  }\n  const usedEndpoint = getEndpoint(endpoint)\n  return fetchWithExponentialTimeout(usedEndpoint + url, options)\n}\n\nexport const doPut = (\n  url: string,\n  requestJsonObject: any,\n  sessionToken: string | undefined,\n  initCredentials: RequestInit['credentials'],\n  endpoint: BackendDestinationEnum,\n): Promise<any> => {\n  const options: RequestInit = {\n    body: JSON.stringify(requestJsonObject),\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken',\n      'Content-Type': 'application/json',\n    },\n    method: 'PUT',\n    mode: 'cors',\n    credentials: initCredentials,\n  }\n  if (sessionToken) {\n    // @ts-ignore\n    options.headers.sessionToken = sessionToken\n  }\n  const usedEndpoint = getEndpoint(endpoint)\n  return fetchWithExponentialTimeout(usedEndpoint + url, options)\n}\n\nexport const putRefreshSessionToken = (sessionToken: string) => {\n  return doPut(\n    '/auth/v1/session',\n    { sessionToken },\n    undefined,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const getVersion = (): Promise<SynapseVersion> => {\n  return doGet<SynapseVersion>(\n    '/repo/v1/version',\n    undefined,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * https://docs.synapse.org/rest/POST/download/list/add/async/start.html\n */\n//Start an asynchronous job to add files to a user's download list.\nexport const addFilesToDownloadList = (\n  request: AddFilesToDownloadListRequest,\n  sessionToken: string,\n  updateParentState?: any,\n) => {\n  return doPost<AsyncJobId>(\n    `file/v1/download/list/add/async/start`,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then((resp: AsyncJobId) => {\n      const requestUrl = `file/v1/download/list/add/async/get/${resp.token}`\n      return getAsyncResultFromJobId<AddFilesToDownloadListResponse>(\n        requestUrl,\n        sessionToken,\n        updateParentState,\n      )\n    })\n    .catch((error: any) => {\n      throw error\n    })\n}\n\n/**\n * https://docs.synapse.org/rest/POST/entity/id/table/download/csv/async/start.html\n */\nexport const getDownloadFromTableRequest = (\n  request: DownloadFromTableRequest,\n  sessionToken: string | undefined = undefined,\n  updateParentState?: any,\n) => {\n  return doPost<AsyncJobId>(\n    `/repo/v1/entity/${request.entityId}/table/download/csv/async/start`,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then((resp: AsyncJobId) => {\n      const requestUrl = `/repo/v1/entity/${request.entityId}/table/download/csv/async/get/${resp.token}`\n      return getAsyncResultFromJobId<DownloadFromTableResult>(\n        requestUrl,\n        sessionToken,\n        updateParentState,\n      )\n    })\n    .catch((error: any) => {\n      throw error\n    })\n}\n\n/**\n * https://docs.synapse.org/rest/GET/fileHandle/handleId.html\n * Get a FileHandle using its ID.\n * Note: Only the user that created the FileHandle can access it directly.\n * @return FileHandle\n **/\nexport const getFileHandleById = (\n  handleId: string,\n  sessionToken: string | undefined = undefined,\n): Promise<FileHandle> => {\n  return doGet<FileHandle>(\n    `file/v1/fileHandle/${handleId}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * https://docs.synapse.org/rest/GET/fileHandle/handleId/url.html\n * @return a short lived presignedURL to be redirected with\n **/\nexport const getFileHandleByIdURL = (\n  handleId: string,\n  sessionToken: string | undefined = undefined,\n) => {\n  // get the presigned URL for this file handle\n  return doGet<string>(\n    `file/v1/fileHandle/${handleId}/url?redirect=false`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const getAsyncResultFromJobId = <T>(\n  urlRequest: string,\n  sessionToken: string | undefined = undefined,\n  updateParentState?: any,\n): Promise<T> => {\n  return doGet(\n    urlRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then((resp: any) => {\n      // is this the job status?\n      if (resp.jobState && resp.jobState !== 'FAILED') {\n        updateParentState &&\n          updateParentState({\n            asyncJobStatus: resp,\n          })\n        // still processing, wait for a second and try again\n        return delay(500).then(() => {\n          return getAsyncResultFromJobId<T>(\n            urlRequest,\n            sessionToken,\n            updateParentState,\n          )\n        })\n      }\n      // these must be the query results!\n      return resp\n    })\n    .catch(error => {\n      throw error\n    })\n}\n\n/**\n * http://docs.synapse.org/rest/POST/entity/id/table/query/nextPage/async/start.html\n * @param {*} queryBundleRequest\n * @param {*} sessionToken\n * @param {*} endpoint\n */\nexport const getQueryTableResults = (\n  queryBundleRequest: QueryBundleRequest,\n  sessionToken: string | undefined = undefined,\n  updateParentState?: any,\n): Promise<QueryResultBundle> => {\n  return doPost<AsyncJobId>(\n    `/repo/v1/entity/${queryBundleRequest.entityId}/table/query/async/start`,\n    queryBundleRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then(resp => {\n      return getAsyncResultFromJobId<QueryResultBundle>(\n        `/repo/v1/entity/${queryBundleRequest.entityId}/table/query/async/get/${resp.token}`,\n        sessionToken,\n        updateParentState,\n      )\n    })\n    .catch((error: any) => {\n      throw error\n    })\n}\n/**\n *  Run and return results from queryBundleRequest, queryBundle request must be of the\n *  form:\n *     {\n *        concreteType: String,\n *        query: {\n *           sql: String,\n *           isConsistent: Boolean,\n *           partMask: Number\n *        }\n *     }\n * @param {*} queryBundleRequest\n * @param {*} [sessionToken=undefined]\n * @param {boolean} [onlyGetFacets=false] Specify if the query only needs facets and no\n * data-- (internally this limits the row count to 1 on the request)\n * @returns Full dataset from synapse table query\n */\n\nexport const getFullQueryTableResults = async (\n  queryBundleRequest: QueryBundleRequest,\n  sessionToken: string | undefined = undefined,\n  maxPageSize: number = 2500,\n): Promise<QueryResultBundle> => {\n  let data: QueryResultBundle\n  // get first page\n  let offset = 0\n  const { query, ...rest } = queryBundleRequest\n  const queryRequest: QueryBundleRequest = {\n    ...rest,\n    query: { ...query, limit: maxPageSize, offset: offset },\n  }\n  let response = await getQueryTableResults(queryRequest, sessionToken)\n  data = response\n  //we are done if we return less than a pagesize\n  let isDone = response.queryResult.queryResults.rows.length < maxPageSize\n\n  while (!isDone) {\n    offset += maxPageSize\n    queryRequest.query.offset = offset\n    let response = await getQueryTableResults(queryRequest, sessionToken)\n\n    data.queryResult.queryResults.rows.push(\n      ...response.queryResult.queryResults.rows, // ... spread operator to push all elements on\n    )\n\n    isDone =  response.queryResult.queryResults.rows.length < maxPageSize\n  }\n  return data\n}\n\n/**\n *  Log-in using the given username and password.  Will return a session token that must be used in\n *  authenticated requests.\n *  http://docs.synapse.org/rest/POST/login.html\n */\nexport const login = (\n  username: string,\n  password: string,\n  authenticationReceipt: string | null,\n  endpoint = BackendDestinationEnum.REPO_ENDPOINT,\n): Promise<LoginResponse> => {\n  return doPost(\n    '/auth/v1/login',\n    { username, password, authenticationReceipt },\n    undefined,\n    undefined,\n    endpoint,\n  )\n}\n/**\n * Get redirect url\n * https://docs.synapse.org/rest/POST/oauth2/authurl.html\n * @param {*} provider\n * @param {*} redirectUrl\n * @param {*} endpoint\n */\nexport const oAuthUrlRequest = (\n  provider: string,\n  redirectUrl: string,\n  endpoint = BackendDestinationEnum.REPO_ENDPOINT,\n) => {\n  return doPost(\n    '/auth/v1/oauth2/authurl',\n    { provider, redirectUrl },\n    undefined,\n    undefined,\n    endpoint,\n  )\n}\n/**\n * Get session token from SSO\n * https://docs.synapse.org/rest/POST/oauth2/session.html\n * @param {*} provider\n * @param {*} authenticationCode\n * @param {*} redirectUrl\n * @param {*} endpoint\n */\nexport const oAuthSessionRequest = (\n  provider: string,\n  authenticationCode: string | number,\n  redirectUrl: string,\n  endpoint: any = BackendDestinationEnum.REPO_ENDPOINT,\n) => {\n  return doPost(\n    '/auth/v1/oauth2/session',\n    { provider, authenticationCode, redirectUrl },\n    undefined,\n    undefined,\n    endpoint,\n  )\n}\n/**\n * Create an entity (Project, Folder, File, Table, View)\n * http://docs.synapse.org/rest/POST/entity.html\n */\nexport const createEntity = <T extends Entity>(\n  entity: T,\n  sessionToken: string | undefined,\n) => {\n  return doPost<T>(\n    '/repo/v1/entity',\n    entity,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n/**\n * Create a project with the given name.\n * http://docs.synapse.org/rest/POST/entity.html\n */\nexport const createProject = (\n  name: string,\n  sessionToken: string | undefined,\n): Promise<Entity> => {\n  return createEntity(\n    {\n      name,\n      concreteType: 'org.sagebionetworks.repo.model.Project',\n    },\n    sessionToken,\n  )\n}\n\n/**\n * Return this user's UserProfile\n * http://docs.synapse.org/rest/GET/userProfile.html\n */\nexport const getUserProfile = (sessionToken: string | undefined) => {\n  return doGet<UserProfile>(\n    '/repo/v1/userProfile',\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Return this user's UserProfile\n * http://docs.synapse.org/rest/GET/userProfile.html\n */\nexport const getUserProfileById = (\n  sessionToken: string | undefined,\n  ownerId: string,\n) => {\n  return doGet<UserProfile>(\n    `/repo/v1/userProfile/${ownerId}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Return this user's profile bundle\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/UserBundle.html\n */\nexport const getUserBundle = (\n  id: string,\n  mask: number,\n  sessionToken: string | undefined,\n): Promise<UserBundle> => {\n  return doGet<UserBundle>(\n    `repo/v1/user/${id}/bundle?mask=${mask}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Return batch of user group headers\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/UserGroupHeaderResponsePage.html\n */\nexport const getGroupHeadersBatch = (\n  ids: string[],\n  sessionToken: string | undefined,\n): Promise<UserGroupHeaderResponsePage> => {\n  return doGet<UserGroupHeaderResponsePage>(\n    `repo/v1/userGroupHeaders/batch?ids=${ids.join(',')}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport type UserProfileList = { list: UserProfile[] }\n/**\n * Return the User Profiles for the given list of user IDs\n * http://docs.synapse.org/rest/POST/userProfile.html\n */\nexport const getUserProfiles = (\n  list: string[],\n  sessionToken: string | undefined = undefined,\n): Promise<UserProfileList> => {\n  return doPost(\n    '/repo/v1/userProfile',\n    { list },\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Return the children (Files/Folders) of the given entity (Project or Folder).\n * http://docs.synapse.org/rest/POST/entity/children.html\n */\nexport const getEntityChildren = (\n  request: any,\n  sessionToken: string | undefined = undefined,\n) => {\n  return doPost(\n    '/repo/v1/entity/children',\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n/**\n * Retrieve an entityId for a given parent ID and entity name.\n * https://docs.synapse.org/rest/POST/entity/child.html\n */\nexport const lookupChildEntity = (\n  request: EntityLookupRequest,\n  sessionToken: string | undefined = undefined,\n) => {\n  return doPost<EntityId>(\n    '/repo/v1/entity/child',\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get a batch of pre-signed URLs and/or FileHandles for the given list of FileHandleAssociations.\n * http://docs.synapse.org/rest/POST/fileHandle/batch.html\n */\nexport const getFiles = (\n  request: BatchFileRequest,\n  sessionToken: string | undefined = undefined,\n): Promise<BatchFileResult> => {\n  return doPost(\n    '/file/v1/fileHandle/batch',\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get a batch of pre-signed URLs and/or FileHandles for the given list of FileHandleAssociations.\n * http://docs.synapse.org/rest/POST/fileHandle/batch.html\n */\nexport const getBulkFiles = (\n  bulkFileDownloadRequest: BulkFileDownloadRequest,\n  sessionToken: string | undefined = undefined,\n): Promise<BulkFileDownloadResponse> => {\n  return doPost<AsyncJobId>(\n    'file/v1/file/bulk/async/start',\n    bulkFileDownloadRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then((asyncJobId: AsyncJobId) => {\n      const urlRequest = `/file/v1/file/bulk/async/get/${asyncJobId.token}`\n      return getAsyncResultFromJobId<BulkFileDownloadResponse>(\n        urlRequest,\n        sessionToken,\n      )\n    })\n    .catch(err => {\n      console.error('Error on getBulkFiles ', err)\n      return err\n    })\n}\n/**\n * Bundled access to Entity and related data components.\n * An EntityBundle can be used to create, fetch, or update an Entity and associated\n * objects with a single web service request.\n * See SynapseClient.test.js for an example partsMask.\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/Entity.html\n */\ntype GetEntity = <T extends Entity>(\n  sessionToken: string | undefined,\n  entityId: string | number,\n  versionNumber?: string,\n) => Promise<T>\n\nexport const getEntity: GetEntity = <T>(\n  sessionToken: string | undefined = undefined,\n  entityId: string | number,\n  versionNumber?: string,\n) => {\n  const url = versionNumber\n    ? `/repo/v1/entity/${entityId}/version/${versionNumber}`\n    : `/repo/v1/entity/${entityId}`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ) as Promise<T>\n}\n\n/**\n * Get the EntityHeader for a list of references with a POST.\n * If any item in the batch fails (e.g., with a 404) it will be EXCLUDED in the result set.\n * https://docs.synapse.org/rest/POST/entity/header.html\n */\nexport const getEntityHeader = (\n  references: ReferenceList,\n  sessionToken: string | undefined = undefined,\n) => {\n  return doPost(\n    'repo/v1/entity/header',\n    { references },\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ) as Promise<PaginatedResults<EntityHeader>>\n}\n\n/**\n * Get all entity header\n */\nexport const getAllEntityHeader = (\n  references: ReferenceList,\n  sessionToken: string | undefined = undefined,\n) => {\n  // format function to be callable by getAllOfPaginatedService\n  const fn = (limit: number, offset: number) => {\n    const url = `repo/v1/entity/header?limit${limit}&offset=${offset}`\n    return doPost<PaginatedResults<EntityHeader>>(\n      url,\n      { references },\n      sessionToken,\n      undefined,\n      BackendDestinationEnum.REPO_ENDPOINT,\n    )\n  }\n  return getAllOfPaginatedService(fn)\n}\n\nexport const updateEntity = <T extends Entity>(\n  entity: T,\n  sessionToken: string | undefined = undefined,\n): Promise<T> => {\n  const url = `/repo/v1/entity/${entity.id}`\n  return doPut(\n    url,\n    entity,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const deleteEntity: GetEntity = <T>(\n  sessionToken: string | undefined = undefined,\n  entityId: string | number,\n) => {\n  const url = `/repo/v1/entity/${entityId}`\n  return doDelete(\n    url,\n    undefined,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ) as Promise<T>\n}\n\n/**\n * Bundled access to Entity and related data components.\n * An EntityBundle can be used to create, fetch, or update an Entity and\n * associated objects with a single web service request.\n * See SynapseClient.test.js for an example partsMask.\n * http://docs.synapse.org/rest/GET/entity/id/version/versionNumber/bundle.html\n */\nexport const getEntityBundleForVersion = (\n  entityId: string | number,\n  version: string | number | undefined,\n  partsMask: string | number,\n  sessionToken: string | undefined = undefined,\n) => {\n  let url = `/repo/v1/entity/${entityId}`\n  if (version) {\n    url += `/version/ + ${version}`\n  }\n  url += `/bundle?mask= ${partsMask}`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ) as Promise<any>\n}\n/**\n * Get Wiki page contents, call is of the form:\n * http://docs.synapse.org/rest/GET/entity/ownerId/wiki.html\n */\nexport const getEntityWiki = (\n  sessionToken: string | undefined,\n  ownerId: string | undefined,\n  wikiId: string | undefined,\n) => {\n  const url = `/repo/v1/entity/${ownerId}/wiki/${wikiId}`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ) as Promise<WikiPage>\n}\n\n/**\n * Returns synapse user favorites list given their session token\n * http://docs.synapse.org/rest/GET/favorite.html\n */\nexport const getUserFavorites = (sessionToken: string | undefined) => {\n  const url = 'repo/v1/favorite?offset=0&limit=200'\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ) as Promise<any>\n}\n\n/**\n * Get the user's list of teams they are on\n *\n * @param {*} id ownerID of the synapse user see - http://docs.synapse.org/rest/org/sagebionetworks/repo/model/UserProfile.html\n */\nexport const getUserTeamList = (\n  sessionToken: string | undefined,\n  id: string | number,\n) => {\n  const url = `repo/v1/user/${id}/team?offset=0&limit=200`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n/**\n * Get the user's list of teams they are on\n *\n * @param {*} id ownerID of the synapse user see -https://docs.synapse.org/rest/GET/teamMembers/id.html\n * @param {*} fragment (optional) a prefix of the user's first or last name or email address (optional)\n * @param {*} limit    (optional) the maximum number of members to return (default 10, max limit 50)\n * @param {*} offset   (optional) the starting index of the returned results (default 0)\n *\n */\nexport const getTeamList = (\n  sessionToken: string | undefined,\n  id: string | number,\n  fragment: string = '',\n  limit: number = 10,\n  offset: number = 0,\n) => {\n  const url = `repo/v1/teamMembers/${id}?limit=${limit}&offset=${offset}${\n    fragment ? `&fragment=${fragment}` : ''\n  }`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const getWikiAttachmentsFromEntity = (\n  sessionToken: string | undefined,\n  id: string | number,\n  wikiId: string | number,\n): Promise<FileHandleResults> => {\n  const url = `repo/v1/entity/${id}/wiki/${wikiId}/attachmenthandles`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\nexport const getWikiAttachmentsFromEvaluation = (\n  sessionToken: string | undefined,\n  id: string | number,\n  wikiId: string | number,\n) => {\n  const url = `repo/v1/evaluation/${id}/wiki/${wikiId}/attachmenthandles`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n/**\n * Set the session token cookie.  Note that this will only succeed if your app is running on\n * a .synapse.org subdomain.\n *\n * @param {*} token Session token.  If undefined, then call should instruct the browser to delete the cookie.\n */\nexport const setSessionTokenCookie = (\n  token: string | undefined,\n  sessionCallback: Function,\n): void => {\n  if (IS_OUTSIDE_SYNAPSE_ORG) {\n    if (!token) {\n      cookies.remove(SESSION_TOKEN_COOKIE_KEY)\n    } else {\n      // set's cookie in session storage\n      cookies.set(SESSION_TOKEN_COOKIE_KEY, token, {\n        // expires in a day\n        maxAge: 60 * 60 * 24,\n      })\n    }\n    sessionCallback()\n  } else {\n    // will set cookie in the http header\n    doPost(\n      'Portal/sessioncookie',\n      { sessionToken: token },\n      undefined,\n      'include',\n      BackendDestinationEnum.PORTAL_ENDPOINT,\n    )\n      .then(_ => {\n        sessionCallback()\n      })\n      .catch(err => {\n        console.error('Error on setting session token ', err)\n      })\n  }\n}\n/**\n * Get the current session token from a cookie.  Note that this will only succeed if your app is running on\n * a .synapse.org subdomain.\n */\nexport const getSessionTokenFromCookie = async () => {\n  if (IS_OUTSIDE_SYNAPSE_ORG) {\n    return cookies.get(SESSION_TOKEN_COOKIE_KEY)\n  }\n  return doGet<string>(\n    'Portal/sessioncookie',\n    undefined,\n    'include',\n    BackendDestinationEnum.PORTAL_ENDPOINT,\n  )\n}\n\nexport const getPrincipalAliasRequest = (\n  sessionToken: string | undefined,\n  alias: string,\n  type: string,\n) => {\n  const url = 'repo/v1/principal/alias'\n  return doPost(\n    url,\n    { alias, type },\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/*\nDuring SSO login, the authorization provider (Google) will\nsend the user back to the portal with an authorization code,\nwhich can be exchanged for a Synapse user session.\nThis function should be called whenever the root App is initialized\n(to look for this code parameter and complete the round-trip).\n*/\nexport const detectSSOCode = () => {\n  const redirectURL = getRootURL()\n  // 'code' handling (from SSO) should be preformed on the root page, and then redirect to original route.\n  let code: URL | null | string = new URL(window.location.href)\n  // in test environment the searchParams isn't defined\n  const { searchParams } = code\n  if (!searchParams) {\n    return\n  }\n  code = searchParams.get('code')\n  if (code) {\n    oAuthSessionRequest(\n      AUTH_PROVIDER,\n      code,\n      `${redirectURL}?provider=${AUTH_PROVIDER}`,\n      BackendDestinationEnum.REPO_ENDPOINT,\n    )\n      .then((synToken: any) => {\n        setSessionTokenCookie(synToken.sessionToken, () => {\n          // go back to original route after successful SSO login\n          const originalUrl = localStorage.getItem('after-sso-login-url')\n          localStorage.removeItem('after-sso-login-url')\n          if (originalUrl) {\n            window.location.replace(originalUrl)\n          }\n        })\n      })\n      .catch((err: any) => {\n        if (err.status === 404) {\n          // Synapse account not found, send to registration page\n          window.location.replace('https://www.synapse.org/#!RegisterAccount:0')\n        }\n        console.error('Error on sso sign in ', err)\n      })\n  }\n}\n\nexport const signOut = (sessionCallback: Function) => {\n  setSessionTokenCookie(undefined, sessionCallback)\n}\n\n/**\n * Upload file.  Note that this currently only supports Synapse storage (Sage s3 bucket)\n * @param sessionToken\n * @param file\n * @param endpoint\n */\nexport const uploadFile = (\n  sessionToken: string | undefined,\n  filename: string,\n  file: Blob,\n) => {\n  return new Promise<FileUploadComplete>(\n    (fileUploadResolve, fileUploadReject) => {\n      const partSize: number = Math.max(5242880, file.size / 10000)\n      const request: MultipartUploadRequest = {\n        contentType: file.type,\n        fileName: filename,\n        fileSizeBytes: file.size,\n        partSizeBytes: partSize,\n        storageLocationId: SYNAPSE_STORAGE_LOCATION_ID,\n      }\n      calculateMd5(file).then((md5: string) => {\n        request.contentMD5Hex = md5\n        startMultipartUpload(\n          sessionToken,\n          filename,\n          file,\n          request,\n          fileUploadResolve,\n          fileUploadReject,\n        )\n      })\n    },\n  )\n}\n\nconst calculateMd5 = (fileBlob: File | Blob): Promise<string> => {\n  // code taken from md5 example from library\n  return new Promise((resolve, reject) => {\n    const blobSlice = File.prototype.slice,\n      file = fileBlob,\n      chunkSize = 2097152, // Read in chunks of 2MB\n      chunks = Math.ceil(file.size / chunkSize),\n      spark = new SparkMD5.ArrayBuffer(),\n      fileReader = new FileReader()\n    let currentChunk = 0\n\n    fileReader.onload = function(e) {\n      console.log('read chunk nr', currentChunk + 1, 'of', chunks)\n      spark.append(fileReader.result as ArrayBuffer) // Append array buffer\n      currentChunk++\n\n      if (currentChunk < chunks) {\n        loadNext()\n      } else {\n        console.log('finished loading')\n        const md5: string = spark.end()\n        console.info('computed hash', md5) // Compute hash\n        resolve(md5)\n      }\n    }\n\n    fileReader.onerror = function() {\n      console.warn('oops, something went wrong.')\n      reject(fileReader.error)\n    }\n\n    const loadNext = () => {\n      const start = currentChunk * chunkSize,\n        end = start + chunkSize >= file.size ? file.size : start + chunkSize\n\n      fileReader.readAsArrayBuffer(blobSlice.call(file, start, end))\n    }\n    loadNext()\n  })\n}\n\nconst processFilePart = (\n  partNumber: number,\n  multipartUploadStatus: MultipartUploadStatus,\n  sessionToken: string | undefined,\n  fileName: string,\n  file: Blob,\n  request: MultipartUploadRequest,\n  fileUploadResolve: (fileUpload: FileUploadComplete) => void,\n  fileUploadReject: (reason: any) => void,\n) => {\n  if (multipartUploadStatus.clientSidePartsState![partNumber - 1]) {\n    // no-op. this part has already been processed!\n    return\n  }\n\n  const uploadId = multipartUploadStatus.uploadId\n  const presignedUploadUrlRequest: BatchPresignedUploadUrlRequest = {\n    uploadId,\n    contentType: 'application/octet-stream', // each part is binary\n    partNumbers: [partNumber],\n  }\n  const presignedUrlUrl = `/file/v1/file/multipart/${uploadId}/presigned/url/batch`\n  doPost<BatchPresignedUploadUrlResponse>(\n    presignedUrlUrl,\n    presignedUploadUrlRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ).then(async (presignedUrlResponse: BatchPresignedUploadUrlResponse) => {\n    const presignedUrl =\n      presignedUrlResponse.partPresignedUrls[0].uploadPresignedUrl\n    // calculate the byte range\n    const startByte = (partNumber - 1) * request.partSizeBytes\n    let endByte = partNumber * request.partSizeBytes - 1\n    if (endByte >= request.fileSizeBytes) {\n      endByte = request.fileSizeBytes - 1\n    }\n    const fileSlice = file.slice(\n      startByte,\n      endByte + 1,\n      presignedUploadUrlRequest.contentType,\n    )\n    await uploadFilePart(\n      presignedUrl,\n      fileSlice,\n      presignedUploadUrlRequest.contentType,\n    )\n    // uploaded the part.  calculate md5 of the part and add the part to the upload\n    calculateMd5(fileSlice).then((md5: string) => {\n      const addPartUrl = `/file/v1/file/multipart/${uploadId}/add/${partNumber}?partMD5Hex=${md5}`\n      doPut(\n        addPartUrl,\n        undefined,\n        sessionToken,\n        undefined,\n        BackendDestinationEnum.REPO_ENDPOINT,\n      ).then((addPartResponse: AddPartResponse) => {\n        if (addPartResponse.addPartState === 'ADD_SUCCESS') {\n          // done with this part!\n          multipartUploadStatus.clientSidePartsState![partNumber - 1] = true\n          checkUploadComplete(\n            multipartUploadStatus,\n            fileName,\n            sessionToken,\n            fileUploadResolve,\n            fileUploadReject,\n          )\n        } else {\n          // retry after a brief delay\n          delay(1000).then(() => {\n            processFilePart(\n              partNumber,\n              multipartUploadStatus,\n              sessionToken,\n              fileName,\n              file,\n              request,\n              fileUploadResolve,\n              fileUploadReject,\n            )\n          })\n        }\n      })\n    })\n  })\n}\nexport const checkUploadComplete = (\n  status: MultipartUploadStatus,\n  fileHandleName: string,\n  sessionToken: string | undefined,\n  fileUploadResolve: (fileUpload: FileUploadComplete) => void,\n  fileUploadReject: (reason: any) => void,\n) => {\n  // if all client-side parts are true (uploaded), then complete the upload and get the file handle!\n  if (\n    status.clientSidePartsState!.every(v => {\n      return v\n    })\n  ) {\n    const url = `/file/v1/file/multipart/${status.uploadId}/complete`\n    doPut(\n      url,\n      undefined,\n      sessionToken,\n      undefined,\n      BackendDestinationEnum.REPO_ENDPOINT,\n    )\n      .then((newStatus: MultipartUploadStatus) => {\n        // success!\n        fileUploadResolve({\n          fileHandleId: newStatus.resultFileHandleId,\n          fileName: fileHandleName,\n        })\n      })\n      .catch(error => {\n        fileUploadReject(error)\n      })\n  }\n}\nconst uploadFilePart = async (\n  presignedUrl: string,\n  file: any,\n  contentType: string,\n) => {\n  // TODO: could try using axios to get upload progress, then update the client-side part state (change to numbers from 0-1)\n  // This would give progress for the single file (across all parts).\n  // The parent would still need to figure out progress (for the total file set).\n  await fetch(presignedUrl, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': contentType,\n    },\n    body: file,\n  })\n}\nexport const startMultipartUpload = (\n  sessionToken: string | undefined,\n  fileName: string,\n  file: Blob,\n  request: MultipartUploadRequest,\n  fileUploadResolve: (fileUpload: FileUploadComplete) => void,\n  fileUploadReject: (reason: any) => void,\n) => {\n  const url = 'file/v1/file/multipart'\n  doPost<MultipartUploadStatus>(\n    url,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then(async (status: MultipartUploadStatus) => {\n      // started the upload\n      // keep track of the part state client-side\n      const clientSidePartsState: boolean[] = status.partsState\n        .split('')\n        .map(bit => bit === '1')\n      status.clientSidePartsState = clientSidePartsState\n      for (let i = 0; i < clientSidePartsState.length; i = i + 1) {\n        if (!clientSidePartsState[i]) {\n          // upload this part.  note that partNumber is always the index+1\n          await processFilePart(\n            i + 1,\n            status,\n            sessionToken,\n            fileName,\n            file,\n            request,\n            fileUploadResolve,\n            fileUploadReject,\n          )\n        }\n      }\n      // in case there is no upload work to do!\n      checkUploadComplete(\n        status,\n        fileName,\n        sessionToken,\n        fileUploadResolve,\n        fileUploadReject,\n      )\n    })\n    .catch(error => {\n      fileUploadReject(error)\n    })\n}\n\n/**\n * Return the content of the file (latest version) associated to the given FileEntity.\n * Be aware that if the target file size > 5MB, this method will throw an error.\n * @param sessionToken\n * @param fileEntity\n * @param endpoint\n */\nexport const getFileEntityContent = (\n  sessionToken: string,\n  fileEntity: FileEntity,\n): Promise<string> => {\n  // get the presigned URL, download the data, and send that back (via resolve())\n  return new Promise((resolve, reject) => {\n    const fileHandleAssociationList = [\n      {\n        associateObjectId: fileEntity.id,\n        associateObjectType: 'FileEntity',\n        fileHandleId: fileEntity.dataFileHandleId,\n      },\n    ]\n    const request: any = {\n      includeFileHandles: true,\n      includePreSignedURLs: true,\n      includePreviewPreSignedURLs: false,\n      requestedFiles: fileHandleAssociationList,\n    }\n    getFiles(request, sessionToken)\n      .then((data: BatchFileResult) => {\n        const presignedUrl: string = data.requestedFiles[0].preSignedURL!\n        const fileHandle: FileHandle = data.requestedFiles[0].fileHandle!\n        return getFileHandleContent(fileHandle, presignedUrl).then(\n          (content: string) => {\n            resolve(content)\n          },\n        )\n      })\n      .catch(err => {\n        reject(err)\n      })\n  })\n}\n\n/**\n * Return the FileHandle of the file associated to the given FileEntity.\n * * @param fileEntity: FileEntity\n * @param sessionToken\n * @param endpoint\n */\nexport const getFileEntityFileHandle = (\n  fileEntity: FileEntity,\n  sessionToken?: string,\n): Promise<FileHandle> => {\n  return new Promise((resolve, reject) => {\n    const fileHandleAssociationList:FileHandleAssociation[] = [\n      {\n        associateObjectId: fileEntity.id!,\n        associateObjectType: FileHandleAssociateType.FileEntity,\n        fileHandleId: fileEntity.dataFileHandleId,\n      },\n    ]\n    const request:BatchFileRequest = {\n      includeFileHandles: true,\n      includePreSignedURLs: false,\n      includePreviewPreSignedURLs: false,\n      requestedFiles: fileHandleAssociationList,\n    }\n    getFiles(request, sessionToken)\n      .then((data: BatchFileResult) => {\n        if (data.requestedFiles.length > 0 && data.requestedFiles[0].fileHandle) {\n          resolve(data.requestedFiles[0].fileHandle)  \n        } else {\n          // not found, or not allowed to access\n          reject(undefined)\n        }\n      })\n      .catch(err => {\n        reject(err)\n      })\n  })\n}\n\nexport const getFileHandleContentFromID = (\n  fileHandleId: string,\n  sessionToken: string,\n): Promise<string> => {\n  // get the presigned URL, download the data, and send that back (via resolve())\n  return new Promise((resolve, reject) => {\n    // get the file handle and url\n    const getFileHandleByIdPromise = getFileHandleById(\n      fileHandleId,\n      sessionToken,\n    )\n    const getFileHandlePresignedUrlPromis = getFileHandleByIdURL(\n      fileHandleId,\n      sessionToken,\n    )\n    Promise.all([getFileHandleByIdPromise, getFileHandlePresignedUrlPromis])\n      .then(values => {\n        const fileHandle: FileHandle = values[0]\n        const presignedUrl: string = values[1]\n        return getFileHandleContent(fileHandle, presignedUrl).then(\n          (content: string) => {\n            resolve(content)\n          },\n        )\n      })\n      .catch(err => {\n        reject(err)\n      })\n  })\n}\n\nexport const getFileHandleContent = (\n  fileHandle: FileHandle,\n  presignedUrl: string,\n): Promise<string> => {\n  // get the presigned URL, download the data, and send that back (via resolve())\n  return new Promise((resolve, reject) => {\n    // sanity check!  must be less than 5MB\n    if (fileHandle.contentSize < MAX_JS_FILE_DOWNLOAD_SIZE) {\n      fetch(presignedUrl, {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n          'Content-Type': fileHandle.contentType,\n        },\n      }).then(response => {\n        // the response is always decoded using UTF-8\n        response.text().then(text => {\n          resolve(text)\n        })\n      })\n    } else {\n      reject('File size exceeds max (5MB)')\n    }\n  })\n}\n\n/**\n * Create an ACL\n * https://docs.synapse.org/rest/POST/entity/id/acl.html\n */\nexport const createACL = (\n  entityId: string,\n  acl: AccessControlList,\n  sessionToken: string | undefined,\n) => {\n  return doPost(\n    `/repo/v1/entity/${entityId}/acl`,\n    acl,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Submit an entity to an evaluation queue\n * https://docs.synapse.org/rest/POST/evaluation/submission.html\n */\nexport const submitToEvaluation = (\n  submission: Submission,\n  etag: string,\n  sessionToken: string | undefined,\n) => {\n  return doPost(\n    `/repo/v1/evaluation/submission?etag=${etag}`,\n    submission,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get an evaluation queue\n * https://docs.synapse.org/rest/GET/evaluation/evalId.html\n */\nexport const getEvaluation = (\n  evalId: string,\n  sessionToken: string | undefined,\n) => {\n  return doGet(\n    `/repo/v1/evaluation/${evalId}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Executes a user-defined query over the Submissions of a specific Evaluation.\n * https://docs.synapse.org/rest/GET/evaluation/submission/query.html\n */\nexport const getEvaluationSubmissions = (\n  query: string,\n  sessionToken: string | undefined,\n): Promise<QueryTableResults> => {\n  return doGet(\n    `/repo/v1/evaluation/submission/query?query=${encodeURI(query)}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get user-friendly OAuth2 request information (to present to the user so they can choose if they want to give consent).\n */\nexport const getOAuth2RequestDescription = (\n  oidcAuthRequest: OIDCAuthorizationRequest,\n  sessionToken: string | undefined,\n): Promise<OIDCAuthorizationRequestDescription> => {\n  return doPost(\n    '/auth/v1/oauth2/description',\n    oidcAuthRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Check whether user has already granted consent for the given OAuth client, scope, and claims.\n * Consent persists for one year.\n */\nexport const hasUserAuthorizedOAuthClient = (\n  oidcAuthRequest: OIDCAuthorizationRequest,\n  sessionToken: string | undefined,\n): Promise<OAuthConsentGrantedResponse> => {\n  return doPost(\n    '/auth/v1/oauth2/consentcheck',\n    oidcAuthRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get OAuth2 Client information (available to the public)\n */\nexport const getOAuth2Client = (\n  clientId: string,\n): Promise<OAuthClientPublic> => {\n  return doGet(\n    `/auth/v1/oauth2/client/${clientId}`,\n    undefined,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * User consents to the given OIDCAuthorizationRequest (after being presented with all information returned by getOAuth2RequestDescription())\n * @param oidcAuthRequest\n * @param sessionToken\n * @param endpoint\n */\nexport const consentToOAuth2Request = (\n  oidcAuthRequest: OIDCAuthorizationRequest,\n  sessionToken: string | undefined,\n): Promise<AccessCodeResponse> => {\n  return doPost(\n    '/auth/v1/oauth2/consent',\n    oidcAuthRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/***********************\n * FORM SERVICES\n * https://docs.synapse.org/rest/#org.sagebionetworks.repo.web.controller.FormController\n *************************/\n/**\n * Create a FormGroup\n * https://docs.synapse.org/rest/POST/form/group.html\n * @param name\n * @param sessionToken\n * @param endpoint\n */\nexport const createFormGroup = (\n  name: string,\n  sessionToken: string,\n): Promise<FormGroup> => {\n  return doPost(\n    `/repo/v1/form/group?name=${encodeURI(name)}`,\n    undefined,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get FormGroup ACL\n * https://docs.synapse.org/rest/GET/form/group/id/acl.html\n */\nexport const getFormACL = (\n  formGroupId: string,\n  sessionToken: string | undefined,\n): Promise<AccessControlList> => {\n  return doGet(\n    `/repo/v1/form/group/${formGroupId}/acl`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Update FormGroup ACL\n * https://docs.synapse.org/rest/PUT/form/group/id/acl.html\n */\nexport const updateFormACL = (\n  formGroupId: string,\n  newAcl: AccessControlList,\n  sessionToken: string | undefined,\n): Promise<AccessControlList> => {\n  return doPut(\n    `/repo/v1/form/group/${formGroupId}/acl`,\n    newAcl,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Create a new FormData object\n * https://docs.synapse.org/rest/POST/form/data.html\n * @param formGroupId\n * @param name\n * @param sessionToken\n * @param endpoint\n */\nexport const createFormData = (\n  formGroupId: string,\n  name: string,\n  dataFileHandleId: string,\n  sessionToken: string,\n): Promise<FormData> => {\n  const newFormData: FormChangeRequest = {\n    name,\n    fileHandleId: dataFileHandleId,\n  }\n  return doPost(\n    `/repo/v1/form/data?groupId=${formGroupId}`,\n    newFormData,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Update FormData object\n * https://docs.synapse.org/rest/PUT/form/data.html\n */\nexport const updateFormData = (\n  formDataId: string,\n  name: string,\n  dataFileHandleId: string,\n  sessionToken: string,\n): Promise<FormData> => {\n  const updatedFormData: FormChangeRequest = {\n    name,\n    fileHandleId: dataFileHandleId,\n  }\n  return doPut(\n    `/repo/v1/form/data/${formDataId}`,\n    updatedFormData,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Delete FormData object\n * https://docs.synapse.org/rest/DELETE/form/data.html\n */\nexport const deleteFormData = (\n  formDataId: string,\n  sessionToken: string | undefined,\n) => {\n  return doDelete(\n    `/repo/v1/form/data/${formDataId}`,\n    undefined,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Submit the identified FormData for review.\n * https://docs.synapse.org/rest/POST/form/data/id/submit.html\n */\nexport const submitFormData = (\n  formDataId: string,\n  sessionToken: string | undefined,\n): Promise<FormData> => {\n  return doPost(\n    `/repo/v1/form/data/${formDataId}/submit`,\n    undefined,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * List FormData objects and their associated status that match the filters of the provided request that are\n * owned by the caller. Note: Only objects owned by the caller will be returned.\n * https://docs.synapse.org/rest/POST/form/data/list.html\n */\nexport const listFormData = (\n  request: ListRequest,\n  sessionToken: string | undefined,\n): Promise<ListResponse> => {\n  return doPost(\n    `/repo/v1/form/data/list`,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * List FormData objects and their associated status that match the filters of the provided request for the entire\n * group. This is used by service accounts to process submissions.\n * https://docs.synapse.org/rest/POST/form/data/list/reviewer.html\n */\nexport const listFormDataAsFormAdmin = (\n  request: ListRequest,\n  sessionToken: string | undefined,\n): Promise<ListResponse> => {\n  return doPost(\n    `/repo/v1/form/data/list/reviewer`,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Called by the form processing service to accept a submitted data.\n * https://docs.synapse.org/rest/PUT/form/data/id/accept.html\n */\nexport const acceptFormData = (\n  formDataId: string,\n  sessionToken: string | undefined,\n): Promise<FormData> => {\n  return doPut(\n    `/repo/v1/form/data/${formDataId}/accept`,\n    undefined,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Called by the form processing service to reject a submitted data.\n * https://docs.synapse.org/rest/PUT/form/data/id/reject.html\n */\nexport const rejectFormData = (\n  formDataId: string,\n  reason: string,\n  sessionToken: string | undefined,\n): Promise<FormData> => {\n  const formRejection: FormRejection = {\n    reason,\n  }\n  return doPut(\n    `/repo/v1/form/data/${formDataId}/reject`,\n    formRejection,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get Statistics\n * https://docs.synapse.org/rest/POST/statistics.html\n * Generic endpoint to retrieve statistics about objects. The user should have VIEW_STATISTICS access on the object referenced by the objectId in the request.\n */\nexport const getProjectStatistics = (\n  request: ProjectFilesStatisticsRequest,\n  sessionToken: string | undefined,\n): Promise<ProjectFilesStatisticsResponse> => {\n  return doPost(\n    `/repo/v1/statistics`,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n// see https://docs.synapse.org/rest/POST/restrictionInformation.html\nexport const getRestrictionInformation = (\n  request: RestrictionInformationRequest,\n  sessionToken: string | undefined,\n): Promise<RestrictionInformationResponse> => {\n  return doPost(\n    `/repo/v1/restrictionInformation`,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n/**\n * Returns a paginated result of access requirements associated for an entity\n *\n * See https://rest-docs.synapse.org/rest/GET/entity/id/accessRequirement.html\n *\n * @param {(string | undefined)} sessionToken token of user\n * @param {string} id id of entity\n * @param {number} [limit=50]\n * @param {number} [offset=0]\n * @returns {Promise<PaginatedResults<AccessRequirement>>}\n */\nexport const getAccessRequirement = (\n  sessionToken: string | undefined,\n  id: string,\n  limit: number = 50,\n  offset: number = 0,\n): Promise<PaginatedResults<AccessRequirement>> => {\n  const url = `/repo/v1/entity/${id}/accessRequirement?limit=${limit}&offset=${offset}`\n  return doGet<PaginatedResults<AccessRequirement>>(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get all access requirements\n */\nexport const getAllAccessRequirements = (\n  sessionToken: string | undefined,\n  id: string,\n): Promise<Array<AccessRequirement>> => {\n  // format function to be callable by getAllOfPaginatedService\n  const fn = (limit: number, offset: number) => {\n    const url = `/repo/v1/entity/${id}/accessRequirement?limit=${limit}&offset=${offset}`\n    return doGet<PaginatedResults<AccessRequirement>>(\n      url,\n      sessionToken,\n      undefined,\n      BackendDestinationEnum.REPO_ENDPOINT,\n    )\n  }\n  return getAllOfPaginatedService(fn)\n}\n\n/**\n *\n *\n * @param {(string | undefined)} sessionToken user session token\n * @param {AccessApproval} accessApproval access approval request object\n * @returns {AccessApproval}\n */\nexport const postAccessApproval = async (\n  sessionToken: string | undefined,\n  accessApproval: AccessApproval,\n): Promise<AccessApproval> => {\n  return doPost<AccessApproval>(\n    'https://repo-prod.prod.sagebase.org/repo/v1/accessApproval',\n    accessApproval,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n// https://rest-docs.synapse.org/rest/GET/download/list.html\nexport const getDownloadList = (sessionToken: string | undefined) => {\n  return doGet<DownloadList>(\n    '/file/v1/download/list',\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const getDownloadOrder = (\n  zipFileName: string | undefined,\n  sessionToken: string | undefined,\n): Promise<DownloadOrder> => {\n  const baseURL = '/file/v1/download/order'\n  const url = zipFileName ? `${baseURL}?zipFileName=${zipFileName}` : baseURL\n  return doPost(\n    url,\n    undefined,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport type FunctionReturningPaginatedResults<T> = (\n  limit: number,\n  offset: number,\n) => Promise<PaginatedResults<T>>\n/**\n * Utility function to get all the results of a paginated service\n *\n * @template T Type of paginated service\n * @param {FunctionReturningPaginatedResults<T>} fn Function that returns a paginated synapse object, accepts a limit and offset\n * @returns\n */\nexport const getAllOfPaginatedService = async <T>(\n  fn: FunctionReturningPaginatedResults<T>,\n) => {\n  const limit = 50\n  let offset = 0\n  let existsMoreData = true\n  const results: T[] = []\n\n  while (existsMoreData) {\n    try {\n      const data = await fn(limit, offset)\n      results.push(...data.results)\n      offset += data.results.length\n      if (data.results.length < limit) {\n        existsMoreData = false\n      }\n    } catch (e) {\n      throw Error(`Error on getting paginated results ${e}`)\n    }\n  }\n\n  return results\n}\n\n// https://rest-docs.synapse.org/rest/POST/download/list/remove.html\nexport const deleteDownloadListFiles = (\n  list: FileHandleAssociation[],\n  sessionToken: string | undefined,\n): Promise<DownloadList> => {\n  return doPost(\n    '/file/v1/download/list/remove',\n    { list },\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n// https://rest-docs.synapse.org/rest/DELETE/download/list.html ?\nexport const deleteDownloadList = (sessionToken: string | undefined) => {\n  return doDelete(\n    '/file/v1/download/list',\n    undefined,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n","import * as React from 'react'\nimport ButtonContent from '../assets/ButtonContent'\nimport GoogleIcon from '../assets/GoogleIcon'\nimport { SynapseClient } from '../utils'\nimport {\n  getEndpoint,\n  BackendDestinationEnum,\n} from '../utils/functions/getEndpoint'\n\ntype State = {\n  username: string\n  password: string\n  email: string\n  isSignedIn: boolean\n  hasLoginInFailed: boolean\n  errorMessage: string\n}\n\ntype Props = {\n  theme: string\n  icon: boolean\n  googleRedirectUrl?: string\n  redirectUrl?: string // will redirect here after a successful login. if unset, reload the current page url.\n  sessionCallback: Function // Callback is invoked after login\n}\n\n/**\n *  Demo of user session, show login screen and handling user login submission.\n *\n *  To support Google SSO in your portal, you must add your domain to the Authorized Redirect URIs\n *  for Synapse authentication.\n *  This can be done by contacting synapseInfo@sagebionetworks.org to form a collaboration.\n *  Synapse engineers must add your redirect URL in the Google API console found at https://console.cloud.google.com/ for this functionality to work.\n *\n * @class Login\n * @extends {React.Component}\n */\nclass Login extends React.Component<Props, State> {\n  authenticationReceiptKey = 'last_user_authentication_receipt'\n\n  /**\n   * Creates a user session, maintaining credentials\n   * @param {*} props\n   * @memberof Login\n   */\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      email: '',\n      errorMessage: '',\n      hasLoginInFailed: false,\n      isSignedIn: false,\n      password: '',\n      username: '',\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleLogin = this.handleLogin.bind(this)\n    this.getLoginFailureView = this.getLoginFailureView.bind(this)\n    this.onGoogleSignIn = this.onGoogleSignIn.bind(this)\n  }\n  /**\n   * Updates internal state with the event that was triggered\n   *\n   * @param {*} event Form update\n   */\n  public handleChange(event: React.FormEvent<HTMLInputElement>): void {\n    const target = event.currentTarget\n    const name = target.name\n    const value = target.value\n    const newState: Pick<any, any> = { [name]: value }\n    this.setState(newState)\n  }\n  /**\n   * Handle user login on click\n   *\n   * @param {*} clickEvent Userclick event\n   */\n  public async handleLogin(clickEvent: React.FormEvent<HTMLElement>) {\n    clickEvent.preventDefault() // avoid page refresh\n    try {\n      // get last valid receipt\n      const authenticationReceipt = localStorage.getItem(\n        this.authenticationReceiptKey,\n      )\n      const data = await SynapseClient.login(\n        this.state.username,\n        this.state.password,\n        authenticationReceipt,\n      )\n      // now get session token from cookie has to be called in the portals repo\n      await SynapseClient.setSessionTokenCookie(\n        data.sessionToken,\n        this.props.sessionCallback,\n      )\n      // Set the new receipt\n      localStorage.setItem(\n        this.authenticationReceiptKey,\n        data.authenticationReceipt,\n      )\n    } catch (err) {\n      console.log('Error on login: ', err.reason)\n      this.setState({\n        errorMessage: err.reason,\n        hasLoginInFailed: true,\n        isSignedIn: false,\n      })\n    }\n  }\n\n  /**\n   * Shows user login failure view on login failure\n   *\n   * @returns view to be displayed on user sign in error.\n   */\n  public getLoginFailureView(): JSX.Element | boolean {\n    if (this.state.hasLoginInFailed) {\n      return (\n        <div>\n          <small className=\"form-text text-danger\">\n            {this.state.errorMessage}\n          </small>\n          <div className=\"invalid-feedback\" />\n        </div>\n      )\n    }\n    return false\n  }\n\n  public onGoogleSignIn(event: React.MouseEvent<HTMLButtonElement>) {\n    // save current route (so that we can go back here after SSO)\n    localStorage.setItem('after-sso-login-url', window.location.href)\n    event.preventDefault()\n    const redirectUrl = this.props.googleRedirectUrl\n      ? this.props.googleRedirectUrl\n      : `${SynapseClient.getRootURL()}?provider=${SynapseClient.AUTH_PROVIDER}`\n    SynapseClient.oAuthUrlRequest(SynapseClient.AUTH_PROVIDER, redirectUrl)\n      .then((data: any) => {\n        const authUrl = data.authorizationUrl\n        window.location = authUrl // ping the url\n      })\n      .catch((err: any) => {\n        console.log('Error on oAuth url ', err)\n      })\n  }\n  public render() {\n    const { theme, icon } = this.props\n    const googleTheme =\n      theme === 'dark'\n        ? 'SRC-google-button-dark-color'\n        : 'SRC-google-button-light-color'\n    return (\n      <div\n        id=\"loginPage\"\n        className=\"container loginContainer SRC-syn-border-spacing\"\n      >\n        <form>\n          <button\n            onClick={this.onGoogleSignIn}\n            className={`SRC-google-button ${googleTheme} SRC-marginBottomTen`}\n          >\n            <GoogleIcon key={1} active={true} />\n            <ButtonContent icon={icon} key={2}>\n              Sign in with Google\n            </ButtonContent>\n          </button>\n        </form>\n        <div className=\"SRC-center-text SRC-deemphasized-text SRC-marginBottomTen\">\n          or\n        </div>\n\n        <div className=\"SRC-centerAndJustifyContent SRC-marginBottomTen\">\n          <img\n            height=\"20px\"\n            style={{ marginRight: '10px' }}\n            alt={'sage bionetworks logo'}\n            src=\"https://s3.amazonaws.com/static.synapse.org/sage-bionetworks-logo.svg\"\n          />\n          Sign in with your Sage Bionetworks Synapse account\n        </div>\n        <form onSubmit={this.handleLogin} className=\"form-group\">\n          <input\n            autoComplete=\"username\"\n            placeholder=\"username or email\"\n            className=\"form-control SRC-marginBottomTop\"\n            id=\"exampleEmail\"\n            name=\"username\"\n            type=\"text\"\n            value={this.state.username}\n            onChange={this.handleChange}\n          />\n          <input\n            autoComplete=\"password\"\n            placeholder=\"password\"\n            className=\"form-control SRC-marginBottomTop\"\n            id=\"examplePassword\"\n            name=\"password\"\n            type=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n          {this.getLoginFailureView()}\n          <button\n            onSubmit={this.handleLogin}\n            type=\"submit\"\n            className=\"btn SRC-primary-background-color SRC-hoverWhiteText\n              SRC-whiteText m-1 SRC-google-button SRC-marginBottomTen\"\n          >\n            <ButtonContent icon={icon}>Sign in</ButtonContent>\n          </button>\n        </form>\n        <div>\n          <a\n            href={`${getEndpoint(\n              BackendDestinationEnum.PORTAL_ENDPOINT,\n            )}#!PasswordReset:0`}\n            className=\"SRC-floatLeft SRC-primary-text-color\"\n          >\n            Forgot password?\n          </a>\n          <span className=\"SRC-deemphasized-text SRC-floatRight\">\n            &nbsp;It's free!\n          </span>\n          <a\n            href={`${getEndpoint(\n              BackendDestinationEnum.PORTAL_ENDPOINT,\n            )}#!RegisterAccount:0`}\n            className=\"SRC-floatRight SRC-primary-text-color\"\n          >\n            Register\n          </a>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Login\n","const COLOR_PALETTE_EVEN: string[] = [\n  'rgb(91,176,181)',\n  'rgb(124,192,196)',\n  'rgb(157,208,211)',\n  'rgb(189,223,225)',\n  'rgb(222,239,240)',\n  'rgb(217,229,236)',\n  'rgb(179,202,217)',\n  'rgb(140,176,198)',\n  'rgb(102,149,179)',\n  'rgb(64,123,160)',\n  'rgb(201,66,129)',\n  'rgb(212,104,154)',\n  'rgb(223,142,179)',\n  'rgb(233,179,205)',\n  'rgb(244,217,230)',\n  'rgb(218,214,229)',\n  'rgb(181,173,203)',\n  'rgb(145,133,177)',\n  'rgb(108,92,151)',\n  'rgb(71,51,125)',\n  'rgb(222,154,31)',\n  'rgb(229,174,76)',\n  'rgb(235,194,121)',\n  'rgb(242,215,165)',\n  'rgb(248,235,210)',\n  'rgb(207,234,231)',\n  'rgb(159,212,207)',\n  'rgb(112,191,184)',\n  'rgb(64,169,160)',\n  'rgb(16,148,136)',\n  'rgb(60,74,99)',\n  'rgb(99,110,130)',\n  'rgb(138,146,161)',\n  'rgb(177,183,193)',\n  'rgb(216,219,224)',\n  'rgb(246,226,210)',\n  'rgb(238,197,165)',\n  'rgb(229,167,120)',\n  'rgb(221,138,75)',\n  'rgb(212,109,30)',\n  'rgb(88,161,88)',\n  'rgb(121,180,121)',\n  'rgb(155,199,155)',\n  'rgb(188,217,188)',\n  'rgb(222,236,222)',\n  'rgb(220,227,242)',\n  'rgb(185,198,230)',\n  'rgb(151,170,217)',\n  'rgb(116,141,205)',\n  'rgb(81,113,192)',\n  'rgb(178,36,42)',\n  'rgb(193,80,85)',\n  'rgb(209,124,127)',\n  'rgb(224,167,170)',\n  'rgb(240,211,212)',\n  'rgb(222,239,240)',\n  'rgb(189,223,225)',\n  'rgb(157,208,211)',\n  'rgb(124,192,196)',\n  'rgb(91,176,181)',\n  'rgb(64,123,160)',\n  'rgb(102,149,179)',\n  'rgb(140,176,198)',\n  'rgb(179,202,217)',\n  'rgb(217,229,236)',\n  'rgb(244,217,230)',\n  'rgb(233,179,205)',\n  'rgb(223,142,179)',\n  'rgb(212,104,154)',\n  'rgb(201,66,129)',\n  'rgb(71,51,125)',\n  'rgb(108,92,151)',\n  'rgb(145,133,177)',\n  'rgb(181,173,203)',\n  'rgb(218,214,229)',\n  'rgb(248,235,210)',\n  'rgb(242,215,165)',\n  'rgb(235,194,121)',\n  'rgb(229,174,76)',\n  'rgb(222,154,31)',\n  'rgb(16,148,136)',\n  'rgb(64,169,160)',\n  'rgb(112,191,184)',\n  'rgb(159,212,207)',\n  'rgb(207,234,231)',\n  'rgb(216,219,224)',\n  'rgb(177,183,193)',\n  'rgb(138,146,161)',\n  'rgb(99,110,130)',\n  'rgb(60,74,99)',\n  'rgb(212,109,30)',\n  'rgb(221,138,75)',\n  'rgb(229,167,120)',\n  'rgb(238,197,165)',\n  'rgb(246,226,210)',\n  'rgb(222,236,222)',\n  'rgb(188,217,188)',\n  'rgb(155,199,155)',\n  'rgb(121,180,121)',\n  'rgb(88,161,88)',\n  'rgb(81,113,192)',\n  'rgb(116,141,205)',\n  'rgb(151,170,217)',\n  'rgb(185,198,230)',\n  'rgb(220,227,242)',\n  'rgb(240,211,212)',\n  'rgb(224,167,170)',\n  'rgb(209,124,127)',\n  'rgb(193,80,85)',\n  'rgb(178,36,42)',\n]\n\nconst COLOR_PALETTE_ODD: string[] = [\n  'rgb(64,123,160)',\n  'rgb(102,149,179)',\n  'rgb(140,176,198)',\n  'rgb(179,202,217)',\n  'rgb(217,229,236)',\n  'rgb(244,217,230)',\n  'rgb(233,179,205)',\n  'rgb(223,142,179)',\n  'rgb(212,104,154)',\n  'rgb(201,66,129)',\n  'rgb(71,51,125)',\n  'rgb(108,92,151)',\n  'rgb(145,133,177)',\n  'rgb(181,173,203)',\n  'rgb(218,214,229)',\n  'rgb(248,235,210)',\n  'rgb(242,215,165)',\n  'rgb(235,194,121)',\n  'rgb(229,174,76)',\n  'rgb(222,154,31)',\n  'rgb(16,148,136)',\n  'rgb(64,169,160)',\n  'rgb(112,191,184)',\n  'rgb(159,212,207)',\n  'rgb(207,234,231)',\n  'rgb(216,219,224)',\n  'rgb(177,183,193)',\n  'rgb(138,146,161)',\n  'rgb(99,110,130)',\n  'rgb(60,74,99)',\n  'rgb(212,109,30)',\n  'rgb(221,138,75)',\n  'rgb(229,167,120)',\n  'rgb(238,197,165)',\n  'rgb(246,226,210)',\n  'rgb(222,236,222)',\n  'rgb(188,217,188)',\n  'rgb(155,199,155)',\n  'rgb(121,180,121)',\n  'rgb(88,161,88)',\n  'rgb(81,113,192)',\n  'rgb(116,141,205)',\n  'rgb(151,170,217)',\n  'rgb(185,198,230)',\n  'rgb(220,227,242)',\n  'rgb(240,211,212)',\n  'rgb(224,167,170)',\n  'rgb(209,124,127)',\n  'rgb(193,80,85)',\n  'rgb(178,36,42)',\n  'rgb(91,176,181)',\n  'rgb(124,192,196)',\n  'rgb(157,208,211)',\n  'rgb(189,223,225)',\n  'rgb(222,239,240)',\n  'rgb(217,229,236)',\n  'rgb(179,202,217)',\n  'rgb(140,176,198)',\n  'rgb(102,149,179)',\n  'rgb(64,123,160)',\n  'rgb(201,66,129)',\n  'rgb(212,104,154)',\n  'rgb(223,142,179)',\n  'rgb(233,179,205)',\n  'rgb(244,217,230)',\n  'rgb(218,214,229)',\n  'rgb(181,173,203)',\n  'rgb(145,133,177)',\n  'rgb(108,92,151)',\n  'rgb(71,51,125)',\n  'rgb(222,154,31)',\n  'rgb(229,174,76)',\n  'rgb(235,194,121)',\n  'rgb(242,215,165)',\n  'rgb(248,235,210)',\n  'rgb(207,234,231)',\n  'rgb(159,212,207)',\n  'rgb(112,191,184)',\n  'rgb(64,169,160)',\n  'rgb(16,148,136)',\n  'rgb(60,74,99)',\n  'rgb(99,110,130)',\n  'rgb(138,146,161)',\n  'rgb(177,183,193)',\n  'rgb(216,219,224)',\n  'rgb(246,226,210)',\n  'rgb(238,197,165)',\n  'rgb(229,167,120)',\n  'rgb(221,138,75)',\n  'rgb(212,109,30)',\n  'rgb(88,161,88)',\n  'rgb(121,180,121)',\n  'rgb(155,199,155)',\n  'rgb(188,217,188)',\n  'rgb(222,236,222)',\n  'rgb(220,227,242)',\n  'rgb(185,198,230)',\n  'rgb(151,170,217)',\n  'rgb(116,141,205)',\n  'rgb(81,113,192)',\n  'rgb(178,36,42)',\n  'rgb(193,80,85)',\n  'rgb(209,124,127)',\n  'rgb(224,167,170)',\n  'rgb(240,211,212)',\n  'rgb(222,239,240)',\n  'rgb(189,223,225)',\n  'rgb(157,208,211)',\n  'rgb(124,192,196)',\n  'rgb(91,176,181)',\n]\n\nexport { COLOR_PALETTE_EVEN, COLOR_PALETTE_ODD }\n","import {\n  COLOR_PALETTE_EVEN,\n  COLOR_PALETTE_ODD,\n} from '../utils/functions/colorPalette'\n\nexport function rgba2rgb(background: number[], color: number[]) {\n  const alpha = color[3]\n  return [\n    Math.floor((1 - alpha) * background[0] + alpha * color[0] + 0.5),\n    Math.floor((1 - alpha) * background[1] + alpha * color[1] + 0.5),\n    Math.floor((1 - alpha) * background[2] + alpha * color[2] + 0.5),\n  ]\n}\n\nexport function getColorPallette(\n  start: number,\n  end: number,\n): { colorPalette: string[]; textColors: string[] } {\n  let colorPalleteSelection = []\n  const textColors = []\n  let offset = -1\n\n  if (start % 2 === 0) {\n    colorPalleteSelection = COLOR_PALETTE_EVEN\n    offset = start * 5\n  } else {\n    colorPalleteSelection = COLOR_PALETTE_ODD\n    offset = (start - 1) * 5\n  }\n\n  const colorPalette: string[] = []\n\n  for (let i = 0; i < end; i += 1) {\n    const textColor: string = i % 10 < 2 || i % 10 > 7 ? 'white' : 'black'\n    const color: string = `${\n      colorPalleteSelection[(offset + i) % colorPalleteSelection.length]\n    }`\n    colorPalette.push(color)\n    textColors.push(textColor)\n  }\n  return { colorPalette, textColors }\n}\n\nexport default getColorPallette\n","import { FacetSelection } from '../../containers/QueryWrapper'\nimport { QueryBundleRequest } from '../synapseTypes/'\nimport { FacetColumnValuesRequest } from '../synapseTypes/'\nimport { SELECT_SINGLE_FACET } from '../../containers/Facets'\nimport { FacetColumnResultValueCount } from '../synapseTypes/'\n\n/**\n *  Calculates the state of a specific facet value given the current state\n *  of the application.\n *\n * @param\n *     isLoading: boolean | undefined,\n *     lastFacetSelection: FacetSelection | undefined,\n *     curFacetSelection: any,\n *     columnName: string\n * @returns boolean\n */\n\nexport const getIsValueSelected = ({\n  isLoading,\n  lastFacetSelection,\n  curFacetSelection,\n  columnName,\n}: {\n  isLoading: boolean | undefined\n  lastFacetSelection: FacetSelection | undefined\n  curFacetSelection: FacetColumnResultValueCount\n  columnName: string\n}) => {\n  if (isLoading && columnName === lastFacetSelection!.columnName) {\n    // indicates there is a selection made with this current facet value\n    if (lastFacetSelection!.facetValue === curFacetSelection.value) {\n      return !curFacetSelection.isSelected\n    }\n    if (lastFacetSelection!.selector === SELECT_SINGLE_FACET) {\n      return false\n    }\n  }\n  /*\n    else, the information has come back from the server and we can\n    rely on that\n  */\n  return curFacetSelection.isSelected\n}\n\nexport type SyntheticHTMLInputElement = {\n  value: string\n  checked: boolean\n}\n\n/**\n * Function reads over a set of checkboxes and then returns a corresponding\n * queryRequest given the state of the prior queryRequest\n *   htmlCheckboxes: any,\n *   selector : string,\n *   queryRequest: QueryBundleRequest,\n *   facet: string,\n *   value?: string\n * }\n * @returns\n */\nexport const readFacetValues = ({\n  htmlCheckboxes,\n  selector,\n  queryRequest,\n  facet,\n  value,\n}: {\n  htmlCheckboxes: SyntheticHTMLInputElement[]\n  selector: string\n  queryRequest: QueryBundleRequest\n  facet: string\n  value?: string\n}) => {\n  const facetValues: string[] = []\n\n  if (!selector) {\n    // no selector was clicked -- read over facet values as normal and see what was clicked\n    for (let i = 0; i < htmlCheckboxes.length; i += 1) {\n      const checkbox = htmlCheckboxes[i]\n      const isSelected = checkbox.checked\n      if (isSelected) {\n        facetValues.push(checkbox.value)\n      }\n    }\n  } else if (selector === SELECT_SINGLE_FACET) {\n    // SELECT_SINGLE_FACET acts as a radio selection, thats the only selection\n    facetValues.push(value!)\n  } // else selector === SELECT_ALL, we don't add any values, empty is treated as SELECT_ALL\n  const newQueryRequest: QueryBundleRequest = queryRequest\n  const { selectedFacets = [] } = newQueryRequest.query\n\n  const specificFacet = selectedFacets!.find(el => el.columnName === facet)!\n  if (!specificFacet) {\n    const facetColumnValuesRequest: FacetColumnValuesRequest = {\n      facetValues,\n      concreteType:\n        'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest',\n      columnName: facet,\n    }\n    selectedFacets.push(facetColumnValuesRequest)\n    // align the reference to selectedFacets\n    newQueryRequest.query.selectedFacets = selectedFacets\n  } else {\n    specificFacet.facetValues = facetValues\n  }\n\n  return { newQueryRequest }\n}\n","export const TOOLTIP_DELAY_SHOW = 500\nexport const SELECT_ALL = 'SELECT_ALL';\nexport const DESELECT_ALL = 'DESELECT_ALL';\nexport const DOWNLOAD_FILES_MENU_TEXT = 'Download Files'; // double check these icons!\nexport const ICON_STATE: string[] = ['sort-amount-down', 'sort-amount-down', 'sort-amount-up'];\n  ","import * as React from 'react'\nimport {\n  FacetColumnResultValues,\n  QueryResultBundle,\n} from '../utils/synapseTypes/'\n\nexport type TotalQueryResultsProps = {\n  data?: QueryResultBundle\n\n  facet?: string\n  isLoading: boolean\n  style?: React.CSSProperties\n  unitDescription: string\n  frontText: string\n}\n\ntype State = {\n  total: number\n}\n\n// This is a stateful component so that during load the component can hold onto the previous\n// total instead of showing 0 results for the intermittent loading state.\nexport default class TotalQueryResults extends React.Component<\n  TotalQueryResultsProps,\n  State\n> {\n  constructor(props: TotalQueryResultsProps) {\n    super(props)\n    this.state = {\n      total: 0,\n    }\n  }\n\n  componentDidMount() {\n    this.calculateTotal()\n  }\n\n  componentDidUpdate(prevProps: TotalQueryResultsProps) {\n    // check that its done loading\n    if (!this.props.isLoading && prevProps.isLoading) {\n      this.calculateTotal()\n    }\n  }\n\n  calculateTotal() {\n    const { data, facet } = this.props\n    let { total } = this.state\n    if (data) {\n      if (facet) {\n        const { facets = [] } = data\n        const curFacetsIndex = facets.findIndex(\n          el => el.facetType === 'enumeration' && el.columnName === facet,\n        )\n        // calculate the values chosen\n        const curFacets = facets[curFacetsIndex] as FacetColumnResultValues\n        // edge case -- if they are all false then they are considered all true..\n        // sum up the counts of data\n        let anyTrue = false\n        let totalAllFalseCase = 0\n        let totalStandardCase = 0\n\n        if (curFacets) {\n          for (const key of curFacets.facetValues) {\n            anyTrue = anyTrue || key.isSelected\n            totalAllFalseCase += key.count\n            totalStandardCase += key.isSelected ? key.count : 0\n          }\n        }\n        total = anyTrue ? totalStandardCase : totalAllFalseCase\n        if (data.queryResult.queryResults.rows.length === 0) {\n          // we override the statements above if there are zero results because the current UI\n          // would be showing zero results\n          total = 0\n        }\n      } else {\n        if (data.queryCount === undefined) {\n          throw Error(\n            'Failed to specify either a facet or query count in part mask',\n          )\n        }\n        total = data.queryCount\n      }\n    }\n    this.setState({\n      total,\n    })\n  }\n\n  render() {\n    const { isLoading, style, unitDescription, frontText } = this.props\n    const { total } = this.state\n    const loader = <span style={{ marginLeft: '2px' }} className={'spinner'} />\n    return (\n      <p\n        style={style}\n        className=\"SRC-boldText SRC-text-title SRC-centerContent\"\n      >\n        {frontText} {total} {unitDescription} {isLoading && loader}\n      </p>\n    )\n  }\n}\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport * as React from 'react'\nimport {\n  getIsValueSelected,\n  readFacetValues,\n} from '../utils/functions/facetUtils'\nimport {\n  FacetColumnResultValues,\n  QueryBundleRequest,\n} from '../utils/synapseTypes/'\nimport { getColorPallette } from './ColorGradient'\nimport { FacetSelection, QueryWrapperChildProps } from './QueryWrapper'\nimport { SELECT_ALL } from './table/SynapseTableConstants'\nimport TotalQueryResults from './TotalQueryResults'\nlibrary.add(faPlus)\n\nexport const SELECT_SINGLE_FACET = 'SELECT_SINGLE_FACET'\n\ntype CheckboxGroupProps = {\n  isAllFilterSelected: boolean\n  rgbIndex: number\n  facetColumnResult: FacetColumnResultValues\n  applyChanges: (\n    ref: React.RefObject<HTMLSpanElement>,\n    facetValue: string,\n    selector: string,\n    index: number,\n  ) => (_event: React.MouseEvent<HTMLSpanElement>) => void\n  showAllFacets: boolean\n  lastFacetSelection: FacetSelection\n  isLoading: boolean\n}\n\nexport const FACET_SELECTED_CLASS = 'FACET_SELECTED_CLASS'\nexport const FACET_NOT_SELECTED_CLASS = 'FACET_NOT_SELECTED_CLASS'\n\n/**\n * Checkbox group represents one column's set of checkbox filters\n *\n * @class CheckboxGroup\n * @extends {React.Component}\n */\nconst CheckboxGroup: React.FunctionComponent<CheckboxGroupProps> = (\n  props: CheckboxGroupProps,\n) => {\n  const {\n    facetColumnResult,\n    showAllFacets,\n    lastFacetSelection,\n    isLoading,\n    rgbIndex,\n    isAllFilterSelected,\n  } = props\n  const children: any = []\n  const ref: React.RefObject<HTMLSpanElement> = React.createRef()\n  // Note: this actually sorts the data when it appears in the\n  // table as it stands currently, this may change depending on\n  // if that arrangment is no longer desired\n  facetColumnResult.facetValues.sort((a: any, b: any) => {\n    return b.count - a.count\n  })\n  const { colorPalette, textColors } = getColorPallette(\n    rgbIndex,\n    facetColumnResult.facetValues.length,\n  )\n  facetColumnResult.facetValues.forEach(\n    (facetColumnResultValues, index: number) => {\n      const key =\n        facetColumnResult.columnName +\n        facetColumnResultValues.value +\n        facetColumnResultValues.count\n      const textColor = textColors[index]\n      const curColor = colorPalette[index]\n      let style: any = {}\n\n      const isSelected = isAllFilterSelected\n        ? true\n        : getIsValueSelected({\n            isLoading,\n            lastFacetSelection,\n            columnName: facetColumnResult.columnName,\n            curFacetSelection: facetColumnResultValues,\n          })\n\n      if (isSelected) {\n        style = {\n          background: curColor,\n        }\n      } else {\n        style = {\n          background: '#C4C4C4',\n        }\n      }\n      // we add this class for testability\n      const backgroundClass = isSelected\n        ? FACET_SELECTED_CLASS\n        : FACET_NOT_SELECTED_CLASS\n      style.color = textColor\n      const { value, count } = facetColumnResultValues\n      const displayValue =\n        value === 'org.sagebionetworks.UNDEFINED_NULL_NOTSET'\n          ? 'unannotated'\n          : value\n\n      children.push(\n        <label\n          style={style}\n          className=\"SRC-facets SRC-primary-background-color-hover \"\n          key={key}\n        >\n          <span className=\"SRC-facets-text\">\n            {displayValue} ({count})\n          </span>\n          <input\n            // @ts-ignore\n            onChange={props.applyChanges(\n              ref,\n              value,\n              SELECT_SINGLE_FACET,\n              index,\n            )}\n            checked={isSelected}\n            type=\"checkbox\"\n            value={value}\n            className={`SRC-hidden SRC-facet-checkboxes ${backgroundClass}`}\n          />\n        </label>,\n      )\n    },\n  )\n  // By default only show 5 facets unless the user has clicked a facet, in which case\n  // showAllFacets will be true.\n  const childrenView = showAllFacets ? children : children.slice(0, 5)\n  return (\n    // need a span so that we can have a ref attachable\n    <span ref={ref}>{childrenView}</span>\n  )\n}\n\ntype FacetsState = {\n  showAllFacets: boolean\n}\n\nclass Facets extends React.Component<QueryWrapperChildProps, FacetsState> {\n  constructor(props: QueryWrapperChildProps) {\n    super(props)\n    this.applyChanges = this.applyChanges.bind(this)\n    this.state = {\n      showAllFacets: false,\n    }\n    this.showAllFacets = this.showAllFacets.bind(this)\n    this.showButtons = this.showButtons.bind(this)\n  }\n  /**\n   * Display the view of the facets\n   *\n   * @returns\n   * @memberof Facets\n   */\n  public showFacetFilter() {\n    if (!this.props.data!.facets) {\n      throw Error(\n        'Error on query request, must include facets in partmask to show facets',\n      )\n    }\n    // Find the facetcolumn result according to the input filter\n    const facetColumnResult = this.props.data!.facets!.find(\n      el =>\n        el.columnName === this.props.facet && el.facetType === 'enumeration',\n    ) as FacetColumnResultValues\n    if (!facetColumnResult) {\n      throw Error('Error no matching facet found given specified facet')\n    }\n\n    return (\n      <CheckboxGroup\n        isAllFilterSelected={\n          this.props.isAllFilterSelectedForFacet![this.props.facet!]\n        }\n        showAllFacets={this.state.showAllFacets}\n        rgbIndex={this.props.rgbIndex!}\n        key={facetColumnResult.columnName}\n        facetColumnResult={facetColumnResult}\n        applyChanges={this.applyChanges}\n        isLoading={this.props.isLoading!}\n        lastFacetSelection={this.props.lastFacetSelection!}\n      />\n    )\n  }\n\n  /**\n   * Handle checkbox click event\n   */\n  public applyChanges = (\n    ref: React.RefObject<HTMLSpanElement>,\n    facetValue: string,\n    selector: string,\n    index: number,\n  ) => (event: React.MouseEvent<HTMLSpanElement>) => {\n    event.preventDefault()\n    if (!this.state.showAllFacets) {\n      this.setState({\n        showAllFacets: true,\n      })\n    }\n\n    const { facet = '', isAllFilterSelectedForFacet = {} } = this.props\n\n    const lastFacetSelection = {\n      facetValue,\n      selector,\n      columnName: facet,\n    } as FacetSelection\n    isAllFilterSelectedForFacet[facet] = selector === SELECT_ALL\n    this.props.updateParentState!({\n      lastFacetSelection,\n      isAllFilterSelectedForFacet,\n      chartSelectionIndex: index,\n    })\n\n    // read input and fetch data\n    const htmlCheckboxes = Array.from(\n      ref.current!.querySelectorAll('.SRC-facet-checkboxes'),\n    ) as HTMLInputElement[]\n    // queryRequest is a deep clone\n    const queryRequest: QueryBundleRequest = this.props.getLastQueryRequest!()\n    const { newQueryRequest } = readFacetValues({\n      htmlCheckboxes,\n      queryRequest,\n      selector,\n      facet,\n      value: facetValue,\n    })\n\n    queryRequest.query.offset = 0\n    this.props.executeQueryRequest!(newQueryRequest)\n  }\n\n  public showAllFacets(event: React.MouseEvent<HTMLButtonElement>) {\n    event.preventDefault()\n    this.setState({\n      showAllFacets: true,\n    })\n  }\n\n  public showButtons(\n    curFacetsLength: number,\n    ref: React.RefObject<HTMLDivElement>,\n  ) {\n    if (this.state.showAllFacets || curFacetsLength <= 5) {\n      // this is hidden if there are > 5 facets, wait for user to make\n      // an action for this to appear\n      return (\n        <button\n          className=\"SRC-primary-text-color SRC-facet-select-all SRC-no-text-decor\"\n          onClick={this.applyChanges(ref, '', SELECT_ALL, 0)}\n        >\n          Select All\n        </button>\n      )\n    }\n    return (\n      <button\n        id=\"showAllFacetsButton\"\n        className=\"SRC-primary-text-color SRC-no-text-decor\"\n        onClick={this.showAllFacets}\n      >\n        Show All ({curFacetsLength})\n      </button>\n    )\n  }\n\n  public render() {\n    if (!this.props.data) {\n      return <div />\n    }\n    const { data, facet, unitDescription, isLoading, showBarChart } = this.props\n    const { facets } = data\n    if (!facets) {\n      throw Error(\n        'Error on query request, must include facets in partmask to show facets',\n      )\n    }\n    const curFacetsIndex = facets.findIndex(\n      curFacet =>\n        curFacet.columnName === facet && curFacet.facetType === 'enumeration',\n    )\n    // cast is necessary because filter returns an array of arrays\n    const facetColumnResultValues = facets[\n      curFacetsIndex\n    ] as FacetColumnResultValues\n\n    if (!facetColumnResultValues) {\n      return <div />\n    }\n    const ref: React.RefObject<HTMLDivElement> = React.createRef()\n    return (\n      <div className=\"SRC-syn-border-spacing\">\n        {!showBarChart && (\n          <TotalQueryResults\n            data={data}\n            facet={facet!}\n            unitDescription={unitDescription!}\n            frontText={'Displaying'}\n            isLoading={isLoading!}\n          />\n        )}\n        <form>\n          <div ref={ref} className=\"SRC-marginFive form-group\">\n            {this.showFacetFilter()}\n            {this.showButtons(facetColumnResultValues.facetValues.length, ref)}\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport { Facets, CheckboxGroup }\n","import { SynapseConstants, SynapseClient } from '../utils/'\nimport * as React from 'react'\nimport {\n  QueryBundleRequest,\n  FacetColumnValuesRequest,\n} from '../utils/synapseTypes/'\n\nexport type QueryCountProps = {\n  sql: string\n  selectedFacets?: FacetColumnValuesRequest[]\n  entityId: string\n  name: string\n  token?: string\n}\n\ntype QueryCountState = {\n  storedSqlQueryCount: {}\n  // maps sql string to true/false, true if already made a request for this sql's query count\n  // false or undefined if not\n  isCalculatingQueryCountForSql: {}\n}\n\n/**\n * QueryCount shows a query count\n *\n * @export\n * @class QueryCount\n * @extends {React.Component<QueryCountProps, QueryCountState>}\n */\nexport default class QueryCount extends React.Component<\n  QueryCountProps,\n  QueryCountState\n> {\n  constructor(props: QueryCountProps) {\n    super(props)\n    this.state = {\n      storedSqlQueryCount: {},\n      isCalculatingQueryCountForSql: {},\n    }\n    this.calculateRowCount = this.calculateRowCount.bind(this)\n  }\n\n  componentDidMount() {\n    this.calculateRowCount()\n  }\n\n  componentDidUpdate() {\n    this.calculateRowCount()\n  }\n\n  calculateRowCount() {\n    const { sql, token, entityId, selectedFacets } = this.props\n    if (\n      this.state.isCalculatingQueryCountForSql[sql] ||\n      this.state.storedSqlQueryCount[sql]\n    ) {\n      // its either in progress or its already been calculated\n      return\n    }\n    const request: QueryBundleRequest = {\n      concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n      query: {\n        sql,\n        selectedFacets,\n      },\n      entityId,\n      partMask: SynapseConstants.BUNDLE_MASK_QUERY_COUNT,\n    }\n    const { isCalculatingQueryCountForSql, storedSqlQueryCount } = this.state\n    isCalculatingQueryCountForSql[sql] = true\n    this.setState({\n      isCalculatingQueryCountForSql,\n    })\n    SynapseClient.getQueryTableResults(request, token).then(data => {\n      storedSqlQueryCount[sql] = data!.queryCount\n      this.setState({\n        storedSqlQueryCount,\n      })\n    })\n  }\n\n  render() {\n    const { sql, name } = this.props\n    const count = this.state.storedSqlQueryCount[sql]\n    /* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString#Using_toLocaleString */\n    return (\n      <React.Fragment>\n        {name} ({count && count.toLocaleString()})\n      </React.Fragment>\n    )\n  }\n}\n","import { QueryBundleRequest } from '../synapseTypes/'\nimport { SynapseClient, SynapseConstants } from '..'\nimport { QueryResultBundle } from '../synapseTypes/'\nimport { cloneDeep } from 'lodash-es'\n\ntype PartialStateObject = {\n  hasMoreData: boolean\n  data: QueryResultBundle\n}\n\n/**\n * Grab the next page of data, pulling in 25 more rows.\n *\n * @param {*} queryRequest Query request as specified by\n *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n */\nexport const getNextPageOfData = async (\n  queryRequest: QueryBundleRequest,\n  data: QueryResultBundle,\n  token?: string,\n) => {\n  return await SynapseClient.getQueryTableResults(queryRequest, token)\n    .then((newData: QueryResultBundle) => {\n      const oldData: QueryResultBundle = cloneDeep(data)!\n      // push on the new data retrieved from the API call\n      const hasMoreData =\n        newData.queryResult.queryResults.rows.length ===\n        SynapseConstants.PAGE_SIZE\n      oldData.queryResult.queryResults.rows.push(\n        ...newData.queryResult.queryResults.rows,\n      )\n      const newState: PartialStateObject = {\n        hasMoreData,\n        data: oldData,\n      }\n      return newState\n    })\n    .catch(err => {\n      console.log('Failed to get data ', err)\n      return {} as PartialStateObject\n    })\n}\n","import * as React from 'react'\nimport { SynapseClient, SynapseConstants } from '../utils/'\nimport { getNextPageOfData } from '../utils/functions/queryUtils'\nimport {\n  AsynchronousJobStatus,\n  FacetColumnResultValues,\n  QueryBundleRequest,\n  QueryResultBundle,\n} from '../utils/synapseTypes/'\nimport { cloneDeep } from 'lodash-es'\n\nexport type QueryWrapperProps = {\n  initQueryRequest: QueryBundleRequest\n  rgbIndex?: number\n  token?: string\n  facet?: string\n  loadingScreen?: JSX.Element\n  unitDescription?: string\n  facetAliases?: {}\n  loadNow?: boolean\n  showBarChart?: boolean\n}\n\nexport type QueryWrapperState = {\n  /*\n    isAllFilterSelectedForFacet tracks whether for a particular\n     facet if the 'All' button has been selected, this tracks the\n     click event and syncs Facets.tsx and SynapseTable.tsx\n  */\n  isAllFilterSelectedForFacet: {}\n  data: QueryResultBundle | undefined\n  isLoadingNewData: boolean // occurs when props change\n  isLoading: boolean // occurs when state changes\n  lastQueryRequest: QueryBundleRequest\n  hasMoreData: boolean\n  lastFacetSelection: FacetSelection\n  chartSelectionIndex: number\n  asyncJobStatus?: AsynchronousJobStatus\n  facetAliases?: {}\n  loadNowStarted: boolean\n  initQueryRequest: QueryBundleRequest\n}\n\nexport type FacetSelection = {\n  columnName: string\n  facetValue: string\n  selector: string\n}\n\n// Since the component is an HOC we export the props passed down\nexport type QueryWrapperChildProps = {\n  isAllFilterSelectedForFacet?: {}\n  isLoading?: boolean\n  token?: string\n  entityId?: string\n  isLoadingNewData?: boolean\n  executeQueryRequest?: (param: QueryBundleRequest) => void\n  executeInitialQueryRequest?: () => void\n  getNextPageOfData?: (queryRequest: QueryBundleRequest) => void\n  getLastQueryRequest?: () => QueryBundleRequest\n  getInitQueryRequest?: () => QueryBundleRequest\n  data?: QueryResultBundle\n  facet?: string\n  updateParentState?: (param: any) => void\n  rgbIndex?: number\n  unitDescription?: string\n  facetAliases?: {}\n  lastFacetSelection?: FacetSelection\n  chartSelectionIndex?: number\n  asyncJobStatus?: AsynchronousJobStatus\n  showBarChart?: boolean\n  hasMoreData?: boolean\n}\n\n/**\n * Class wraps around any Synapse views that are dependent on a query bundle\n * Those classes then take in as props:\n *\n * @class QueryWrapper\n * @extends {React.Component}\n */\nexport default class QueryWrapper extends React.Component<\n  QueryWrapperProps,\n  QueryWrapperState\n> {\n  public static defaultProps = {\n    token: '',\n  }\n\n  public static initialState = {\n    data: undefined,\n    isLoading: true,\n    isLoadingNewData: true,\n    lastQueryRequest: {} as QueryBundleRequest,\n    hasMoreData: true,\n    lastFacetSelection: {\n      columnName: '',\n      facetValue: '',\n      selector: '',\n    },\n    chartSelectionIndex: 0,\n    isAllFilterSelectedForFacet: {},\n    loadNowStarted: false,\n  } as QueryWrapperState\n\n  constructor(props: QueryWrapperProps) {\n    super(props)\n    this.executeInitialQueryRequest = this.executeInitialQueryRequest.bind(this)\n    this.executeQueryRequest = this.executeQueryRequest.bind(this)\n    this.getLastQueryRequest = this.getLastQueryRequest.bind(this)\n    this.getNextPageOfData = this.getNextPageOfData.bind(this)\n    this.updateParentState = this.updateParentState.bind(this)\n    this.getInitQueryRequest = this.getInitQueryRequest.bind(this)\n    this.state = QueryWrapper.initialState\n  }\n\n  /**\n   * Compute default query request\n   *\n   * @memberof QueryWrapper\n   */\n  public componentDidMount() {\n    const { loadNow = true } = this.props\n    if (loadNow) {\n      this.executeInitialQueryRequest()\n    }\n  }\n\n  /**\n   * @memberof QueryWrapper\n   */\n  public componentDidUpdate(prevProps: QueryWrapperProps) {\n    /**\n     *  If component updates and the token has changed (they signed in) then the data should be pulled in. Or if the\n     *  sql query has changed of the component then perform an update.\n     */\n\n    const { loadNow = true } = this.props\n    if (loadNow && !this.state.loadNowStarted) {\n      this.executeInitialQueryRequest()\n    } else if (loadNow && this.props.token && !prevProps.token) {\n      // if loadNow is true and they've logged in with a token that is not undefined, null, or an empty string when it was before\n      this.executeQueryRequest(this.getLastQueryRequest())\n    } else if (\n      prevProps.initQueryRequest.query.sql !==\n      this.props.initQueryRequest!.query.sql\n    ) {\n      this.executeInitialQueryRequest()\n    }\n  }\n\n  /**\n   * Pass down a deep clone (so no side affects on the child's part) of the\n   * last query request made\n   *\n   * @returns\n   * @memberof QueryWrapper\n   */\n  public getLastQueryRequest(): QueryBundleRequest {\n    return cloneDeep(this.state.lastQueryRequest)\n  }\n\n  /**\n   * Pass down a deep clone (so no side affects on the child's part) of the\n   * first query request made\n   *\n   * @returns\n   * @memberof QueryWrapper\n   */\n  public getInitQueryRequest(): QueryBundleRequest {\n    return cloneDeep(this.props.initQueryRequest)\n  }\n\n  /**\n   * Execute the given query\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public executeQueryRequest(queryRequest: QueryBundleRequest) {\n    this.setState({\n      isLoading: true,\n    })\n    return SynapseClient.getQueryTableResults(\n      queryRequest,\n      this.props.token,\n      this.updateParentState,\n    )\n      .then((data: QueryResultBundle) => {\n        const hasMoreData =\n          data.queryResult.queryResults.rows.length ===\n          SynapseConstants.PAGE_SIZE\n        const newState: any = {\n          hasMoreData,\n          data,\n          isLoading: false,\n          lastQueryRequest: cloneDeep(queryRequest),\n          asyncJobStatus: undefined,\n        }\n        this.setState(newState)\n      })\n      .catch((err: string) => {\n        console.log('Failed to get data ', err)\n      })\n  }\n\n  /**\n   * Grab the next page of data, pulling in 25 more rows.\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public async getNextPageOfData(queryRequest: QueryBundleRequest) {\n    this.setState({\n      isLoading: true,\n    })\n\n    await getNextPageOfData(\n      queryRequest,\n      this.state.data!,\n      this.props.token,\n    ).then(newState => {\n      this.setState({\n        ...newState,\n        isLoading: false,\n        lastQueryRequest: cloneDeep(queryRequest),\n      })\n    })\n  }\n\n  /**\n   * Execute the initial query passed into the component\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public executeInitialQueryRequest() {\n    this.setState({\n      isLoading: true,\n      isLoadingNewData: true,\n      chartSelectionIndex: 0,\n      loadNowStarted: true,\n    })\n    SynapseClient.getQueryTableResults(\n      this.props.initQueryRequest,\n      this.props.token,\n      this.updateParentState,\n    )\n      .then((data: QueryResultBundle) => {\n        const lastQueryRequest: QueryBundleRequest = cloneDeep(\n          this.props.initQueryRequest!,\n        )\n        const hasMoreData =\n          data.queryResult.queryResults.rows.length ===\n          SynapseConstants.PAGE_SIZE\n        const isAllFilterSelectedForFacet = cloneDeep(\n          this.state.isAllFilterSelectedForFacet,\n        )\n        let { chartSelectionIndex } = this.state\n        if (this.props.facet) {\n          if (!data.facets) {\n            throw Error(\n              'Error on query request, must include facets in partmask to show facets',\n            )\n          }\n          const enumFacets = data.facets.filter(\n            el => el.facetType === 'enumeration',\n          ) as FacetColumnResultValues[]\n          enumFacets.forEach(el => {\n            // isAll is only true iff there are no facets selected or all elements are selected\n            const { facetValues } = el\n            const isAllFalse = facetValues.every(facet => !facet.isSelected)\n            const isAllTrue = facetValues.every(facet => facet.isSelected)\n            const isByDefaultSelected = isAllFalse || isAllTrue\n            isAllFilterSelectedForFacet[el.columnName] = isByDefaultSelected\n            if (el.columnName === this.props.facet && !isAllFalse) {\n              // Note - this picks the first selected facet\n              chartSelectionIndex = facetValues\n                .sort((a, b) => b.count - a.count)\n                .findIndex(facet => facet.isSelected)\n            }\n          })\n        }\n        const newState = {\n          isAllFilterSelectedForFacet,\n          hasMoreData,\n          data,\n          chartSelectionIndex,\n          lastQueryRequest,\n          isLoading: false,\n          isLoadingNewData: false,\n          asyncJobStatus: undefined,\n        }\n        this.setState(newState)\n      })\n      .catch(err => {\n        console.log('Failed to get data ', err)\n      })\n  }\n\n  public updateParentState(update: QueryWrapperState) {\n    this.setState(update)\n  }\n\n  /**\n   * Render the children without any formatting\n   */\n  public render() {\n    const { isLoading } = this.state\n    const { facetAliases = {} } = this.props\n    // inject props in children of this component\n    const childrenWithProps = React.Children.map(\n      this.props.children,\n      (child: any) => {\n        const queryWrapperChildProps: QueryWrapperChildProps = {\n          facetAliases,\n          isAllFilterSelectedForFacet: this.state.isAllFilterSelectedForFacet,\n          data: this.state.data,\n          token: this.props.token,\n          executeInitialQueryRequest: this.executeInitialQueryRequest,\n          executeQueryRequest: this.executeQueryRequest,\n          getLastQueryRequest: this.getLastQueryRequest,\n          getNextPageOfData: this.getNextPageOfData,\n          isLoading: this.state.isLoading,\n          isLoadingNewData: this.state.isLoadingNewData,\n          facet: this.props.facet,\n          rgbIndex: this.props.rgbIndex,\n          unitDescription: this.props.unitDescription,\n          updateParentState: this.updateParentState,\n          hasMoreData: this.state.hasMoreData,\n          lastFacetSelection: this.state.lastFacetSelection,\n          chartSelectionIndex: this.state.chartSelectionIndex,\n          getInitQueryRequest: this.getInitQueryRequest,\n          asyncJobStatus: this.state.asyncJobStatus,\n          showBarChart: this.props.showBarChart,\n        }\n        return React.cloneElement(child, queryWrapperChildProps)\n      },\n    )\n\n    const loadingCusrorClass = isLoading ? 'SRC-logo-cursor' : ''\n    return (\n      <div className={`SRC-wrapper ${loadingCusrorClass}`}>\n        {childrenWithProps}\n      </div>\n    )\n  }\n}\n","export const unCamelCase = (str: string | undefined): string | undefined => {\n  // https://stackoverflow.com/questions/4149276/how-to-convert-camelcase-to-camel-case\n  if (!str) {\n    return str\n  }\n  return (\n    str\n      // insert a space between lower & upper\n      .replace(/([a-z])([A-Z])/g, '$1 $2')\n      // space before last upper in a sequence followed by lower\n      .replace(/\\b([A-Z]+)([A-Z])([a-z])/, '$1 $2$3')\n      // uppercase the first character\n      .replace(/^./, (str: string) => {\n        return str.toUpperCase()\n      })\n  )\n}\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { faAngleLeft, faAngleRight } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as React from 'react'\nimport ReactMeasure from 'react-measure'\nimport ReactTooltip from 'react-tooltip'\nimport { getColorPallette } from './ColorGradient'\nimport { QueryWrapperChildProps } from './QueryWrapper'\nimport { FacetColumnResultValueCount } from '../utils/synapseTypes/'\nimport { getIsValueSelected } from '../utils/functions/facetUtils'\nimport { unCamelCase } from '../utils/functions/unCamelCase'\nlibrary.add(faAngleLeft)\nlibrary.add(faAngleRight)\n\nexport const PREVIOUS_ITEM_CLICK = 'left click'\nexport const NEXT_CLICK = 'right click'\n\ntype Rect = {\n  height: number\n  width: number\n  top: number\n  left: number\n  right: number\n  bottom: number\n}\n\ntype MeasureRect = {\n  bounds: Rect\n}\n\nexport type StackedBarChartState = {\n  selectedFacets: {}\n  dimensions: MeasureRect\n}\n\nexport type StackedBarChartProps = {\n  loadingScreen: JSX.Element\n  link?: string\n  linkText?: string\n}\n\ntype Info = {\n  value: string\n  count: number\n  index: number\n}\n\ntype InternalProps = StackedBarChartProps & QueryWrapperChildProps\n/**\n * Make a simple stacked bar chart\n *\n * @class StackedBarChart\n * @extends {React.Component}\n */\nexport default class StackedBarChart extends React.Component<\n  InternalProps,\n  StackedBarChartState\n> {\n  constructor(props: InternalProps) {\n    super(props)\n    this.handleHover = this.handleHover.bind(this)\n    this.handleExit = this.handleExit.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleArrowClick = this.handleArrowClick.bind(this)\n    this.getTextForChartSelection = this.getTextForChartSelection.bind(this)\n    this.onMeasureResize = this.onMeasureResize.bind(this)\n    // the text currently under the cursor\n    this.state = {\n      // the dimensions of the bar chart itself\n      dimensions: {\n        bounds: { height: 1, width: 1, top: 0, left: 0, right: 0, bottom: 0 },\n      },\n      // the text of the current slice\n      // the count of this facet value occurence\n      selectedFacets: {},\n    }\n    this.extractPropsData = this.extractPropsData.bind(this)\n  }\n\n  /**\n   * Updates the hover text and update the view\n   *\n   * @memberof StackedBarChart\n   */\n  public handleHover(event: React.MouseEvent<SVGRectElement>) {\n    // add box shadow\n    event.currentTarget.style.boxShadow = '25px 20px'\n  }\n\n  /**\n   * Update the hover text and the view\n   *\n   * @param {*} event\n   * @memberof StackedBarChart\n   */\n  public handleExit(event: React.MouseEvent<SVGRectElement>) {\n    // remove box shadow\n    event.currentTarget.style.boxShadow = ''\n  }\n\n  /**\n   * Handle column click event\n   */\n  public handleClick = (dict: Info) => (\n    _event: React.MouseEvent<SVGElement>,\n  ) => {\n    // https://medium.freecodecamp.org/reactjs-pass-parameters-to-event-handlers-ca1f5c422b9\n    this.props.updateParentState!({ chartSelectionIndex: dict.index })\n  }\n\n  public handleArrowClick = (direction: string) => (\n    _event: React.MouseEvent,\n  ) => {\n    let { chartSelectionIndex = 0 } = this.props\n    let dict: any = this.extractPropsData(this.props.data)\n    const length = Object.keys(dict).length\n    if (direction === PREVIOUS_ITEM_CLICK) {\n      chartSelectionIndex -= 1\n      // if its at zero then we want to wrap around to the end\n      chartSelectionIndex =\n        chartSelectionIndex < 0 ? length - 1 : chartSelectionIndex\n    } else {\n      chartSelectionIndex += 1\n    }\n    chartSelectionIndex = chartSelectionIndex % length\n\n    dict = dict[chartSelectionIndex]\n    this.props.updateParentState!({ chartSelectionIndex })\n    // return is only for testing purposes\n    return chartSelectionIndex\n  }\n\n  public getTextForChartSelection(xData: any) {\n    const { chartSelectionIndex = 0 } = this.props\n    const { facetAliases = {}, facet } = this.props\n    const facetValueDisplay =\n      xData[chartSelectionIndex] && xData[chartSelectionIndex].value\n    const filterDisplay = facetAliases[facet!] || unCamelCase(facet)\n    return (\n      <span>\n        <span className=\"SRC-text-title SRC-filter-display\">\n          {filterDisplay}\n        </span>\n        :\n        <span className=\"SRC-facet-view SRC-text-title\">\n          {facetValueDisplay === 'org.sagebionetworks.UNDEFINED_NULL_NOTSET'\n            ? 'unannotated'\n            : facetValueDisplay}\n        </span>\n      </span>\n    )\n  }\n\n  public getFileCount(xData: any) {\n    const { chartSelectionIndex = 1 } = this.props\n    return xData[chartSelectionIndex] && xData[chartSelectionIndex].count\n  }\n\n  public render() {\n    const {\n      data,\n      isLoadingNewData,\n      loadingScreen,\n      rgbIndex,\n      facet = '',\n      unitDescription,\n      isLoading,\n      lastFacetSelection,\n      isAllFilterSelectedForFacet,\n      chartSelectionIndex,\n      asyncJobStatus,\n    } = this.props\n    // while loading\n    if (isLoadingNewData) {\n      return (\n        <div className=\"SRC-loadingContainer SRC-centerContentColumn\">\n          {/*\n            check loading screen is not undefined or null and show\n            it if so\n          */}\n          {!!loadingScreen && loadingScreen}\n          <div>{asyncJobStatus && asyncJobStatus.progressMessage}</div>\n        </div>\n      )\n    }\n    const xData = this.extractPropsData(data)\n    let total: number = 0\n    const width: number = this.state.dimensions.bounds!.width\n    // sum up the counts of data\n    for (const key in xData) {\n      if (xData.hasOwnProperty(key)) {\n        total += xData[key].count\n      }\n    }\n    const { colorPalette, textColors } = getColorPallette(\n      rgbIndex!,\n      xData.length,\n    )\n    const originalColor = colorPalette[0]\n\n    return (\n      <React.Fragment>\n        {/* TODO: Refactor the chart into its own component */}\n        <div className=\"SRC-bar-border SRC-bar-marginTop SRC-bar-border-top\">\n          <ReactMeasure\n            bounds={true}\n            onResize={(contentRect: any) => {\n              this.setState({ dimensions: contentRect })\n            }}\n          >\n            {({ measureRef }) => (\n              <div className=\"SRC-flex\" ref={measureRef}>\n                {xData.map((obj: FacetColumnResultValueCount, index) => {\n                  const textColor: string = textColors[index]\n                  const rgbColor: string = colorPalette[index]\n                  let rectStyle: any\n                  const isValueSelected = isAllFilterSelectedForFacet![facet]\n                    ? true\n                    : getIsValueSelected({\n                        isLoading,\n                        lastFacetSelection,\n                        columnName: facet,\n                        curFacetSelection: obj,\n                      })\n                  if (isValueSelected) {\n                    rectStyle = {\n                      fill: rgbColor,\n                    }\n                  } else {\n                    rectStyle = {\n                      fill: '#C4C4C4',\n                    }\n                  }\n                  const svgHeight = 80\n                  const svgWidth = (obj.count / total) * width\n                  const style: any = {}\n                  if (chartSelectionIndex === index) {\n                    style.filter = 'drop-shadow(5px 5px 5px rgba(0,0,0,0.5))'\n                  }\n                  const label: string = `${facet}: ${obj.value}  - ${obj.count} ${unitDescription}`\n                  // there was one bug where a new line character was in the obj.value, making data-for\n                  // break because its a special character, below we remove that\n                  const tooltipId = obj.value.replace(/(\\r\\n|\\n|\\r)/gm, '')\n                  // basic heuristic to calculate the number of pixels needed to show the value on the bar chart\n                  const value = obj.count as number\n                  const numCharsInValue = value.toString().length * 4.5 // represents width of a character\n\n                  return (\n                    // each svg represents one of the bars\n                    // will need to change this to be responsive\n                    <React.Fragment key={label}>\n                      <span data-for={tooltipId} data-tip={label}>\n                        <svg\n                          className=\"SRC-hoverBox\"\n                          height={svgHeight + 15}\n                          width={svgWidth}\n                          style={style}\n                          onClick={this.handleClick({ ...obj, index })}\n                        >\n                          <rect\n                            onMouseEnter={this.handleHover}\n                            onMouseLeave={this.handleExit}\n                            height={svgHeight}\n                            width={svgWidth}\n                            className=\"SRC-chart-rect-style\"\n                            // can't remove inline style due to dynamic fill\n                            style={rectStyle}\n                          />\n                          {index < 3 && svgWidth > numCharsInValue && (\n                            <text\n                              textAnchor=\"middle\"\n                              className=\"SRC-text-title\"\n                              fontFamily={'bold sans-serif'}\n                              fill={textColor}\n                              x={'50%'}\n                              y={'50%'}\n                            >\n                              {obj.count}\n                            </text>\n                          )}\n                          {chartSelectionIndex === index && (\n                            <text\n                              fill={originalColor}\n                              x={0}\n                              y={svgHeight + 15}\n                              className=\"SRC-text-shadow SRC-text-large\"\n                            >\n                              {'\\u25CF'}\n                            </text>\n                          )}\n                        </svg>\n                      </span>\n                      <ReactTooltip delayShow={1000} id={tooltipId} />\n                    </React.Fragment>\n                  )\n                })}\n              </div>\n            )}\n          </ReactMeasure>\n        </div>\n        <div className=\"SRC-bar-border SRC-bar-border-bottom\">\n          <p className=\"SRC-noMargin SRC-padding-chart SRC-text-title\">\n            <strong>{this.getTextForChartSelection(xData)}</strong>\n          </p>\n          <p\n            id=\"fileCount\"\n            className=\"SRC-noMargin SRC-padding-chart SRC-text-chart\"\n          >\n            {this.getFileCount(xData)} {unitDescription}\n          </p>\n          {this.props.link && (\n            <div className=\"SRC-chart-link\">\n              <a href={`/${this.props.link}`}> {this.props.linkText} </a>\n            </div>\n          )}\n        </div>\n        <div className=\"SRC-chart-nav SRC-center-text\">\n          <button\n            className=\"SRC-chart-btn SRC-floatRight\"\n            type=\"button\"\n            onClick={this.handleArrowClick(NEXT_CLICK)}\n          >\n            <FontAwesomeIcon\n              style={{ fontSize: '11px' }}\n              className=\"SRC-primary-text-color\"\n              icon=\"angle-right\"\n            />\n          </button>\n          <button\n            className=\"SRC-chart-btn SRC-floatRight\"\n            type=\"button\"\n            onClick={this.handleArrowClick(PREVIOUS_ITEM_CLICK)}\n          >\n            <FontAwesomeIcon\n              style={{ fontSize: '11px' }}\n              className=\"SRC-primary-text-color\"\n              icon=\"angle-left\"\n            />\n          </button>\n        </div>\n      </React.Fragment>\n    )\n  }\n  public extractPropsData(data: any) {\n    const xData: any[] = []\n    const { facet } = this.props\n    // pull out the data corresponding to the filter in question\n    data.facets.forEach((item: any) => {\n      if (item.facetType === 'enumeration' && item.columnName === facet) {\n        item.facetValues.forEach((facetValue: any) => {\n          if (item.columnName) {\n            xData.push({ columnName: item.columnName, ...facetValue })\n          }\n        })\n      }\n    })\n    // sort the data so that the largest bars are at the front\n    xData.sort((a, b) => {\n      return b.count - a.count\n    })\n    return xData\n  }\n\n  public onMeasureResize(contentRect: any) {\n    this.setState({ dimensions: contentRect })\n  }\n}\n","import React, { FunctionComponent } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport ReactTooltip from 'react-tooltip'\nimport { TOOLTIP_DELAY_SHOW } from '../table/SynapseTableConstants'\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core'\nimport { Dropdown } from 'react-bootstrap'\n\ntype CustomImageProps = {\n  svgImg: string\n  altText: string\n}\n\nexport type TooltipVisualProps = {\n  delayShow: number\n  place: 'top' | 'right' | 'bottom' | 'left'\n  type: 'dark' | 'success' | 'warning' | 'error' | 'info' | 'light'\n  effect: 'float' | 'solid'\n}\n\n/*****************************************\n *  The control needs to either have a child element or needs to have an image supplied\n *  If the child element is supplied the control renders the child applying additional proiperties\n *  If the image is supplied the control renders a clickable image\n *  If there are no children and callback Fn is not supplied it is assumed to be a a dropdown trigger\n */\n\ntype ElementWithTooltipProps = {\n  image?: IconDefinition | CustomImageProps\n  imageColor?: string\n  idForToolTip: string\n  tooltipText: string\n  callbackFn?: Function\n  className?: string\n  tooltipVisualProps?: TooltipVisualProps\n}\n\nfunction getTooltipTriggerContents(\n  image: IconDefinition | CustomImageProps,\n  imageColor?: string,\n): JSX.Element {\n  if ('svgImg' in image) {\n    return <img src={image.svgImg} alt={image.altText} />\n  } else {\n    return (\n      <FontAwesomeIcon size=\"1x\" color={imageColor || 'white'} icon={image} />\n    )\n  }\n}\n\nexport const ElementWithTooltip: FunctionComponent<ElementWithTooltipProps> = ({\n  image,\n  idForToolTip,\n  callbackFn,\n  tooltipText,\n  className,\n  imageColor,\n  tooltipVisualProps = { place: 'top', type: 'dark', effect: 'solid' },\n  children,\n}) => {\n  const { place, type, effect } = tooltipVisualProps\n  const tooltipTriggerContents = image\n    ? getTooltipTriggerContents(image, imageColor)\n    : children || <></>\n\n  //if there is no callbackFn - assume it's a toggle\n\n  let tooltipTrigger: JSX.Element\n  if (!children) {\n    tooltipTrigger = callbackFn ? (\n      <button\n        style={{ padding: '0 5px 0 5px' }}\n        tabIndex={0}\n        id={idForToolTip}\n        data-for={idForToolTip}\n        data-tip={tooltipText}\n        className={`SRC-hand-cursor ${\n          image ? 'SRC-primary-background-color-hover' : ''\n        } ${className}`}\n        onKeyPress={() => callbackFn()}\n        onClick={() => callbackFn()}\n        aria-label={tooltipText}\n      >\n        {tooltipTriggerContents}\n      </button>\n    ) : (\n      <Dropdown.Toggle\n        data-for={idForToolTip}\n        data-tip={tooltipText}\n        id={idForToolTip}\n        variant={'light'}\n      >\n        {tooltipTriggerContents}\n      </Dropdown.Toggle>\n    )\n  } else {\n    const outerChild = children as JSX.Element\n    tooltipTrigger = React.cloneElement(outerChild, {\n      className: `${outerChild.props.className} SRC-hand-cursor`,\n      id: idForToolTip,\n      ['data-for']: idForToolTip,\n      ['data-tip']: tooltipText,\n    })\n  }\n\n  return (\n    <>\n      {tooltipTrigger}\n      <ReactTooltip\n        delayShow={TOOLTIP_DELAY_SHOW}\n        place={place}\n        type={type}\n        effect={effect}\n        id={idForToolTip}\n      />\n    </>\n  )\n}\n","import { SynapseClient } from '..'\nimport { UserProfile } from '../synapseTypes/'\n\n/*\n  Utility functions for UserCards\n*/\n\nfunction getUserProfileWithProfilePicAttached(\n  principalIds: string[],\n  token?: string,\n) {\n  return SynapseClient.getUserProfiles(principalIds).then(data => {\n    // people will either have a profile pic file handle id\n    // or they won't. Have to break this down into two groups.\n    const withProfilePic = data.list.filter((value: any) => {\n      return value.profilePicureFileHandleId !== undefined\n    })\n    if (withProfilePic.length === 0) {\n      return data\n    }\n    const fileHandleAssociationList = withProfilePic.map(value => {\n      return {\n        associateObjectId: value.ownerId,\n        associateObjectType: 'UserProfileAttachment',\n        fileHandleId: value.profilePicureFileHandleId,\n      }\n    })\n    const request: any = {\n      includeFileHandles: false,\n      includePreSignedURLs: true,\n      includePreviewPreSignedURLs: false,\n      requestedFiles: fileHandleAssociationList,\n    }\n    return SynapseClient.getFiles(request, token)\n      .then(fileHandleList => {\n        // we retrieve all the persons with profile pic file handles\n        // so we next loop through them, find the original person in the data.list\n        // and add a field with their pre-signed url\n        fileHandleList.requestedFiles.forEach(fileHandle => {\n          const matchingPersonIndex = data.list.findIndex(el => {\n            return fileHandle.fileHandleId === el.profilePicureFileHandleId\n          })\n          data.list[matchingPersonIndex].clientPreSignedURL =\n            fileHandle.preSignedURL\n        })\n        return Promise.resolve(data)\n      })\n      .catch(err => {\n        throw Error(`Err on getting user data ${err}`)\n      })\n  })\n}\n\ntype UserProfileAndImg = {\n  userProfile: UserProfile\n  preSignedURL: string\n}\nfunction getUserProfileWithProfilePic(\n  ownerId: string,\n  token?: string,\n): Promise<UserProfileAndImg> {\n  return SynapseClient.getUserProfileById(token, ownerId).then(\n    (userProfile: UserProfile) => {\n      // people will either have a profile pic file handle id\n      // or they won't. Have to break this down into two groups.\n      if (!userProfile.profilePicureFileHandleId) {\n        return Promise.resolve({ userProfile }) as any\n      }\n\n      const fileHandleAssociationList = [\n        {\n          associateObjectId: ownerId,\n          associateObjectType: 'UserProfileAttachment',\n          fileHandleId: userProfile.profilePicureFileHandleId,\n        },\n      ]\n\n      const request: any = {\n        includeFileHandles: false,\n        includePreSignedURLs: true,\n        includePreviewPreSignedURLs: false,\n        requestedFiles: fileHandleAssociationList,\n      }\n\n      return SynapseClient.getFiles(request, token)\n        .then(fileHandleList => {\n          // we retrieve all the persons with profile pic file handles\n          // so we next loop through them, find the original person in the data.list\n          // and add a field with their pre-signed url\n          const firstElement = fileHandleList.requestedFiles[0]\n          return Promise.resolve({\n            userProfile,\n            preSignedURL: firstElement.preSignedURL,\n          })\n        })\n        .catch(err => {\n          console.log({ err })\n        })\n    },\n  )\n}\n\nconst COLORS: string[] = [\n  'chocolate',\n  'black',\n  'firebrick',\n  'maroon',\n  'olive',\n  'green',\n  'forestgreen',\n  'darkturquoise',\n  'teal',\n  'blue',\n  'navy',\n  'darkmagenta',\n  'purple',\n  'blue',\n  'orangered',\n  'blueviolet',\n]\n\nconst hash = (userName: string) => {\n  const val = userName\n    .split('')\n    .reduce(\n      (prevHash, currVal) =>\n        ((prevHash << 5) - prevHash + currVal.charCodeAt(0)) | 0,\n      0,\n    )\n  return Math.abs(val)\n}\n\nconst getColor = (userName: string) => {\n  const hashedUserName = hash(userName)\n  return COLORS[hashedUserName % COLORS.length]\n}\n\nexport {\n  getUserProfileWithProfilePicAttached,\n  getColor,\n  getUserProfileWithProfilePic,\n}\nexport default {\n  getUserProfileWithProfilePicAttached,\n  getColor,\n  getUserProfileWithProfilePic,\n}\n","import * as React from 'react'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faLongArrowAltUp,\n  faLongArrowAltDown,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { DOI_REGEX } from '../../../containers/GenericCard'\nlibrary.add(faLongArrowAltUp)\nlibrary.add(faLongArrowAltDown)\n\ntype State = {\n  isShowMoreOn: boolean\n  isDesktop: boolean\n}\n\ntype CardFooterProps = {\n  values: any[]\n  isHeader: boolean\n  secondaryLabelLimit?: number\n}\n\n// regex to see if string is url - https://stackoverflow.com/a/3809435\nconst URL_REGEX = /[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)?/gi\n\nclass CardFooter extends React.Component<CardFooterProps, State> {\n  constructor(props: CardFooterProps) {\n    super(props)\n    this.state = {\n      isShowMoreOn: false,\n      isDesktop: false,\n    }\n    this.toggleShowMore = this.toggleShowMore.bind(this)\n    this.updatePredicate = this.updatePredicate.bind(this)\n  }\n\n  toggleShowMore() {\n    this.setState({\n      isShowMoreOn: !this.state.isShowMoreOn,\n    })\n  }\n\n  componentDidMount() {\n    this.updatePredicate()\n    window.addEventListener('resize', this.updatePredicate)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updatePredicate)\n  }\n\n  updatePredicate() {\n    this.setState({ isDesktop: window.innerWidth > 600 })\n  }\n\n  renderRowValue = (columnName: string, value: string) => {\n    let textColorClass = this.props.isHeader ? 'SRC-lightLink' : ''\n    if (!value.match) {\n      // value can sometimes be a react element, so it doesn't have a .match function, interestingly I didn't\n      // see typeof return 'object' for that case which would be a better check.\n      return value\n    }\n    if (value.match(DOI_REGEX)) {\n      return (\n        <a\n          className={textColorClass}\n          data-search-handle={columnName}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={`https://dx.doi.org/${value}`}\n        >\n          {value}\n        </a>\n      )\n    } else if (value.match(URL_REGEX)) {\n      return (\n        <a\n          className={textColorClass}\n          data-search-handle={columnName}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={value}\n        >\n          {value}\n        </a>\n      )\n    }\n    return value\n  }\n\n  renderRows = (values: string[][], limit: number, isDesktop: boolean) => {\n    return values.map((kv, index) => {\n      const hideClass = index >= limit ? 'SRC-hidden' : ''\n      const columnName = kv[0]\n      const value = this.renderRowValue(columnName, kv[1])\n      if (isDesktop) {\n        return (\n          <tr className={'SRC-cardRowDesktop ' + hideClass} key={index}>\n            <td className={'SRC-verticalAlignTop SRC-row-label'}>\n              {columnName}\n            </td>\n            <td\n              data-search-handle={columnName}\n              className={'SRC-row-data SRC-limitMaxWidth '}\n            >\n              {value}\n            </td>\n          </tr>\n        )\n      }\n      return (\n        <React.Fragment key={index}>\n          <tr className={'SRC-cardRowMobile ' + hideClass}>\n            <td className={'SRC-verticalAlignTop SRC-row-label'}>\n              {columnName}\n            </td>\n          </tr>\n          <tr className={'SRC-cardRowMobile ' + hideClass}>\n            <td\n              data-search-handle={columnName}\n              className=\"SRC-row-data SRC-limitMaxWidth\"\n            >\n              {value}\n            </td>\n          </tr>\n        </React.Fragment>\n      )\n    })\n  }\n\n  render() {\n    const { values, secondaryLabelLimit = 3 } = this.props\n    const { isShowMoreOn, isDesktop } = this.state\n    let valuesFiltered = values.filter(el => el[1])\n    const hasMoreValuesThanLimit = valuesFiltered.length > secondaryLabelLimit\n    const limit =\n      !hasMoreValuesThanLimit || isShowMoreOn ? Infinity : secondaryLabelLimit\n    return (\n      <div className=\"SRC-cardMetadata\">\n        <table>\n          <tbody>\n            {this.renderRows(valuesFiltered, limit, isDesktop)}\n            {hasMoreValuesThanLimit && (\n              <tr className=\"SRC-cardRow\">\n                <td>\n                  <button\n                    style={{ textAlign: 'left', margin: 0, padding: 0 }}\n                    className=\"SRC-primary-text-color SRC-basicButton\"\n                    onClick={this.toggleShowMore}\n                  >\n                    Show {isShowMoreOn ? 'Less' : 'More'}\n                    <FontAwesomeIcon\n                      style={{ marginLeft: '5px' }}\n                      icon={\n                        isShowMoreOn\n                          ? 'long-arrow-alt-up'\n                          : 'long-arrow-alt-down'\n                      }\n                    />\n                  </button>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\nexport default CardFooter\n","import * as React from 'react'\n\ntype ChipContainerProps = {\n  chips: any[]\n}\n\nconst ChipContainer: React.SFC<ChipContainerProps> = ({ chips }) => {\n  const chipsFormatted = chips.map((el, index) => {\n    if (!el) {\n      return false\n    }\n    return <span key={index}> {el}</span>\n  })\n  return <React.Fragment>{chipsFormatted}</React.Fragment>\n}\nexport default ChipContainer\n","import * as React from 'react'\nimport {\n  DATASET,\n  FUNDER,\n  PUBLICATION,\n  STUDY_ACTIVE,\n  STUDY_COMPLETE,\n  TOOL,\n  STUDY,\n  EXPERIMENTAL,\n  COMPUTATIONAL,\n  CLINICAL,\n  PROJECT,\n} from '../../../utils/SynapseConstants'\n\nimport Data2Svg from '../../../assets/icons/Data2.svg'\nimport studyActiveSvg from '../../../assets/icons/study-active.svg'\nimport studyCompleteSvg from '../../../assets/icons/study-complete.svg'\nimport DNA_TwoSvg from '../../../assets/icons/DNA_Two.svg'\n\nimport {\n  Project,\n  Publication,\n  Study,\n  ToolClinical,\n  ToolComputational,\n  ToolExperimental,\n} from '../../../assets/themed_icons'\n\nimport { KeyValue } from '../../../utils/functions/sqlFunctions'\n\ntype IconProps = {\n  type: string\n  iconOptions?: KeyValue\n  value?: string\n  isHeader?: boolean\n}\n\nconst defaultIcons = {\n  [DATASET]: Data2Svg,\n  [FUNDER]: Data2Svg,\n  [TOOL]: DNA_TwoSvg,\n  [STUDY_ACTIVE]: studyActiveSvg,\n  [STUDY_COMPLETE]: studyCompleteSvg,\n  // new icons\n  [PUBLICATION]: Publication,\n  [STUDY]: Study,\n  [EXPERIMENTAL]: ToolExperimental,\n  [COMPUTATIONAL]: ToolComputational,\n  [CLINICAL]: ToolClinical,\n  [PROJECT]: Project,\n}\nconst Icon: React.FunctionComponent<IconProps> = ({\n  type,\n  value = '',\n  iconOptions,\n}) => {\n  const iconSet = { ...defaultIcons, ...iconOptions }\n  // see if the value has a corresponding icon, e.g. 'Active' in a studies table\n  // or if the type of card has a corresponding icon, e.g. 'Publication'\n  const Icon = iconSet[value] || iconSet[type]\n  // TODO: get rid of dataset icon class, none of the icons should be special cased\n  const datasetIconClass =\n    value === DATASET || type === DATASET ? 'SRC-datasetIcon' : ''\n  if (typeof Icon == 'function') {\n    return <Icon />\n  }\n  return <img src={Icon} className={`iconImg ${datasetIconClass}`} />\n}\nexport default Icon\n","import * as React from 'react'\n\nexport const Publication = () => (\n  <svg width=\"61\" height=\"76\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M60.047 0H.953C.427 0 0 .387 0 .864v74.272c0 .477.427.864.953.864h59.094c.526 0 .953-.387.953-.864V.864C61 .387 60.573 0 60.047 0zm-.953 74.273H1.906V1.727h57.188v72.546z\"\n      fill=\"#DCDCDC\"\n      className=\"SRC-header-only-fill\"\n    />\n    <path\n      d=\"M11.438 44.91c1.51 0 2.802-.802 3.42-1.955l8.988 1.629c-.006.108-.018.215-.018.325 0 1.666.745 3.175 1.948 4.268l-5.867 7.088a3.09 3.09 0 0 0-.846-.129c-1.58 0-2.86 1.16-2.86 2.591 0 1.431 1.28 2.591 2.86 2.591 1.58 0 2.86-1.16 2.86-2.59 0-.532-.178-1.025-.481-1.436l5.859-7.078c.95.472 2.04.74 3.2.74 1.233 0 2.385-.309 3.376-.837l8.83 10.003c-.477.576-.77 1.285-.77 2.062 0 1.908 1.708 3.454 3.813 3.454 2.106 0 3.813-1.546 3.813-3.454 0-1.908-1.707-3.455-3.813-3.455a4.11 4.11 0 0 0-1.557.308l-8.828-9.999c1.118-1.08 1.807-2.53 1.807-4.127 0-.49-.071-.963-.192-1.418l9.52-3.45c.694.853 1.803 1.414 3.063 1.414 2.105 0 3.812-1.547 3.812-3.455 0-1.908-1.707-3.455-3.812-3.455-2.106 0-3.813 1.547-3.813 3.455 0 .149.029.29.049.434l-9.527 3.452c-.823-1.288-2.153-2.277-3.746-2.737l2.123-11.544c1.945-.156 3.476-1.62 3.476-3.423 0-1.908-1.707-3.455-3.812-3.455-2.106 0-3.813 1.547-3.813 3.455 0 1.408.933 2.614 2.267 3.152L30.645 38.87c-.049 0-.096-.006-.145-.006-.734 0-1.438.111-2.099.31l-3.469-6.288c.495-.466.803-1.097.803-1.795 0-1.431-1.28-2.591-2.86-2.591-1.58 0-2.86 1.16-2.86 2.59 0 1.432 1.28 2.592 2.86 2.592.12 0 .232-.02.347-.032l3.474 6.296c-1.134.715-2.008 1.743-2.478 2.944L15.23 41.26C15.116 39.445 13.47 38 11.438 38c-2.106 0-3.813 1.547-3.813 3.455 0 1.907 1.707 3.454 3.813 3.454z\"\n      className=\"SRC-icon-fill\"\n    />\n    <path\n      d=\"M30.5 6.045H7.625v1.728H30.5V6.045zM22.875 9.932H7.625v.864h15.25v-.864z\"\n      fill=\"#DCDCDC\"\n      className=\"SRC-header-only-fill\"\n    />\n  </svg>\n)\n","import * as React from 'react'\n\nexport const Study = () => (\n  <svg width=\"61\" height=\"76\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M39.456 57.627a2.799 2.799 0 0 0 2.79 2.801 2.798 2.798 0 0 0 2.787-2.8 2.798 2.798 0 0 0-2.788-2.803 2.8 2.8 0 0 0-2.789 2.802zm3.628 0a.843.843 0 0 1-.84.844.843.843 0 0 1-.84-.844c0-.467.376-.845.84-.845.464 0 .84.379.84.845z\"\n      fill=\"#DCDCDC\"\n      className=\"SRC-header-only-fill\"\n    />\n    <path\n      d=\"M37.349 21.019H28.92v1.957h8.428V21.02zM26.25 21H12v1.958h14.25V21zM26.34 24.933h-9.107v1.957h9.107v-1.957zM34.678 24.933h-5.757v1.958h5.757v-1.958zM14.667 24.933h-2.576v1.958h2.576v-1.958zM31.537 28.849h-5.213v1.957h5.212V28.85zM23.741 28.849h-11.65v1.957h11.65V28.85zM19.848 32.764H12.11v1.957h7.738v-1.957zM30.828 32.764h-8.4v1.958h8.4v-1.958zM20.533 36.678h-8.442v1.958h8.442v-1.958zM12.006 40.604l.004 1.957 5.874-.011-.004-1.958-5.874.012zM36.447 11.23H15v1.958h21.447V11.23zM32.674 16H19v1.958h13.674V16z\"\n      className=\"SRC-icon-fill\"\n    />\n    <path\n      d=\"M50.885 60.866h-2.834v-3.45C55.071 54.356 60 47.334 60 39.166c0-6.868-3.531-13.209-9.277-16.838l2.065-3.593 1.682.976.974-1.695-1.682-.976-8.757-5.081-1.693-.982-.974 1.695 1.692.982-1.824 3.174V6.054L7.791 6v25.527H0v14.87c0 2.24 1.59 4.112 3.694 4.538v.092l31.436.042-2.903 6.34.978.371c1.03.392 2.085.69 3.157.901v2.185H24.674V70h26.211c2.526 0 4.58-2.05 4.58-4.568s-2.054-4.566-4.58-4.566zM7.791 46.398a2.667 2.667 0 0 1-2.658 2.67h-.528a2.667 2.667 0 0 1-2.657-2.67V33.485h5.843v12.913zm41.19-7.232a8.82 8.82 0 0 1-6.775 8.58V37.153l2.998-5.219a8.789 8.789 0 0 1 3.776 7.232zM38.39 36.171l-2.063 3.59-2.612-1.517 2.062-3.59 2.613 1.517zM51.1 17.757L40.964 35.404l-5.385-3.124 10.14-17.647.538.313 4.845 2.81zM8.888 49.076a4.61 4.61 0 0 0 .852-2.678V7.96l30.52.048v12.21l-7.342 12.779 1.173.68-3.036 5.285 5.986 3.472 3.037-5.284.182.106v10.729l-.056.002a8.768 8.768 0 0 1-1.643-.161l1.164-2.026-13.412-7.781a1.87 1.87 0 0 0-.94-.254 1.89 1.89 0 0 0-1.633.945l-.451.787a1.901 1.901 0 0 0 .69 2.586L36.04 49.08l-.014.032-27.139-.036zm27.79-1.887l-11.67-6.77.387-.672 11.67 6.77-.388.672zm1.226 2.506c.753.166 1.523.25 2.3.25 5.914 0 10.726-4.835 10.726-10.779a10.75 10.75 0 0 0-4.266-8.606l2.619-5.723.474-.824a17.968 17.968 0 0 1 8.296 15.153c0 7.166-4.21 13.353-10.27 16.222-.708-2.176-2.74-3.756-5.135-3.756h-.88c-2.847 0-5.18 2.23-5.383 5.046a16.918 16.918 0 0 1-1.5-.388l3.019-6.595zm8.2 7.382v7.052h-7.792v-7.053c0-1.921 1.55-3.485 3.456-3.485h.88c1.906 0 3.456 1.564 3.456 3.486zm4.782 10.965H26.623v-5.219h9.74v3.263H48.05v-3.263h2.835c1.45 0 2.631 1.17 2.631 2.61.001 1.44-1.18 2.61-2.63 2.61z\"\n      fill=\"#DCDCDC\"\n      className=\"SRC-header-only-fill\"\n    />\n  </svg>\n)\n","import * as React from 'react'\n\nexport const ToolExperimental = () => (\n  <svg width=\"61\" height=\"76\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g clipPath=\"url(#clip0)\">\n      <g clipPath=\"url(#clip1)\">\n        <g clipPath=\"url(#clip2)\">\n          <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M23.602 4c-.599 0-1.077.4-1.077.902v1.904c0 .602.478 1.003 1.077 1.003V26.85L10.556 46.496c-3.35 4.41-1.077 7.917 5.147 7.917h31.595c6.224 0 8.498-3.507 5.147-7.917L39.4 26.85V7.81c.598 0 1.077-.401 1.077-1.003V4.902c0-.501-.479-.902-1.077-.902H23.602zm.598 30.669l-9.335 14.032-.12.1c-.12.2-.598.902-.718 1.303.36.1 1.436.1 1.676.1h31.595c.24 0 1.317 0 1.676-.1-.12-.401-.598-1.103-.838-1.303v-.2l-9.335-13.932h-14.6zm3.232-27.462v20.446L13.787 48.1v.1c-1.676 2.205-1.197 3.007 1.915 3.007h31.595c3.112 0 3.591-.802 1.915-3.007v-.1L35.45 27.653V7.207h-8.019z\"\n            fill=\"#DCDCDC\"\n            className=\"SRC-header-only-fill\"\n          />\n          <path\n            d=\"M38.5 34.5h-14L14.5 50h34l-10-15.5z\"\n            fill=\"#5BB0B5\"\n            className=\"SRC-icon-fill\"\n          />\n        </g>\n      </g>\n    </g>\n    <defs>\n      <clipPath id=\"clip0\">\n        <path fill=\"#fff\" d=\"M0 0h61v76H0z\" />\n      </clipPath>\n      <clipPath id=\"clip1\">\n        <path\n          fill=\"#fff\"\n          transform=\"matrix(.69 0 0 .69 2 4)\"\n          d=\"M0 0h85.507v85.507H0z\"\n        />\n      </clipPath>\n      <clipPath id=\"clip2\">\n        <path\n          fill=\"#fff\"\n          transform=\"matrix(.69 0 0 .69 9 4)\"\n          d=\"M0 0h65.217v73.063H0z\"\n        />\n      </clipPath>\n    </defs>\n  </svg>\n)\n","import * as React from 'react'\n\nexport const ToolComputational = () => (\n  <svg width=\"61\" height=\"76\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g clipPath=\"url(#clip0)\">\n      <path\n        d=\"M55.513 13H4.537A2.518 2.518 0 0 0 2 15.537V51.94c0 1.357 1.121 2.537 2.537 2.537h20.532v4.602h-4.543c-.708 0-1.239.59-1.239 1.239v2.36c0 .708.59 1.239 1.239 1.239h19.057c.708 0 1.239-.59 1.239-1.239v-2.36c0-.708-.59-1.239-1.239-1.239H35.04v-4.602h20.532a2.518 2.518 0 0 0 2.537-2.537V15.537C58.05 14.121 56.929 13 55.513 13zM30.025 51.704c-.944 0-1.77-.767-1.77-1.77 0-.944.767-1.77 1.77-1.77.944 0 1.77.767 1.77 1.77 0 1.003-.826 1.77-1.77 1.77zm23.482-6.077H6.543V17.543h46.964v28.084z\"\n        fill=\"#DCDCDC\"\n        className=\"SRC-header-only-fill\"\n      />\n      <path\n        d=\"M20.29 38.827a.68.68 0 0 0 .908 0l1.623-1.57a.627.627 0 0 0 0-.878l-4.01-3.879 4.01-3.88a.627.627 0 0 0 0-.877l-1.623-1.57a.68.68 0 0 0-.908 0l-6.111 5.865a.627.627 0 0 0 0 .878l6.111 5.91zM38.226 37.257l1.614 1.57c.238.23.665.23.903 0l6.079-5.911a.63.63 0 0 0 0-.878l-6.127-5.865a.674.674 0 0 0-.902 0l-1.615 1.57a.63.63 0 0 0 0 .878l3.99 3.879-3.99 3.88c-.19.23-.19.646.048.877z\"\n        className=\"SRC-icon-fill\"\n      />\n      <path\n        d=\"M27.558 39h1.74c.255 0 .467-.167.51-.376l4.159-11.872c.127-.376-.127-.752-.51-.752h-1.74c-.254 0-.466.167-.509.376l-4.16 11.872c-.169.376.128.752.51.752z\"\n        fill=\"#DCDCDC\"\n        className=\"SRC-header-only-fill\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0\">\n        <path\n          fill=\"#fff\"\n          transform=\"matrix(.69 0 0 .69 2 13)\"\n          d=\"M0 0h82.609v73.913H0z\"\n        />\n      </clipPath>\n    </defs>\n  </svg>\n)\n","import * as React from 'react'\n\nexport const ToolClinical = () => (\n  <svg width=\"61\" height=\"76\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M54.878 1.124A3.804 3.804 0 0 0 52.175 0H45.8c-.705 0-1.274.573-1.274 1.279v2.557c0 .707.57 1.279 1.274 1.279h5.1v9.913c0 3.083-1.976 5.705-3.573 8.181-2.511 3.894-8.191 3.894-10.703.002-1.652-2.56-3.573-4.99-3.573-8.183V5.115h5.1c.705 0 1.275-.572 1.275-1.279V1.279C39.426.573 38.856 0 38.15 0h-6.374a3.81 3.81 0 0 0-2.705 1.124 3.828 3.828 0 0 0-1.12 2.713v8.549c0 4.436 1.34 8.565 3.598 12.379 4.024 6.794 7.877 9.084 7.77 12.776-.07 2.368 0 4.742 0 7.113 0 5.64-4.577 10.23-10.2 10.23h-2.444c-5.624 0-10.2-4.59-10.2-10.23v-9.223a8.945 8.945 0 0 0 6.375-8.576c0-4.943-3.997-8.952-8.925-8.952-4.93 0-8.925 4.009-8.925 8.952a8.944 8.944 0 0 0 6.375 8.576v9.222C11.377 53.13 18.225 60 26.675 60h2.445c8.449 0 15.3-6.871 15.3-15.346v-4.139c0-1.953-.054-5.56.797-7.319 2.834-2.275 6.055-4.642 7.755-8.099C55.375 21.373 56 16.822 56 12.387v-8.55a3.83 3.83 0 0 0-1.122-2.713zM9.145 26.855c0-2.642 2.146-4.795 4.781-4.795s4.781 2.153 4.781 4.795c0 2.644-2.146 4.796-4.78 4.796-2.637 0-4.782-2.152-4.782-4.796z\"\n      fill=\"#DCDCDC\"\n      className=\"SRC-header-only-fill\"\n    />\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M14 36a9 9 0 1 0 0-18 9 9 0 0 0 0 18zm0-4a5 5 0 1 0 0-10 5 5 0 0 0 0 10z\"\n      className=\"SRC-icon-fill\"\n    />\n  </svg>\n)\n","import * as React from 'react'\n\nexport const Project = () => (\n  <svg width=\"60\" height=\"60\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g clipPath=\"url(#clip0)\">\n      <path\n        d=\"M30 22a7.99 7.99 0 0 0-5.757 13.54 4.99 4.99 0 0 1 2.355-2.9 5 5 0 1 1 6.8 0 4.99 4.99 0 0 1 2.355 2.9A7.99 7.99 0 0 0 30 22z\"\n        className=\"SRC-icon-fill\"\n      />\n      <path\n        d=\"M30 32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM26.008 36.922a7.93 7.93 0 0 0 7.984 0A3 3 0 0 0 31 34h-2a3 3 0 0 0-2.992 2.922zM50.62 8.805a2.973 2.973 0 0 1 .259-3.926A3 3 0 0 1 56 6.999a2.972 2.972 0 0 1-.619 1.8 4 4 0 0 1 1.273 1.584 5 5 0 1 0-7.308 0 4 4 0 0 1 1.273-1.578z\"\n        className=\"SRC-icon-fill\"\n      />\n      <path\n        d=\"M53 8a1 1 0 1 0 0-2 1 1 0 0 0 0 2zM51.04 11.6a4.973 4.973 0 0 0 3.919 0 2 2 0 0 0-3.918 0zM53 54a1 1 0 1 0 0-2 1 1 0 0 0 0 2zM53 56a2 2 0 0 0-1.96 1.6 4.978 4.978 0 0 0 3.914 0A1.994 1.994 0 0 0 53 56z\"\n        className=\"SRC-icon-fill\"\n      />\n      <path\n        d=\"M53 48a4.983 4.983 0 0 0-3.654 8.388 4 4 0 0 1 1.273-1.583 2.972 2.972 0 0 1 .26-3.926A3 3 0 0 1 55.998 53a2.967 2.967 0 0 1-.618 1.8c.554.409.993.955 1.273 1.584A4.982 4.982 0 0 0 53 48zM5.04 11.6a4.973 4.973 0 0 0 3.919 0 2 2 0 0 0-3.918 0zM7 8a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\"\n        className=\"SRC-icon-fill\"\n      />\n      <path\n        d=\"M4.619 8.805a2.972 2.972 0 0 1 .26-3.926A3 3 0 0 1 10 6.999a2.972 2.972 0 0 1-.619 1.8 4 4 0 0 1 1.273 1.584 5 5 0 1 0-7.308 0 4 4 0 0 1 1.273-1.578z\"\n        className=\"SRC-icon-fill\"\n      />\n      <path\n        d=\"M29.562 9.981a5 5 0 1 0 0 0zM28.072 2.7a2.976 2.976 0 0 1 2.196-.688 3 3 0 1 1-2.144 5.328 3 3 0 0 1-.051-4.64z\"\n        className=\"SRC-header-only-fill\"\n        fill=\"#DDDDDF\"\n      />\n      <path\n        d=\"M7 56a2 2 0 0 0-1.96 1.6 4.973 4.973 0 0 0 3.919 0 2 2 0 0 0-1.96-1.6zM7 54a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\"\n        className=\"SRC-icon-fill\"\n      />\n      <path\n        d=\"M7 48a4.983 4.983 0 0 0-3.654 8.388 4 4 0 0 1 1.273-1.583 2.972 2.972 0 0 1 .26-3.926A3 3 0 0 1 9.999 53a2.972 2.972 0 0 1-.618 1.8 4 4 0 0 1 1.273 1.583A4.981 4.981 0 0 0 7 48z\"\n        className=\"SRC-icon-fill\"\n      />\n      <path\n        d=\"M18 29h-2v2h2v-2zM14 29h-2v2h2v-2zM48 29h-2v2h2v-2zM44 29h-2v2h2v-2zM31 16h-2v2h2v-2zM31 12h-2v2h2v-2zM31 46h-2v2h2v-2zM31 42h-2v2h2v-2zM29.562 50.019a5 5 0 1 0 .876 9.96 5 5 0 1 0-.876-9.96zm3.426 4.718a3 3 0 1 1-5.978.527 3 3 0 0 1 5.978-.528zM10 30a5 5 0 1 0-5 5 5.006 5.006 0 0 0 5-5zm-8 0a3 3 0 1 1 6 0 3 3 0 0 1-6 0zM55 25a5 5 0 1 0 5 5 5.006 5.006 0 0 0-5-5zm0 8a3 3 0 1 1 0-6 3 3 0 0 1 0 6zM40.7 22.787a16.249 16.249 0 0 0 9.258-10.512l-1.922-.55a14.263 14.263 0 0 1-8.124 9.224l-.309.132.788 1.838.309-.132zM49.961 47.725A16.248 16.248 0 0 0 40.7 37.213l-.309-.132-.788 1.838.309.132a14.261 14.261 0 0 1 8.124 9.224l1.925-.55zM11.961 11.725l-1.922.55A16.248 16.248 0 0 0 19.3 22.787l.31.132.787-1.838-.309-.132a14.263 14.263 0 0 1-8.127-9.224zM19.3 37.213a16.247 16.247 0 0 0-9.258 10.512l1.922.55a14.264 14.264 0 0 1 8.124-9.224l.309-.132-.788-1.838-.31.132z\"\n        fill=\"#DDDDDF\"\n        className=\"SRC-header-only-fill\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0\">\n        <path fill=\"#fff\" d=\"M0 0h60v60H0z\" />\n      </clipPath>\n    </defs>\n  </svg>\n)\n","import * as React from 'react'\nconst CHAR_COUNT_CUTOFF = 400\n\ntype ShowMoreState = {\n  showMore: boolean\n}\n\ntype ShowMoreProps = {\n  summary: string\n}\n\nexport default class ShowMore extends React.Component<\n  ShowMoreProps,\n  ShowMoreState\n> {\n  constructor(props: ShowMoreProps) {\n    super(props)\n    this.state = {\n      showMore: false,\n    }\n    this.toggleShowMore = this.toggleShowMore.bind(this)\n  }\n\n  public toggleShowMore(event: React.MouseEvent<HTMLAnchorElement>) {\n    event.preventDefault()\n    this.setState({\n      showMore: true,\n    })\n  }\n\n  getCutoff = (summary: string) => {\n    let previewText = ''\n    if (!summary) {\n      return { previewText }\n    }\n    let hiddenText = ''\n    const summarySplit = summary!.split(' ')\n    // find num words to join such that its >= char_count_cutoff\n    let i = 0\n    while (previewText.length < CHAR_COUNT_CUTOFF && i < summarySplit.length) {\n      previewText += `${summarySplit[i]} `\n      i += 1\n    }\n    if (i < summarySplit.length - 1) {\n      hiddenText = summarySplit.slice(i).join(' ')\n    }\n    return { previewText, hiddenText }\n  }\n\n  public render() {\n    const { summary } = this.props\n    const meetsCharRequirements = summary && summary.length >= CHAR_COUNT_CUTOFF\n    let { previewText, hiddenText } = this.getCutoff(summary)\n    const showMoreButton = meetsCharRequirements && (\n      <a\n        style={{ fontSize: '14px', cursor: 'pointer', marginLeft: '1px' }}\n        className=\"SRC-primary-text-color\"\n        onClick={this.toggleShowMore}\n      >\n        ...Show More\n      </a>\n    )\n    return (\n      <React.Fragment>\n        <span>\n          {previewText}\n          <span className={this.state.showMore ? '' : 'SRC-hidden'}>\n            {hiddenText}\n          </span>\n        </span>\n        {!this.state.showMore && showMoreButton}\n      </React.Fragment>\n    )\n  }\n}\n","import * as React from 'react'\n// ignore because this is rollup requiring imports be named a certain way\n// tslint:disable-next-line\nimport ReactTooltip from \"react-tooltip\"\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCircle,  } from '@fortawesome/free-solid-svg-icons'\nimport { UserProfile } from '../utils/synapseTypes/'\nimport { getColor } from '../utils/functions/getUserData'\n\nlibrary.add(faCircle)\n\nexport type UserCardSmallProps = {\n  userProfile: UserProfile\n  preSignedURL?: string\n  hideText?: boolean\n  hideTooltip?: boolean\n  link?: string\n}\n\nexport const UserCardSmall: React.FunctionComponent<UserCardSmallProps> = (\n  { userProfile, hideText = false, hideTooltip = false, preSignedURL, link }\n) => {\n  const linkLocation = link ? link : `https://www.synapse.org/#!Profile:${userProfile.ownerId}`\n  let img\n  let marginLeft\n  let label = ''\n  if (!hideTooltip) {\n    if (userProfile.displayName) {\n      label += userProfile.displayName\n    } else if (userProfile.firstName && userProfile.lastName) {\n      label += (`${userProfile.firstName} ${userProfile.lastName}`)\n    }\n    if (userProfile.userName) {\n      label += ` (${userProfile.userName})`\n    }\n    if (userProfile.position) {\n      label += ` <br/>${userProfile.position}`\n    }\n    if (userProfile.location) {\n      label += ` <br/>${userProfile.location}`\n    }\n  }\n\n  if (preSignedURL) {\n    marginLeft = '3px'\n    img = (\n      <div\n        className=\"SRC-userImgSmall\"\n        style={{ backgroundImage: `url(${preSignedURL})` }}\n        data-for={label}\n        data-tip={label}\n      />\n    )\n  } else {\n    const color = getColor(userProfile.userName)\n    marginLeft = '3px'\n    img = (\n      <div style={{ background: color }} className=\"SRC-userImgSmall SRC-centerContentInline\">\n        {(userProfile.firstName && userProfile.firstName[0]) || userProfile.userName[0]}\n      </div>\n    )\n  }\n  return (\n    <a\n      href={linkLocation}\n      className=\"SRC-userCard SRC-primary-text-color SRC-no-underline-on-hover\"\n    >\n      {img}\n        <ReactTooltip delayShow={1000} id={label} multiline={true}/>\n        {!hideText && <span className=\"SRC-primary-text-color SRC-underline-on-hover\" style={{ marginLeft, whiteSpace: 'nowrap' }}>{`@${userProfile.userName}`}</span>}\n    </a>\n  )\n}\n","import * as React from 'react'\nimport { UserProfile } from '../utils/synapseTypes/'\nimport { SEPERATOR } from '../utils/SynapseConstants'\n\nexport type MenuAction = {\n  field: string\n  callback?: (userProfile: UserProfile) => void\n}\n\nexport type UserCardContextMenuProps = {\n  userProfile: UserProfile\n  menuActions: MenuAction[]\n}\n\nconst UserCardContextMenu: React.SFC<UserCardContextMenuProps> = (\n  props: UserCardContextMenuProps,\n) => {\n  const { menuActions = [], userProfile } = props\n  return (\n    <div className=\"dropdown open\">\n      <ul\n        className=\"dropdown-menu dropdown-menu-right\"\n        aria-labelledby=\"dropdownMenu1\"\n      >\n        {menuActions.map((menuAction, index) => {\n          const callback = () => menuAction.callback!(userProfile)\n          if (menuAction.field === SEPERATOR) {\n            return <hr className=\"SRC-break\" key={menuAction.field + index} />\n          }\n          return (\n            <li\n              key={menuAction.field}\n              style={{ listStyle: 'none' }}\n              className=\"SRC-menu-item SRC-table-dropdown-list SRC-primary-background-color-hover\"\n              onClick={callback}\n              onKeyPress={callback}\n            >\n              <button className=\"SRC-menuAction\">{menuAction.field}</button>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default UserCardContextMenu\n","import * as React from 'react'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faCircle,\n  faEllipsisV,\n  faCopy,\n} from '@fortawesome/free-solid-svg-icons'\nimport { UserProfile } from '../utils/synapseTypes/'\n\nlibrary.add(faCircle)\nlibrary.add(faEllipsisV)\nlibrary.add(faCopy)\n\ntype UserCardLargeProps = {\n  userProfile: UserProfile\n}\n\n/**\n * UserCardLarge wraps around UserCardMedium\n *\n * @export UserCardLarge\n * @param {UserCardLargeProps} { userProfile }\n */\n// Disable function name because compiler has to know that its a class\n// tslint:disable-next-line:function-name\nexport function UserCardLarge({ userProfile }: UserCardLargeProps) {\n  const { summary, industry, location, url } = userProfile\n\n  return (\n    <div className=\"SRC-cardMetaData\">\n      {summary && (\n        <div>\n          <p className=\"SRC-card-metadata-title\"> Bio </p>\n          <p>{summary}</p>\n        </div>\n      )}\n      {url && (\n        <div>\n          <p className=\"SRC-card-metadata-title\"> More Info </p>\n          <p>{url}</p>\n        </div>\n      )}\n      {industry && (\n        <div>\n          <p className=\"SRC-card-metadata-title\"> Industry </p>\n          <p>{industry}</p>\n        </div>\n      )}\n      {location && (\n        <div>\n          <p className=\"SRC-card-metadata-title\"> Location </p>\n          <p>{location}</p>\n        </div>\n      )}\n    </div>\n  )\n}\n","import * as React from 'react'\n\nconst svg = (\n  <svg width=\"12\" height=\"14\" viewBox=\"0 0 12 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      // tslint:disable-next-line:max-line-length\n      d=\"M10.7368 12.7273H3.78947V3.81818H10.7368V12.7273ZM10.7368 2.54545H3.78947C3.45446 2.54545 3.13317 2.67954 2.89629 2.91823C2.6594 3.15691 2.52632 3.48063 2.52632 3.81818V12.7273C2.52632 13.0648 2.6594 13.3885 2.89629 13.6272C3.13317 13.8659 3.45446 14 3.78947 14H10.7368C11.0719 14 11.3931 13.8659 11.63 13.6272C11.8669 13.3885 12 13.0648 12 12.7273V3.81818C12 3.48063 11.8669 3.15691 11.63 2.91823C11.3931 2.67954 11.0719 2.54545 10.7368 2.54545V2.54545ZM8.8421 0H1.26316C0.928148 0 0.606858 0.134091 0.36997 0.372773C0.133082 0.611456 0 0.935179 0 1.27273V10.1818H1.26316V1.27273H8.8421V0Z\"\n      fill=\"#DCDCDC\"\n    />\n  </svg>\n)\nexport default svg\n","import * as React from 'react'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faCircle,\n  faEllipsisV,\n  faCopy,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { getColor } from '../utils/functions/getUserData'\nimport { UserProfile } from '../utils/synapseTypes/'\nimport UserCardContextMenu, { MenuAction } from './UserCardContextMenu'\nimport { UserCardLarge } from './UserCardLarge'\nimport IconCopy from '../assets/icons/IconCopy'\n\nlibrary.add(faCircle)\nlibrary.add(faEllipsisV)\nlibrary.add(faCopy)\n\ntype UserCardState = {\n  showModal: boolean\n  isContextMenuOpen: boolean\n}\n\nexport type UserCardMediumProps = {\n  userProfile: UserProfile\n  menuActions?: MenuAction[]\n  preSignedURL?: string\n  hideEmail?: boolean\n  isLarge?: boolean\n  link?: string\n  disableLink?: boolean\n}\n\nexport default class UserCardMedium extends React.Component<\n  UserCardMediumProps,\n  UserCardState\n> {\n  public htmlDivRef = React.createRef<HTMLDivElement>()\n\n  constructor(props: UserCardMediumProps) {\n    super(props)\n    this.state = {\n      showModal: false,\n      isContextMenuOpen: false,\n    }\n  }\n\n  /**\n   * Function handles copying to clipboard the user's email address\n   *\n   * @param {string} value the email address of the user\n   * @returns\n   */\n  public copyToClipboard = (value: string) => (event: React.SyntheticEvent) => {\n    event.preventDefault()\n    // https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f\n    // this copies the email to the clipoard\n    const el = document.createElement('textarea')\n    el.value = value\n    el.setAttribute('readonly', '')\n    el.style.position = 'absolute'\n    el.style.left = '-9999px'\n    this.htmlDivRef.current!.appendChild(el)\n    el.select()\n    document.execCommand('copy')\n    this.htmlDivRef.current!.removeChild(el)\n    // show modal and hide after 4 seconds, the timing is per Material Design\n    this.setState({ showModal: true })\n    // hide after 4 seconds\n    setTimeout(() => {\n      this.setState({ showModal: false })\n    }, 4000)\n  }\n\n  public toggleContextMenu = (_event: any) => {\n    this.setState({ isContextMenuOpen: !this.state.isContextMenuOpen })\n  }\n\n  public componentDidMount() {\n    // SWC-4778: https://stackoverflow.com/questions/23821768/how-to-listen-for-click-events-that-are-outside-of-a-component\n    window.addEventListener('mouseup', this.pageClick, false)\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener('mouseup', this.pageClick, false)\n  }\n\n  public pageClick = (_event: any) => {\n    if (!this.state.isContextMenuOpen) {\n      return\n    }\n    // hide content menu (deferred, to allow menu action to process)\n    setTimeout(() => {\n      if (this.state.isContextMenuOpen) {\n        this.toggleContextMenu(_event)\n      }\n    }, 10)\n  }\n\n  render() {\n    const {\n      userProfile,\n      menuActions,\n      isLarge = false,\n      preSignedURL,\n      hideEmail = false,\n      disableLink = false,\n      link,\n    } = this.props\n    const { isContextMenuOpen, showModal } = this.state\n    const {\n      displayName,\n      userName,\n      firstName,\n      lastName,\n      position,\n      company,\n    } = userProfile\n    let img\n    let name = ''\n    const linkLocation = link\n      ? link\n      : `https://www.synapse.org/#!Profile:${userProfile.ownerId}`\n    // linkLocation is overriden by custom click handler\n    const email = `${userName}@synapse.org`\n    if (displayName) {\n      name = displayName\n    } else if (firstName && lastName) {\n      name = `${firstName} ${lastName}`\n    } else if (userName) {\n      name = userName\n    }\n    if (preSignedURL) {\n      img = (\n        <div\n          style={{ backgroundImage: `url(${preSignedURL})` }}\n          className=\"SRC-userImg\"\n        />\n      )\n    } else {\n      img = (\n        <div\n          style={{ background: getColor(userName) }}\n          className=\"SRC-userImg SRC-centerContentInline\"\n        >\n          {userProfile.firstName &&\n            (userProfile.firstName[0] || userProfile.userName[0])}\n        </div>\n      )\n    }\n    const mediumCard = (\n      <React.Fragment>\n        {!hideEmail && (\n          <TransitionGroup>\n            {showModal && (\n              <CSSTransition\n                key={email}\n                classNames=\"SRC-card\"\n                timeout={{ enter: 500, exit: 300 }}\n              >\n                <div key={email} className=\"SRC-modal\">\n                  Email address copied to clipboard\n                </div>\n              </CSSTransition>\n            )}\n          </TransitionGroup>\n        )}\n        {disableLink && img}\n        {!disableLink && (\n          <a\n            href={linkLocation}\n            className={`SRC-no-underline-on-hover ${\n              isLarge ? 'SRC-isLargeCard' : ''\n            }`}\n          >\n            {img}\n          </a>\n        )}\n        <div className=\"SRC-cardContent\">\n          <p className=\"SRC-eqHeightRow SRC-userCardName\">\n            {/*\n              if its a medium component the header should be clickable (unless disableLink is set),\n              if its large then it should NOT be clickable\n            */}\n            {/* make SRC-whiteText overridable with a good name! */}\n            {isLarge || disableLink ? (\n              <span className={isLarge ? 'SRC-whiteText' : 'SRC-blackText'}>\n                {name}\n              </span>\n            ) : (\n              // consolidate click events\n              <a\n                href={linkLocation}\n                tabIndex={0}\n                className={'SRC-hand-cursor SRC-primary-text-color'}\n              >\n                {name}\n              </a>\n            )}\n          </p>\n          {(position || company) && (\n            <p className={`${isLarge ? 'SRC-whiteText' : ''}`}>\n              {position} {position ? ' / ' : ''} {company}\n            </p>\n          )}\n          {!hideEmail && (\n            <p\n              className={`${\n                isLarge\n                  ? 'SRC-whiteText'\n                  : 'SRC-primary-text-color SRC-primary-color-hover'\n              }\n              SRC-hand-cursor SRC-eqHeightRow SRC-inlineFlex SRC-emailText SRC-cardSvg`}\n              onClick={this.copyToClipboard(email)}\n              onKeyPress={this.copyToClipboard(email)}\n              tabIndex={0}\n              ref={this.htmlDivRef}\n            >\n              <span style={{ paddingRight: '5px' }}>\n                {`${userName}@synapse.org`}\n              </span>\n              {IconCopy}\n            </p>\n          )}\n        </div>\n        {/* conditionally render menu actions, if its not defined then we don't show the button */}\n        {menuActions && (\n          <React.Fragment>\n            <span\n              className={`SRC-extraPadding SRC-hand-cursor SRC-primary-background-color-hover SRC-inlineBlock\n              SRC-cardMenuButton ${\n                isContextMenuOpen ? 'SRC-primary-background-color' : ''\n              }`}\n              style={{ outline: 'none' }}\n              tabIndex={0}\n              onClick={this.toggleContextMenu}\n              onKeyPress={this.toggleContextMenu}\n            >\n              <FontAwesomeIcon\n                className={\n                  isContextMenuOpen || isLarge\n                    ? 'SRC-whiteText'\n                    : 'SRC-primary-text-color'\n                }\n                icon=\"ellipsis-v\"\n                fixedWidth={true}\n              />\n            </span>\n            {isContextMenuOpen && (\n              <UserCardContextMenu\n                menuActions={menuActions}\n                userProfile={userProfile}\n              />\n            )}\n          </React.Fragment>\n        )}\n        {!menuActions && <span style={{ padding: '0px 0px 0px 35px' }} />}\n      </React.Fragment>\n    )\n\n    if (!isLarge) {\n      return (\n        <div\n          style={{ border: '1px solid #DDDDDF' }}\n          className={`SRC-userCard SRC-userCardMediumUp ${\n            isContextMenuOpen ? 'SRC-hand-cursor' : ''\n          }`}\n          onClick={isContextMenuOpen ? this.toggleContextMenu : undefined}\n        >\n          {mediumCard}\n        </div>\n      )\n    }\n    // else return medium card inside large component\n    // when the component is large we have to set the click handler to wrap both the top and bottom portion\n    return (\n      <div\n        style={{ boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.25)' }}\n        className={isContextMenuOpen ? 'SRC-hand-cursor' : ''}\n        onClick={isContextMenuOpen ? this.toggleContextMenu : undefined}\n      >\n        <div\n          className={`SRC-primary-background-color SRC-userCard SRC-userCardMediumUp ${\n            isContextMenuOpen ? 'SRC-hand-cursor' : ''\n          }`}\n        >\n          {mediumCard}\n        </div>\n        {isLarge ? <UserCardLarge userProfile={userProfile} /> : false}\n      </div>\n    )\n  }\n}\n","import moment from 'moment'\nimport React, { useEffect, useState } from 'react'\nimport { SynapseClient, SynapseConstants } from '../../utils'\nimport { testDownloadSpeed } from '../../utils/functions/testDownloadSpeed'\nimport {\n  AddFilesToDownloadListRequest,\n  Query,\n  QueryBundleRequest,\n} from '../../utils/synapseTypes/'\nimport DownloadDetails from './DownloadDetails'\n\nenum StatusEnum {\n  LOADING_INFO,\n  PROCESSING,\n  INFO,\n  SUCCESS,\n  ERROR,\n}\n\nexport type DownloadConfirmationState = {\n  fileCount: number\n  fileSize: number\n  downloadEstimate?: string\n  status: StatusEnum\n  errorMessage?: string\n  ownerId?: string\n}\nexport type DownloadConfirmationProps = {\n  fnClose: Function\n  token: string\n  queryBundleRequest: QueryBundleRequest\n}\n\n//get the info about the files stats\nasync function getFilesInformation(\n  queryBundleRequest: QueryBundleRequest,\n  token: string,\n): Promise<DownloadConfirmationState> {\n  const partMask =\n    SynapseConstants.BUNDLE_MASK_QUERY_COUNT |\n    SynapseConstants.BUNDLE_MASK_SUM_FILES_SIZE_BYTES\n\n  const queryBundleRequestSizeInformation: QueryBundleRequest = {\n    ...queryBundleRequest,\n    partMask,\n  }\n\n  const { queryCount, sumFileSizes } = await SynapseClient.getQueryTableResults(\n    queryBundleRequestSizeInformation,\n  )\n  const estimatedDownloadBytesPerSecond = await testDownloadSpeed(token)\n  const size = sumFileSizes ? sumFileSizes['sumFileSizesBytes'] : 0\n  const durationSeconds = size / estimatedDownloadBytesPerSecond\n  const duration = moment.duration(durationSeconds, 'seconds').humanize()\n\n  return {\n    fileCount: queryCount || 0,\n    fileSize: size,\n    downloadEstimate: duration,\n    status: StatusEnum.INFO,\n  }\n}\n\n// add files to download list\nasync function addToDownload(\n  query: Query,\n  token: string,\n): Promise<[StatusEnum, string]> {\n  const req: AddFilesToDownloadListRequest = {\n    concreteType:\n      'org.sagebionetworks.repo.model.file.AddFileToDownloadListRequest',\n    query: query,\n  }\n  try {\n    const result = await SynapseClient.addFilesToDownloadList(req, token)\n    const ownerId = result.downloadList.ownerId\n    return [StatusEnum.SUCCESS, ownerId]\n  } catch (error) {\n    return [StatusEnum.ERROR, error.reason]\n  }\n}\n\ntype UiStateDictionary = {\n  [key: string]: {\n    className: string\n    infoText: string\n    closeText: string\n  }\n}\n\n// css classes, text, and close button text associated with different stages\nconst StatusConstruct: UiStateDictionary = {\n  [StatusEnum.INFO]: {\n    className: 'alert-info',\n    infoText: 'Would you like to add all files to the download list?',\n    closeText: 'Cancel',\n  },\n\n  [StatusEnum.PROCESSING]: {\n    className: 'alert-info',\n    infoText: 'Adding Files To List',\n    closeText: 'Cancel',\n  },\n\n  [StatusEnum.LOADING_INFO]: {\n    className: 'alert-info',\n    infoText: 'Calculating File Size',\n    closeText: 'Cancel',\n  },\n\n  [StatusEnum.ERROR]: {\n    className: 'alert-danger',\n    closeText: 'Close',\n    infoText: '',\n  },\n  [StatusEnum.SUCCESS]: {\n    className: 'alert-info',\n    closeText: 'Close',\n    infoText: '',\n  },\n}\n\n//============= DownloadConfirmation component =============\n\nexport const DownloadConfirmation: React.FunctionComponent<DownloadConfirmationProps> = ({\n  queryBundleRequest,\n  token,\n  fnClose,\n}) => {\n  const [state, setState] = useState<DownloadConfirmationState>({\n    fileCount: 0,\n    fileSize: 0,\n    status: StatusEnum.LOADING_INFO,\n  })\n\n  useEffect(() => {\n    ;(async function getDataOnLoad(query: QueryBundleRequest, token: string) {\n      const result = await getFilesInformation(query, token)\n      setState(result)\n    })(queryBundleRequest, token)\n  }, [queryBundleRequest, token])\n\n  const hideComponent = () => fnClose()\n\n  const triggerAddToDownload = async () => {\n    setState({ ...state, status: StatusEnum.PROCESSING })\n    const result = await addToDownload(queryBundleRequest.query, token)\n    const status = result[0]\n\n    if (status === StatusEnum.SUCCESS) {\n      setState({ ...state, ownerId: result[1], status })\n    } else {\n      setState({ ...state, errorMessage: result[1], status })\n    }\n  }\n\n  const getContent = (\n    {\n      status,\n      fileCount,\n      fileSize,\n      errorMessage,\n      ownerId,\n    }: DownloadConfirmationState,\n    token: string,\n  ): JSX.Element => {\n    switch (status) {\n      case StatusEnum.LOADING_INFO:\n      case StatusEnum.PROCESSING:\n        return (\n          <div>\n            <span className={'spinner white'} />\n            <span className={'spinner__text'}>\n              {StatusConstruct[status].infoText}\n            </span>\n          </div>\n        )\n\n      case StatusEnum.ERROR:\n        return <>{errorMessage}</>\n\n      case StatusEnum.INFO:\n        return (\n          <>\n            <DownloadDetails\n              token={token}\n              numFiles={fileCount}\n              numBytes={fileSize}\n            ></DownloadDetails>\n            <span>{StatusConstruct[status].infoText}</span>\n          </>\n        )\n\n      case StatusEnum.SUCCESS:\n        return (\n          <span>\n            <a\n              href={`https://www.synapse.org/#!Profile:${ownerId}/downloads`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              View Download List\n            </a>\n          </span>\n        )\n\n      default:\n        return <></>\n    }\n  }\n\n  return (\n    <div\n      className={`alert download-confirmation ${\n        StatusConstruct[state.status].className\n      }`}\n    >\n      <div className=\"download-confirmation__section\">\n        {getContent(state, token)}\n      </div>\n      <div\n        className=\"download-confirmation__section text-right\"\n        style={{\n          width: '150px',\n        }}\n      >\n        {state.status !== StatusEnum.PROCESSING && (\n          <button className=\"btn btn-link\" onClick={hideComponent}>\n            {StatusConstruct[state.status].closeText}\n          </button>\n        )}\n\n        {state.status === StatusEnum.INFO && (\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={triggerAddToDownload}\n          >\n            Add\n          </button>\n        )}\n      </div>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { getUserProfileWithProfilePic } from '../utils/functions/getUserData'\nimport { getPrincipalAliasRequest } from '../utils/SynapseClient'\nimport { MenuAction } from './UserCardContextMenu'\nimport { UserProfile } from '../utils/synapseTypes/'\nimport { SynapseConstants } from '../utils/'\nimport { UserCardSmall } from './UserCardSmall'\nimport UserCardMedium from './UserCardMedium'\n\ntype UserCardState = {\n  userProfile: UserProfile | undefined\n  preSignedURL: string\n  isLoading: boolean\n}\n\nexport type UserCardSize =\n  | 'SMALL USER CARD'\n  | 'MEDIUM USER CARD'\n  | 'LARGE USER CARD'\n\nexport type UserCardProps = {\n  // Note - either specify userProfile OR (alias or ownerId)\n  userProfile?: UserProfile\n  loadingScreen?: JSX.Element\n  hideEmail?: boolean\n  preSignedURL?: string\n  alias?: string\n  ownerId?: string\n  size: UserCardSize\n  hideText?: boolean\n  hideTooltip?: boolean\n  menuActions?: MenuAction[]\n  link?: string\n  disableLink?: boolean\n}\n\nexport default class UserCard extends React.Component<\n  UserCardProps,\n  UserCardState\n> {\n  constructor(props: any) {\n    super(props)\n    this.state = { userProfile: undefined, isLoading: true, preSignedURL: '' }\n    this.getUserProfile = this.getUserProfile.bind(this)\n  }\n\n  public componentDidMount() {\n    const { userProfile, ownerId, alias } = this.props\n    if (userProfile) {\n      return\n    }\n    if (alias) {\n      getPrincipalAliasRequest('', alias, 'USER_NAME').then(\n        (aliasData: any) => {\n          this.getUserProfile(aliasData.principalId!)\n        },\n      )\n    } else {\n      // check for ownerId!\n      this.getUserProfile(ownerId!)\n    }\n  }\n\n  public getUserProfile(ownerId: string) {\n    getUserProfileWithProfilePic(ownerId!, '')\n      .then(data => {\n        const { userProfile, preSignedURL } = data\n        this.setState({ userProfile, preSignedURL, isLoading: false })\n      })\n      .catch(err => {\n        console.log('failed to get user bundle ', err)\n      })\n  }\n\n  public render() {\n    const {\n      userProfile,\n      loadingScreen = <span />,\n      preSignedURL,\n      size,\n      ...rest\n    } = this.props\n    let userProfileAtRender\n    let preSignedURLAtRender\n    if (!userProfile) {\n      // userProfile wans't passed in from props\n      if (this.state.isLoading) {\n        // still making the API call\n        return loadingScreen\n      }\n      userProfileAtRender = this.state.userProfile\n      preSignedURLAtRender = this.state.preSignedURL\n    } else {\n      // otherwise we have the profile from props\n      userProfileAtRender = userProfile\n      preSignedURLAtRender = preSignedURL\n    }\n    const propsForChild = {\n      userProfile: userProfileAtRender!,\n      preSignedURL: preSignedURLAtRender,\n      ...rest,\n    }\n    switch (size) {\n      case SynapseConstants.SMALL_USER_CARD:\n        return <UserCardSmall {...propsForChild} />\n      case SynapseConstants.MEDIUM_USER_CARD:\n        return <UserCardMedium {...propsForChild} />\n      case SynapseConstants.LARGE_USER_CARD:\n        return <UserCardMedium isLarge={true} {...propsForChild} />\n      default:\n        return <span />\n    }\n  }\n}\n","import * as React from 'react'\n\ntype BookmarksProps = {\n  footnotes: string\n}\n\nclass Bookmarks extends React.Component<BookmarksProps, {}> {\n  constructor(props: BookmarksProps) {\n    super(props)\n    this.renderBookmarks = this.renderBookmarks.bind(this)\n  }\n\n  /**\n   * Returns bookmarks\n   *\n   * @returns JSX for the embedded bookmarks in the markdown passed in as a prop\n   * @memberof Bookmarks\n   */\n  public renderBookmarks() {\n    const copyFootnotes: string = String(this.props.footnotes)\n\n    // find all the links embedded in the markdown below\n    const regex = /Synapse widget&gt;<\\/span>(.*)</g\n    let matchedGroup: RegExpExecArray | null\n    const output = []\n    // below we use regex.exec to find the find matched group containing the citation source\n    while ((matchedGroup = regex.exec(copyFootnotes))) {\n      output.push(matchedGroup[1])\n    }\n\n    // return all the links formatted accordingly\n    return output.map((el, index) => {\n      const isBeforeLastElement = index < output.length - 1\n      return (\n        <React.Fragment key={index}>\n          <button className=\"SRC-markdown-bookmark\" id={`bookmark${index}`}>\n            [{index + 1}]\n          </button>\n          <span dangerouslySetInnerHTML={{ __html: el }} />\n          {isBeforeLastElement && <br />}\n        </React.Fragment>\n      )\n    })\n  }\n\n  public render() {\n    return (\n      <React.Fragment>\n        <hr />\n        {this.renderBookmarks()}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Bookmarks\n","import * as React from 'react'\nimport { getEntity, getFiles } from '../../utils/SynapseClient'\nimport {\n  BatchFileRequest,\n  BatchFileResult,\n  FileEntity,\n  FileHandle,\n  FileHandleAssociateType,\n  FileHandleAssociation,\n} from '../../utils/synapseTypes/'\n\ntype SynapseImageProps = {\n  wikiId?: string\n  synapseId?: string\n  token?: string\n  fileName?: string\n  fileResults?: FileHandle[]\n  params: any\n}\n\ntype SynapseImageState = {\n  preSignedURL: string\n}\n\nclass SynapseImage extends React.Component<\n  SynapseImageProps,\n  SynapseImageState\n> {\n  constructor(props: SynapseImageProps) {\n    super(props)\n    this.getEntity = this.getEntity.bind(this)\n    this.getSynapseFiles = this.getSynapseFiles.bind(this)\n    this.state = {\n      preSignedURL: '',\n    }\n  }\n\n  public getEntity() {\n    const { token, synapseId } = this.props\n    if (synapseId) {\n      getEntity<FileEntity>(token, synapseId).then(\n        // https://docs.synapse.org/rest/org/sagebionetworks/repo/model/FileEntity.html\n        (data: FileEntity) => {\n          const fileHandleAssociationList = [\n            {\n              associateObjectId: synapseId,\n              associateObjectType: FileHandleAssociateType.FileEntity,\n              fileHandleId: data.dataFileHandleId,\n            },\n          ]\n          this.getSynapseFiles(fileHandleAssociationList, data.dataFileHandleId)\n        },\n      )\n    }\n  }\n  public getSynapseFiles(\n    fileHandleAssociationList: FileHandleAssociation[],\n    id: string,\n  ) {\n    // overload the method for two different use cases, one where\n    // the image is attached to an entity and creates a list on the spot,\n    // the other where list is passed in from componentDidMount in MarkdownSynapse\n    const request: BatchFileRequest = {\n      includeFileHandles: false,\n      includePreSignedURLs: true,\n      includePreviewPreSignedURLs: false,\n      requestedFiles: fileHandleAssociationList,\n    }\n    getFiles(request, this.props.token)\n      .then((data: BatchFileResult) => {\n        const { preSignedURL } = data.requestedFiles.filter(\n          el => el.fileHandleId === id,\n        )[0]\n        this.setState({\n          preSignedURL: preSignedURL!,\n        })\n      })\n      .catch(err => {\n        console.error('Error on getting image ', err)\n      })\n  }\n  public componentDidMount() {\n    if (!this.props.wikiId) {\n      // Get file handle as external attachment\n      this.getEntity()\n    } else {\n      // Can get presigned url right away from wiki association\n      const { fileName, fileResults = [] } = this.props\n      const { id } = fileResults.filter(el => el.fileName === fileName)[0]\n      const fileHandleAssociationList: FileHandleAssociation[] = [\n        {\n          associateObjectId: this.props.wikiId,\n          associateObjectType: FileHandleAssociateType.WikiAttachment,\n          fileHandleId: id,\n        },\n      ]\n      this.getSynapseFiles(fileHandleAssociationList, id)\n    }\n  }\n\n  public render() {\n    const imgStyle: React.CSSProperties = {}\n    const { params = {} } = this.props\n    const { align = '' } = params\n    const alignLowerCase = align.toLowerCase()\n    let className = ''\n    if (alignLowerCase === 'left') {\n      className = 'floatLeft'\n    }\n    if (alignLowerCase === 'right') {\n      className = 'floatright'\n    }\n    if (alignLowerCase === 'center') {\n      className = 'align-center'\n    }\n    if (!this.state.preSignedURL) {\n      return null\n    }\n    return (\n      <React.Fragment>\n        <img\n          alt=\"synapse\"\n          className={'img-fluid  ' + className}\n          src={this.state.preSignedURL}\n          style={imgStyle}\n        />\n      </React.Fragment>\n    )\n  }\n}\nexport default SynapseImage\n","import Plotly from 'plotly.js-basic-dist'\nimport * as React from 'react'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { SynapseConstants } from '../../utils/'\nimport { getFullQueryTableResults } from '../../utils/SynapseClient'\nimport { QueryResultBundle, QueryBundleRequest } from '../../utils/synapseTypes/'\nimport {parseEntityIdFromSqlStatement} from '../../utils/functions/sqlFunctions'\nconst Plot = createPlotlyComponent(Plotly)\n\ntype SynapsePlotProps = {\n  token?: string\n  ownerId?: string\n  wikiId?: string\n  widgetparamsMapped?: any\n}\n\ntype SynapsePlotState = {\n  isLoaded: boolean\n  queryData: QueryResultBundle\n}\n\nclass SynapsePlot extends React.Component<SynapsePlotProps, SynapsePlotState> {\n  constructor(props: SynapsePlotProps) {\n    super(props)\n    this.state = {\n      isLoaded: false,\n      queryData: {} as QueryResultBundle,\n    }\n    this.fetchPlotlyData = this.fetchPlotlyData.bind(this)\n    this.showPlot = this.showPlot.bind(this)\n  }\n\n  public componentDidMount() {\n    this.fetchPlotlyData()\n  }\n  /**\n   * Get data for plotly\n   *\n   * @returns data corresponding to plotly widget\n   */\n  public fetchPlotlyData() {\n    const { token } = this.props\n    const { query } = this.props.widgetparamsMapped\n    const queryRequest: QueryBundleRequest = {\n      concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n      partMask: SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n      entityId: parseEntityIdFromSqlStatement(query),\n      query: {\n        sql: query,\n      },\n    }\n\n    getFullQueryTableResults(queryRequest, token)\n      .then((data: QueryResultBundle) => {\n        this.setState({\n          isLoaded: true,\n          queryData: data,\n        })\n      })\n      .catch((err: any) => {\n        console.log('Error on full table query ', err)\n      })\n  }\n\n  public showPlot() {\n    if (!this.state.isLoaded) {\n      return\n    }\n    const {\n      title,\n      xtitle,\n      ytitle,\n      type,\n      xaxistype,\n      showlegend,\n    } = this.props.widgetparamsMapped\n    const queryData = this.state\n    const isHorizontal = this.props.widgetparamsMapped.horizontal.toLowerCase()\n    const layout: any = {\n      showlegend,\n      title,\n    }\n    if (xtitle) {\n      layout.xaxis = {\n        title: xtitle,\n      }\n    }\n    if (xaxistype) {\n      layout.xaxis = {\n        ...layout.xaxis,\n        xaxistype: xaxistype.toLowerCase(),\n      }\n    }\n    if (ytitle) {\n      layout.yaxis = {\n        title: ytitle,\n      }\n    }\n    // init plot_data\n    const plotData: any = []\n    const orientation = isHorizontal ? 'v' : 'h'\n    const headers = queryData.queryData.queryResult.queryResults.headers\n    for (let i = 0; i < headers.length - 1; i += 1) {\n      // make an entry for each set of data points\n      plotData[i] = {\n        orientation,\n        name: headers[i + 1].name,\n        type: type.toLowerCase(),\n        x: [],\n        y: [],\n      }\n    }\n    // grab all the data\n    for (const row of queryData.queryData.queryResult.queryResults.rows) {\n      for (let j = 1; j < row.values.length; j += 1) {\n        // create pairs of data\n        const rowValues: any = row.values\n        plotData[j - 1].x.push(rowValues[0])\n        plotData[j - 1].y.push(rowValues[j])\n      }\n    }\n    return <Plot layout={layout} data={plotData} />\n  }\n\n  public render() {\n    if (!this.state.isLoaded) {\n      return null\n    }\n    return this.showPlot()\n  }\n}\nexport default SynapsePlot\n","import * as React from 'react'\nimport { SynapseClient, SynapseConstants } from '../utils'\nimport { FileHandleResults, WikiPage } from '../utils/synapseTypes/'\nimport UserCard from './UserCard'\nimport Bookmarks from './widgets/Bookmarks'\nimport SynapseImage from './widgets/SynapseImage'\nimport SynapsePlot from './widgets/SynapsePlot'\nconst TOC_CLASS = {\n  1: 'toc-indent1',\n  2: 'toc-indent2',\n  3: 'toc-indent3',\n  4: 'toc-indent4',\n  5: 'toc-indent5',\n  6: 'toc-indent6',\n}\n\ndeclare var katex: any\n\ndeclare var markdownitSynapse: any\ndeclare var markdownit: any\ndeclare var markdownitSub: any\ndeclare var markdownitSup: any\ndeclare var markdownitCentertext: any\ndeclare var markdownitSynapseHeading: any\ndeclare var markdownitSynapseTable: any\ndeclare var markdownitStrikethroughAlt: any\ndeclare var markdownitContainer: any\ndeclare var markdownitEmphasisAlt: any\ndeclare var markdownitInlineComments: any\ndeclare var markdownitBr: any\ndeclare var sanitizeHtml: any\n\ndeclare var markdownitMath: any\n\nexport type MarkdownSynapseProps = {\n  errorMessageView?: React.FunctionComponent\n  token?: string\n  ownerId?: string\n  wikiId?: string\n  markdown?: string\n  renderInline?: boolean\n}\nconst md = markdownit({ html: true })\n\ntype MarkdownSynapseState = {\n  md: any\n  data: Partial<WikiPage>\n  fileHandles?: FileHandleResults\n  errorMessage: string\n}\n/**\n * Basic Markdown functionality for Synapse, supporting Images/Plots/References/Bookmarks/buttonlinks\n *\n * @class Markdown\n * @extends {React.Component}\n */\nexport default class MarkdownSynapse extends React.Component<\n  MarkdownSynapseProps,\n  MarkdownSynapseState\n> {\n  public markupRef: React.RefObject<HTMLInputElement>\n\n  /**\n   * Creates an instance of Markdown.\n   * @param {*} props\n   */\n  constructor(props: MarkdownSynapseProps) {\n    super(props)\n    // markdownitSynapse wraps around markdownit object and uses its own dependencies\n    markdownitSynapse.init_markdown_it(\n      md,\n      markdownitSub,\n      markdownitSup,\n      markdownitCentertext,\n      markdownitSynapseHeading,\n      markdownitSynapseTable,\n      markdownitStrikethroughAlt,\n      markdownitContainer,\n      markdownitEmphasisAlt,\n      markdownitInlineComments,\n      markdownitBr,\n    )\n\n    const mathSuffix = ''\n    // Update the internal markdownit object with the wrapped synapse object\n    md.use(markdownitSynapse, mathSuffix).use(markdownitMath, mathSuffix)\n    const data: any = {}\n    if (this.props.markdown) {\n      data.markdown = this.props.markdown\n    }\n    this.state = {\n      md,\n      errorMessage: '',\n      fileHandles: undefined,\n      data,\n    }\n    this.markupRef = React.createRef()\n    this.handleLinkClicks = this.handleLinkClicks.bind(this)\n    // handle widgets and math markdown\n    this.renderMarkdown = this.renderMarkdown.bind(this)\n    this.recursiveRender = this.recursiveRender.bind(this)\n    this.processMath = this.processMath.bind(this)\n    // handle init calls to get wiki related items\n    this.getWikiAttachments = this.getWikiAttachments.bind(this)\n    this.getWikiPageMarkdown = this.getWikiPageMarkdown.bind(this)\n    // handle rendering widgets\n    this.renderWidget = this.renderWidget.bind(this)\n    this.renderSynapseButton = this.renderSynapseButton.bind(this)\n    this.renderSynapseImage = this.renderSynapseImage.bind(this)\n    this.renderSynapsePlot = this.renderSynapsePlot.bind(this)\n    this.renderSynapseTOC = this.renderSynapseTOC.bind(this)\n    this.getErrorView = this.getErrorView.bind(this)\n    this.createHTML = this.createHTML.bind(this)\n    this.addBookmarks = this.addBookmarks.bind(this)\n    this.addIdsToReferenceWidgets = this.addIdsToReferenceWidgets.bind(this)\n    this.addIdsToTocWidgets = this.addIdsToTocWidgets.bind(this)\n  }\n\n  public componentWillUnmount() {\n    // @ts-ignore TODO: find better documentation on typescript/react event params\n    this.markupRef.current!.removeEventListener('click', this.handleLinkClicks)\n  }\n\n  // Manually handle clicks to anchor tags where the scrollto isn't handled by page hash\n  public handleLinkClicks(event: React.MouseEvent<HTMLElement>) {\n    const genericElement = event.target as HTMLElement\n    if (genericElement.tagName === 'A' || genericElement.tagName === 'BUTTON') {\n      const anchor = event.target as HTMLAnchorElement\n      if (anchor.id.substring(0, 3) === 'ref') {\n        event.preventDefault()\n        // its a reference, so we scroll to the appropriate bookmark\n        const referenceNumber = Number(event.currentTarget.id.substring(3)) // e.g. ref2 => '2'\n        const goTo = this.markupRef.current!.querySelector(\n          `#bookmark${referenceNumber}`,\n        )\n        try {\n          goTo!.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'center',\n          })\n        } catch (e) {\n          console.log('error on scroll', e)\n        }\n      } else if (\n        event.currentTarget.id !== null &&\n        anchor.getAttribute('data-anchor')\n      ) {\n        event.preventDefault()\n        // handle table of contents widget\n        const idOfContent = anchor.getAttribute('data-anchor')\n        const goTo = this.markupRef.current!.querySelector(`#${idOfContent}`)\n        try {\n          goTo!.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'center',\n          })\n        } catch (e) {\n          console.log('error on scroll', e)\n        }\n      }\n    }\n  }\n\n  /**\n   * Given input text, generate markdown object to be passed onto inner html of some container.\n   * @param {String} markdown The text being written in plain markdown\n   * @returns {Object} Dictionary to be passed into dangerouslySetInnerHTML with markdown text\n   */\n  public createHTML(markdown?: string) {\n    if (!markdown) {\n      return { __html: '' }\n    }\n    // Note - renderInline parses out any block level elements contained in the markdown\n    const initText = this.props.renderInline\n      ? this.state.md.renderInline(markdown)\n      : this.state.md.render(markdown)\n    const cleanText = sanitizeHtml(initText, {\n      allowedAttributes: {\n        a: ['href', 'target'],\n        button: ['class'],\n        div: ['class', 'style'],\n        h1: ['toc'],\n        h2: ['toc'],\n        h3: ['toc'],\n        h4: ['toc'],\n        h5: ['toc'],\n        h6: ['toc'],\n        li: ['class'],\n        ol: ['class'],\n        span: ['*'],\n        table: ['class'],\n        th: ['colspan'],\n        thead: ['class'],\n        ul: ['class'],\n        img: ['src', 'alt'],\n      },\n      allowedTags: [\n        'span',\n        'code',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'p',\n        'b',\n        'i',\n        'em',\n        'strong',\n        'a',\n        'id',\n        'table',\n        'tr',\n        'td',\n        'tbody',\n        'th',\n        'thead',\n        'button',\n        'div',\n        'img',\n        'image',\n        'ol',\n        'ul',\n        'li',\n        'svg',\n        'g',\n        'br',\n        'hr',\n        'summary',\n        'details',\n      ],\n    })\n    return { __html: cleanText }\n  }\n\n  /**\n   * Find all math identified elements of the form [id^=\\\"mathjax-\\\"]\n   * (e.g. <dom element id=\"mathjax-10\"> text </dom element>)\n   * and transform them to their math markedown equivalents\n   */\n  public processMath() {\n    if (!this.markupRef.current) {\n      return\n    }\n    // use regex to grab all elements\n    const mathExpressions = this.markupRef.current.querySelectorAll<\n      HTMLElement\n    >('[id^=\"mathjax-\"]')\n    // go through all obtained elements and transform them with katex\n    mathExpressions.forEach(element => {\n      element.textContent &&\n        katex.render(element.textContent, element, {\n          // @ts-ignore\n          output: 'html',\n          throwOnError: false,\n        })\n    })\n  }\n  /**\n   * Process all the corresponding bookmark tags of the references made throughout the page\n   *\n   * @memberof MarkdownSynapse\n   */\n  public addBookmarks() {\n    markdownitSynapse.resetFootnotes()\n    this.createHTML(this.state.data.markdown)\n    const footnotesHtml = this.createHTML(markdownitSynapse.footnotes()).__html\n    if (footnotesHtml.length > 0) {\n      return <Bookmarks footnotes={footnotesHtml} />\n    }\n    return\n  }\n\n  /**\n   * Get wiki page markdown and file attachment handles\n   */\n  public async getWikiPageMarkdown() {\n    const { ownerId, wikiId = '', token } = this.props\n    try {\n      const wikiPage = await SynapseClient.getEntityWiki(token, ownerId, wikiId)\n      try {\n        const fileHandles = await this.getWikiAttachments(\n          wikiId ? wikiId : wikiPage.id,\n        )\n        this.setState({\n          data: wikiPage,\n          fileHandles,\n        })\n      } catch (fileHandlesErr) {\n        console.error('fileHandlesErr = ', fileHandlesErr)\n      }\n    } catch (err) {\n      console.error('Error on wiki markdown load\\n', err)\n    }\n  }\n  public async getWikiAttachments(wikiId: string) {\n    const { token, ownerId } = this.props\n    if (!ownerId) {\n      console.error(\n        'Cannot get wiki attachments without ownerId on Markdown Component',\n      )\n      return undefined\n    }\n    return await SynapseClient.getWikiAttachmentsFromEntity(\n      token,\n      ownerId,\n      wikiId,\n    )\n      .then(data => {\n        return data\n      })\n      .catch(err => {\n        this.setState({\n          errorMessage: err.reason,\n        })\n        console.error('Error on wiki attachment load ', err)\n        return undefined\n      })\n  }\n  /**\n   * If theres an error loading the wiki page show an informative message\n   * likely a priveledge issue -- (e.g. not signed-in)\n   *\n   * @returns view that presents error message on error, otherwise null\n   */\n  public getErrorView() {\n    if (this.state.errorMessage && this.props.errorMessageView) {\n      const ErrorView = this.props.errorMessageView as React.FC\n      return <ErrorView>{this.state.errorMessage}</ErrorView>\n    }\n    return\n  }\n\n  public addIdsToReferenceWidgets(text: string) {\n    const referenceRegex = /<span id=\"wikiReference.*?<span data-widgetparams.*?span>/g\n    let referenceCount = 1\n\n    return text.replace(referenceRegex, () => {\n      // replace all reference tags with id's of the form id=\"ref<number>\"\" that we can read onClick\n      const current = referenceCount\n      referenceCount += 1\n      return `<a href=\"\" id=\"ref${current}\">[${current}]</a>`\n    })\n  }\n\n  public addIdsToTocWidgets(text: string) {\n    const tocId = 'SRC-header-'\n    let tocIdCount = 1\n    const TOC_HEADER_REGEX = /<h[1-6] toc=\"true\">.*<\\/h[1-6]>/gm\n\n    return text.replace(TOC_HEADER_REGEX, (match: string) => {\n      // replace with id of the form id=\"toc\" so we can read them with onclick events\n      const curTocId = tocIdCount\n      tocIdCount += 1\n      const matchWithId = `${match.substring(\n        0,\n        3,\n      )} id=\"${tocId}${curTocId}\"${match.substring(3)}`\n      return matchWithId\n    })\n  }\n\n  /**\n   * The 'main' method of this class that process all the markdown and transforms it to the appropriate\n   * Synapse widgets.\n   *\n   * @returns JSX of the markdown into widgets\n   * @memberof MarkdownSynapse\n   */\n  public renderMarkdown() {\n    // create initial markup\n    let markup = this.createHTML(this.state.data.markdown).__html\n    // process reference widgets\n    markup = this.addIdsToReferenceWidgets(markup)\n    // process table of contents widgets\n    markup = this.addIdsToTocWidgets(markup)\n    if (markup.length > 0) {\n      const domParser = new DOMParser()\n      const document = domParser.parseFromString(markup, 'text/html')\n      return <>{this.recursiveRender(document.body, markup)}</>\n    }\n    return\n  }\n\n  /**\n   * recursiveRender will render react tree from HTML tree\n   *\n   * @param {Node} element This will be either a text Node or an HTMLElement\n   * @param {string} markdown The original markdown, its kept as a special case for the table of contents widget\n   * @returns {*}\n   * @memberof MarkdownSynapse\n   */\n  public recursiveRender(element: Node, markdown: string): any {\n    /*\n      Recursively render the html tree created from the markdown, there are a few cases:\n      1. element is Node and is text in which case it is simply rendered\n      2. element is an HTMLElement and is: a self closing tag, has no children (e.g. <br>), or its a synapse widget and is \n      rendered accordingly\n      3. element is an HTMLElement and has children so we loop through its childNodes, recurively render those, and then render its own tag\n      as the parent of those child nodes. Note - childNodes was specifically chosen over .children because text Nodes\n      would not come through .children\n    */\n    if (element.nodeType === Node.TEXT_NODE) {\n      // case 1.\n      return <> {element.textContent} </>\n    } else if (\n      element.nodeType === Node.ELEMENT_NODE &&\n      element instanceof HTMLElement\n    ) {\n      const tagName =\n        element.tagName.toLowerCase() === 'body'\n          ? 'span'\n          : element.tagName.toLowerCase()\n      const widgetParams = element.getAttribute('data-widgetparams')\n      if (widgetParams) {\n        // case 2\n        // process widget\n        return this.processHTMLWidgetMapping(widgetParams, markdown)\n      }\n      // manually add on props, depending on what comes through the markdown their could\n      // be unforseen issues with attributes being misnamed according to what react will respect\n      // e.g. class instead of className\n      const attributes = element.attributes\n      const props = {}\n      for (let i = 0; i < attributes.length; i++) {\n        let name = ''\n        let value = ''\n        const attribute = attributes.item(i)\n        if (attribute) {\n          name = attribute.name\n          value = attribute.value\n        }\n        if (name && value) {\n          props[name] = value\n        }\n      }\n      if (element.childNodes.length === 0) {\n        // case 2\n        // e.g. self closing tag like <br/> or <img>\n        return React.createElement(tagName, props)\n      }\n      // case 3\n      // recursively render children\n      const children = Array.from(element.childNodes).map(el => {\n        return <>{this.recursiveRender(el, markdown)}</>\n      })\n      // Render tagName as parent element of the children below\n      return React.createElement(tagName, props, <>{children}</>)\n    }\n  }\n\n  /**\n   *  When the markdown string is transfered over the network certain characters get transformed,\n   * this does a simple transformation back to the original user's string.\n   *\n   * @param {string} xml\n   * @returns\n   * @memberof MarkdownSynapse\n   */\n  public decodeXml(xml: string) {\n    const escapedOneToXmlSpecialMap = {\n      '&amp;': '&',\n      '&gt;': '>',\n      '&lt;': '<',\n      '&quot;': '\"',\n    }\n    return xml.replace(/(&quot;|&lt;|&gt;|&amp;)/g, (str, item) => {\n      return escapedOneToXmlSpecialMap[item]\n    })\n  }\n\n  /**\n   * Given widgetMap renders it in a React component (or originalMarkup in special cases.)\n   *\n   * @param {string} widgetMatch The synapse widget to be rendered\n   * @param {string} originalMarkup The original markup text, this is a special case for widgets that\n   * are html specific.\n   * @returns JSX of the widget to render\n   * @memberof MarkdownSynapse\n   */\n  public processHTMLWidgetMapping(\n    widgetParams: string,\n    originalMarkup: string,\n  ) {\n    // General workflow -\n    //   1. Capture widget parameters\n    //   2. Transform any widget xml parameters to standard text\n    //   3. Split those parameters into a map\n    //   4. Render that widget based on its parameters\n\n    // steps 1,2\n    const decodedWidgetParams = this.decodeXml(widgetParams)\n\n    // decodedWidgetParams look like {<widget>?param1=xxx&param2=yyy}\n    const questionIndex = decodedWidgetParams.indexOf('?')\n    if (questionIndex === -1) {\n      // e.g. toc is passed, there are no params\n      return this.renderWidget(decodedWidgetParams, {}, originalMarkup)\n    }\n    const widgetType = decodedWidgetParams.substring(0, questionIndex)\n    const widgetparamsMapped = {}\n    // map out params and their values\n    decodedWidgetParams\n      .substring(questionIndex + 1)\n      .split('&')\n      .forEach(keyPair => {\n        let [key, value] = keyPair.split('=')\n        value = decodeURIComponent(value)\n        widgetparamsMapped[key] = value\n      })\n    return this.renderWidget(widgetType, widgetparamsMapped, originalMarkup)\n  }\n\n  /**\n   *  Given widgetType renders the apppropriate widget\n   *\n   * @param {string} widgetType The type of synapse widget. (e.g. 'image', 'plot')\n   * @param {*} widgetparamsMapped The parameters for this widget\n   * @param {string} originalMarkup The original markup.\n   * @returns\n   * @memberof MarkdownSynapse\n   */\n  public renderWidget(\n    widgetType: string,\n    widgetparamsMapped: any,\n    originalMarkup: string,\n  ) {\n    // we make keys out of the widget params\n    const key = JSON.stringify(widgetparamsMapped)\n    widgetparamsMapped.reactKey = key\n    switch (widgetType) {\n      case 'buttonlink':\n        return this.renderSynapseButton(widgetparamsMapped)\n      case 'image':\n        return this.renderSynapseImage(widgetparamsMapped)\n      case 'plot':\n        return this.renderSynapsePlot(widgetparamsMapped)\n      case 'toc':\n        return this.renderSynapseTOC(originalMarkup)\n      case 'badge':\n        return this.renderUserBadge(widgetparamsMapped)\n      default:\n        return\n    }\n  }\n\n  public renderSynapseButton(widgetparamsMapped: any) {\n    let buttonClasses = ''\n    const { align = '', highlight = '' } = widgetparamsMapped\n    const alignLowerCase = align.toLowerCase()\n    if (alignLowerCase === 'left') {\n      buttonClasses += 'floatLeft '\n    }\n    if (alignLowerCase === 'right') {\n      buttonClasses += 'floatright '\n    }\n    if (highlight === 'true') {\n      buttonClasses += ' SRC-primary-button '\n    } else {\n      buttonClasses += 'SRC-light-button '\n    }\n    if (alignLowerCase === 'center') {\n      return (\n        <div key={widgetparamsMapped.reactKey} style={{ textAlign: 'center' }}>\n          <a\n            href={widgetparamsMapped.url}\n            className={'SRC-standard-button-shape ' + buttonClasses}\n            role=\"button\"\n          >\n            {widgetparamsMapped.text}\n          </a>\n        </div>\n      )\n    }\n    return (\n      <a\n        key={widgetparamsMapped.reactKey}\n        href={widgetparamsMapped.url}\n        className={'SRC-standard-button-shape ' + buttonClasses}\n        role=\"button\"\n      >\n        {widgetparamsMapped.text}\n      </a>\n    )\n  }\n  public renderSynapsePlot(widgetparamsMapped: any) {\n    return (\n      <SynapsePlot\n        key={widgetparamsMapped.reactKey}\n        token={this.props.token}\n        ownerId={this.props.ownerId}\n        wikiId={this.props.wikiId || this.state.data.id}\n        widgetparamsMapped={widgetparamsMapped}\n      />\n    )\n  }\n\n  public renderSynapseImage(widgetparamsMapped: any) {\n    const { reactKey } = widgetparamsMapped\n    if (widgetparamsMapped.fileName) {\n      if (!this.state.fileHandles) {\n        // ensure files are loaded\n        return\n      }\n      // if file name is attached then the fileHandle ID is located\n      // in this wiki's file attachment list\n      return (\n        <SynapseImage\n          params={widgetparamsMapped}\n          key={reactKey}\n          token={this.props.token}\n          fileName={widgetparamsMapped.fileName}\n          wikiId={this.props.wikiId || this.state.data.id}\n          fileResults={this.state.fileHandles.list}\n        />\n      )\n    }\n    if (widgetparamsMapped.synapseId) {\n      // otherwise this image's fileHandle ID is not located\n      // in the file attachment list and will be loaded first\n      return (\n        <SynapseImage\n          params={widgetparamsMapped}\n          key={reactKey}\n          token={this.props.token}\n          synapseId={widgetparamsMapped.synapseId}\n        />\n      )\n    }\n    return\n  }\n  public renderSynapseTOC(originalMarkup: string) {\n    const elements: any[] = []\n    const TOC_HEADER_REGEX_WITH_ID = /<h([1-6]) id=\"(.*)\" .*toc=\"true\">(.*)<\\/h[1-6]>/gm\n    let text = ''\n    originalMarkup.replace(TOC_HEADER_REGEX_WITH_ID, (p1, p2, p3, p4) => {\n      text += p4\n      elements.push(\n        <div key={p4}>\n          <a className={`link ${TOC_CLASS[Number(p2)]}`} data-anchor={p3}>\n            {p4}\n          </a>\n        </div>,\n      )\n      return ''\n    })\n    return <div key={text}>{elements}</div>\n  }\n\n  public renderUserBadge(widgetparamsMapped: any) {\n    return (\n      <UserCard\n        key={JSON.stringify(widgetparamsMapped)}\n        size={SynapseConstants.SMALL_USER_CARD}\n        alias={widgetparamsMapped.alias}\n      />\n    )\n  }\n\n  public async componentDidMount() {\n    if (this.state.data.markdown) {\n      return\n    }\n    // we use this.markupRef.current && because in testing environment refs aren't defined\n    // @ts-ignore\n    this.markupRef.current &&\n      // @ts-ignore\n      this.markupRef.current!.addEventListener('click', this.handleLinkClicks)\n    // unpack and set default value if not specified\n    // get wiki attachments\n    await this.getWikiPageMarkdown()\n    this.processMath()\n  }\n\n  // on component update find and re-render the math/widget items accordingly\n  public async componentDidUpdate(prevProps: MarkdownSynapseProps) {\n    let shouldUpdate = this.props.token !== prevProps.token\n    shouldUpdate = shouldUpdate || this.props.ownerId !== prevProps.ownerId\n    shouldUpdate = shouldUpdate || this.props.wikiId !== prevProps.wikiId\n\n    // we have to carefully update the component so it doesn't encounter an infinite loop\n    if (shouldUpdate) {\n      await this.getWikiPageMarkdown()\n    }\n    this.processMath()\n  }\n\n  public render() {\n    const { renderInline } = this.props\n    const bookmarks = this.addBookmarks()\n    const content = (\n      <>\n        {this.renderMarkdown()}\n        {bookmarks && <div>{this.addBookmarks()}</div>}\n      </>\n    )\n    if (renderInline) {\n      return (\n        <span className=\"markdown markdown-inline\" ref={this.markupRef}>\n          {content}\n        </span>\n      )\n    }\n    return (\n      <div className=\"markdown\" ref={this.markupRef}>\n        {content}\n      </div>\n    )\n  }\n}\n","import { CardFooter, Icon } from './row_renderers/utils'\nimport { MarkdownValue } from './CardContainerLogic'\nimport MarkdownSynapse from './MarkdownSynapse'\nimport React, { useState, useEffect } from 'react'\n\nexport type IconOptions = {\n  [index: string]: string\n}\nexport type HeaderCardProps = {\n  iconOptions?: IconOptions\n  backgroundColor?: string\n  type: string\n  title: string\n  subTitle: string\n  description: string\n  iconValue: string\n  secondaryLabelLimit?: number\n  values?: string[][]\n  isAlignToLeftNav?: boolean\n  descriptionLinkConfig?: MarkdownValue\n}\n\nconst HeaderCard: React.FunctionComponent<HeaderCardProps> = ({\n  type,\n  title,\n  subTitle,\n  description,\n  iconOptions,\n  iconValue,\n  backgroundColor,\n  values,\n  secondaryLabelLimit,\n  isAlignToLeftNav,\n  descriptionLinkConfig,\n}) => {\n  // store old document title and description so that we can restore when this component is removed\n  const descriptionElement: Element | null = document.querySelector(\n    'meta[name=\"description\"]',\n  )\n  const [docTitle] = useState<string>(document.title)\n  const [docDescription] = useState<string>(\n    descriptionElement ? descriptionElement.getAttribute('content')! : '',\n  )\n  useEffect(() => {\n    // update page title and description based on header card values\n    if (title && document.title !== title) {\n      document.title = title\n    }\n\n    if (description || subTitle) {\n      descriptionElement?.setAttribute(\n        'content',\n        description ? description : subTitle,\n      )\n    }\n\n    return function cleanup() {\n      document.title = docTitle\n      descriptionElement?.setAttribute('content', docDescription)\n    }\n  })\n\n  const style: React.CSSProperties = {\n    background: backgroundColor,\n  }\n  return (\n    <div\n      style={style}\n      className={`SRC-portalCardHeader${\n        isAlignToLeftNav ? ' isAlignToLeftNav' : ''\n      }`}\n    >\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div\n            className={`iconContainer${\n              isAlignToLeftNav ? ' col-md-offset-1 col-md-2' : ' col-md-1'\n            }`}\n          >\n            <Icon value={iconValue} iconOptions={iconOptions} type={type} />\n          </div>\n          <div\n            className={`SRC-cardContent${\n              isAlignToLeftNav ? ' col-md-8' : ' col-md-10'\n            }`}\n          >\n            <div className=\"SRC-type\">{type}</div>\n            <div>\n              <h3\n                className=\"SRC-boldText SRC-blackText\"\n                style={{ margin: 'none' }}\n              >\n                {title}\n              </h3>\n            </div>\n            {subTitle && <div className=\"SRC-author\"> {subTitle} </div>}\n            {description && (\n              <span className=\"SRC-font-size-base\">\n                {descriptionLinkConfig ? (\n                  <MarkdownSynapse markdown={description} />\n                ) : (\n                  description\n                )}\n              </span>\n            )}\n            <div\n              style={{\n                borderTop: '1px solid rgba(26, 28, 41, 0.2)',\n                marginTop: '15px',\n                paddingTop: '5px',\n              }}\n            >\n              {values && (\n                <CardFooter\n                  isHeader={true}\n                  secondaryLabelLimit={secondaryLabelLimit}\n                  values={values}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default HeaderCard\n","import * as React from 'react'\nimport HeaderCard from './HeaderCard'\nimport { CardFooter, Icon } from './row_renderers/utils'\nimport {\n  CardLink,\n  CommonCardProps,\n  MarkdownLink,\n  MarkdownValue,\n} from './CardContainerLogic'\nimport { unCamelCase } from '../utils/functions/unCamelCase'\nimport MarkdownSynapse from './MarkdownSynapse'\nimport { SelectColumn } from '../utils/synapseTypes'\n\nexport type KeyToAlias = {\n  key: string\n  alias?: string\n}\n\nexport type KeyToAliasMap = {\n  [index: number]: KeyToAlias\n  [index: string]: KeyToAlias\n}\n\nexport type GenericCardSchema = {\n  type: string\n  title: string\n  subTitle?: string\n  description?: string\n  icon?: string\n  secondaryLabels?: any[]\n  link?: string\n}\n\nexport type IconOptions = {\n  [index: string]: string\n}\n\nexport type GenericCardProps = {\n  selectColumns?: SelectColumn[]\n  facetAliases?: {}\n  iconOptions?: IconOptions\n  backgroundColor?: string\n  isHeader?: boolean\n  isAlignToLeftNav?: boolean\n  schema: any\n  data: any\n  token?: string\n} & CommonCardProps\n\nexport type GenericCardState = {\n  hasClickedShowMore: boolean\n}\n\nconst CHAR_COUNT_CUTOFF = 400\nexport const CARD_SHORT_DESCRIPTION_CSS = 'SRC-short-description'\nexport const CARD_LONG_DESCRIPTION_CSS = 'SRC-long-description'\n\n// doi regex here - https://www.crossref.org/blog/dois-and-matching-regular-expressions/\n// note - had to add an escape character for the second slash in the regex above\nexport const DOI_REGEX = /^10.\\d{4,9}\\/[-._;()/:a-z0-9]+$/\n// check for 'syn' followed and ended by a digit of unlimited length, must also begin the line\nexport const SYNAPSE_REGX = /^syn\\d+$/\n\n// This function isn't in the class only for ease of testing with renderShortDescription\nexport const getCutoff = (summary: string) => {\n  let previewText = ''\n  const summarySplit = summary!.split(' ')\n  // find num words to join such that its >= char_count_cutoff\n  let i = 0\n  while (previewText.length < CHAR_COUNT_CUTOFF && i < summarySplit.length) {\n    previewText += `${summarySplit[i]} `\n    i += 1\n  }\n  previewText = previewText.trim()\n  return { previewText }\n}\n\nexport default class GenericCard extends React.Component<\n  GenericCardProps,\n  GenericCardState\n> {\n  constructor(props: GenericCardProps) {\n    super(props)\n    this.state = {\n      hasClickedShowMore: false,\n    }\n    this.renderTitleLink = this.renderTitleLink.bind(this)\n    this.renderLabel = this.renderLabel.bind(this)\n    this.renderLongDescription = this.renderLongDescription.bind(this)\n    this.renderShortDescription = this.renderShortDescription.bind(this)\n  }\n\n  public renderTitleLink(\n    link: string,\n    titleLink?: CardLink,\n    data?: string[],\n    schema?: any,\n  ) {\n    let linkDisplay = link\n    let target = '_self'\n    if (link.match(SYNAPSE_REGX)) {\n      // its a synId\n      linkDisplay = `https://www.synapse.org/#!Synapse:${link}`\n    } else if (link.match(DOI_REGEX)) {\n      target = '_blank'\n      linkDisplay = `https://dx.doi.org/${link}`\n    } else if (!titleLink) {\n      target = '_blank'\n    } else if (titleLink) {\n      if (!data || !schema) {\n        throw Error('Must specify CardLink and data for linking to work')\n      }\n      const { matchColumnName, URLColumnName } = titleLink\n      const indexInData = schema[matchColumnName]\n      if (indexInData === undefined) {\n        console.error(\n          `Could not find match for data: ${data} with columnName ${matchColumnName}`,\n        )\n      } else {\n        const value = data[indexInData]\n        linkDisplay = `/${titleLink.baseURL}?${URLColumnName}=${value}`\n      }\n    }\n    return { linkDisplay, target }\n  }\n\n  getCutoff = (summary: string) => {\n    let previewText = ''\n    const summarySplit = summary!.split(' ')\n    // find num words to join such that its >= char_count_cutoff\n    let i = 0\n    while (previewText.length < CHAR_COUNT_CUTOFF && i < summarySplit.length) {\n      previewText += `${summarySplit[i]} `\n      i += 1\n    }\n    previewText = previewText.trim()\n    return { previewText }\n  }\n\n  toggleShowMore = () => {\n    this.setState({\n      hasClickedShowMore: true,\n    })\n  }\n\n  public renderLabel(\n    value: string,\n    labelLink: CardLink | MarkdownLink,\n    isHeader: boolean,\n  ) {\n    if (labelLink.isMarkdown) {\n      return <MarkdownSynapse renderInline={true} markdown={value} />\n    }\n    const split = value.split(',')\n    let className = ''\n    const style: React.CSSProperties = {}\n    if (isHeader) {\n      className = 'SRC-lightLink'\n    } else {\n      className = 'SRC-primary-text-color'\n    }\n    return split.map((el, index) => {\n      const { baseURL, URLColumnName } = labelLink\n      const href = `/${baseURL}?${URLColumnName}=${el}`\n      return (\n        <React.Fragment key={el}>\n          <a href={href} key={el} className={className} style={style}>\n            {el}\n          </a>\n          {index < split.length - 1 && (\n            <span style={{ marginRight: 4 }}> , </span>\n          )}\n        </React.Fragment>\n      )\n    })\n  }\n\n  render() {\n    const {\n      schema,\n      data,\n      genericCardSchema,\n      secondaryLabelLimit,\n      backgroundColor,\n      selectColumns,\n      iconOptions,\n      isHeader = false,\n      titleLinkConfig,\n      labelLinkConfig,\n      facetAliases = {},\n      isAlignToLeftNav = false,\n      descriptionLinkConfig,\n    } = this.props\n    // GenericCard inherits properties from CommonCardProps so that the properties have the same name\n    // and type, but theres one nuance which is that we can't override if one specific property will be\n    // defined, so we assert genericCardSchema is not null and assign to genericCardSchemaDefined\n    const genericCardSchemaDefined = genericCardSchema!\n    const { hasClickedShowMore } = this.state\n    const { link = '', type } = genericCardSchemaDefined\n    const title = data[schema[genericCardSchemaDefined.title]]\n    const subTitle =\n      genericCardSchemaDefined.subTitle &&\n      data[schema[genericCardSchemaDefined.subTitle]]\n    const description = data[schema[genericCardSchemaDefined.description || '']]\n    const iconValue = data[schema[genericCardSchemaDefined.icon || '']]\n    // wrap link in parens because undefined would throw an error\n    const linkValue: string = data[schema[link]] || ''\n    const { linkDisplay, target } = this.renderTitleLink(\n      linkValue,\n      titleLinkConfig,\n      data,\n      schema,\n    )\n    const values: string[][] = []\n    const { secondaryLabels = [] } = genericCardSchemaDefined\n    for (let i = 0; i < secondaryLabels.length; i += 1) {\n      const columnName = secondaryLabels[i]\n      let value = data[schema[columnName]]\n\n      const selectedColumnOrUndefined = selectColumns?.find(\n        el => el.name === columnName,\n      )\n      const isMultiValue =\n        selectedColumnOrUndefined?.columnType === 'STRING_LIST' ||\n        selectedColumnOrUndefined?.columnType === 'INTEGER_LIST'\n      if (value) {\n        const labelLink =\n          labelLinkConfig &&\n          labelLinkConfig.find(el => el.matchColumnName === columnName)\n        if (labelLink) {\n          // create link for this column\n          value = this.renderLabel(value, labelLink, isHeader)\n        }\n        const columnDisplayName =\n          facetAliases[columnName] || unCamelCase(columnName)\n        if (isMultiValue) {\n          try {\n            value = JSON.parse(value)\n            value = (value as string[]).join(' , ')\n          } catch (e) {\n            console.error('Error on parsing value for ', value)\n          }\n        }\n        const keyValue = [columnDisplayName, value]\n        values.push(keyValue)\n      }\n    }\n\n    const showFooter = values.length > 0\n\n    const style: React.CSSProperties = {\n      background: backgroundColor,\n      // undefined, take default value from class\n      marginTop: isHeader ? '0px' : undefined,\n      marginBottom: isHeader ? '0px' : undefined,\n      paddingBottom: showFooter ? undefined : '15px',\n    }\n\n    if (isHeader) {\n      return (\n        <HeaderCard\n          descriptionLinkConfig={descriptionLinkConfig}\n          type={type}\n          title={title}\n          subTitle={subTitle}\n          backgroundColor={backgroundColor}\n          description={description}\n          iconValue={iconValue}\n          iconOptions={iconOptions}\n          values={values}\n          isAlignToLeftNav={isAlignToLeftNav}\n          secondaryLabelLimit={secondaryLabelLimit}\n        />\n      )\n    }\n\n    const titleSearchHandle =\n      facetAliases[genericCardSchemaDefined.title] ||\n      unCamelCase(genericCardSchemaDefined.title)\n    const stubTitleSearchHandle =\n      facetAliases[genericCardSchemaDefined.subTitle || ''] ||\n      unCamelCase(genericCardSchemaDefined.subTitle)\n    const descriptionSubTitle =\n      facetAliases[genericCardSchemaDefined.description || ''] ||\n      unCamelCase(genericCardSchemaDefined.description)\n    return (\n      <div style={style} className={'SRC-portalCard'}>\n        <div className=\"SRC-cardThumbnail\">\n          <Icon iconOptions={iconOptions} value={iconValue} type={type} />\n        </div>\n        <div className=\"SRC-cardContent\">\n          <div className=\"SRC-type\">{type}</div>\n          <div>\n            <h3\n              className=\"SRC-boldText SRC-blackText\"\n              style={{ margin: 'none' }}\n            >\n              {linkDisplay ? (\n                <a\n                  data-search-handle={titleSearchHandle}\n                  className=\"SRC-primary-text-color\"\n                  target={target}\n                  href={linkDisplay}\n                >\n                  {title}\n                </a>\n              ) : (\n                <span data-search-handle={titleSearchHandle}> {title} </span>\n              )}\n            </h3>\n          </div>\n          {subTitle && (\n            <div\n              data-search-handle={stubTitleSearchHandle}\n              className=\"SRC-author\"\n            >\n              {subTitle}\n            </div>\n          )}\n          {/* \n            Below is a hack that allows word highlighting to work, the Search component insert's\n            html elements outside of the React DOM which if detected would break the app,\n            but as written below this avoids that reconcilliation process.\n          */}\n          {description &&\n            this.renderShortDescription(\n              description,\n              hasClickedShowMore,\n              descriptionSubTitle,\n              descriptionLinkConfig,\n            )}\n          {description &&\n            this.renderLongDescription(\n              description,\n              hasClickedShowMore,\n              descriptionSubTitle,\n              descriptionLinkConfig,\n              this.props.token,\n            )}\n        </div>\n        {showFooter && (\n          <CardFooter\n            isHeader={false}\n            secondaryLabelLimit={secondaryLabelLimit}\n            values={values}\n          />\n        )}\n      </div>\n    )\n  }\n\n  public renderLongDescription(\n    description: string,\n    hasClickedShowMore: boolean,\n    descriptionSubTitle: any,\n    descriptionLinkConfig?: MarkdownValue,\n    token?: string,\n  ): React.ReactNode {\n    let content: JSX.Element | string = description\n    if (descriptionLinkConfig?.isMarkdown) {\n      content = <MarkdownSynapse token={token} markdown={content} />\n    }\n    const show = hasClickedShowMore || descriptionLinkConfig\n    return (\n      <div className={show ? '' : 'SRC-hidden'}>\n        <span\n          data-search-handle={descriptionSubTitle}\n          className={`SRC-font-size-base ${CARD_LONG_DESCRIPTION_CSS}`}\n        >\n          {content}\n        </span>\n      </div>\n    )\n  }\n\n  public renderShortDescription(\n    description: string,\n    hasClickedShowMore: boolean,\n    descriptionSubTitle: any,\n    descriptionLinkConfig?: MarkdownValue,\n  ): React.ReactNode {\n    if (descriptionLinkConfig) {\n      return <></>\n    }\n    return (\n      <div className={hasClickedShowMore ? 'SRC-hidden' : ''}>\n        <span\n          data-search-handle={descriptionSubTitle}\n          className={`SRC-font-size-base ${CARD_SHORT_DESCRIPTION_CSS} SRC-short-description`}\n        >\n          {getCutoff(description).previewText}\n        </span>\n        {description.length >= CHAR_COUNT_CUTOFF && (\n          <button\n            style={{\n              fontSize: '14px',\n              cursor: 'pointer',\n              marginLeft: '-2px',\n            }}\n            className=\"SRC-primary-text-color\"\n            onClick={this.toggleShowMore}\n          >\n            ...Show More\n          </button>\n        )}\n      </div>\n    )\n  }\n}\n","import { lexer, parser } from 'sql-parser'\nimport { SYNAPSE_REGX } from '../../containers/GenericCard'\nimport { SelectColumn, Row } from '../synapseTypes'\n\nexport type KeyValue = {\n  [index: string]: string\n}\n\nexport type SQLOperator = 'LIKE' | '='\n\n// look for \"group by\", multi-line and case insensitive\nconst GROUP_BY_REGEX = /group by/im\nexport const isGroupByInSql = (sql: string): boolean => {\n  return GROUP_BY_REGEX.test(sql)\n}\nconst WITHOUT_SYN_PREFIX = 3\n\nconst generateTokenUsingOperator = (\n  literal: string,\n  operator: SQLOperator,\n  match: string,\n) => {\n  let usedMatchForLike = match\n  if (match.match(SYNAPSE_REGX)) {\n    // If we use a LIKE statement with a synId the backend will look for a string with the first three\n    // characters being 'syn', however, it stores synIds without 'syn', so the query will fail\n    // The backend usually parses 'syn' out, but not with the LIKE clause since its expecting a regex, so we\n    // parse this out. This will cause a bug if something matches the synId regex but is in free text.\n    usedMatchForLike = match.substring(WITHOUT_SYN_PREFIX)\n  }\n  switch (operator) {\n    case 'LIKE':\n      return [\n        ['LITERAL', literal, '1'],\n        ['OPERATOR', operator, '1'],\n        ['STRING', `%${usedMatchForLike}%`, '1'],\n      ]\n    case '=':\n      return [\n        ['LITERAL', literal, '1'],\n        ['OPERATOR', operator, '1'],\n        ['STRING', match, '1'],\n      ]\n  }\n}\n\n// This will construct a sql query by adding the conditions in searchParams\n// to the WHERE clause, preserving all other clauses\nexport const insertConditionsFromSearchParams = (\n  searchParams: KeyValue,\n  sql: string,\n  operator: SQLOperator = 'LIKE',\n) => {\n  const tokens: string[][] = lexer.tokenize(sql)\n  // we want to either create a where clause or insert into the where clause\n  const foundIndex = tokens.findIndex(el => el[0] === 'WHERE')\n  const whereClauseIndex =\n    foundIndex === -1\n      ? tokens.findIndex(el => el[0] === 'FROM') + 2\n      : foundIndex\n  const indexAfterWhereClause = whereClauseIndex + 1\n  if (foundIndex === -1) {\n    // insert a where clause\n    tokens.splice(whereClauseIndex, 0, ['WHERE', 'WHERE', '1'])\n  } else {\n    // if this is inserting into a where clause then we have to make sure that the logic is chained\n    tokens.splice(indexAfterWhereClause, 0, ['CONDITIONAL', 'AND', '1'])\n  }\n  const searchParamsLen = Object.keys(searchParams).length\n  Object.keys(searchParams).forEach((key, index) => {\n    const token = generateTokenUsingOperator(key, operator, searchParams[key])\n    if (index < searchParamsLen - 1) {\n      // make sure to chain the ANDs until the last one\n      token.unshift(['CONDITIONAL', 'AND', '1'])\n    }\n    tokens.splice(indexAfterWhereClause, 0, ...token)\n  })\n  return formatSQLFromParser(tokens)\n}\n\nexport const formatSQLFromParser = (tokens: string[][]) => {\n  // remove backtick from output sql (for table name): `syn1234` becomes syn1234\n  const synId = tokens[tokens.findIndex(el => el[0] === 'FROM') + 1][1]\n  const newSql = parser.parse(tokens).toString()\n  const splitString = `\\`${synId}\\``\n  return newSql.split(splitString).join(synId)\n}\n\n//parses synapse entity id from a sql query string\n//look for a pattern of 'from[some number of spaces]syn[somenumbers]` case insensitive\nexport const parseEntityIdFromSqlStatement = (sql:string): string => {\n  const matches = sql.match(/(from)\\s+(syn)\\d+/gi)\n  return  (matches && matches[0])? matches[0].substr(5).trim() : ''\n}\n\nexport const resultToJson = <T>(  \n  headerColumns: SelectColumn[],\n     rowColumns: Row[]\n   ): T[] => {\n     const result: T[] = [];\n     const rows = rowColumns.map(row => row.values);\n     const headers = headerColumns.map(column => column.name);\n     rows.forEach((row, index) => {\n       result[index] = {} as T;\n       row.forEach((text, cellIndex) => {\n         result[index][headers[cellIndex]] = text;\n       });\n     });\n     return result;\n   };\n  \n\n","import { getEntity, getFileHandleContent, getFiles } from '../SynapseClient'\nimport { FileEntity } from '../synapseTypes/'\nimport { Entity } from '../synapseTypes/'\nimport { BatchFileResult } from '../synapseTypes/'\nimport { FileHandle } from '../synapseTypes/'\nimport { BatchFileRequest } from '../synapseTypes/'\nimport {\n  FileHandleAssociation,\n  FileHandleAssociateType,\n} from '../synapseTypes/'\n\nconst ESTIMATED_CORS_TIME_MS: number = 200\nconst ESTIMATED_DOWNLOAD_SPEED_EXPIRE_TIME_KEY: string =\n  'ESTIMATED_DOWNLOAD_SPEED_EXPIRE_TIME'\nconst ESTIMATED_DOWNLOAD_SPEED_KEY: string = 'ESTIMATED_DOWNLOAD_SPEED'\nconst TEST_FILE_ENTITY_ID: string = 'syn12600511'\n/**\n * Return the estimated download speed (bytes/second).  Result is cached.\n * Result is crude estimate since it's a single test file (small sample, only ~2MB), but is a valid test (since it's a Synapse file on s3).\n * The intent is to let the user know if the package download will take many hours to download.\n * @param sessionToken\n */\nexport const testDownloadSpeed = (sessionToken: string): Promise<number> => {\n  return new Promise((resolve, reject) => {\n    // check cache\n    const cachedSpeedExpireTime = localStorage.getItem(\n      ESTIMATED_DOWNLOAD_SPEED_EXPIRE_TIME_KEY,\n    )\n    const cachedSpeed = localStorage.getItem(ESTIMATED_DOWNLOAD_SPEED_KEY)\n    if (cachedSpeedExpireTime && cachedSpeed) {\n      // is this value expired?\n      const now: number = new Date().getTime()\n      if (now < Number(cachedSpeedExpireTime)) {\n        resolve(Number(cachedSpeed))\n        return\n      }\n    }\n\n    /**\n     * 1.  Get the test File Entity\n     * 2.  Get the file handle and presigned URL associated to the latest version of the test File Entity\n     * 3.  Start the timer and fetch the file content using that presigned URL\n     */\n    getEntity(sessionToken, TEST_FILE_ENTITY_ID)\n      .then((entity: Entity) => {\n        const fileEntity: FileEntity = entity as FileEntity\n        const fileHandleAssociationList: FileHandleAssociation[] = [\n          {\n            associateObjectId: fileEntity.id!,\n            associateObjectType: FileHandleAssociateType.FileEntity,\n            fileHandleId: fileEntity.dataFileHandleId,\n          },\n        ]\n        const request: BatchFileRequest = {\n          includeFileHandles: true,\n          includePreSignedURLs: true,\n          includePreviewPreSignedURLs: false,\n          requestedFiles: fileHandleAssociationList,\n        }\n        getFiles(request, sessionToken).then((data: BatchFileResult) => {\n          const presignedUrl: string = data.requestedFiles[0].preSignedURL!\n          // we know this file exists\n          const fileHandle: FileHandle = data.requestedFiles[0].fileHandle!\n          // start test!\n          const startMs = new Date().getTime()\n          return getFileHandleContent(fileHandle, presignedUrl).then(() => {\n            // console.log(`Transferred ${fileHandle.contentSize/1000000} MB in ${((new Date().getTime() - startMs - ESTIMATED_CORS_TIME_MS)/1000)} seconds`)\n            // bytes/second\n            const result =\n              fileHandle.contentSize /\n              ((new Date().getTime() - startMs - ESTIMATED_CORS_TIME_MS) / 1000)\n            // save result in cache (for 5 minutes)\n            const now: number = new Date().getTime()\n            localStorage.setItem(\n              ESTIMATED_DOWNLOAD_SPEED_EXPIRE_TIME_KEY,\n              (now + 1000 * 60 * 5).toString(),\n            )\n            localStorage.setItem(\n              ESTIMATED_DOWNLOAD_SPEED_KEY,\n              result.toString(),\n            )\n            resolve(result)\n          })\n        })\n      })\n      .catch(err => reject(err))\n  })\n}\n","const sufixes: string[] = [\n  'Bytes',\n  'KB',\n  'MB',\n  'GB',\n  'TB',\n  'PB',\n  'EB',\n  'ZB',\n  'YB',\n]\n\nexport function calculateFriendlyFileSize(bytes: number) {\n  if (!bytes) {\n    return ''\n  }\n  // https://stackoverflow.com/questions/10420352/converting-file-size-in-bytes-to-human-readable-string\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\n  // tslint:disable-next-line\n  return (\n    (!bytes && '0 Bytes') ||\n    (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sufixes[i]\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faFile, faDatabase, faClock } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { testDownloadSpeed } from '../../utils/functions/testDownloadSpeed'\nimport { calculateFriendlyFileSize } from '../../utils/functions/calculateFriendlyFileSize'\nimport ReactTooltip from 'react-tooltip'\nimport moment from 'moment'\nimport { TOOLTIP_DELAY_SHOW } from '../table/SynapseTableConstants'\n\nlibrary.add(faFile)\nlibrary.add(faDatabase)\nlibrary.add(faClock)\n\nexport type DownloadDetailsProps = {\n  numFiles: number\n  numBytes: number\n  token: string | undefined\n}\n\ntype State = {\n  isLoading: boolean\n  downloadSpeed: number\n}\n\nexport default function DownloadDetails(props: DownloadDetailsProps) {\n  const [state, setState] = useState<State>({\n    isLoading: true,\n    downloadSpeed: 0,\n  })\n  const { isLoading, downloadSpeed } = state\n  const { token, numFiles, numBytes } = props\n\n  useEffect(() => {\n    if (isLoading && token) {\n      testDownloadSpeed(token).then(speed => {\n        setState({\n          isLoading: false,\n          downloadSpeed: speed,\n        })\n      })\n    }\n  })\n\n  const timeEstimateInSeconds =\n    isLoading || downloadSpeed === 0 ? 0 : numBytes / downloadSpeed\n  const friendlyTime =\n    timeEstimateInSeconds === 0\n      ? ''\n      : moment.duration(timeEstimateInSeconds, 'seconds').humanize()\n  const numBytesTooltipId = 'num_bytes_id'\n  const friendlyTimeTooltipId = 'friendly_time_id'\n  const isInactive = numFiles === 0 || timeEstimateInSeconds === 0\n  const iconClassName = isInactive? 'SRC-inactive' : 'SRC-primary-text-color'\n  return (\n    <span className=\"download-details-container\">\n      <span>\n        <FontAwesomeIcon className={iconClassName} icon=\"file\" />\n        {!isInactive && <> {numFiles} &nbsp; files </>}\n      </span>\n      <span\n        data-for={numBytesTooltipId}\n        data-tip=\"This is the total size of all files. Zipped package(s) will likely be smaller.\"\n      >\n        <ReactTooltip\n          delayShow={TOOLTIP_DELAY_SHOW}\n          place=\"top\"\n          type=\"dark\"\n          effect=\"solid\"\n          id={numBytesTooltipId}\n        />\n        <FontAwesomeIcon className={iconClassName} icon=\"database\" />\n        {calculateFriendlyFileSize(numBytes)}\n      </span>\n      <span\n        data-for={friendlyTimeTooltipId}\n        data-tip=\"This is an estimate of how long package download will take.\"\n      >\n        <ReactTooltip\n          delayShow={TOOLTIP_DELAY_SHOW}\n          place=\"top\"\n          type=\"dark\"\n          effect=\"solid\"\n          id={friendlyTimeTooltipId}\n        />\n        <FontAwesomeIcon className={iconClassName} icon=\"clock\" />\n        {isLoading && <span className=\"loader\" />}\n        {!isLoading && friendlyTime}\n      </span>\n    </span>\n  )\n}\n","import * as React from 'react'\nimport { EntityHeader } from '../utils/synapseTypes/'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faLink,\n  faFolder,\n  faFile,\n  faListAlt,\n  faTable,\n  faThList,\n  faArchive,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nlibrary.add(faLink)\nlibrary.add(faFolder)\nlibrary.add(faFile)\nlibrary.add(faListAlt)\nlibrary.add(faTable)\nlibrary.add(faThList)\nlibrary.add(faArchive)\n\ntype IconType =\n  | 'FileEntity'\n  | 'Folder'\n  | 'Link'\n  | 'Project'\n  | 'TableEntity'\n  | 'EntityView'\n\nconst getIconTypeForEntity = (name: IconType) => {\n  switch (name) {\n    case 'Link':\n      return 'link'\n    case 'Folder':\n      return 'folder'\n    case 'FileEntity':\n      return 'file'\n    case 'TableEntity':\n      return 'table'\n    case 'Project':\n      return 'list-alt'\n    case 'EntityView':\n      return 'th-list'\n    default:\n      return ''\n  }\n}\n\ntype EntityTypeIconProps = {\n  type: string\n}\nconst EntityTypeIcon: React.SFC<EntityTypeIconProps> = ({ type }) => {\n  const splitType = type.split('.')\n  const name = splitType[splitType.length - 1] as IconType\n  const iconType = getIconTypeForEntity(name)\n  const iconStyle: React.CSSProperties = {\n    marginRight: 5,\n  }\n  if (iconType === '') {\n    console.log('Entity Type not mapped = ', type)\n    return <React.Fragment />\n  }\n  return <FontAwesomeIcon style={iconStyle} icon={iconType} />\n}\n\ntype EntityLinkProps = {\n  entityHeader: EntityHeader\n  className?: string\n}\n\nexport const EntityLink: React.SFC<EntityLinkProps> = ({\n  entityHeader,\n  className,\n}) => {\n  const { id, name, type } = entityHeader\n  return (\n    <a\n      className={className}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      href={`https://www.synapse.org/#!Synapse:${id}`}\n    >\n      <p className={className}>\n        <EntityTypeIcon type={type} />\n        {name}\n      </p>\n    </a>\n  )\n}\n","import { IconProp, library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faCircle,\n  faDatabase,\n  faLink,\n  faUnlockAlt,\n  faLock\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as React from 'react'\nimport ReactTooltip from 'react-tooltip'\nimport { SynapseClient } from '../utils'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../utils/functions/getEndpoint'\nimport {\n  FileHandle,\n  RestrictableObjectType,\n  RestrictionInformationRequest,\n  RestrictionInformationResponse,\n  RestrictionLevel,\n  FileEntity\n} from '../utils/synapseTypes/'\nimport { TOOLTIP_DELAY_SHOW } from './table/SynapseTableConstants'\nlibrary.add(faUnlockAlt)\nlibrary.add(faDatabase)\nlibrary.add(faCircle)\n\nexport type HasAccessProps = {\n  fileHandle?: FileHandle\n  entityId: string\n  isInDownloadList?: boolean // set to show errors in UI about package creation\n  entityVersionNumber?: string\n  token?: string\n}\n\ntype HasAccessState = {\n  restrictionInformation?: RestrictionInformationResponse\n  fileHandleDownloadType?: FileHandleDownloadTypeEnum\n}\n\nexport enum ExternalFileHandleConcreteTypeEnum {\n  ProxyFileHandle = 'org.sagebionetworks.repo.model.file.ProxyFileHandle',\n  ExternalObjectStoreFileHandle = 'org.sagebionetworks.repo.model.file.ExternalObjectStoreFileHandle',\n  ExternalFileHandle = 'org.sagebionetworks.repo.model.file.ExternalFileHandle',\n}\n\nexport enum GoogleCloudFileHandleEnum {\n  GoogleCloudFileHandle = 'org.sagebionetworks.repo.model.file.GoogleCloudFileHandle',\n}\n\nexport const GIGABYTE_SIZE = 2 ** 30\n\nexport enum FileHandleDownloadTypeEnum {\n  ExternalCloudFile,\n  ExternalFileLink,\n  TooLarge,\n  Accessible,\n  AccessBlocked,\n  AccessBlockedToAnonymous,\n  NoFileHandle\n}\n\nexport const getDownloadTypeForFileHandle = (fileHandle: FileHandle, isInDownloadList?: boolean) => {\n  if (fileHandle && !isInDownloadList) {\n    return FileHandleDownloadTypeEnum.Accessible\n  }\n  const { concreteType, contentSize } = fileHandle\n  // check if it's too large\n  if (contentSize >= GIGABYTE_SIZE) {\n    return FileHandleDownloadTypeEnum.TooLarge\n  }\n  // check if it's a google cloud file handle\n  if (concreteType === GoogleCloudFileHandleEnum.GoogleCloudFileHandle) {\n    return FileHandleDownloadTypeEnum.ExternalCloudFile\n  }\n  // check if it's an external file handle\n  const isExternalFileHandle = Object.values<string>(\n    ExternalFileHandleConcreteTypeEnum,\n  ).includes(concreteType)\n  if (isExternalFileHandle) {\n    return FileHandleDownloadTypeEnum.ExternalFileLink\n  }\n  // otherwise its available\n  return FileHandleDownloadTypeEnum.Accessible\n}\n\n/**\n * HasAccess shows if the user has access to the file or not.\n *\n * The component's behavior changes whether it's passed in a FileHandle or not.\n * If passed a file handle then it will give more detailed information about the download.\n *\n * @export\n * @class HasAccess\n * @extends {React.Component<HasAccessProps, HasAccessState>}\n */\nexport default class HasAccess extends React.Component<\n  HasAccessProps,\n  HasAccessState\n> {\n  public static tooltipText = {\n    [FileHandleDownloadTypeEnum.AccessBlockedToAnonymous]:\n      'You must sign in to access this file.',\n    [FileHandleDownloadTypeEnum.AccessBlocked]:\n      'You must request access to this restricted file.',\n    [FileHandleDownloadTypeEnum.TooLarge]:\n      'This file is too large to download as a package and must be downloaded manually.',\n    [FileHandleDownloadTypeEnum.ExternalFileLink]:\n      'This is an external link, which must be downloaded manually.',\n    [FileHandleDownloadTypeEnum.ExternalCloudFile]:\n      'This file must be downloaded manually (e.g. a file in Google Cloud).',\n  }\n\n  constructor(props: HasAccessProps) {\n    super(props)\n    this.getRestrictionInformation = this.getRestrictionInformation.bind(this)\n    this.getFileEntityFileHandle = this.getFileEntityFileHandle.bind(this)\n    this.updateStateFileHandleAccessBlocked = this.updateStateFileHandleAccessBlocked.bind(this)\n    \n    const fileHandleDownloadType = props.fileHandle ? getDownloadTypeForFileHandle(props.fileHandle, props.isInDownloadList) : undefined\n    this.state = {\n      fileHandleDownloadType\n    }\n  }\n\n  componentDidMount() {\n    this.getRestrictionInformation()\n    this.getFileEntityFileHandle()\n  }\n\n  componentDidUpdate() {\n    this.getRestrictionInformation()\n    this.getFileEntityFileHandle()\n  }\n  getFileEntityFileHandle = () => {\n    const { entityId, entityVersionNumber, token, isInDownloadList } = this.props\n    if (this.state.fileHandleDownloadType) {\n      // already know the downloadType\n      return\n    }\n    // fileHandle was not passed to us, ask for it.\n    // is this a FileEntity?\n    SynapseClient.getEntity(token, entityId, entityVersionNumber)\n      .then((entity) => {\n        if (entity.hasOwnProperty('dataFileHandleId')) {\n          // looks like a FileEntity, get the FileHandle\n          SynapseClient.getFileEntityFileHandle(entity as FileEntity, token)\n            .then((fileHandle:FileHandle) => {\n              const fileHandleDownloadType = getDownloadTypeForFileHandle(fileHandle, isInDownloadList)\n              this.setState({\n                fileHandleDownloadType\n              })\n            }).catch(err => {\n              // could not get the file handle\n              this.updateStateFileHandleAccessBlocked()\n            })\n        } else {\n          // entity looks like something else.\n          this.setState({\n            fileHandleDownloadType: FileHandleDownloadTypeEnum.NoFileHandle\n          })\n        }\n      })\n      .catch(err => {\n        // could not get entity\n        this.updateStateFileHandleAccessBlocked()\n      })\n  }\n\n  updateStateFileHandleAccessBlocked = () => {\n    const { token } = this.props\n    const fileHandleDownloadType = token ? FileHandleDownloadTypeEnum.AccessBlocked : FileHandleDownloadTypeEnum.AccessBlockedToAnonymous\n        this.setState({\n          fileHandleDownloadType\n        })\n  }\n\n  getRestrictionInformation = () => {\n    const { entityId, token } = this.props\n    if (\n      this.state.restrictionInformation ||\n      !entityId ||\n      !token\n    ) {\n      return\n    }\n    const request: RestrictionInformationRequest = {\n      restrictableObjectType: RestrictableObjectType.ENTITY,\n      objectId: entityId,\n    }\n    SynapseClient.getRestrictionInformation(request, token)\n      .then(restrictionInformation => {\n        this.setState({\n          restrictionInformation,\n        })\n      })\n      .catch(err => {\n        console.log('Error on getRestrictionInformation: ', err)\n      })\n  }\n\n  renderIconHelper = (iconProp: IconProp, classColor: string) => {\n    return (\n      <span className=\"fa-layers fa-fw\">\n        <FontAwesomeIcon icon={faCircle} className={classColor} size=\"2x\" />\n        <FontAwesomeIcon\n          icon={iconProp}\n          className=\"SRC-whiteText\"\n          size=\"1x\"\n          transform={{ x: 6 }}\n        />\n      </span>\n    )\n  }\n\n  renderIcon = (downloadType: FileHandleDownloadTypeEnum | string, restrictionInformation?:RestrictionInformationResponse) => {\n    // if there are any access restrictions\n    if (restrictionInformation?.hasUnmetAccessRequirement) {\n      return this.renderIconHelper(faLock, 'SRC-warning-color')\n    }\n    switch (downloadType) {\n      // fileHandle available\n      case FileHandleDownloadTypeEnum.ExternalFileLink:\n      case FileHandleDownloadTypeEnum.ExternalCloudFile:\n        return this.renderIconHelper(faLink, 'SRC-warning-color')\n      case FileHandleDownloadTypeEnum.TooLarge:\n        return this.renderIconHelper(faDatabase, 'SRC-danger-color')\n      // was FileEntity, but no fileHandle was available\n      case FileHandleDownloadTypeEnum.AccessBlocked:\n      case FileHandleDownloadTypeEnum.AccessBlockedToAnonymous:\n        return this.renderIconHelper(faLock, 'SRC-warning-color')\n      // was a FileEntity, and fileHandle was available\n      case FileHandleDownloadTypeEnum.Accessible:\n      // or was not a FileEntity, but no unmet access restrictions\n      case FileHandleDownloadTypeEnum.NoFileHandle:\n        return this.renderIconHelper(faUnlockAlt, 'SRC-success-color')\n      default:\n        // nothing is rendered until access requirement is loaded\n        return <></>\n    }\n  }\n\n  // Show Access Requirements\n  renderARsLink = () => {\n    const { restrictionInformation } = this.state\n    if (!restrictionInformation) {\n      // loading\n      return <></>\n    }\n    const { entityId } = this.props\n    const hasUnmetAccessRequirement =\n      restrictionInformation?.hasUnmetAccessRequirement\n    const restrictionLevel = restrictionInformation?.restrictionLevel\n    let linkText = ''\n    if (hasUnmetAccessRequirement) {\n      linkText = 'Request Access'\n    } else if (RestrictionLevel.OPEN === restrictionLevel) {\n      return <></>\n    } else {\n      linkText = 'View Terms'\n    }\n    return (\n      <a\n        style={{\n          fontSize: '14px',\n          cursor: 'pointer',\n          marginLeft: '16px',\n        }}\n        className=\"SRC-primary-text-color\"\n        href={`${getEndpoint(\n          BackendDestinationEnum.PORTAL_ENDPOINT,\n        )}#!AccessRequirements:ID=${entityId}&TYPE=ENTITY`}\n      >\n        {linkText}\n      </a>\n    )\n  }\n\n  render() {\n    const fileHandleDownloadType = this.state.fileHandleDownloadType\n    if (typeof fileHandleDownloadType === 'undefined') {\n      // note, this can't be \"if (!downloadType)\" since DownloadTypeEnum has a 0 value (which is falsy)\n      // loading\n      return <></>\n    }\n    const tooltipText = HasAccess.tooltipText[fileHandleDownloadType]\n    const entityId = this.props.entityId\n    const icon = this.renderIcon(fileHandleDownloadType, this.state.restrictionInformation)\n    const viewARsLink: React.ReactElement = this.renderARsLink()\n    return (\n      <span style={{ whiteSpace: 'nowrap' }}>\n        {tooltipText && (\n          <>\n            <span tabIndex={0} data-for={entityId} data-tip={tooltipText}>\n              {icon}\n            </span>\n            <ReactTooltip\n              delayShow={TOOLTIP_DELAY_SHOW}\n              place=\"top\"\n              type=\"dark\"\n              effect=\"solid\"\n              id={entityId}\n              className=\"has-access-tooltip-width\"\n            />\n            {viewARsLink}\n          </>\n        )}\n        {!tooltipText && (\n          <>\n            {icon} {viewARsLink}\n          </>\n        )}\n      </span>\n    )\n  }\n}\n","import { UiSchema } from 'react-jsonschema-form'\nimport { JSONSchema6 } from 'json-schema'\n\nexport const writeHeaderOption = \"First line is the columns names.\"\nexport const includeRowIdAndRowVersionOption = \"Include row metadata (Row Id and Row Version).\"\nexport const csvOption = \"Comma Separated Values (CSV)\"\nexport const tsvOption = \"Tab Separated Values (TSV)\"\n\n// Step 1\nconst stepOneFormSchema: JSONSchema6 = {\n  title: 'Download query results',\n  type: 'object',\n  properties: {\n    'File Type'  : {\n      type: \"string\",\n      oneOf: [\n        {\n          const: csvOption,\n          title: csvOption\n        },\n        {\n          const: tsvOption,\n          title: tsvOption\n        }\n      ],\n    },\n    Contents : {\n      type: \"array\",\n      title: 'Contents',\n      items: {\n        type: 'string',\n        enum: [writeHeaderOption, includeRowIdAndRowVersionOption],\n      },\n      uniqueItems: true\n    }\n  }\n}\n\nconst stepOneFormUISchema: UiSchema = {\n  'File Type': {\n    \"ui:widget\": \"radio\"\n  },\n  Contents: {\n    'ui:widget': 'checkboxes'\n  }\n}\n\n// Step 2\nconst stepTwoFormSchema: JSONSchema6 = {\n  title: 'Download query results',\n  description: 'File is ready for download. Select the download button to download the file.',\n  type: 'object',\n}\n\nconst stepTwoFormUISchema: UiSchema = {\n}\n\nexport const formSchemaArray = [stepOneFormSchema, stepTwoFormSchema]\nexport  const formSchemaUIArray = [stepOneFormUISchema, stepTwoFormUISchema]","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as React from 'react'\nimport { Modal } from 'react-bootstrap'\nimport Form, { IChangeEvent } from 'react-jsonschema-form'\nimport { SynapseClient } from '../utils'\nimport {\n  DownloadFromTableRequest,\n  DownloadFromTableResult,\n  FacetColumnRequest,\n  SortItem,\n} from '../utils/synapseTypes/'\nimport {\n  csvOption,\n  formSchemaArray,\n  formSchemaUIArray,\n  includeRowIdAndRowVersionOption,\n  writeHeaderOption,\n} from './ModalDownload.FormSchema'\n\nlibrary.add(faTimes)\n\nexport type ModalDownloadState = {\n  isLoading: boolean\n  step: number\n  data?: DownloadFromTableResult\n  formData: {}\n}\n\nexport type ModalDownloadProps = {\n  entityId: string\n  sql: string\n  onClose: (...args: any[]) => void\n  token?: string\n  includeEntityEtag?: boolean\n  selectedFacets?: FacetColumnRequest[] // The selected facet filters.\n  isConsistent?: boolean\n  offset?: number\n  limit?: number\n  sort?: SortItem[]\n}\n\nexport default class ModalDownload extends React.Component<\n  ModalDownloadProps,\n  ModalDownloadState\n> {\n  constructor(props: ModalDownloadProps) {\n    super(props)\n    this.state = {\n      isLoading: false,\n      step: 0,\n      formData: {\n        'File Type': csvOption,\n        Contents: [writeHeaderOption, includeRowIdAndRowVersionOption],\n      },\n    }\n  }\n\n  handleSubmit = (event: IChangeEvent) => {\n    if (this.state.step === 0) {\n      this.handleDownloadSetup(event)\n    } else {\n      this.onDownload()\n    }\n  }\n\n  handleDownloadSetup = (event: IChangeEvent) => {\n    this.setState({\n      isLoading: true,\n    })\n    const { formData } = event\n    const fileType = formData['File Type']\n    const contents = formData.Contents as string[]\n    const { token, onClose, ...rest } = this.props\n    const separator = fileType === csvOption ? ',' : '\\t'\n    const writeHeader = contents.includes(writeHeaderOption)\n    const includeRowIdAndRowVersion = contents.includes(\n      includeRowIdAndRowVersionOption,\n    )\n    const downloadFromTableRequest: DownloadFromTableRequest = {\n      ...rest,\n      concreteType:\n        'org.sagebionetworks.repo.model.table.DownloadFromTableRequest',\n      writeHeader,\n      includeRowIdAndRowVersion,\n      csvTableDescriptor: { separator },\n    }\n    SynapseClient.getDownloadFromTableRequest(downloadFromTableRequest, token)\n      .then(data => {\n        this.setState({\n          isLoading: false,\n          step: 1,\n          data,\n        })\n      })\n      .catch(err => {\n        console.log('Error getDownloadFromTableRequest: ', err)\n      })\n  }\n\n  onDownload = () => {\n    const { data } = this.state\n    const { token } = this.props\n    // data will always be defined if calling this function\n    SynapseClient.getFileHandleByIdURL(data!.resultsFileHandleId, token).then(\n      url => {\n        window.location.href = url\n        this.props.onClose()\n      },\n    )\n  }\n\n  handleChange = (event: IChangeEvent) => {\n    const { formData } = event\n    this.setState({\n      formData,\n    })\n  }\n\n  render() {\n    const closeBtn: React.CSSProperties = {\n      position: 'absolute',\n      top: 10,\n      right: 10,\n      zIndex: 10,\n    }\n    const submitBtn: React.CSSProperties = {\n      padding: '6px 10px',\n      borderRadius: 6,\n    }\n    const spinnerStyle: React.CSSProperties = {\n      height: 50,\n      width: 50,\n      backgroundSize: 50,\n    }\n    return (\n      <Modal\n        animation={false}\n        centered={true}\n        show={true}\n        onHide={this.props.onClose}\n      >\n        <Modal.Header>\n          <button style={closeBtn} onClick={this.props.onClose}>\n            <FontAwesomeIcon style={{ fontSize: '21px' }} icon=\"times\" />\n          </button>\n          <Form\n            schema={formSchemaArray[this.state.step]}\n            uiSchema={formSchemaUIArray[this.state.step]}\n            onChange={this.handleChange}\n            formData={this.state.formData}\n            onSubmit={this.handleSubmit}\n          >\n            {this.state.isLoading && (\n              <div className=\"SRC-centerAndJustifyContent\">\n                <div className=\"SRC-center-text\">\n                  <p> Creating the File </p>\n                  <div style={spinnerStyle} className=\"spinner\" />\n                  <p> Loading... </p>\n                </div>\n              </div>\n            )}\n            <hr />\n            <div style={{ textAlign: 'right' }}>\n              <button\n                id=\"cancelBtn\"\n                onClick={this.props.onClose}\n                className=\"SRC-primary-text-color SRC-roundBorder SRC-underline-on-hover \"\n                type=\"button\"\n              >\n                Cancel\n              </button>\n              <button\n                id=\"submitBtn\"\n                style={submitBtn}\n                className=\"SRC-primary-background-color SRC-roundBorder SRC-whiteText\"\n                type=\"submit\"\n              >\n                {this.state.step === 0 ? 'Next' : 'Download'}\n              </button>\n            </div>\n          </Form>\n        </Modal.Header>\n      </Modal>\n    )\n  }\n}\n","import { Modal, ModalBody, ModalFooter, Button } from 'react-bootstrap'\nimport ModalHeader from 'react-bootstrap/ModalHeader'\nimport React from 'react'\n\nexport type DownloadLoginModalProps = {\n  showModal?: boolean\n  onHide: Function\n}\n\nexport const DownloadLoginModal: React.FunctionComponent<DownloadLoginModalProps> = props => {\n  return (\n    <Modal\n      animation={false}\n      centered={true}\n      show={true}\n      onHide={() => props.onHide()}\n    >\n      <ModalHeader closeButton>\n        <span\n          style={{ fontWeight: 'bold', color: '#515359', fontSize: '1.5em' }}\n        >\n          Sign In Required\n        </span>\n      </ModalHeader>\n      <ModalBody>\n        <p>\n          Anyone can browse public content on the Synapse website, but in order\n          to download and create content you will need to register for an\n          account using an email address.\n        </p>\n        <p>\n          To find out more see&nbsp;\n          <a\n            href=\"https://docs.synapse.org/articles/user_profiles.html\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            User Accounts\n          </a>\n          <span> and </span>\n          <a\n            href=\"https://docs.synapse.org/articles/governance.html\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Governance Overview\n          </a>\n          .\n        </p>\n      </ModalBody>\n      <ModalFooter>\n        <Button variant=\"secondary\" onClick={() => props.onHide()}>\n          CANCEL\n        </Button>\n        <Button\n          className=\"SRC-primary-button SRC-SIGN-IN-CLASS\"\n          variant=\"primary\"\n          onClick={() => props.onHide()}\n        >\n          Sign in\n        </Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n","import * as React from 'react'\nimport { Dropdown } from 'react-bootstrap'\nimport { ElementWithTooltip } from '../../widgets/ElementWithTooltip'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faEllipsisV } from '@fortawesome/free-solid-svg-icons'\nimport { DownloadLoginModal } from './DownloadLoginModal'\n\nlibrary.add(faEllipsisV)\n\ntype EllipsisDropdownProps = {\n  onDownloadFiles: Function\n  onDownloadTableOnly: Function\n  onShowColumns: Function\n  onFullScreen: Function\n  isExpanded: boolean\n  isUnauthenticated?: boolean\n  isGroupedQuery?: boolean\n  isFileView?: boolean\n}\nconst tooltipEllipsis = 'tooltip-ellipsis'\n\nexport const EllipsisDropdown: React.FunctionComponent<EllipsisDropdownProps> = props => {\n  const {\n    onDownloadFiles,\n    onDownloadTableOnly,\n    onShowColumns,\n    onFullScreen,\n    isExpanded,\n  } = props\n  const [showModal, setShowModal] = React.useState(false)\n  return (\n    <>\n      <Dropdown style={{ padding: 0 }}>\n        <ElementWithTooltip\n          idForToolTip={tooltipEllipsis}\n          tooltipText={'Table Options'}\n          image={faEllipsisV}\n        ></ElementWithTooltip>\n        <Dropdown.Menu\n          className=\"SRC-primary-color-hover-dropdown\"\n          alignRight={true}\n        >\n          {!props.isGroupedQuery && [\n            props.isFileView && (\n              <Dropdown.Item\n                key=\"download_files\"\n                onClick={() =>\n                  props.isUnauthenticated\n                    ? setShowModal(true)\n                    : onDownloadFiles()\n                }\n              >\n                Download Files\n              </Dropdown.Item>\n            ),\n            <Dropdown.Item\n              key=\"download_tables\"\n              onClick={() => onDownloadTableOnly()}\n            >\n              Download Table Only\n            </Dropdown.Item>,\n            <Dropdown.Divider key=\"divider1\" />,\n          ]}\n          <Dropdown.Item key=\"show_columns\" onClick={() => onShowColumns()}>\n            Show Columns\n          </Dropdown.Item>\n          <Dropdown.Item key=\"expand\" onClick={() => onFullScreen()}>\n            {isExpanded ? 'Shrink' : 'Full Screen'}\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n      {showModal && (\n        <DownloadLoginModal\n          showModal={showModal}\n          onHide={() => setShowModal(false)}\n        ></DownloadLoginModal>\n      )}\n    </>\n  )\n}\n","import * as React from 'react'\nimport ExpandSvg from '../../../assets/icons/expand.svg'\nimport ShrinkSvg from '../../../assets/icons/shrink.svg'\nimport { ElementWithTooltip } from '../../widgets/ElementWithTooltip'\n\ntype ExpandTableProps = {\n  onExpand: Function\n  isExpanded: boolean\n}\n\nexport const ExpandTable: React.FunctionComponent<ExpandTableProps> = props => {\n  const { onExpand, isExpanded } = props\n\n  return (\n    <>\n      <ElementWithTooltip\n        idForToolTip={'expand'}\n        callbackFn={() => onExpand()}\n        tooltipText={\n          isExpanded ? 'Shrink table to fit' : 'Expand table in full screen'\n        }\n        image={{\n          svgImg: isExpanded ? ShrinkSvg : ExpandSvg,\n          altText: isExpanded ? 'shrink table' : 'expand table',\n        }}\n      />\n    </>\n  )\n}\n","import { DownloadLoginModal } from './DownloadLoginModal'\nimport * as React from 'react'\nimport { Dropdown } from 'react-bootstrap'\nimport { ElementWithTooltip } from '../../widgets/ElementWithTooltip'\nimport { faDownload } from '@fortawesome/free-solid-svg-icons'\n\nexport const DOWNLOAD_OPTIONS_CONTAINER_CLASS = 'SRC-download-options-container'\n\ntype DownloadOptionsProps = {\n  onDownloadFiles: Function\n  onExportMetadata: Function\n  isUnauthenticated?: boolean\n  isFileView?: boolean\n}\n\nexport const DOWNLOAD_FILES_MENU_TEXT = 'Download Files'\nconst tooltipDownloadId = 'download'\n\nexport const DownloadOptions: React.FunctionComponent<DownloadOptionsProps> = props => {\n  const [showModal, setShowModal] = React.useState(false)\n  const { onDownloadFiles, onExportMetadata } = props\n\n  return (\n    <React.Fragment>\n      <Dropdown style={{ padding: 0 }}>\n        <ElementWithTooltip\n          idForToolTip={tooltipDownloadId}\n          tooltipText={'Download Options'}\n          image={faDownload}\n        ></ElementWithTooltip>\n        <Dropdown.Menu\n          className=\"SRC-primary-color-hover-dropdown\"\n          alignRight={true}\n        >\n          <Dropdown.Item\n            // @ts-ignore\n            onClick={onExportMetadata}\n          >\n            Export Metadata\n          </Dropdown.Item>\n          {props.isFileView && (\n            <Dropdown.Item\n              onClick={() =>\n                props.isUnauthenticated ? setShowModal(true) : onDownloadFiles()\n              }\n            >\n              {DOWNLOAD_FILES_MENU_TEXT}\n            </Dropdown.Item>\n          )}\n        </Dropdown.Menu>\n      </Dropdown>\n      {showModal && (\n        <DownloadLoginModal\n          showModal={showModal}\n          onHide={() => setShowModal(false)}\n        ></DownloadLoginModal>\n      )}\n    </React.Fragment>\n  )\n}\n","import * as React from 'react'\nimport { Dropdown } from 'react-bootstrap'\nimport { ElementWithTooltip } from '../../widgets/ElementWithTooltip'\nimport { SelectColumn } from '../../../utils/synapseTypes/'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport ColumnsSvg from '../../../assets/icons/columns.svg'\n\ntype ColumnSelectionProps = {\n  headers: SelectColumn[]\n  isColumnSelected: boolean[]\n  visibleColumnCount?: number\n  show: boolean\n  onToggle: (\n    _show: boolean,\n    _event: React.SyntheticEvent<any, Event>,\n    metadata: any,\n  ) => void\n  toggleColumnSelection: (\n    index: number,\n  ) => (_event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void\n}\n\nconst tooltipColumnSelectionId = 'addAndRemoveColumns'\n\nexport const ColumnSelection: React.FunctionComponent<ColumnSelectionProps> = (\n  props: ColumnSelectionProps,\n) => {\n  const {\n    headers,\n    isColumnSelected,\n    visibleColumnCount = Infinity,\n    show,\n    onToggle,\n    toggleColumnSelection,\n  } = props\n  return (\n    <Dropdown\n      style={{ padding: 0 }}\n      onToggle={(show: boolean, event: any, metadata: any) =>\n        onToggle(show, event, metadata)\n      }\n      show={show}\n    >\n      <ElementWithTooltip\n        idForToolTip={tooltipColumnSelectionId}\n        tooltipText={'Add / Remove Columns'}\n        image={{\n          svgImg: ColumnsSvg,\n          altText: 'columns selection',\n        }}\n      ></ElementWithTooltip>\n\n      {/* There's a known issue if the number of dropdown items is very large, ~30+, the dropdown\n          will unexpectedly render with the list going upwards instead of downwards.\n        */}\n      <Dropdown.Menu\n        className=\"SRC-primary-color-hover-dropdown\"\n        alignRight={true}\n      >\n        {headers.map((header, index) => {\n          let isCurrentColumnSelected: boolean | undefined =\n            isColumnSelected[index]\n          if (isCurrentColumnSelected === undefined) {\n            isCurrentColumnSelected = index < visibleColumnCount\n          }\n          const iconStyle: React.CSSProperties = {\n            width: '11px',\n            marginRight: '10px',\n          }\n          if (!isCurrentColumnSelected) {\n            iconStyle.visibility = 'hidden'\n          }\n          const maybeShowPrimaryColor = isCurrentColumnSelected\n            ? 'SRC-primary-text-color'\n            : ''\n          return (\n            <Dropdown.Item\n              // @ts-ignore\n              onClick={toggleColumnSelection(index)}\n              key={header.name}\n            >\n              <FontAwesomeIcon\n                style={iconStyle}\n                className={maybeShowPrimaryColor}\n                icon=\"check\"\n              />\n              {header.name}\n            </Dropdown.Item>\n          )\n        })}\n      </Dropdown.Menu>\n    </Dropdown>\n  )\n}\n","import * as React from 'react'\nimport { Dropdown } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  FacetColumnResultValues,\n  FacetColumnResultValueCount,\n} from '../../../utils/synapseTypes/'\nimport { getIsValueSelected } from '../../../utils/functions/facetUtils'\nimport { SELECT_ALL } from '../SynapseTableConstants'\nimport { FacetSelection } from '../../../containers/QueryWrapper'\n\ntype FacetFilterProps = {\n  facetColumnResult: FacetColumnResultValues\n  isAllFilterSelectedForFacet: boolean\n  applyChanges: Function\n  lastFacetSelection: FacetSelection\n  isLoading: boolean\n}\n\ntype FacetFilterState = {\n  show: boolean\n}\n\nexport default class FacetFilter extends React.Component<\n  FacetFilterProps,\n  FacetFilterState\n> {\n  public ref: React.Ref<HTMLSpanElement>\n\n  style: React.CSSProperties = {\n    overflowY: 'auto',\n    maxHeight: 300,\n    zIndex: 1,\n  }\n\n  constructor(props: FacetFilterProps) {\n    super(props)\n    this.state = {\n      show: false,\n    }\n    this.ref = React.createRef()\n  }\n\n  // Any click event for the Dropdown will close the dropdown (assuming its open), so we have\n  // to handle the onToggle event and manually manage the dropdown open state. If metadata\n  // is defined the event occuring is inside the dropdown which we then want to keep open, otherwise\n  // we close it.\n  onToggle = (\n    _show: boolean,\n    _event: React.SyntheticEvent<Dropdown<'div'>, Event>,\n    metadata: any,\n  ) => {\n    if (metadata.source) {\n      this.setState({\n        show: true,\n      })\n    } else {\n      this.setState({\n        show: false,\n      })\n    }\n  }\n\n  render = () => {\n    const {\n      facetColumnResult,\n      isAllFilterSelectedForFacet,\n      applyChanges,\n      isLoading,\n      lastFacetSelection,\n    } = this.props\n    const { columnName } = facetColumnResult\n    const { show } = this.state\n    const color = show ? 'white' : ''\n    const allRef: React.Ref<HTMLInputElement> = React.createRef()\n    return (\n      <Dropdown show={show} onToggle={this.onToggle}>\n        <Dropdown.Toggle\n          className=\"SRC-primary-text-color SRC-primary-background-color-hover condenced\"\n          id={facetColumnResult.columnName}\n          variant={'light'}\n        >\n          <FontAwesomeIcon\n            style={{ margin: 'auto' }}\n            size={'1x'}\n            icon=\"filter\"\n            color={color}\n          />\n        </Dropdown.Toggle>\n        <Dropdown.Menu style={this.style}>\n          <Dropdown.Item\n            onClick={() => {\n              allRef.current!.click()\n            }}\n          >\n            <li className=\"checkbox SRC-table-checkbox\">\n              <label\n                className=\"dropdownList SRC-border-bottom-only SRC-overflowWrap SRC-base-font SRC-fullWidth\"\n                style={{ paddingBottom: 10 }}\n              >\n                <input\n                  ref={allRef}\n                  onClick={event =>\n                    applyChanges({\n                      ref: this.ref,\n                      columnName,\n                      selector: SELECT_ALL,\n                    })(event)\n                  }\n                  checked={isAllFilterSelectedForFacet}\n                  className=\"SRC-facet-checkboxes\"\n                  type=\"checkbox\"\n                />\n                <span> All </span>\n              </label>\n            </li>\n          </Dropdown.Item>\n          <span ref={this.ref}>\n            {facetColumnResult.facetValues.map(\n              (facetColumnResultValueCount: FacetColumnResultValueCount) => {\n                const { value: facetValue, count } = facetColumnResultValueCount\n                let displayValue = facetValue\n                if (\n                  displayValue === 'org.sagebionetworks.UNDEFINED_NULL_NOTSET'\n                ) {\n                  displayValue = 'unannotated'\n                }\n                const isValueSelected = isAllFilterSelectedForFacet\n                  ? false\n                  : getIsValueSelected({\n                      columnName,\n                      isLoading,\n                      lastFacetSelection,\n                      curFacetSelection: facetColumnResultValueCount,\n                    })\n                const inputRef: React.Ref<HTMLInputElement> = React.createRef()\n                return (\n                  <Dropdown.Item\n                    onClick={() => {\n                      inputRef.current!.click()\n                    }}\n                    key={facetValue}\n                  >\n                    <li\n                      className=\"checkbox SRC-table-checkbox\"\n                      key={facetValue}\n                    >\n                      <label className=\"dropdownList SRC-overflowWrap SRC-base-font SRC-fullWidth\">\n                        <input\n                          ref={inputRef}\n                          onChange={applyChanges({\n                            ref: this.ref,\n                            columnName,\n                            facetValue,\n                          })}\n                          checked={isValueSelected}\n                          className=\"SRC-facet-checkboxes\"\n                          type=\"checkbox\"\n                          value={facetValue}\n                        />\n                        <span>\n                          {displayValue}\n                          <span style={{ color: '#DDDDDF', marginLeft: '3px' }}>\n                            ({count})\n                          </span>\n                        </span>\n                      </label>\n                    </li>\n                  </Dropdown.Item>\n                )\n              },\n            )}\n          </span>\n        </Dropdown.Menu>\n      </Dropdown>\n    )\n  }\n}\n","import React, { useState } from 'react'\nimport moment from 'moment'\n\ntype ControlType = 'number' | 'date'\n\nexport type RangeValues = {\n  min?: string\n  max?: string\n}\n\nexport type RangeProps = {\n  type: ControlType\n  initialValues?: RangeValues\n  className?: string\n  errorText?: string\n  onChange: Function\n}\n\nexport const Range: React.FunctionComponent<RangeProps> = (\n  props: RangeProps,\n) => {\n  const errorText = 'Min value should be less then max value'\n  const [error, setError] = useState(false)\n  const [values, setValues] = useState(() =>\n    props.type === 'number' && props.initialValues\n      ? props.initialValues\n      : (props.initialValues && {\n          min: moment(props.initialValues.min).format('YYYY-MM-DD'),\n          max: moment(props.initialValues.max).format('YYYY-MM-DD'),\n        }) || {\n          min: undefined,\n          max: undefined,\n        },\n  )\n\n  const className = props.className ? `range ${props.className}` : `range`\n\n  const isValid = (\n    { min, max }: RangeValues,\n\n    type: ControlType = 'number',\n  ) => {\n    if (\n      min === null ||\n      min === undefined ||\n      max === null ||\n      max === undefined\n    ) {\n      setError(false)\n      return true\n    }\n\n    if (type === 'number') {\n      if (Number(min) > Number(max)) {\n        setError(true)\n        return false\n      }\n    }\n    if (Date.parse(min) > Date.parse(max)) {\n      setError(true)\n      return false\n    }\n    setError(false)\n    return true\n  }\n\n  const handleAppyChanges = (\n    values: RangeValues,\n    callBackFn: Function,\n    type: ControlType = 'number',\n  ) => {\n    if (isValid(values, type)) {\n      callBackFn(values)\n    }\n  }\n\n  return (\n    <div className={className} style={{ display: 'flex', flexWrap: 'wrap' }}>\n      <div style={{ marginRight: '10px' }}>\n        <input\n          key=\"range_min\"\n          type={props.type}\n          value={values.min}\n          onChange={({ target }: React.ChangeEvent<HTMLInputElement>) =>\n            setValues({ min: target.value, max: values.max })\n          }\n        />\n        <div>to</div>\n        <input\n          key=\"range_max\"\n          type={props.type}\n          value={values.max}\n          onChange={({ target }: React.ChangeEvent<HTMLInputElement>) =>\n            setValues({ min: values.min, max: target.value })\n          }\n        />\n      </div>\n      <button\n        className=\"btn btn-link SRC-noPadding\"\n        onClick={() => handleAppyChanges(values, props.onChange, props.type)}\n      >\n        Apply\n      </button>\n      {error && (\n        <div className=\"SRC-danger-color\">{props.errorText || errorText}</div>\n      )}\n    </div>\n  )\n}\n","import * as React from 'react'\n\nimport { Slider, Rail, Handles, Tracks, Ticks } from 'react-compound-slider'\nimport {\n  SliderItem,\n  GetHandleProps,\n  GetTrackProps,\n} from 'react-compound-slider'\nimport { RangeValues } from './Range'\nimport { useState } from 'react'\n\n\n/**************** RANGE SLIDER SUBCOMPONENTS *********************/\n\n/***  handles ***/\n\ninterface IHandleProps {\n  domain: number[]\n  handle: SliderItem\n  getHandleProps: GetHandleProps\n}\n\nexport const Handle: React.FunctionComponent<IHandleProps> = ({\n  domain: [min, max],\n  handle: { id, value, percent },\n  getHandleProps,\n}) => (\n  <div\n    role=\"slider\"\n    className=\"RangeSlider__handle\"\n    aria-valuemin={min}\n    aria-valuemax={max}\n    aria-valuenow={value}\n    style={{\n      left: `${percent}%`,\n    }}\n    {...getHandleProps(id)}\n  />\n)\n\n\n/***   track  ***/\ninterface ITrackProps {\n  source: SliderItem\n  target: SliderItem\n  getTrackProps: GetTrackProps\n}\n\nexport const Track: React.FunctionComponent<ITrackProps> = ({\n  source,\n  target,\n  getTrackProps,\n}) => (\n  <div\n    className=\"RangeSlider__track\"\n    style={{\n      left: `${source.percent}%`,\n      width: `${target.percent - source.percent}%`,\n    }}\n    {...getTrackProps()}\n  />\n)\n\n/***   tick  ***/\ninterface ITickProps {\n  key: string\n  tick: SliderItem\n  count: number\n  mode?: 'SHOWALL' | 'SHOWNONE' | 'SHOWMINMAX'\n}\n\nexport const Tick: React.FunctionComponent<ITickProps> = ({\n  tick,\n  count,\n  mode = 'SHOWMINMAX',\n}) => (\n  <div>\n    <div\n      className=\"RangeSlider__tick\"\n      style={{\n        left: `${tick.percent}%`,\n      }}\n    />\n    <div\n      className=\"RangeSlider__tickInner\"\n      style={{\n        marginLeft: `${-(100 / count) / 2}%`,\n        width: `${100 / count}%`,\n        left: `${tick.percent}%`,\n      }}\n    >\n      {(mode === 'SHOWALL' ||\n        (mode === 'SHOWMINMAX' &&\n          (tick.percent == 0 || tick.percent == 100))) &&\n        tick.value}\n    </div>\n  </div>\n)\n\n\n/*************  RANGE SLIDER COMPONENT ****************/\n\n\nexport type RangeSliderProps = {\n  domain: string[]\n  initialValues: RangeValues\n  step: number\n  doUpdateOnApply?: boolean\n  maxTickCount?: number\n  onChange: Function\n}\n\nexport type RangeSliderState = {\n  values: readonly number[]\n}\n\nfunction getInitialValues(initialValues: RangeValues, domain: string[]) {\n  const result = [\n    initialValues.min ? Number(initialValues.min) : Number(domain[0]),\n    initialValues.max ? Number(initialValues.max) : Number(domain[1]),\n  ]\n  return result\n}\n\nexport const RangeSlider: React.FunctionComponent<RangeSliderProps> = ({doUpdateOnApply=true, ...props} ) => {\n  const stringArrToNumArr = (inputArr: string[]) =>\n    inputArr.map(value => Number(value))\n\n  const [values, setValues] = useState<number[]>(() =>\n    getInitialValues(props.initialValues, props.domain),\n  )\n\n  const numDomain = stringArrToNumArr(props.domain)\n\n  const handleSliderChange = (\n    values: readonly number[],\n    callbackFn?: Function,\n  ) => {\n    setValues([...values])\n    if (callbackFn) {\n      callbackFn({ min: values[0], max: values[1] })\n    }\n  }\n\n  let ticksCount = numDomain[1] - numDomain[0]\n  if (props.maxTickCount && ticksCount > props.maxTickCount) {\n    ticksCount = props.maxTickCount\n  }\n\n  return (\n    <div className=\"RangeSlider\">\n      <div className=\"RangeSlider__values\">{values[0]} - {values[1]}</div>\n      <div\n        className={`RangeSlider__wrapper${\n          doUpdateOnApply ? '--flex' : '--block'\n        }`}\n      >\n        <Slider\n          mode={1}\n          step={props.step}\n          domain={stringArrToNumArr(props.domain)}\n          className=\"RangeSlider__slider\"\n          onChange={(values: readonly number[]) =>\n            handleSliderChange(\n              values,\n              doUpdateOnApply ? undefined : props.onChange,\n            )\n          }\n          values={getInitialValues(props.initialValues, props.domain)}\n        >\n          <Rail>\n            {({ getRailProps }) => (\n              <div className=\"RangeSlider__rail\" {...getRailProps()} />\n            )}\n          </Rail>\n          <Handles>\n            {({ handles, getHandleProps }) => (\n              <div className=\"slider-handles\">\n                {handles.map(handle => (\n                  <Handle\n                    key={handle.id + handle.percent}\n                    handle={handle}\n                    domain={stringArrToNumArr(props.domain)}\n                    getHandleProps={getHandleProps}\n                  />\n                ))}\n              </div>\n            )}\n          </Handles>\n          <Tracks left={true} right={true}>\n            {({ tracks, getTrackProps }) => (\n              <div>\n                {tracks.map(({ id, source, target }) => (\n                  <Track\n                    key={id}\n                    source={source}\n                    target={target}\n                    getTrackProps={getTrackProps}\n                  />\n                ))}\n              </div>\n            )}\n          </Tracks>\n          <Ticks count={ticksCount}>\n            {({ ticks }) => (\n              <div>\n                {ticks.map(tick => (\n                  <Tick key={tick.id} tick={tick} count={ticks.length} />\n                ))}\n              </div>\n            )}\n          </Ticks>\n        </Slider>\n        {doUpdateOnApply && (\n          <button\n            className=\"RangeSlider__btnApply\"\n            onClick={() =>  props.onChange({ min: values[0], max: values[1] })}\n          >\n            Apply\n          </button>\n        )}\n      </div>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { Range, RangeValues } from '../Range'\nimport { RangeSlider } from '../RangeSlider'\nimport { FacetColumnResultRange } from '../../../utils/synapseTypes/Table/FacetColumnResult'\nimport { ColumnModel } from '../../../utils/synapseTypes/Table/ColumnModel'\nimport { VALUE_NOT_SET } from '../../../utils/SynapseConstants'\n\nimport { RadioGroup } from '../RadioGroup'\nimport { useState } from 'react'\n\nexport enum RadioValuesEnum {\n  NOT_SET = 'org.sagebionetworks.UNDEFINED_NULL_NOTSET',\n  RANGE = 'RANGE',\n  ANY = '',\n}\n\nexport type RangeFacetFilterProps = {\n  facetResult: FacetColumnResultRange\n  columnModel: ColumnModel\n  onChange: Function\n}\n\nexport type RangeFacetFilterState = {\n  facetResult: FacetColumnResultRange\n  columnModel: ColumnModel\n}\n\nexport const RangeFacetFilter: React.FunctionComponent<RangeFacetFilterProps> = ({\n  facetResult,\n  columnModel,\n  onChange,\n}: RangeFacetFilterProps) => {\n  const options = [\n    { label: 'Not Set', value: RadioValuesEnum.NOT_SET },\n    { label: 'Any', value: RadioValuesEnum.ANY },\n    { label: 'Range', value: RadioValuesEnum.RANGE },\n  ]\n\n  let { columnMin, columnMax, selectedMin, selectedMax } = facetResult // the upper bound of the selected range\n\n  const hasAnyValue = !selectedMin && !selectedMax\n\n  selectedMin = selectedMin || columnMin\n  selectedMax = selectedMax || columnMax\n\n  const rangeType = columnModel.columnType === 'DOUBLE' ? 'number' : 'date'\n\n  const getRadioValue = (min: string, isAnyValue: boolean) => {\n    if (isAnyValue) {\n      return RadioValuesEnum.ANY\n    } else if (min === VALUE_NOT_SET) {\n      return RadioValuesEnum.NOT_SET\n    }\n    return RadioValuesEnum.RANGE\n  }\n\n  const handleRadioGroupChange = (\n    radioValue: RadioValuesEnum,\n    onChangeCallback: Function,\n  ) => {\n    setRadioValue(radioValue)\n\n    if (radioValue !== RadioValuesEnum.RANGE) {\n      onChangeCallback([radioValue, radioValue])\n    }\n  }\n\n  const [radioValue, setRadioValue] = useState(\n    getRadioValue(selectedMin, hasAnyValue),\n  )\n\n  const result = (\n    <div>\n      <RadioGroup\n        value={radioValue}\n        id=\"rangeSelector\"\n        options={options}\n        onChange={(radioValue: RadioValuesEnum) =>\n          handleRadioGroupChange(radioValue, onChange)\n        }\n      ></RadioGroup>\n      {radioValue === RadioValuesEnum.RANGE &&\n        (columnMin === columnMax ? (\n          <label>{columnMax}</label>\n        ) : (\n          <>\n            {columnModel.columnType === 'INTEGER' && (\n              <RangeSlider\n                key=\"RangeSlider\"\n                domain={[columnMin, columnMax]}\n                initialValues={{ min: selectedMin, max: selectedMax }}\n                step={1}\n                doUpdateOnApply={true}\n                onChange={(values: RangeValues) =>\n                  onChange([values.min, values.max])\n                }\n              >\n                ) >\n              </RangeSlider>\n            )}\n\n            {(columnModel.columnType === 'DATE' ||\n              columnModel.columnType === 'DOUBLE') && (\n              <Range\n                key=\"Range\"\n                initialValues={{\n                  min: selectedMin,\n                  max: selectedMax,\n                }}\n                type={rangeType}\n                onChange={(values: RangeValues) =>\n                  onChange([values.min, values.max])\n                }\n              ></Range>\n            )}\n          </>\n        ))}\n    </div>\n  )\n  return result\n}\n","import * as React from 'react'\n\nexport type RadioGroupProps = {\n  options: { label: string; value: string }[]\n  id: string\n  className?: string\n  value?: string\n  onChange: Function\n}\n\nexport const RadioGroup: React.FunctionComponent<RadioGroupProps> = (\n  props: RadioGroupProps,\n) => {\n\n  const className = props.className\n    ? `radiogroup ${props.className}`\n    : `radiogroup`\n\n  return (\n    <div className={className}>\n      {props.options.map(option => (\n        <div className=\"radio\" key={option.value}>\n          {props.value == option.value}\n          <label>\n            <span>\n              <input\n                type=\"radio\"\n                checked={props.value === option.value}\n                value={option.value}\n                onChange={({ target }: React.ChangeEvent<HTMLInputElement>) =>\n                  props.onChange(target.value, target.checked)\n                }\n              />\n              <span>{option.label}</span>\n            </span>\n          </label>\n        </div>\n      ))}\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { useState, useEffect } from 'react'\nexport type CheckboxProps = {\n  label: string\n  id: string\n  checked?: boolean\n  className?: string\n  onChange: Function\n}\n\nexport const Checkbox: React.FunctionComponent<CheckboxProps> = (\n  props: CheckboxProps,\n) => {\n  const [checked, setChecked] = useState<boolean>(props.checked || false)\n\n  useEffect(() => {\n    setChecked(props.checked || false)\n  }, [props.checked])\n\n  const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setChecked(event.target.checked)\n    props.onChange(event.target.checked)\n  }\n\n  const className = props.className ? `checkbox ${props.className}` : `checkbox`\n\n  return (\n    <div className={className}>\n      <label>\n        <span>\n          <input\n            type=\"checkbox\"\n            checked={checked}\n            id={props.id}\n            onChange={handleCheckboxChange}\n          />\n          <span>{props.label}</span>\n        </span>\n      </label>\n    </div>\n  )\n}\n","import { getUserProfileWithProfilePicAttached } from '../functions/getUserData'\nimport { useEffect, useState } from 'react'\nimport { without } from 'lodash-es'\nimport { SynapseConstants } from '..'\nimport { UserProfile } from '../synapseTypes'\n\nexport type UseGetProfilesProps = {\n  ids: string[]\n  token?: string\n}\n\n// React hook to get user profiles\nexport default function useGetProfiles(props: UseGetProfilesProps) {\n  const { token, ids } = props\n  const [data, setData] = useState<UserProfile[]>([])\n  useEffect(() => {\n    const getData = async () => {\n      const curList = data.map(el => el.ownerId)\n      const nonNullIds = ids.filter(el => el !== SynapseConstants.VALUE_NOT_SET)\n      // look at current list of data, see if incoming ids has new data,\n      // if so grab those ids\n      const newValues = without(nonNullIds, ...curList)\n      if (newValues.length > 0) {\n        try {\n          const newIds = Array.from<string>(newValues)\n          const data = await getUserProfileWithProfilePicAttached(newIds, token)\n          setData(oldData => oldData.concat(data.list))\n        } catch (error) {\n          console.error('Error on data retrieval', error)\n        }\n      }\n    }\n    getData()\n  }, [token, ids, data])\n  return data\n}\n","import * as React from 'react'\n\nimport {\n  FacetColumnResultValueCount,\n  ColumnModel,\n} from '../../../utils/synapseTypes/Table'\nimport { Checkbox } from '../Checkbox'\nimport { SynapseConstants } from '../../../utils'\nimport { useState } from 'react'\nimport { EntityHeader } from '../../../utils/synapseTypes/EntityHeader'\nimport useGetProfiles from '../../../utils/hooks/useGetProfiles'\nimport useGetEntityHeaders from '../../../utils/hooks/useGetEntityHeaders'\nimport { ReferenceList, UserProfile } from '../../../utils/synapseTypes'\n\nexport type EnumFacetFilterProps = {\n  facetValues: FacetColumnResultValueCount[]\n  columnModel: ColumnModel\n  token?: string\n  onChange: Function\n  onClear: Function\n}\n\nfunction valueToId(value: string): string {\n  return value.replace(/\\s/g, '').toLowerCase()\n}\n\nfunction valueToLabel(\n  facet: FacetColumnResultValueCount,\n  profiles: UserProfile[] = [],\n  entityHeaders: EntityHeader[] = [],\n): string {\n  const { value, count } = facet\n  let displayValue = value\n  if (value === SynapseConstants.VALUE_NOT_SET) {\n    displayValue = 'Not Set'\n  }\n  const profile = profiles.find(profile => profile.ownerId === value)\n  if (profile) {\n    displayValue = profile ? profile.userName : `unknown (${value})`\n  }\n\n  const eh = entityHeaders.find(eh => eh.id === value)\n  if (eh) {\n    displayValue = eh ? eh.name : `unknown (${value})`\n  }\n  return `${displayValue} (${count})`\n}\n\nfunction formatFacetValuesForDisplay(\n  facetValues: FacetColumnResultValueCount[],\n  isShowAll: boolean,\n  visibleItemsCount: number,\n) {\n  //sort facets by count\n  const facets = [...facetValues.sort((a, b) => b.count - a.count)]\n  if (isShowAll || facets.length <= visibleItemsCount) {\n    return facets\n  } else {\n    //if we are not hiding elected facets\n    if (facets.slice(visibleItemsCount).find(item => item.isSelected)) {\n      return facets\n    } else {\n      return facets.splice(0, visibleItemsCount)\n    }\n  }\n}\n\n/************* QUERY ENUM CONMPONENT  *************/\n\nexport const EnumFacetFilter: React.FunctionComponent<EnumFacetFilterProps> = ({\n  token,\n  facetValues,\n  columnModel,\n  onClear,\n  onChange,\n}: EnumFacetFilterProps) => {\n  const [isShowAll, setIsShowAll] = useState<boolean>(false)\n  const visibleItemsCount = 5\n\n  const userIds =\n    columnModel.columnType === 'USERID'\n      ? facetValues.map(facet => facet.value)\n      : []\n  const userProfiles = useGetProfiles({ ids: userIds, token })\n\n  const entityIds: ReferenceList =\n    columnModel.columnType === 'ENTITYID'\n      ? facetValues.map(facet => {\n          return { targetId: facet.value }\n        })\n      : []\n  const entityHeaders = useGetEntityHeaders({\n    references: entityIds,\n    token,\n  })\n  if (!columnModel) {\n    return <></>\n  }\n\n  return (\n    <div>\n      <button\n        className=\"btn btn-link SRC-noPadding\"\n        onClick={() => onClear(columnModel.name)}\n      >\n        All\n      </button>\n      <div>\n        {formatFacetValuesForDisplay(\n          facetValues,\n          isShowAll,\n          visibleItemsCount,\n        ).map((facet, index: number) => {\n          const id = valueToId(facet.value)\n          return (\n            <Checkbox\n              onChange={(isChecked: boolean) =>\n                onChange(facet.value, isChecked)\n              }\n              key={id + index}\n              checked={facet.isSelected}\n              label={valueToLabel(facet, userProfiles, entityHeaders)}\n              id={id}\n            ></Checkbox>\n          )\n        })}\n        {!isShowAll && facetValues.length > visibleItemsCount && (\n          <button\n            className=\"btn btn-link SRC-noPadding\"\n            onClick={() => setIsShowAll(true)}\n          >\n            Show All\n          </button>\n        )}\n      </div>\n    </div>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { EntityHeader, ReferenceList } from '../synapseTypes'\nimport { getAllEntityHeader } from '../SynapseClient'\nimport { SynapseConstants } from '..'\nimport { without } from 'lodash-es'\n\nexport type UseGetProfilesProps = {\n  references: ReferenceList\n  token?: string\n}\n\n// React hook to get user profiles\nexport default function useGetEntityHeaders(props: UseGetProfilesProps) {\n  const { token, references } = props\n  const [data, setData] = useState<Array<EntityHeader>>([])\n  useEffect(() => {\n    const getData = async () => {\n      // look at current list of data, see if incoming ids has new data,\n      // if so grab those ids\n      const curList = data.map(el => el.id)\n      const incomingList = references\n        .filter(el => el.targetId !== SynapseConstants.VALUE_NOT_SET)\n        .map(el => el.targetId)\n      const newValues = without(incomingList, ...curList)\n      if (newValues.length > 0) {\n        try {\n          const newReferences = Array.from<string>(newValues).map(el => {\n            return { targetId: el }\n          })\n          const newData = await getAllEntityHeader(newReferences, token)\n          setData(oldData => oldData.concat(...newData))\n        } catch (error) {\n          console.error('Error on data retrieval', error)\n        }\n      }\n    }\n    getData()\n  }, [token, references, data])\n  return data\n}\n","import * as React from 'react'\nimport { RangeFacetFilter } from './RangeFacetFilter'\nimport { EnumFacetFilter } from './EnumFacetFilter'\nimport { unCamelCase } from '../../../utils/functions/unCamelCase'\nimport {\n  FacetColumnResultValues,\n  FacetColumnResult,\n  FacetColumnResultRange,\n} from '../../../utils/synapseTypes/Table/FacetColumnResult'\nimport {\n  FacetColumnValuesRequest,\n  FacetColumnRangeRequest,\n  FacetColumnRequest,\n} from '../../../utils/synapseTypes/Table/FacetColumnRequest'\nimport {\n  QueryBundleRequest,\n  QueryResultBundle,\n} from '../../../utils/synapseTypes'\n\nexport type QueryFilterProps = {\n  applyChanges: Function\n  isLoading?: boolean\n  data: QueryResultBundle\n  getLastQueryRequest?: Function\n  token: string\n}\n\nconst convertFacetToFacetColumnValuesRequest = (\n  facet: FacetColumnResultValues,\n): FacetColumnValuesRequest => ({\n  concreteType: 'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest',\n  columnName: facet.columnName,\n  facetValues: facet.facetValues\n    .filter(facet => facet.isSelected === true)\n    .map(facet => facet.value),\n})\n\nconst convertFacetColumnRangeRequest = (\n  facet: FacetColumnResultRange,\n): FacetColumnRangeRequest => {\n  let result = {\n    concreteType:\n      'org.sagebionetworks.repo.model.table.FacetColumnRangeRequest',\n    columnName: facet.columnName, // The name of the faceted column\n  }\n\n  if (facet.columnMin) {\n    result = { ...result, ...{ min: facet.columnMin, max: facet.columnMax } }\n  }\n  return result\n}\n\nconst patchRequestFacets = (\n  changedFacet: FacetColumnRequest,\n  lastRequest?: QueryBundleRequest,\n): FacetColumnRequest[] => {\n  const selections = lastRequest ? lastRequest.query.selectedFacets || [] : []\n  const changedFacetIndex = selections.findIndex(\n    facet => facet.columnName === changedFacet.columnName,\n  )\n\n  const isEmptyValuesFacet =\n    changedFacet.concreteType ===\n      'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest' &&\n    (!changedFacet.facetValues || !changedFacet.facetValues.length)\n  if (changedFacetIndex > -1) {\n    if (isEmptyValuesFacet) {\n      selections.splice(changedFacetIndex, 1)\n    } else {\n      selections[changedFacetIndex] = changedFacet\n    }\n  } else {\n    selections.push(changedFacet)\n  }\n  return selections\n}\n\nconst applyChangesToValuesColumn = (\n  lastRequest: QueryBundleRequest | undefined,\n\n  facet: FacetColumnResultValues,\n  onChangeFn: Function,\n  facetName?: string,\n  checked: boolean = false,\n) => {\n  if (facetName) {\n    facet.facetValues.forEach(facetValue => {\n      if (facetValue.value === facetName) {\n        facetValue.isSelected = checked\n      }\n    })\n  } else {\n    // else clear all\n    facet.facetValues.forEach(facet => {\n      facet.isSelected = false\n    })\n  }\n\n  const changedFacet = convertFacetToFacetColumnValuesRequest(facet)\n  const result = patchRequestFacets(changedFacet, lastRequest)\n  onChangeFn(result)\n}\n\n//rangeChanges\nconst applyChangesToRangeColumn = (\n  lastRequest: QueryBundleRequest | undefined,\n  facet: FacetColumnResultRange,\n  onChangeFn: Function,\n  values: string[],\n) => {\n  facet.columnMin = values[0]\n  facet.columnMax = values[1]\n  const changedFacet = convertFacetColumnRangeRequest(facet)\n  const result = patchRequestFacets(changedFacet, lastRequest)\n  onChangeFn(result)\n}\n\nexport const QueryFilter: React.FunctionComponent<QueryFilterProps> = ({\n  data,\n  isLoading = false,\n  getLastQueryRequest,\n  token,\n  applyChanges,\n}: QueryFilterProps): JSX.Element => {\n  const columnModels = data.columnModels\n  const facets = data.facets as FacetColumnResult[]\n  const lastRequest = getLastQueryRequest ? getLastQueryRequest() : undefined\n\n  return (\n    <div className=\"queryFilter\">\n      {isLoading && <div>Loading...</div>}\n      {!isLoading &&\n        facets.map(facet => {\n          const columnModel = columnModels!.find(\n            model => model.name === facet.columnName,\n          )\n\n          return (\n            <div className=\"queryFilter-facet\" key={facet.columnName}>\n              <label>{unCamelCase(facet.columnName)}</label>\n              {facet.facetType === 'enumeration' && columnModel && (\n                <EnumFacetFilter\n                  facetValues={(facet as FacetColumnResultValues).facetValues}\n                  columnModel={columnModel!}\n                  token={token}\n                  onChange={(facetName: string, checked: boolean) =>\n                    applyChangesToValuesColumn(\n                      lastRequest,\n                      facet as FacetColumnResultValues,\n                      applyChanges,\n                      facetName,\n                      checked,\n                    )\n                  }\n                  onClear={() =>\n                    applyChangesToValuesColumn(\n                      lastRequest,\n\n                      facet as FacetColumnResultValues,\n                      applyChanges,\n                    )\n                  }\n                ></EnumFacetFilter>\n              )}\n              {facet.facetType === 'range' && columnModel && (\n                <RangeFacetFilter\n                  facetResult={facet as FacetColumnResultRange}\n                  columnModel={columnModel}\n                  onChange={(values: string[]) =>\n                    applyChangesToRangeColumn(\n                      lastRequest,\n                      facet as FacetColumnResultRange,\n                      applyChanges,\n                      values,\n                    )\n                  }\n                ></RangeFacetFilter>\n              )}\n            </div>\n          )\n        })}\n    </div>\n  )\n}\n","import { ElementWithTooltip } from '../widgets/ElementWithTooltip'\nimport { IconProp, library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faCheck,\n  faColumns,\n  faDownload,\n  faCog,\n  faFilter,\n  faGlobeAmericas,\n  faSort,\n  faSortAmountDown,\n  faSortAmountUp,\n  faTimes,\n  faUsers,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { cloneDeep, noop } from 'lodash-es'\nimport * as React from 'react'\nimport { Dropdown, Modal } from 'react-bootstrap'\nimport { lexer } from 'sql-parser'\nimport { SynapseClient } from '../../utils'\nimport { readFacetValues } from '../../utils/functions/facetUtils'\nimport { getUserProfileWithProfilePicAttached } from '../../utils/functions/getUserData'\nimport {\n  formatSQLFromParser,\n  isGroupByInSql,\n} from '../../utils/functions/sqlFunctions'\nimport { AUTHENTICATED_USERS } from '../../utils/SynapseConstants'\nimport {\n  EntityColumnType,\n  EntityHeader,\n  FacetColumnResult,\n  FacetColumnResultValues,\n  QueryBundleRequest,\n  QueryResultBundle,\n  ReferenceList,\n  Row,\n  SelectColumn,\n  SortItem,\n  UserGroupHeader,\n  UserProfile,\n  FacetColumnRequest,\n} from '../../utils/synapseTypes/'\nimport { getColorPallette } from '../ColorGradient'\nimport { DownloadConfirmation } from '../download_list/DownloadConfirmation'\nimport { EntityLink } from '../EntityLink'\nimport HasAccess from '../HasAccess'\nimport MarkdownSynapse from '../MarkdownSynapse'\nimport ModalDownload from '../ModalDownload'\nimport { FacetSelection, QueryWrapperChildProps } from '../QueryWrapper'\nimport TotalQueryResults from '../TotalQueryResults'\nimport UserCard from '../UserCard'\nimport { unCamelCase } from './../../utils/functions/unCamelCase'\nimport { ICON_STATE, SELECT_ALL } from './SynapseTableConstants'\nimport {\n  ColumnSelection,\n  DownloadOptions,\n  EllipsisDropdown,\n  ExpandTable,\n} from './table-top/'\nimport FacetFilter from './table-top/FacetFilter'\nimport { QueryFilter } from '../widgets/query-filter/QueryFilter'\nimport NoData from '../../assets/icons/file-dotted.svg'\n\nconst EMPTY_HEADER: EntityHeader = {\n  id: '',\n  name: '',\n  type: '',\n  versionNumber: -1,\n  versionLabel: '',\n  benefactorId: -1,\n  createdBy: '',\n  createdOn: '',\n  modifiedBy: '',\n  modifiedOn: '',\n}\n// Add all icons to the library so you can use it in your page\nlibrary.add(faColumns)\nlibrary.add(faSort)\nlibrary.add(faSortAmountUp)\nlibrary.add(faSortAmountDown)\nlibrary.add(faCheck)\nlibrary.add(faTimes)\nlibrary.add(faFilter)\nlibrary.add(faCog)\nlibrary.add(faDownload)\nlibrary.add(faUsers)\nlibrary.add(faGlobeAmericas)\n// Hold constants for next and previous button actions\nconst NEXT = 'NEXT'\nconst PREVIOUS = 'PREVIOUS'\n\ntype Direction = '' | 'ASC' | 'DESC'\nexport const SORT_STATE: Direction[] = ['', 'DESC', 'ASC']\nexport const DOWNLOAD_OPTIONS_CONTAINER_CLASS = 'SRC-download-options-container'\ntype Info = {\n  index: number\n  name: string\n}\nexport interface Dictionary<T> {\n  [key: string]: T\n}\nexport type SynapseTableState = {\n  sortedColumnSelection: SortItem[]\n  isColumnSelected: boolean[]\n  columnIconSortState: number[]\n  isModalDownloadOpen: boolean\n  isDownloadConfirmationOpen: boolean\n  isExpanded: boolean\n  isFileView: boolean\n  mapEntityIdToHeader: Dictionary<EntityHeader>\n  mapUserIdToHeader: Dictionary<Partial<UserGroupHeader & UserProfile>>\n  showColumnSelection: boolean\n  isShowLeftFilter?: boolean\n  isUserModifiedQuery?: boolean //flag to signal that the selection criterial has been defined by user and if no records are returned do not hide the table\n}\nexport type SynapseTableProps = {\n  visibleColumnCount?: number\n  title: string\n  loadingScreen?: JSX.Element\n  showAccessColumn?: boolean\n  markdownColumns?: string[] // array of column names which should render as markdown\n  enableDownloadConfirmation?: boolean\n  enableLeftFacetFilter?: boolean\n}\n\nexport default class SynapseTable extends React.Component<\n  QueryWrapperChildProps & SynapseTableProps,\n  SynapseTableState\n> {\n  constructor(props: QueryWrapperChildProps & SynapseTableProps) {\n    super(props)\n    this.handleColumnSortPress = this.handleColumnSortPress.bind(this)\n    this.handlePaginationClick = this.handlePaginationClick.bind(this)\n    this.findSelectionIndex = this.findSelectionIndex.bind(this)\n    this.toggleColumnSelection = this.toggleColumnSelection.bind(this)\n    this.onToggleColumnSelectionShow = this.onToggleColumnSelectionShow.bind(\n      this,\n    )\n    this.advancedSearch = this.advancedSearch.bind(this)\n    this.getLengthOfPropsData = this.getLengthOfPropsData.bind(this)\n    this.configureFacetDropdown = this.configureFacetDropdown.bind(this)\n    this.applyChanges = this.applyChanges.bind(this)\n    // store the offset and sorted selection that is currently held\n    this.state = {\n      /* columnIconSortState tells what icon to display for a table\n         header. There are three states for a particular header-\n          0 - show descending icon but *deselected*\n          1 - show descending icon selected\n          2 - show ascending icon selected\n      */\n      columnIconSortState: [],\n      isColumnSelected: [],\n      isModalDownloadOpen: false,\n      isDownloadConfirmationOpen: false,\n      isExpanded: false,\n      showColumnSelection: false,\n      isShowLeftFilter: this.props.enableLeftFacetFilter,\n      isFileView: false,\n      // sortedColumnSelection contains the columns which are\n      // selected currently and their sort status as eithet\n      // off, desc, or asc.\n      sortedColumnSelection: [],\n      mapEntityIdToHeader: {},\n      mapUserIdToHeader: {},\n    }\n    this.getEntityHeadersInData = this.getEntityHeadersInData.bind(this)\n    this.getColumnIndiciesWithType = this.getColumnIndiciesWithType.bind(this)\n  }\n\n  componentDidMount() {\n    this.getEntityHeadersInData()\n  }\n\n  componentDidUpdate(prevProps: QueryWrapperChildProps & SynapseTableProps) {\n    this.getEntityHeadersInData()\n    this.getTableConcreteType(prevProps)\n  }\n\n  public async getTableConcreteType(\n    prevProps: QueryWrapperChildProps & SynapseTableProps,\n  ) {\n    const { data, token } = this.props\n    if (!data) {\n      return\n    }\n    const currentTableId = data?.queryResult.queryResults.tableId\n    const previousTableId = prevProps.data?.queryResult.queryResults.tableId\n    if (currentTableId && previousTableId !== currentTableId) {\n      const entityData = await SynapseClient.getEntity(token, currentTableId)\n      this.setState({\n        isFileView: entityData.concreteType.includes('EntityView'),\n      })\n    }\n  }\n\n  public async getEntityHeadersInData() {\n    const { data, token } = this.props\n    if (!data) {\n      return\n    }\n    const mapEntityIdToHeader = cloneDeep(this.state.mapEntityIdToHeader)\n    const mapUserIdToHeader = cloneDeep(this.state.mapUserIdToHeader)\n    const entityIdColumnIndicies = this.getColumnIndiciesWithType('ENTITYID')\n    const userIdColumnIndicies = this.getColumnIndiciesWithType('USERID')\n    const distinctEntityIds = this.getUniqueEntities(\n      data,\n      mapEntityIdToHeader,\n      entityIdColumnIndicies,\n    )\n    const distinctUserIds = this.getUniqueEntities(\n      data,\n      mapUserIdToHeader,\n      userIdColumnIndicies,\n    )\n    // Make call to resolve entity ids\n    if (distinctEntityIds.size > 0) {\n      const referenceList: ReferenceList = Array.from(distinctEntityIds).map(\n        id => {\n          return { targetId: id }\n        },\n      )\n      try {\n        // initialize mapEntityIdToHeader\n        referenceList.forEach(el => {\n          mapEntityIdToHeader[el.targetId] = EMPTY_HEADER\n        })\n        const data = await SynapseClient.getEntityHeader(referenceList, token)\n        const { results } = data\n        results.forEach(el => {\n          mapEntityIdToHeader[el.id] = el\n        })\n      } catch (err) {\n        console.error('Error on retrieving entity header list , ', err)\n      }\n    }\n    if (distinctUserIds.size === 0) {\n      if (distinctEntityIds.size > 0) {\n        this.setState({ mapEntityIdToHeader })\n      }\n      return\n    }\n    // Make call to get group headers and user profiles\n    const ids = Array.from(distinctUserIds)\n    const userPorfileIds: string[] = []\n    // TODO: Grab Team Badge\n    try {\n      const data = await SynapseClient.getGroupHeadersBatch(ids, token)\n      data.children.forEach(el => {\n        if (el.isIndividual) {\n          userPorfileIds.push(el.ownerId)\n        } else {\n          mapUserIdToHeader[el.ownerId] = el\n        }\n      })\n    } catch (err) {\n      console.error('Error on getGroupHeaders batch: ', err)\n    }\n    if (userPorfileIds.length > 0) {\n      try {\n        const data = await getUserProfileWithProfilePicAttached(\n          userPorfileIds,\n          token,\n        )\n        data.list.forEach((el: UserProfile) => {\n          mapUserIdToHeader[el.ownerId] = el\n        })\n      } catch (err) {\n        console.error('Error on getUserProfile : ', err)\n      }\n    }\n    if (distinctEntityIds.size > 0 || distinctUserIds.size > 0) {\n      this.setState({\n        mapEntityIdToHeader,\n        mapUserIdToHeader,\n      })\n    }\n  }\n\n  public getUniqueEntities(\n    data: QueryResultBundle,\n    mapIdToHeader: {},\n    indicies: number[],\n  ) {\n    const distinctEntities = new Set<string>()\n    data!.queryResult.queryResults.rows.forEach(row => {\n      row.values.forEach((el: any, colIndex: number) => {\n        // make sure this is a column of type entity and that we haven't retrieved this entity's information prior\n        if (\n          indicies.includes(colIndex) &&\n          !Object.prototype.hasOwnProperty.call(mapIdToHeader, el) &&\n          el\n        ) {\n          distinctEntities.add(el)\n        }\n      })\n    })\n    return distinctEntities\n  }\n\n  public getColumnIndiciesWithType(...columnTypes: EntityColumnType[]) {\n    const { data } = this.props\n    const columnsOfTypeEntity: number[] = []\n    data &&\n      data.selectColumns &&\n      data.selectColumns.forEach((el, index) => {\n        if (columnTypes.includes(el.columnType)) {\n          columnsOfTypeEntity.push(index)\n        }\n      })\n    return columnsOfTypeEntity\n  }\n\n  /**\n   * Display the view\n   */\n  public render() {\n    if (this.props.data === undefined) {\n      return this.props.loadingScreen || <div />\n    }\n    // unpack all the data\n    const {\n      data,\n      isLoading = true,\n      unitDescription,\n      token,\n      facet,\n      showBarChart,\n    } = this.props\n    const { queryResult } = data\n    const { queryResults } = queryResult\n    const { rows } = queryResults\n    const { headers } = queryResults\n    const { facets = [] } = data\n    const { isModalDownloadOpen, isExpanded } = this.state\n    const queryRequest = this.props.getLastQueryRequest!()\n    const { sql, selectedFacets } = queryRequest.query\n\n    let className = 'SRC-marginTopMinusTen'\n    if (showBarChart) {\n      className = 'SRC-marginBottomTop'\n    }\n    const hasResults = data.queryResult.queryResults.rows.length > 0\n    if (!hasResults && !this.state.isUserModifiedQuery) {\n      return (\n        <div className=\"text-center SRCBorderedPanel SRCBorderedPanel--padded2x\">\n          <img src={NoData} alt=\"no data\"></img>\n          <div style={{ marginTop: '20px', fontStyle: 'italic' }}>\n            This table is currently empty\n          </div>\n        </div>\n      )\n    }\n    const content = (\n      <>\n        <div className={className}>\n          <div\n            className={`SRC-centerContent text-left`}\n            style={{ height: '20px' }}\n          >\n            {unitDescription && !isGroupByInSql(queryRequest.query.sql) && (\n              <TotalQueryResults\n                facet={facet}\n                data={data}\n                isLoading={isLoading}\n                style={{ fontSize: 15 }}\n                unitDescription={unitDescription}\n                frontText={'Showing'}\n              />\n            )}\n          </div>\n          {this.renderTableTop(headers, this.props.enableLeftFacetFilter)}\n          <div className=\"row \">\n            {this.state.isShowLeftFilter && (\n              <div\n                className=\"col-xs-12 col-sm-3 col-lg-3\"\n                style={{ paddingRight: '0px' }}\n              >\n                {\n                  <QueryFilter\n                    {...this.props}\n                    data={this.props.data!}\n                    token={this.props.token!}\n                    applyChanges={(newFacets: FacetColumnRequest[]) =>\n                      this.applyChangesFromQueryFilter(newFacets)\n                    }\n                  />\n                }\n              </div>\n            )}\n            <div\n              className={`${\n                this.state.isShowLeftFilter\n                  ? 'col-xs-12 col-sm-9 col-lg-9'\n                  : 'col-xs-12'\n              }`}\n            >\n              {this.renderTable(headers, facets, rows)}\n            </div>\n          </div>\n        </div>\n      </>\n    )\n    return (\n      <React.Fragment>\n        {// modal can render anywhere, this is not a particular location\n        isModalDownloadOpen && (\n          <ModalDownload\n            onClose={() => this.setState({ isModalDownloadOpen: false })}\n            sql={sql}\n            selectedFacets={selectedFacets}\n            token={token}\n            entityId={queryRequest.entityId}\n          />\n        )}\n        {isExpanded && (\n          <Modal\n            animation={false}\n            centered={true}\n            show={true}\n            // @ts-ignore\n            onHide={() => this.setState({ isExpanded: false })}\n            dialogClassName={'modal-90w'}\n          >\n            <Modal.Header\n              // @ts-ignore\n              onHide={() => this.setState({ isExpanded: false })}\n              closeButton={true}\n            ></Modal.Header>\n            <Modal.Body>{content}</Modal.Body>\n          </Modal>\n        )}\n        {!isExpanded && content}\n      </React.Fragment>\n    )\n  }\n\n  private showGroupRowData = (selectedRow: Row) => {\n    // magic happens - parse query, deep copy query bundle request, modify, encode, send to Synapse.org.  Easy!\n    const queryCopy = this.props.getLastQueryRequest!().query\n    const parsed = this.getSqlUnderlyingDataForRow(selectedRow, queryCopy.sql)\n    queryCopy.sql = parsed.newSql\n    const queryJSON = JSON.stringify(queryCopy)\n    // encode this copy of the query (json)\n    const encodedQuery = btoa(queryJSON)\n    return `https://www.synapse.org/#!Synapse:${parsed.synId}/tables/query/${encodedQuery}`\n  }\n\n  private renderDropdownDownloadOptions = (isFileView?: boolean) => {\n    const partialState = {\n      isModalDownloadOpen: true,\n      isExpanded: false,\n    }\n    return (\n      <DownloadOptions\n        onDownloadFiles={(e: React.SyntheticEvent) => this.showDownload(e)}\n        onExportMetadata={() => this.setState(partialState)}\n        isUnauthenticated={!this.props.token}\n        isFileView={isFileView}\n      />\n    )\n  }\n\n  /* \n    The ColumnSelection dropdown state is held in SynapseTable because the EllipsisDropdown has\n    an option to open the dropdown, 'show columns'\n  */\n  public onToggleColumnSelectionShow(\n    _show: boolean,\n    _event: React.SyntheticEvent<Dropdown<'div'>, Event>,\n    metadata: any,\n  ) {\n    // Any click event for the Dropdown will close the dropdown (assuming its open), so we have\n    // to handle the onToggle event and manually manage the dropdown open state. If metadata\n    // is defined the event occuring is inside the dropdown which we then want to keep open, otherwise\n    // we close it.\n    if (metadata.source) {\n      this.setState({\n        showColumnSelection: true,\n      })\n    } else {\n      this.setState({\n        showColumnSelection: false,\n      })\n    }\n  }\n\n  private renderColumnSelection = (headers: SelectColumn[]) => {\n    return (\n      <ColumnSelection\n        headers={headers}\n        isColumnSelected={this.state.isColumnSelected}\n        visibleColumnCount={this.props.visibleColumnCount}\n        show={this.state.showColumnSelection}\n        toggleColumnSelection={this.toggleColumnSelection}\n        onToggle={this.onToggleColumnSelectionShow}\n      />\n    )\n  }\n\n  private renderTable = (\n    headers: SelectColumn[],\n    facets: FacetColumnResult[],\n    rows: Row[],\n  ) => {\n    const lastQueryRequest = this.props.getLastQueryRequest!()\n    // handle displaying the previous button -- if offset is zero then it\n    // shouldn't be displayed\n    const pastZero: boolean = lastQueryRequest.query.offset! > 0\n    const { hasMoreData, showAccessColumn, token } = this.props\n\n    const zeroMarginRight: React.CSSProperties = {\n      marginRight: 0,\n    }\n    const nextBtn = (\n      <button\n        onClick={this.handlePaginationClick(NEXT)}\n        className=\"SRC-light-button SRC-standard-button-shape\"\n        style={zeroMarginRight}\n        type=\"button\"\n      >\n        Next\n      </button>\n    )\n    const previousBtn = (\n      <button\n        onClick={this.handlePaginationClick(PREVIOUS)}\n        className=\"SRC-light-button SRC-standard-button-shape\"\n        type=\"button\"\n        style={!hasMoreData && pastZero ? zeroMarginRight : undefined}\n      >\n        Previous\n      </button>\n    )\n\n    let isShowingAccessColumn: boolean | undefined = showAccessColumn\n    if (showAccessColumn && rows.length > 0) {\n      // PORTALS-924: verify that row actualy contains a defined rowId\n      isShowingAccessColumn = rows[0].rowId !== undefined\n    }\n    /* min height ensure if no rows are selected that a dropdown menu is still accessible */\n    return (\n      <div style={{ minHeight: '300px' }} className=\"SRC-overflowAuto\">\n        {this.state.isDownloadConfirmationOpen && (\n          <DownloadConfirmation\n            token={token!}\n            queryBundleRequest={this.props.getLastQueryRequest!()}\n            fnClose={() => this.setState({ isDownloadConfirmationOpen: false })}\n          />\n        )}\n        <table className=\"table table-striped table-condensed\">\n          <thead className=\"SRC_bordered\">\n            <tr>\n              {this.createTableHeader(headers, facets, isShowingAccessColumn)}\n            </tr>\n          </thead>\n          <tbody>\n            {this.createTableRows(rows, headers, isShowingAccessColumn)}\n          </tbody>\n        </table>\n        <div style={{ textAlign: 'right' }}>\n          {pastZero && previousBtn}\n          {hasMoreData && nextBtn}\n        </div>\n      </div>\n    )\n  }\n\n  private renderTableTop = (\n    headers: SelectColumn[],\n    enableLeftFacetFilter?: boolean,\n  ) => {\n    const { title } = this.props\n    const { isExpanded, isFileView } = this.state\n    const { colorPalette } = getColorPallette(this.props.rgbIndex!, 1)\n    const background = colorPalette[0]\n    const onDownloadTableOnlyArguments = {\n      isExpanded: false,\n      isModalDownloadOpen: true,\n    }\n    const onExpandArguments = {\n      isExpanded: !isExpanded,\n    }\n    const queryRequest = this.props.getLastQueryRequest!()\n    return (\n      <div\n        className={`SRC-centerContent${\n          this.state.isShowLeftFilter ? ' SRC-marginBottomTen' : ''\n        }`}\n        style={{ background, padding: 8 }}\n      >\n        <h3 className=\"SRC-tableHeader\"> {title}</h3>\n        <span className=\"SRC-inlineFlex\" style={{ marginLeft: 'auto' }}>\n          {!isGroupByInSql(queryRequest.query.sql) && (\n            <>\n              {!enableLeftFacetFilter /* without filter flag*/ && (\n                <ElementWithTooltip\n                  idForToolTip={'advancedSearch'}\n                  image={faFilter}\n                  callbackFn={this.advancedSearch}\n                  tooltipText={'Open Advanced Search in Synapse'}\n                />\n              )}\n              {enableLeftFacetFilter && (\n                <>\n                  <ElementWithTooltip\n                    idForToolTip={'advancedSearch'}\n                    image={faCog}\n                    callbackFn={this.advancedSearch}\n                    tooltipText={'Open Advanced Search in Synapse'}\n                  />\n                  <ElementWithTooltip\n                    idForToolTip={'filter'}\n                    image={faFilter}\n                    callbackFn={() =>\n                      this.setState({\n                        isShowLeftFilter: !this.state.isShowLeftFilter,\n                      })\n                    }\n                    tooltipText={'Toggle Search Panel'}\n                  />\n                </>\n              )}\n              {this.renderDropdownDownloadOptions(isFileView)}\n              {this.renderColumnSelection(headers)}\n            </>\n          )}\n          <ExpandTable\n            isExpanded={isExpanded}\n            onExpand={() => this.setState(onExpandArguments)}\n          />\n        </span>\n        <EllipsisDropdown\n          onDownloadFiles={(e: React.SyntheticEvent) => this.showDownload(e)}\n          onDownloadTableOnly={() =>\n            this.setState(onDownloadTableOnlyArguments)\n          }\n          onShowColumns={() => this.setState({ showColumnSelection: true })}\n          onFullScreen={() => this.setState(onExpandArguments)}\n          isExpanded={isExpanded}\n          isUnauthenticated={!this.props.token}\n          isGroupedQuery={isGroupByInSql(queryRequest.query.sql)}\n          isFileView={this.state.isFileView}\n        />\n      </div>\n    )\n  }\n\n  /**\n   * Return the select column indexes for columns that use the aggregate count function.\n   * If sql does not have a GROUP BY, this returns an empty array.\n   * @param originalSql\n   */\n  public getCountFunctionColumnIndexes(originalSql: string): number[] {\n    const indexes: number[] = []\n    if (isGroupByInSql(originalSql)) {\n      const tokens: string[][] = lexer.tokenize(originalSql)\n      const selectIndex = tokens.findIndex(el => el[0] === 'SELECT')\n      const fromIndex = tokens.findIndex(el => el[0] === 'FROM')\n      let columnIndex = 0\n      for (\n        let index = selectIndex + 1;\n        index < fromIndex - selectIndex - 1;\n        index += 1\n      ) {\n        const token = tokens[index]\n        if (token[0] === 'FUNCTION' && token[1].toLowerCase() === 'count') {\n          // found a count column!\n          indexes.push(columnIndex)\n        } else if (token[0] === 'SEPARATOR') {\n          // next column\n          columnIndex += 1\n        }\n      }\n    }\n    return indexes\n  }\n\n  public getSqlUnderlyingDataForRow(\n    selectedRow: Row,\n    originalSql: string,\n  ): { synId: string; newSql: string } {\n    let tokens: string[][] = lexer.tokenize(originalSql)\n    const selectIndex = tokens.findIndex(el => el[0] === 'SELECT')\n    const fromIndex = tokens.findIndex(el => el[0] === 'FROM')\n\n    // gather all of the column names literals between select and from (and their indices)\n    const columnReferences: ColumnReference[] = []\n    let columnIndex = 0\n    let foundFunctionForColumn = false\n    for (\n      let index = selectIndex + 1;\n      index < fromIndex - selectIndex - 1;\n      index += 1\n    ) {\n      const token = tokens[index]\n      // parsing error.  concat function is reported as a LITERAL instead of a function\n      if (\n        token[0] === 'FUNCTION' ||\n        token[1].toLocaleLowerCase() === 'concat'\n      ) {\n        foundFunctionForColumn = true\n      } else if (token[0] === 'LITERAL' && !foundFunctionForColumn) {\n        // found a column\n        columnReferences.push({ index: columnIndex, name: token[1] })\n      } else if (token[0] === 'SEPARATOR') {\n        // next column\n        columnIndex += 1\n        // reset \"found function\"\n        foundFunctionForColumn = false\n      }\n    }\n\n    // remove all tokens after (and including) group\n    tokens = tokens.slice(\n      0,\n      tokens.findIndex(el => el[0] === 'GROUP'),\n    )\n    // replace all columns with *\n    tokens.splice(selectIndex + 1, fromIndex - selectIndex - 1, [\n      'STAR',\n      '*',\n      '1',\n    ])\n    // add new items to where clause, but only if the column name corresponds to a real column in the table/view!\n    // use row.values\n    if (this.props.data === undefined) {\n      return { synId: '', newSql: '' }\n    }\n    const whereIndex = tokens.findIndex(el => el[0] === 'WHERE')\n    if (whereIndex === -1) {\n      // does not contain a where clause\n      tokens.push(['WHERE', 'WHERE', '1'])\n    } else {\n      // alreay contains a where clause, add the first AND\n      tokens.push(['CONDITIONAL', 'AND', '1'])\n    }\n\n    // look for headers in column models, if they match then add a where clause\n    columnReferences.forEach((value: ColumnReference, index: number) => {\n      const rowValue = selectedRow.values[value.index]\n      // PORTALS-712: support null values\n      if (rowValue) {\n        tokens.push(\n          ['LITERAL', value.name, '1'],\n          ['OPERATOR', '=', '1'],\n          ['STRING', rowValue, '1'],\n          ['CONDITIONAL', 'AND', '1'],\n        )\n      } else {\n        tokens.push(\n          ['LITERAL', value.name, '1'],\n          ['OPERATOR', 'IS', '1'],\n          ['BOOLEAN', 'null', '1'],\n          ['CONDITIONAL', 'AND', '1'],\n        )\n      }\n    })\n    // remove the last AND\n    tokens.pop()\n    // remove backtick from output sql (for table name): `syn1234` becomes syn1234\n    const synId = tokens[tokens.findIndex(el => el[0] === 'FROM') + 1][1]\n    tokens.push(['EOF', '', '1'])\n    return { synId, newSql: formatSQLFromParser(tokens) }\n  }\n\n  /**\n   * Handle a click on next or previous\n   *\n   * @memberof SynapseTable\n   */\n  private handlePaginationClick = (eventType: string) => (\n    _event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    const queryRequest = this.props.getLastQueryRequest!()\n    let currentOffset = queryRequest.query.offset!\n    // if its a \"previous\" click subtract from the offset\n    // otherwise its next and we paginate forward\n    if (eventType === PREVIOUS) {\n      currentOffset -= 25\n    }\n    if (eventType === NEXT) {\n      currentOffset += 25\n    }\n    queryRequest.query.offset = currentOffset\n    this.props.executeQueryRequest!(queryRequest)\n  }\n  /**\n   * Handle a column having been selected\n   *\n   * @memberof SynapseTable\n   */\n  public handleColumnSortPress = (dict: Info) => (_: React.SyntheticEvent) => {\n    // by using Synthetic event we can use the handler on both key press and mouse click\n    let columnIconSortState = cloneDeep(this.state.columnIconSortState)\n    if (columnIconSortState.length === 0) {\n      columnIconSortState = Array(this.getLengthOfPropsData()).fill(0)\n    }\n    // get currently sorted items and remove/insert/update this selection\n    const sortedColumnSelection = cloneDeep(this.state.sortedColumnSelection)\n    const index = this.findSelectionIndex(sortedColumnSelection, dict.name)\n    // if its present then remove it\n    if (index !== -1) {\n      sortedColumnSelection.splice(index, 1)\n    }\n    columnIconSortState[dict.index] =\n      (columnIconSortState[dict.index] + 1) % ICON_STATE.length\n    if (columnIconSortState[dict.index] > 0) {\n      sortedColumnSelection.unshift({\n        column: dict.name,\n        direction: SORT_STATE[columnIconSortState[dict.index]],\n      })\n    }\n    const queryRequest = this.props.getLastQueryRequest!()\n    queryRequest.query.sort = sortedColumnSelection\n    this.props.executeQueryRequest!(queryRequest)\n    this.setState({\n      columnIconSortState,\n      sortedColumnSelection,\n    })\n  }\n\n  private createTableRows(\n    rows: Row[],\n    headers: SelectColumn[],\n    isShowingAccessColumn: boolean | undefined,\n  ) {\n    const rowsFormatted: JSX.Element[] = []\n    const { token } = this.props\n    const {\n      isColumnSelected,\n      mapEntityIdToHeader,\n      mapUserIdToHeader,\n    } = this.state\n    const entityColumnIndicies = this.getColumnIndiciesWithType('ENTITYID')\n    const userColumnIndicies = this.getColumnIndiciesWithType('USERID')\n    const dateColumnIndicies = this.getColumnIndiciesWithType('DATE')\n    const dateListColumnIndicies = this.getColumnIndiciesWithType('DATE_LIST')\n    const booleanListColumnIndicies = this.getColumnIndiciesWithType(\n      'BOOLEAN_LIST',\n    )\n    const otherListColumnIndicies = this.getColumnIndiciesWithType(\n      'STRING_LIST',\n      'INTEGER_LIST',\n    )\n    const isColumnSelectedLen = isColumnSelected.length\n    // find column indices that are COUNT type\n    const countColumnIndexes = this.getCountFunctionColumnIndexes(\n      this.props.getLastQueryRequest!().query.sql,\n    )\n    const { visibleColumnCount = Infinity, markdownColumns = [] } = this.props\n    rows.forEach((row, rowIndex) => {\n      const rowContent = row.values.map(\n        (columnValue: string, colIndex: number) => {\n          const columnName = headers[colIndex].name\n          const isMarkdownColumn = markdownColumns.includes(columnName)\n          const index = this.findSelectionIndex(\n            this.state.sortedColumnSelection,\n            columnName,\n          )\n          const usedVisibleColumnCount = isGroupByInSql(\n            this.props.getLastQueryRequest!().query.sql,\n          )\n            ? Infinity\n            : visibleColumnCount\n          // on iniital load isColumnSelected is null and we by default show all columns that come\n          // before visibileColumnCount\n          const isColumnActiveInitLoad: boolean =\n            colIndex < usedVisibleColumnCount && isColumnSelectedLen === 0\n          // past the initial load -- when a user has started clicking items, then isColumnSelected is\n          // not null and we verify that this column is part of the selection.\n          const isColumnActivePastInitLoad =\n            isColumnSelectedLen !== 0 && this.state.isColumnSelected[colIndex]\n          const isCountColumn = countColumnIndexes.includes(colIndex)\n          const isBold = index === -1 ? '' : 'SRC-boldText'\n          if (isColumnActiveInitLoad || isColumnActivePastInitLoad) {\n            return (\n              <td\n                className=\"SRC_noBorderTop\"\n                key={`(${rowIndex}${columnValue}${colIndex})`}\n              >\n                {isCountColumn && (\n                  <a\n                    href={this.showGroupRowData(row)}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <p className={isBold}>{columnValue}</p>\n                  </a>\n                )}\n                {!isCountColumn &&\n                  this.renderTableCell({\n                    entityColumnIndicies,\n                    userColumnIndicies,\n                    dateColumnIndicies,\n                    dateListColumnIndicies,\n                    booleanListColumnIndicies,\n                    otherListColumnIndicies,\n                    colIndex,\n                    columnValue,\n                    isBold,\n                    mapEntityIdToHeader,\n                    mapUserIdToHeader,\n                    isMarkdownColumn,\n                    rowIndex,\n                  })}\n              </td>\n            )\n          }\n          return <td className=\"SRC-hidden\" key={`(${rowIndex},${colIndex})`} />\n        },\n      )\n      // also push the access column value if we are showing user access for individual items (still shown if not logged in)\n      if (isShowingAccessColumn) {\n        const rowSynapseId = `syn${row.rowId}`\n        rowContent.push(\n          <td key={`(${rowIndex},accessColumn)`} className=\"SRC_noBorderTop\">\n            <HasAccess\n              entityId={rowSynapseId}\n              entityVersionNumber={row.versionNumber?.toString()}\n              token={token}\n            ></HasAccess>\n          </td>,\n        )\n      }\n\n      const rowFormatted = <tr key={row.rowId}>{rowContent}</tr>\n      rowsFormatted.push(rowFormatted)\n    })\n    return rowsFormatted\n  }\n\n  // Render table cell, supports Entity's and User Icons\n  public renderTableCell({\n    entityColumnIndicies,\n    userColumnIndicies,\n    dateColumnIndicies,\n    dateListColumnIndicies,\n    booleanListColumnIndicies,\n    otherListColumnIndicies,\n    colIndex,\n    columnValue,\n    isBold,\n    mapEntityIdToHeader,\n    mapUserIdToHeader,\n    isMarkdownColumn,\n    rowIndex,\n  }: {\n    entityColumnIndicies: number[]\n    userColumnIndicies: number[]\n    dateColumnIndicies: number[]\n    dateListColumnIndicies: number[]\n    booleanListColumnIndicies: number[]\n    otherListColumnIndicies: number[]\n    colIndex: number\n    columnValue: string\n    isBold: string\n    mapEntityIdToHeader: Dictionary<EntityHeader>\n    mapUserIdToHeader: Dictionary<any>\n    isMarkdownColumn: boolean\n    rowIndex?: number\n  }): React.ReactNode {\n    const getShortString = (\n      longString: string,\n      maxCharCount = 20,\n    ): [string, boolean] => {\n      if (!longString || longString.length <= maxCharCount) {\n        return [longString, false]\n      } else {\n        return [longString.substr(0, maxCharCount), true]\n      }\n    }\n    if (!columnValue) {\n      return <></>\n    }\n    if (isMarkdownColumn) {\n      return <MarkdownSynapse renderInline={true} markdown={columnValue} />\n    }\n    if (\n      entityColumnIndicies.includes(colIndex) &&\n      Object.prototype.hasOwnProperty.call(mapEntityIdToHeader, columnValue)\n    ) {\n      return (\n        <EntityLink\n          entityHeader={mapEntityIdToHeader[columnValue]}\n          className={isBold}\n        />\n      )\n    }\n    if (dateListColumnIndicies.includes(colIndex)) {\n      const jsonData: number[] = JSON.parse(columnValue)\n      return jsonData.map((val: number, index: number) => {\n        return (\n          <span className={isBold}>\n            {new Date(val).toLocaleString()}\n            {index !== jsonData.length - 1 ? ', ' : ''}\n          </span>\n        )\n      })\n    }\n    if (booleanListColumnIndicies.includes(colIndex)) {\n      const jsonData: boolean[] = JSON.parse(columnValue)\n      return jsonData.map((val: boolean, index: number) => {\n        return (\n          <span className={isBold}>\n            {val ? 'true' : 'false'}\n            {index !== jsonData.length - 1 ? ', ' : ''}\n          </span>\n        )\n      })\n    }\n    if (otherListColumnIndicies.includes(colIndex)) {\n      const jsonData: string[] = JSON.parse(columnValue)\n      return jsonData.map((val: string, index: number) => {\n        return (\n          <span className={isBold}>\n            {val}\n            {index !== jsonData.length - 1 ? ', ' : ''}\n          </span>\n        )\n      })\n    }\n    if (dateColumnIndicies.includes(colIndex)) {\n      return (\n        <p className={isBold}>\n          {new Date(Number(columnValue)).toLocaleString()}\n        </p>\n      )\n    } else if (\n      userColumnIndicies.includes(colIndex) &&\n      Object.prototype.hasOwnProperty.call(mapUserIdToHeader, columnValue)\n    ) {\n      const { ownerId, userName } = mapUserIdToHeader[columnValue]\n      if (mapUserIdToHeader[columnValue].isIndividual === false) {\n        // isUserGroupHeader\n        const icon =\n          userName === AUTHENTICATED_USERS ? 'globe-americas' : 'users'\n        if (userName === AUTHENTICATED_USERS) {\n          return (\n            <span>\n              <FontAwesomeIcon icon={icon} /> All registered Synapse users\n            </span>\n          )\n        }\n        return (\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href={`https://www.synapse.org/#!Team:${ownerId}`}\n          >\n            <FontAwesomeIcon icon={icon} /> {userName}\n          </a>\n        )\n      } else {\n        // isUserCard\n        return (\n          <UserCard\n            userProfile={mapUserIdToHeader[columnValue]}\n            preSignedURL={mapUserIdToHeader[columnValue].clientPreSignedURL}\n            size={'SMALL USER CARD'}\n          />\n        )\n      }\n    } else {\n      const [displayString, isShortened] = getShortString(columnValue)\n      if (!isShortened) {\n        return <p className={isBold}> {columnValue}</p>\n      } else {\n        return (\n          <p className={isBold}>\n            <ElementWithTooltip\n              tooltipText={columnValue}\n              callbackFn={noop}\n              idForToolTip={`${colIndex}_${rowIndex}`}\n            >\n              <p className={isBold}> {displayString}...</p>\n            </ElementWithTooltip>\n          </p>\n        )\n      }\n    }\n  }\n\n  private createTableHeader(\n    headers: SelectColumn[],\n    facets: FacetColumnResult[],\n    isShowingAccessColumn: boolean | undefined,\n  ) {\n    const {\n      isColumnSelected,\n      sortedColumnSelection,\n      columnIconSortState,\n    } = this.state\n    const { visibleColumnCount = Infinity, facetAliases = {} } = this.props\n    const usedVisibleColumnCount = isGroupByInSql(\n      this.props.getLastQueryRequest!().query.sql,\n    )\n      ? Infinity\n      : visibleColumnCount\n    const tableColumnHeaderElements: JSX.Element[] = headers.map(\n      (column: SelectColumn, index: number) => {\n        // two cases when rendering the column headers on init load\n        // of the page we have to show only this.props.visibleColumnCount many\n        // columns, afterwards we rely on the isColumnSelected to get choices\n        const initRender: boolean =\n          index < usedVisibleColumnCount && isColumnSelected.length === 0\n        const subsequentRender =\n          isColumnSelected[index] && isColumnSelected.length !== 0\n        if (initRender || subsequentRender) {\n          // for background color\n          const isSelected: boolean =\n            this.findSelectionIndex(sortedColumnSelection, column.name) !== -1\n          // for icon state\n          const columnIndex: number =\n            columnIconSortState[index] === undefined\n              ? 0\n              : columnIconSortState[index]\n          // we have to figure out if the current column is a facet selection\n          const facetIndex: number = facets.findIndex(\n            (facetColumnResult: FacetColumnResult) => {\n              const facetDisplayValue =\n                facetAliases[facetColumnResult.columnName] ||\n                facetColumnResult.columnName\n              return facetDisplayValue === column.name\n            },\n          )\n          // the header must be included in the facets and it has to be enumerable for current rendering capabilities\n          const isFacetSelection: boolean =\n            facetIndex !== -1 && facets[facetIndex].facetType === 'enumeration'\n          const isSelectedSpanClass = isSelected\n            ? 'SRC-primary-background-color SRC-anchor-light'\n            : ''\n          const isSelectedIconClass = isSelected\n            ? 'SRC-selected-table-icon'\n            : 'SRC-primary-text-color'\n          const sortSpanBackgoundClass = `SRC-tableHead SRC-hand-cursor SRC-sortPadding SRC-primary-background-color-hover  ${isSelectedSpanClass}`\n          const displayColumnName: string | undefined = unCamelCase(column.name)\n          return (\n            <th key={column.name}>\n              <div className=\"SRC-split\">\n                <span style={{ whiteSpace: 'nowrap' }}>\n                  {displayColumnName}\n                </span>\n                <div className=\"SRC-centerContent\">\n                  {isFacetSelection &&\n                    !this.props.enableLeftFacetFilter &&\n                    this.configureFacetDropdown(facets, facetIndex)}\n                  <span\n                    tabIndex={0}\n                    className={sortSpanBackgoundClass}\n                    onKeyPress={this.handleColumnSortPress({\n                      index,\n                      name: column.name,\n                    })}\n                    onClick={this.handleColumnSortPress({\n                      index,\n                      name: column.name,\n                    })}\n                  >\n                    <FontAwesomeIcon\n                      className={`SRC-primary-background-color-hover  ${isSelectedIconClass}`}\n                      icon={ICON_STATE[columnIndex] as IconProp}\n                    />\n                  </span>\n                </div>\n              </div>\n            </th>\n          )\n        } else {\n          return <th className=\"SRC-hidden\" key={column.name} />\n        }\n      },\n    )\n    // also push the access column if we are showing user access for individual items (must be logged in)\n    if (isShowingAccessColumn) {\n      tableColumnHeaderElements.push(\n        <th key=\"accessColumn\">\n          <div className=\"SRC-centerContent\">\n            <span style={{ whiteSpace: 'nowrap' }}>Access</span>\n          </div>\n        </th>,\n      )\n    }\n    return tableColumnHeaderElements\n  }\n\n  /**\n   * Utility to search through array of objects and find object with key \"column\"\n   * equal to input parameter \"name\"\n   *\n   * @param {*} sortedColumnSelection\n   * @param {*} name\n   * @returns -1 if not present, otherwise the index of the object\n   * @memberof SynapseTable\n   */\n  private findSelectionIndex(sortedColumnSelection: SortItem[], name: string) {\n    if (sortedColumnSelection.length !== 0) {\n      // find if the current selection exists already and remove it\n      return sortedColumnSelection.findIndex(\n        (el: SortItem) => el.column === name,\n      )\n    }\n    return -1\n  }\n\n  // Direct user to corresponding query on synapse\n  private advancedSearch(event: React.SyntheticEvent) {\n    event && event.preventDefault()\n    const lastQueryRequest = this.props.getLastQueryRequest!()\n    const { query } = lastQueryRequest\n    // base 64 encode the json of the query and go to url with the encoded object\n    const encodedQuery = btoa(JSON.stringify(query))\n    const synTable = lastQueryRequest.entityId\n    window.open(\n      `https://www.synapse.org/#!Synapse:${synTable}/tables/query/${encodedQuery}`,\n      '_blank',\n    )\n  }\n\n  private showDownload(event: React.SyntheticEvent) {\n    if (this.props.enableDownloadConfirmation) {\n      this.setState({ isDownloadConfirmationOpen: true })\n    } else {\n      this.advancedSearch(event)\n    }\n  }\n\n  private getLengthOfPropsData() {\n    const { data } = this.props\n    return data!.queryResult.queryResults.headers.length\n  }\n  /**\n   * Handles the toggle of a column select, this will cause the table to\n   * either show the column or hide depending on the prior state of the column\n   *\n   * @memberof SynapseTable\n   */\n  public toggleColumnSelection = (index: number) => (\n    _event: React.MouseEvent<HTMLLIElement>,\n  ) => {\n    let isColumnSelected: boolean[]\n    // lazily initialize isColumnSelected, at first it's empty\n    // and then on first column click we set it\n    if (this.state.isColumnSelected.length === 0) {\n      const { visibleColumnCount = Infinity } = this.props\n      // unpack all the data\n      const lengthOfPropsData = this.getLengthOfPropsData()\n      let defaultSelection\n      // fill up to visibleColumnCount with true and the rest as false\n      if (visibleColumnCount === Infinity) {\n        // if set to zero then its all true\n        defaultSelection = Array(lengthOfPropsData).fill(true)\n      } else {\n        // fill in whole array as false\n        defaultSelection = Array(lengthOfPropsData).fill(false)\n        // then fill in up until lengthOfPropsData with true\n        defaultSelection.fill(true, 0, visibleColumnCount)\n      }\n      isColumnSelected = defaultSelection\n    } else {\n      isColumnSelected = cloneDeep(this.state.isColumnSelected)\n    }\n    isColumnSelected[index] = !isColumnSelected[index]\n    this.setState({ isColumnSelected })\n  }\n\n  /**\n   * Show the dropdown menu for a column that has been faceted\n   *\n   * @param {number} index this is column index of the query table data\n   * @param {string} columnName this is the name of the column\n   * @param {FacetColumnResult[]} facetColumnResults\n   * @param {number} facetIndex\n   * @returns\n   * @memberof SynapseTable\n   */\n  public configureFacetDropdown(\n    facetColumnResults: FacetColumnResult[],\n    facetIndex: number,\n  ) {\n    // this grabs the specific facet selection\n    const facetColumnResult = facetColumnResults[\n      facetIndex\n    ] as FacetColumnResultValues\n    const isChecked = this.props.isAllFilterSelectedForFacet![\n      facetColumnResult.columnName\n    ]\n    return (\n      <FacetFilter\n        lastFacetSelection={this.props.lastFacetSelection!}\n        isLoading={this.props.isLoading!}\n        applyChanges={this.applyChanges}\n        isAllFilterSelectedForFacet={isChecked}\n        facetColumnResult={facetColumnResult}\n      />\n    )\n  }\n\n  public applyChangesFromQueryFilter = (facets: FacetColumnRequest[]) => {\n    const queryRequest: QueryBundleRequest = this.props.getLastQueryRequest!()\n    queryRequest.query.selectedFacets = facets\n    this.setState({ isUserModifiedQuery: true })\n    this.props.executeQueryRequest!(queryRequest)\n  }\n\n  /**\n   * When the user decides to submit their changes for the dropdown menu with the facet, they have an\n   * apply button, this method handles that submission.\n   *\n   * @memberof SynapseTable\n   */\n  public applyChanges = ({\n    ref,\n    columnName,\n    facetValue = '',\n    selector = '',\n  }: {\n    ref: React.RefObject<HTMLSpanElement>\n    columnName: string\n    facetValue?: string\n    selector?: string\n  }) => (_: React.SyntheticEvent<HTMLElement>) => {\n    const htmlCheckboxes = Array.from(\n      ref.current!.querySelectorAll('.SRC-facet-checkboxes'),\n    ) as HTMLInputElement[]\n    const queryRequest: QueryBundleRequest = this.props.getLastQueryRequest!()\n    const { isAllFilterSelectedForFacet } = this.props\n    const { newQueryRequest } = readFacetValues({\n      htmlCheckboxes,\n      queryRequest,\n      selector,\n      facet: columnName,\n    })\n\n    const lastFacetSelection = {\n      columnName,\n      facetValue,\n      selector,\n    } as FacetSelection\n    isAllFilterSelectedForFacet![columnName] = selector === SELECT_ALL\n    this.props.updateParentState!({\n      lastFacetSelection,\n      isAllFilterSelectedForFacet,\n    })\n\n    this.props.executeQueryRequest!(newQueryRequest)\n    this.setState({ isUserModifiedQuery: true })\n  }\n}\ntype ColumnReference = {\n  index: number\n  name: string\n}\n","import * as React from 'react'\nimport { DATASET } from '../../utils/SynapseConstants'\nimport { calculateFriendlyFileSize } from '../../utils/functions/calculateFriendlyFileSize'\nimport * as Utils from './utils'\n\ntype DatasetProps = {\n  data?: any\n  schema?: any\n  secondaryLabelLimit?: number\n}\n\nclass Dataset extends React.Component<DatasetProps, {}> {\n  constructor(props: DatasetProps) {\n    super(props)\n    this.handleLinkClick = this.handleLinkClick.bind(this)\n  }\n\n  public handleLinkClick = (link: string) => (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    event.preventDefault()\n    window.open(`https://www.synapse.org/#!Synapse:${link}`, '_blank')\n  }\n\n  public render() {\n    const { data, schema } = this.props\n    const datasetName = data[schema.datasetName]\n    const summary = data[schema.summary]\n    const tumorType = data[schema.tumorType]\n    const diseaseFocus = data[schema.diseaseFocus]\n    const id = data[schema.id]\n    const fundingAgency = data[schema.fundingAgency]\n    const fileCount = data[schema.fileCount]\n    const fileSize = calculateFriendlyFileSize(data[schema.fileSize])\n    const values = [\n      ['FUNDER', fundingAgency],\n      ['SIZE', fileSize],\n      ['FILES', fileCount],\n    ]\n    return (\n      <div className=\"SRC-portalCard SRC-typeDataset  \">\n        <div className=\"SRC-cardThumbnail\">\n          <Utils.Icon type={DATASET} />\n          <div>{fileSize}</div>\n        </div>\n        <div className=\"SRC-cardContent SRC-dataset\">\n          <div className=\"SRC-type\">Dataset </div>\n          <div>\n            <h3>\n              <a\n                target=\"_self\"\n                href={`https://www.synapse.org/#!Synapse:${id}`}\n              >\n                {datasetName}\n              </a>\n            </h3>\n          </div>\n          <div className=\"SRC-description-dataset\">\n            <p className=\"SRC-description-text\">{summary}</p>\n            <div className=\"SRC-cardAction\">\n              <button\n                className=\"SRC-datasetButton\"\n                onClick={this.handleLinkClick(id)}\n                type=\"button\"\n              >\n                Download Dataset\n              </button>\n            </div>\n          </div>\n          <div className=\"SRC-cardAnnotations\">\n            <Utils.ChipContainer chips={[tumorType, diseaseFocus]} />\n          </div>\n        </div>\n        <Utils.CardFooter\n          isHeader={false}\n          secondaryLabelLimit={this.props.secondaryLabelLimit}\n          values={values}\n        />\n      </div>\n    )\n  }\n}\nexport default Dataset\n","import * as React from 'react'\n\ntype FunderProps = {\n  data?: any\n  schema?: any\n}\n\nexport default class Funder extends React.Component<FunderProps, {}> {\n  constructor(props: FunderProps) {\n    super(props)\n    this.handleLinkClick = this.handleLinkClick.bind(this)\n  }\n  public handleLinkClick = (link: string) => (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    event.preventDefault()\n    window.open(link, '_blank')\n  }\n  public render() {\n    const { data, schema } = this.props\n    const organizationName = data[schema.organizationName]\n    const organizationPath = data[schema.organizationPath]\n    const summary = data[schema.summary]\n    const website = data[schema.website]\n    const logoHref: string = data[schema.logo]\n    const orgPath = `${window.location.origin}/#${organizationPath}`\n    // remove leading http(s):// and trailing /\n    let websiteDisplayName = website.replace('https://', '')\n    websiteDisplayName = websiteDisplayName.replace('http://', '')\n    if (websiteDisplayName.charAt(websiteDisplayName.length - 1) === '/') {\n      websiteDisplayName = websiteDisplayName.substring(\n        0,\n        websiteDisplayName.length - 1,\n      )\n    }\n    const isOnOrgPath = window.location.hash.substring(1) === organizationPath\n    const style: any = {}\n    let showOrgLink\n    if (!isOnOrgPath) {\n      showOrgLink = (\n        <div className=\"SRC-marginAuto SRC-cardAction\">\n          <button onClick={this.handleLinkClick(orgPath)} type=\"button\">\n            View Funded Research\n          </button>\n        </div>\n      )\n    } else {\n      style.paddingBottom = '42px'\n    }\n    return (\n      <div className=\"SRC-portalCard SRC-typeFunder \" style={style}>\n        <div className=\"SRC-cardContent\">\n          <div className=\"SRC-type\">Organization</div>\n          {logoHref && (\n            <div className=\"SRC-cardThumbnail\">\n              <img alt=\"funder logo\" className=\"SRC-logo\" src={logoHref} />\n            </div>\n          )}\n          <div>\n            <h3>\n              {isOnOrgPath && organizationName}\n              {!isOnOrgPath && <a href={orgPath}>{organizationName}</a>}\n            </h3>\n          </div>\n          <div className=\"SRC-website\">\n            <a rel=\"noopener noreferrer\" target=\"_blank\" href={website}>\n              {websiteDisplayName}\n            </a>\n          </div>\n          <div className=\"SRC-description\">{summary}</div>\n        </div>\n        {showOrgLink}\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { getUserProfileWithProfilePicAttached } from '../utils/functions/getUserData'\nimport { UserProfileList } from '../utils/SynapseClient'\nimport { MEDIUM_USER_CARD } from '../utils/SynapseConstants'\nimport { QueryResultBundle, UserProfile } from '../utils/synapseTypes/'\nimport UserCard, { UserCardSize } from './UserCard'\nimport { without } from 'lodash-es'\n\nexport type UserCardListProps = {\n  list: string[]\n  size?: UserCardSize\n  // Data should not be needed, however, it gives the option to fill in a user profile with other column\n  // fields. This is required specifically by AMP-AD Explore/People page\n  data?: QueryResultBundle\n}\n\ntype MapOwnerIdToUserProfile = {\n  [index: number]: UserProfile\n}\nexport type UserCardListState = {\n  userProfileMap: MapOwnerIdToUserProfile\n}\nexport default class UserCardList extends React.Component<\n  UserCardListProps,\n  UserCardListState\n> {\n  constructor(props: UserCardListProps) {\n    super(props)\n    this.state = {\n      userProfileMap: {},\n    }\n    this.update = this.update.bind(this)\n  }\n\n  componentDidMount() {\n    const { list } = this.props\n    this.update(list)\n  }\n\n  componentDidUpdate(prevProps: UserCardListProps) {\n    const priorListOfIds = prevProps.list\n    const newValues = without(\n      this.props.list.filter(el => el),\n      ...priorListOfIds,\n    )\n    // check that the props have changed by seeing that at least one element is different\n    if (newValues.length > 0) {\n      this.update(newValues)\n    }\n  }\n\n  update(list: string[]) {\n    getUserProfileWithProfilePicAttached(list.filter(el => el))\n      .then((data: UserProfileList) => {\n        const newEntries = {}\n        data.list.forEach(el => {\n          const { ownerId } = el\n          newEntries[ownerId] = el\n        })\n        this.setState({\n          userProfileMap: { ...this.state.userProfileMap, ...newEntries },\n        })\n      })\n      .catch((err: string) => {\n        console.log('Error on batch call =', err)\n      })\n  }\n\n  /**\n   * Given data this will find rows where there is no userId columnType and create faux user profiles\n   * using firstName, lastName, and instituion (company in UserProfile object).\n   * @param {QueryResultBundle} data\n   * @returns list of UserProfiles with firstName, lastName, company, userName (first letter of firstName) filled out.\n   * @memberof UserCardList\n   */\n  manuallyExtractData(data: QueryResultBundle) {\n    const firstNameIndex = data.queryResult.queryResults.headers.findIndex(\n      el => el.name === 'firstName',\n    )\n    const lastNameIndex = data.queryResult.queryResults.headers.findIndex(\n      el => el.name === 'lastName',\n    )\n    const institutionIndex = data.queryResult.queryResults.headers.findIndex(\n      el => el.name === 'institution',\n    )\n    const ownerId = data.queryResult.queryResults.headers.findIndex(\n      el => el.columnType === 'USERID',\n    )\n    const nullOwnerIdsRows = data.queryResult.queryResults.rows.filter(\n      el => !el.values[ownerId],\n    )\n    return nullOwnerIdsRows.map<UserProfile>(el => {\n      const values = el.values\n      return {\n        firstName: values[firstNameIndex],\n        lastName: values[lastNameIndex],\n        company: values[institutionIndex],\n        ownerId: '',\n        userName: values[firstNameIndex][0],\n      }\n    })\n  }\n\n  render() {\n    const { size = MEDIUM_USER_CARD, data, list } = this.props\n    const { userProfileMap = {} } = this.state\n    const fauxUserProfilesList = data && this.manuallyExtractData(data)\n    let fauxUserProfileIndex = 0\n    return (\n      <div className=\"SRC-card-grid-row SRC-adjust-for-bootstrap-margin\">\n        {// we loop through the list from the props because thats the 'active set of data' whereas the data stored in state could be stale\n        list.map(ownerId => {\n          const userProfile = userProfileMap[ownerId]\n          if (userProfile) {\n            return (\n              <div\n                key={JSON.stringify(userProfile)}\n                className=\"SRC-grid-item SRC-narrow-grid-item\"\n              >\n                <UserCard\n                  size={size}\n                  preSignedURL={userProfile.clientPreSignedURL}\n                  userProfile={userProfile}\n                />\n              </div>\n            )\n          }\n          const fauxUserProfile =\n            fauxUserProfilesList && fauxUserProfilesList[fauxUserProfileIndex]\n          if (!fauxUserProfile) {\n            // This could happen in one of two cases:\n            // - The props just updated with a new userlist where the data is being gathered for this particular user\n            //   OR there is no mapping for this user\n            return false\n          }\n          fauxUserProfileIndex += 1\n          return (\n            <div\n              key={JSON.stringify(fauxUserProfile)}\n              className=\"SRC-grid-item SRC-narrow-grid-item\"\n            >\n              <UserCard\n                disableLink={true}\n                hideEmail={true}\n                size={size}\n                userProfile={fauxUserProfile}\n              />\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport {\n  DATASET,\n  FUNDER,\n  GENERIC_CARD,\n  MEDIUM_USER_CARD,\n} from '../utils/SynapseConstants'\nimport { QueryBundleRequest, QueryResultBundle } from '../utils/synapseTypes/'\nimport { CardConfiguration } from './CardContainerLogic'\nimport GenericCard from './GenericCard'\nimport { Dataset, Funder } from './row_renderers'\nimport TotalQueryResults from './TotalQueryResults'\nimport UserCardList from './UserCardList'\n\nconst PAGE_SIZE: number = 25\n\nexport type CardContainerProps = {\n  data?: QueryResultBundle\n  limit?: number\n  isHeader?: boolean\n  isAlignToLeftNav?: boolean\n  title?: string\n  facetAliases?: {}\n  getLastQueryRequest?: () => QueryBundleRequest\n  getNextPageOfData?: (queryRequest: QueryBundleRequest) => void\n  isLoading?: boolean\n  facet?: string\n  unitDescription?: string\n  hasMoreData?: boolean\n  showBarChart?: boolean\n  token?: string\n} & CardConfiguration\n\ntype CardContainerState = {\n  cardLimit: number\n}\n\nexport class CardContainer extends React.Component<\n  CardContainerProps,\n  CardContainerState\n> {\n  constructor(props: CardContainerProps) {\n    super(props)\n    this.handleViewMore = this.handleViewMore.bind(this)\n  }\n\n  /**\n   * Handle a click on next or previous\n   *\n   * @memberof SynapseTable\n   */\n  public handleViewMore() {\n    const queryRequest = this.props.getLastQueryRequest!()\n    let offset = queryRequest.query.offset!\n    // paginate forward\n    offset += PAGE_SIZE\n    queryRequest.query.offset = offset\n    this.props.getNextPageOfData!(queryRequest)\n  }\n\n  public renderCard = (props: any, type: string) => {\n    switch (type) {\n      case DATASET:\n        return <Dataset {...props} />\n      case FUNDER:\n        return <Funder {...props} />\n      case GENERIC_CARD:\n        return <GenericCard {...props} />\n      default:\n        return <div /> // this should never happen\n    }\n  }\n  public render() {\n    const {\n      data,\n      limit = Infinity,\n      isHeader = false,\n      facet,\n      unitDescription,\n      type,\n      isLoading,\n      loadingScreen,\n      secondaryLabelLimit = 3,\n      showBarChart = true,\n      title,\n      ...rest\n    } = this.props\n    // the cards only show the loading screen on initial load, this occurs when data is undefined\n    if (!data) {\n      return <div>{isLoading && loadingScreen}</div>\n    } else if (data && data.queryResult.queryResults.rows.length === 0) {\n      // data was retrieved from the backend but there is none to show, we return a empty fragment\n      // there could be a more informed UX decision here but the current use case right now\n      // should display nothing\n      return <React.Fragment />\n    }\n    const schema = {}\n    data.queryResult.queryResults.headers.forEach((element, index) => {\n      schema[element.name] = index\n    })\n\n    // We want to hide the view more button if:\n    //   1. The data fed in has !== PAGE_SIZE number of results\n    //   2. The hasMoreData prop is false\n    //   3. The limit is set to less than PAGE_SIZE\n    // below we show the view more button by following the opposite logic from above.\n    let showViewMore: boolean =\n      limit >= PAGE_SIZE &&\n      data.queryResult.queryResults.rows.length >= PAGE_SIZE\n    showViewMore = showViewMore && this.props.hasMoreData!\n\n    const showViewMoreButton = showViewMore && (\n      <div>\n        <button\n          onClick={this.handleViewMore}\n          className=\"pull-right SRC-standard-button-shape SRC-light-button\"\n        >\n          View More\n        </button>\n      </div>\n    )\n    let cards\n    if (type === MEDIUM_USER_CARD) {\n      // Hard coding ownerId as a column name containing the user profile ownerId\n      // for each row, grab the column with the ownerId\n      const userIdColumnIndex = data.queryResult.queryResults.headers.findIndex(\n        el => el.columnType === 'USERID',\n      )\n      if (userIdColumnIndex === -1) {\n        throw Error(\n          'Type MEDIUM_USER_CARD specified but no columnType USERID found',\n        )\n      }\n      const listIds = data.queryResult.queryResults.rows.map(\n        el => el.values[userIdColumnIndex],\n      )\n      cards = (\n        <UserCardList data={data} list={listIds} size={MEDIUM_USER_CARD} />\n      )\n    } else {\n      // render the cards\n      cards = data.queryResult.queryResults.rows.map((rowData: any, index) => {\n        if (index < limit) {\n          const key = JSON.stringify(rowData.values)\n          const propsForCard = {\n            key,\n            type,\n            schema,\n            isHeader,\n            secondaryLabelLimit,\n            data: rowData.values,\n            selectColumns: data.selectColumns,\n            ...rest,\n          }\n          return this.renderCard(propsForCard, type)\n        }\n        return false\n      })\n    }\n\n    return (\n      <div>\n        {title && <h2 className=\"SRC-card-overview-title\">{title}</h2>}\n        {!title && unitDescription && showBarChart && (\n          <TotalQueryResults\n            data={data}\n            facet={facet!}\n            isLoading={isLoading!}\n            unitDescription={unitDescription}\n            frontText={'Displaying'}\n          />\n        )}\n        {/* ReactCSSTransitionGroup adds css fade in property for cards that come into view */}\n        {cards}\n        {showViewMoreButton}\n      </div>\n    )\n  }\n}\n\nexport default CardContainer\n","import * as React from 'react'\nimport { QueryWrapperChildProps } from './QueryWrapper'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faCaretDown,\n  faCaretUp,\n  faSearch,\n  faTimes,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { insertConditionsFromSearchParams } from '../utils/functions/sqlFunctions'\nimport TotalQueryResults from './TotalQueryResults'\nimport getColorPallette from './ColorGradient'\nimport { SEARCH_CLASS_CSS } from './QueryWrapperMenu'\nimport { Dropdown } from 'react-bootstrap'\nimport { unCamelCase } from '../utils/functions/unCamelCase'\n\nlibrary.add(faCaretDown)\nlibrary.add(faCaretUp)\nlibrary.add(faSearch)\nlibrary.add(faTimes)\n\ntype SearchState = {\n  dropdownIndex: number\n  show: boolean\n  searchText: string\n  submittedSearchText: string\n  lastSearchedFacet: string\n}\nexport type Searchable = {\n  columnName: string\n  hintText: string\n}[]\n\nexport type SearchProps = {\n  searchable: Searchable\n  isQueryWrapperMenuChild?: boolean\n}\n\ntype InternalSearchProps = QueryWrapperChildProps & SearchProps\n\nclass Search extends React.Component<InternalSearchProps, SearchState> {\n  public inputRef: React.RefObject<HTMLInputElement>\n\n  constructor(props: InternalSearchProps) {\n    super(props)\n    this.state = {\n      dropdownIndex: 0,\n      show: false,\n      searchText: '',\n      submittedSearchText: '',\n      lastSearchedFacet: '',\n    }\n    this.inputRef = React.createRef()\n  }\n\n  componentDidUpdate(prevProps: InternalSearchProps) {\n    if (this.props.isLoading === false && prevProps.isLoading === true) {\n      // highlighting will sometimes outpace the render method for react, adding the slight delay\n      // mitigates this\n      setTimeout(this.highlightText, 100)\n    }\n  }\n\n  public toggleDropdown = (value: boolean) => (_: React.SyntheticEvent) => {\n    this.setState({\n      show: value,\n    })\n  }\n\n  public setDropdownIndex = (index: number) => (_: React.SyntheticEvent) => {\n    this.inputRef.current && this.inputRef.current.focus()\n    this.setState({\n      dropdownIndex: index,\n      show: false,\n    })\n  }\n\n  public highlightText = () => {\n    const { submittedSearchText, dropdownIndex } = this.state\n    const {\n      searchable,\n      rgbIndex,\n      facetAliases = {},\n      isQueryWrapperMenuChild = true,\n    } = this.props\n    const { colorPalette } = getColorPallette(rgbIndex!, 1)\n    const originalColor = colorPalette[0]\n    const searchItem = searchable[dropdownIndex]\n\n    const highlightedSpans = document.querySelectorAll<HTMLSpanElement>(\n      '.highlight',\n    )\n    highlightedSpans.forEach(span => {\n      span.outerHTML = span.innerText\n    })\n    if (submittedSearchText) {\n      const searchItemView =\n        facetAliases[searchItem.columnName] ||\n        unCamelCase(searchItem.columnName)\n      const frontText = isQueryWrapperMenuChild ? `.${SEARCH_CLASS_CSS} ` : ''\n      const querySelector = `${frontText}[data-search-handle=\"${searchItemView}\"]`\n      const trs = document.querySelectorAll<HTMLElement>(querySelector)\n      // Target elements and apply styles\n      trs.forEach(textElement => {\n        if (textElement.innerHTML !== null) {\n          const regex = new RegExp(submittedSearchText, 'gi')\n          const match = textElement.innerText.match(regex)\n          if (match) {\n            // innerHTML contains only text\n            textElement.innerHTML = textElement.innerHTML.replace(\n              regex,\n              match => {\n                return `<span style=\"background: ${originalColor}; color: white;\" class=\"highlight\">${match}</span>`\n              },\n            )\n          }\n        }\n      })\n    }\n  }\n\n  public static addEscapeCharacters = (searchText: string) => {\n    // We have to escape the following characters\n    // ' % \\\n    let escapedSearchText = searchText\n    // escape ' by adding additional '\n    escapedSearchText = escapedSearchText.split(\"'\").join(\"''\")\n    // escape % by adding \\\n    // eslint-disable-next-line no-useless-escape\n    escapedSearchText = escapedSearchText.split('%').join('%')\n    // escape \\ by adding \\\n    escapedSearchText = escapedSearchText.split('\\\\').join('\\\\\\\\')\n    return escapedSearchText\n  }\n\n  public clearSearchText = () => {\n    this.setState({\n      searchText: '',\n    })\n  }\n\n  public search = (event: React.SyntheticEvent<HTMLFormElement>) => {\n    // form completion by default causes the page to reload, so we prevent that\n    event.preventDefault()\n    const { searchText, dropdownIndex } = this.state\n\n    const { searchable } = this.props\n    const searchItem = searchable[dropdownIndex]\n    // Always grabs initQueryRequest so that it doesn't build a chain of\n    // LIKE clauses\n    const lastQueryRequestDeepCopy = this.props.getInitQueryRequest!()\n    let { sql } = lastQueryRequestDeepCopy.query\n    const searchParams = {\n      [searchItem.columnName]: Search.addEscapeCharacters(searchText),\n    }\n    const newSql = insertConditionsFromSearchParams(searchParams, sql)\n    lastQueryRequestDeepCopy.query.sql = newSql\n    this.setState({\n      submittedSearchText: searchText,\n      lastSearchedFacet: searchItem.columnName,\n    })\n    this.props.executeQueryRequest!(lastQueryRequestDeepCopy)\n  }\n\n  public handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      searchText: event.currentTarget.value,\n    })\n  }\n\n  render() {\n    const {\n      searchable,\n      data,\n      isLoading,\n      facet,\n      unitDescription = '',\n      facetAliases = {},\n    } = this.props\n    const {\n      show,\n      dropdownIndex,\n      searchText,\n      submittedSearchText,\n      lastSearchedFacet,\n    } = this.state\n    const searchableItem = searchable[dropdownIndex]\n    const containerStyle: React.CSSProperties = {\n      border: '1px solid #DCDCDC',\n      display: 'flex',\n      marginTop: 10,\n      alignItems: 'center',\n    }\n    const fieldStyle: React.CSSProperties = {\n      background: '#F9F9F9',\n      height: '51px',\n      display: 'inline-flex',\n      alignItems: 'center',\n    }\n    const caretIconStyle: React.CSSProperties = {\n      fontSize: '16px',\n      marginRight: 8,\n    }\n    const searchIconStyle: React.CSSProperties = {\n      color: '#C4C4C4',\n      position: 'absolute',\n      left: 10,\n      fontSize: 16,\n    }\n    const cancelIconStyle: React.CSSProperties = {\n      width: 30,\n      height: 30,\n      position: 'absolute',\n      right: 10,\n    }\n    const inputStyle: React.CSSProperties = {\n      border: 1,\n      paddingLeft: 40,\n      height: 49,\n    }\n    const dropdownBtnStyle: React.CSSProperties = {\n      justifyContent: 'space-between',\n      margin: 0,\n      paddingLeft: 10,\n    }\n    const totalQueryResultsStyle: React.CSSProperties = {\n      margin: '20px 0px',\n    }\n    const curFacetDisplayText =\n      facetAliases[searchableItem.columnName] ||\n      unCamelCase(searchableItem.columnName)\n    const lastSearchedFacetDisplayText =\n      facetAliases[lastSearchedFacet] || unCamelCase(lastSearchedFacet)\n    const usedUnitDescription = submittedSearchText\n      ? `${unitDescription} containing \"${submittedSearchText}\" in ${lastSearchedFacetDisplayText}`\n      : unitDescription\n    return (\n      <div>\n        <p>\n          Search within <strong> {curFacetDisplayText} </strong> using keywords\n        </p>\n        <div style={containerStyle}>\n          <div className=\"SRC-centerContent SRC-fullWidth\">\n            <div\n              style={{\n                ...fieldStyle,\n                flex: 1,\n                borderRight: '1px solid #DCDCDC',\n              }}\n            >\n              <Dropdown\n                show={show}\n                onToggle={() => this.setState({ show: !show })}\n                className=\"SRC-inherit-height SRC-fullWidth\"\n              >\n                <Dropdown.Toggle\n                  style={dropdownBtnStyle}\n                  className=\"SRC-primary-color-hover-dropdown SRC-inlineFlex SRC-inherit-height SRC-fullWidth\"\n                  variant=\"light\"\n                  id=\"search-toggle\"\n                >\n                  {curFacetDisplayText}\n                  <FontAwesomeIcon\n                    style={caretIconStyle}\n                    icon={show ? 'caret-up' : 'caret-down'}\n                    color={show ? 'white' : undefined}\n                  />\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                  {searchable.map((el, index) => {\n                    const displayName =\n                      facetAliases[el.columnName] || unCamelCase(el.columnName)\n                    return (\n                      <Dropdown.Item\n                        // @ts-ignore\n                        onSelect={this.setDropdownIndex(index)}\n                        key={displayName}\n                        className=\"SRC-hand-cursor SRC-primary-background-color-hover\"\n                      >\n                        {displayName}\n                      </Dropdown.Item>\n                    )\n                  })}\n                </Dropdown.Menu>\n              </Dropdown>\n            </div>\n            <form\n              style={{\n                ...fieldStyle,\n                flex: 3,\n                alignItems: 'center',\n                position: 'relative',\n              }}\n              onSubmit={this.search}\n            >\n              <FontAwesomeIcon\n                size={'sm'}\n                style={searchIconStyle}\n                icon={'search'}\n              />\n              <input\n                placeholder={`e.g. \"${searchableItem.hintText}\"`}\n                style={inputStyle}\n                ref={this.inputRef}\n                onChange={this.handleChange}\n                value={searchText}\n                type=\"text\"\n                className=\"SRC-fullWidth\"\n              />\n              {searchText.length > 0 && (\n                <button\n                  type=\"reset\"\n                  className=\"SRC-button-focus-primary-color SRC-centerContentInline\"\n                  style={cancelIconStyle}\n                  onClick={this.clearSearchText}\n                  tabIndex={0}\n                >\n                  <FontAwesomeIcon\n                    size={'sm'}\n                    color={'#C4C4C4'}\n                    style={{ fontSize: 16 }}\n                    icon={'times'}\n                  />\n                </button>\n              )}\n            </form>\n          </div>\n        </div>\n        <TotalQueryResults\n          style={totalQueryResultsStyle}\n          isLoading={isLoading!}\n          data={data}\n          facet={facet!}\n          frontText={'Displaying'}\n          unitDescription={usedUnitDescription}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Search\n","import { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport * as React from 'react'\nimport { SynapseConstants } from '../utils/'\nimport { getColorPallette } from './ColorGradient'\nimport { Facets } from './Facets'\nimport QueryCount from './QueryCount'\nimport QueryWrapper from './QueryWrapper'\nimport StackedBarChart from './StackedBarChart'\nimport SynapseTable, { SynapseTableProps } from './table/SynapseTable'\nimport { unCamelCase } from '../utils/functions/unCamelCase'\nimport CardContainer from './CardContainer'\nimport { CardConfiguration } from './CardContainerLogic'\nimport { StackedBarChartProps } from './StackedBarChart'\nimport {\n  isGroupByInSql,\n  insertConditionsFromSearchParams,\n} from '../utils/functions/sqlFunctions'\nimport { FacetColumnValuesRequest } from '../utils/synapseTypes/'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus, faSearch } from '@fortawesome/free-solid-svg-icons'\nimport Search, { SearchProps } from './Search'\n\nlibrary.add(faPlus)\nlibrary.add(faSearch)\n\ntype MenuState = {\n  activeMenuIndices: number[]\n  accordionGroupIndex: number\n}\n\nexport type MenuConfig = {\n  sql: string\n  facet?: string\n}\n\n// represents the entirety of the menu\nexport const MENU_DROPDOWN_CSS = 'SRC-menuLayout'\n// represent an accordiong 'group' within the menu\nexport const ACCORDION_GROUP_CSS = 'SRC-accordion-key'\n// represents the single accordiong group which is active within the menu\nexport const ACCORDION_GROUP_ACTIVE_CSS = 'SRC-IS-ACTIVE'\n// for search component querying on cardcontainer\nexport const SEARCH_CLASS_CSS = 'SRC-search-component'\n\ninterface MenuSearchParams {\n  facetValue: string\n  facet: string\n}\n\ntype CommonMenuProps = {\n  tableConfiguration?: SynapseTableProps\n  cardConfiguration?: CardConfiguration\n  stackedBarChartConfiguration?: StackedBarChartProps\n  searchConfiguration?: SearchProps\n  showBarChart?: boolean\n  unitDescription?: string\n}\n\ntype AccordionConfig = {\n  searchConfiguration?: SearchProps\n  menuConfig: MenuConfig[]\n  name: string\n} & CommonMenuProps\n\nexport type QueryWrapperMenuProps = {\n  facetAliases?: {}\n  menuConfig?: MenuConfig[]\n  accordionConfig?: AccordionConfig[]\n  isConsistent?: boolean\n  token?: string\n  entityId: string\n  rgbIndex: number\n  searchParams?: MenuSearchParams\n  name?: string\n  globalQueryCountSql?: string\n} & CommonMenuProps\n\ntype Info = {\n  isSelected: boolean\n  originalColor: string\n  hoverWhiteTextClass?: string\n}\n\nexport default class QueryWrapperMenu extends React.Component<\n  QueryWrapperMenuProps,\n  MenuState\n> {\n  constructor(props: QueryWrapperMenuProps) {\n    super(props)\n    // See note about initializing props from state here\n    //  - https://stackoverflow.com/questions/40063468/react-component-initialize-state-from-props/47341539#47341539\n    const { searchParams, accordionConfig, menuConfig } = this.props\n    let activeMenuIndices = []\n    const facetIndexFromFacetSearchParam = menuConfig?.findIndex(\n      el => el.facet && el.facet === searchParams?.facet,\n    )\n    const usedFacetIndex =\n      facetIndexFromFacetSearchParam === -1 ? 0 : facetIndexFromFacetSearchParam\n    const indexFromURLOrDefaultZero = usedFacetIndex || 0\n    if (accordionConfig) {\n      activeMenuIndices = new Array(accordionConfig.length).fill(0)\n    } else {\n      activeMenuIndices = [indexFromURLOrDefaultZero]\n    }\n    this.state = {\n      activeMenuIndices,\n      accordionGroupIndex: 0,\n    }\n    this.handleHoverLogic = this.handleHoverLogic.bind(this)\n    this.switchFacet = this.switchFacet.bind(this)\n    this.getUnitDescription = this.getUnitDescription.bind(this)\n    this.getPartMask = this.getPartMask.bind(this)\n    this.getSelectedFacets = this.getSelectedFacets.bind(this)\n    this.getSqlWithAdditionalClause = this.getSqlWithAdditionalClause.bind(this)\n    this.getTableLoadingScreen = this.getTableLoadingScreen.bind(this)\n  }\n\n  componentDidUpdate(prevProps: QueryWrapperMenuProps, _prevState: MenuState) {\n    /*\n      Update the row count or the menu index if the props changed by looking at whether the sql or the rgbIndex\n      changed\n    */\n    let { activeMenuIndices } = this.state\n    const { rgbIndex, accordionConfig } = this.props\n    if (rgbIndex !== prevProps.rgbIndex) {\n      activeMenuIndices = accordionConfig\n        ? new Array(accordionConfig.length).fill(0)\n        : [0]\n      this.setState({\n        activeMenuIndices,\n        accordionGroupIndex: 0,\n      })\n    }\n  }\n\n  /**\n   * Handle the user hovering over a facet selection, it must be programatically\n   * handled because the color used is dynamic\n   *\n   * @memberof Menu\n   */\n  public handleHoverLogic = (info: Info) => (\n    event: React.MouseEvent<HTMLDivElement>,\n  ) => {\n    // This prevents a bug where there is both light text and a light background,\n    // otherwise SRC-hoverWhiteText would be placed on the group and item keys statically\n    if (!event.currentTarget.classList.contains('SRC-hoverWhiteText')) {\n      event.currentTarget.classList.add('SRC-hoverWhiteText')\n    }\n    if (!info.isSelected && event.currentTarget.tagName === 'DIV') {\n      event.currentTarget.style.backgroundColor = info.originalColor\n    }\n  }\n\n  /**\n   * Handle user clicking menu item, event isn't used so we denote it as an _\n   *\n   * @memberof Menu\n   */\n  public switchFacet = (menuIndexIn: number, accordionIndexIn: number) => (\n    _: React.SyntheticEvent<HTMLDivElement>,\n  ) => {\n    const { activeMenuIndices, accordionGroupIndex } = this.state\n    // there's an odd bug where clicking a menu item twice will select the first tab,\n    // this is a fix for that, but this shouldn't be necessary\n    const isClickingCurrentSelection =\n      accordionGroupIndex === accordionIndexIn &&\n      activeMenuIndices[accordionIndexIn] === menuIndexIn\n    activeMenuIndices[accordionIndexIn] = menuIndexIn\n    if (!isClickingCurrentSelection) {\n      this.setState({\n        activeMenuIndices,\n        accordionGroupIndex: accordionIndexIn,\n      })\n    }\n  }\n\n  /**\n   * Handle user clicking menu item, event isn't used so we denote it as an _\n   *\n   * @memberof Menu\n   */\n  public toggleGroupAccordionIndex = (accordionGroupIndexIn: number) => (\n    _event: React.SyntheticEvent<HTMLDivElement>,\n  ) => {\n    const { accordionGroupIndex } = this.state\n    if (accordionGroupIndex === accordionGroupIndexIn) {\n      return\n    } else {\n      this.setState({\n        accordionGroupIndex: accordionGroupIndexIn,\n      })\n    }\n  }\n\n  public getCurrentSqlFromActiveTab = (): {\n    sql: string\n    selectedFacets: FacetColumnValuesRequest[] | undefined\n  } => {\n    const { searchParams, menuConfig } = this.props\n    const { activeMenuIndices } = this.state\n    let facetValue = ''\n    let facetValueFromSearchParams = ''\n    if (searchParams) {\n      ;({\n        facetValue = '',\n        facet: facetValueFromSearchParams = '',\n      } = searchParams)\n    }\n    for (let i = 0; i < menuConfig!.length; i++) {\n      const config = menuConfig![i]\n      const isSelectedFromURL =\n        config.facet !== undefined &&\n        config.facet === facetValueFromSearchParams &&\n        activeMenuIndices[0] === i\n      if (isSelectedFromURL) {\n        const selectedFacets = this.getSelectedFacets(\n          isSelectedFromURL,\n          config.facet,\n          facetValue,\n        )\n        return { sql: config.sql, selectedFacets }\n      }\n    }\n    return {\n      sql: menuConfig![activeMenuIndices[0]].sql,\n      selectedFacets: undefined,\n    }\n  }\n\n  public render() {\n    const {\n      stackedBarChartConfiguration,\n      name,\n      menuConfig,\n      token,\n      globalQueryCountSql = '',\n      entityId,\n    } = this.props\n\n    let sql = ''\n    let selectedFacets = undefined\n    if (menuConfig) {\n      ;({ sql, selectedFacets } = this.getCurrentSqlFromActiveTab())\n    }\n    if (globalQueryCountSql) {\n      // globalQueryCountSql takes precendence over menuconfig sql\n      sql = globalQueryCountSql\n    }\n    const hasGroupByInSql = isGroupByInSql(sql)\n    const menuDropdown = this.renderMenuDropdown()\n    const queryWrapper = this.renderQueryChildren()\n    const showBarChart = stackedBarChartConfiguration !== undefined\n    return (\n      <React.Fragment>\n        {name && sql && !hasGroupByInSql && (\n          <h3 id=\"exploreCount\" className=\"SRC-boldText\">\n            <QueryCount\n              entityId={entityId}\n              token={token}\n              name={name}\n              sql={sql}\n              selectedFacets={selectedFacets}\n            />\n          </h3>\n        )}\n        {hasGroupByInSql && (\n          <h3 id=\"exploreCount\" className=\"SRC-boldText\">\n            {name}\n          </h3>\n        )}\n        <div className=\"break\">\n          <hr />\n        </div>\n        <div className=\"row\" key=\"row\">\n          <div\n            className={`col-xs-12 col-sm-3 col-lg-2 SRC-menuLayout ${\n              showBarChart ? 'SRC-menuPadding' : 'SRC-menuPaddingLess'\n            }`}\n          >\n            {menuDropdown}\n          </div>\n          <div className=\"col-xs-12 col-sm-9 col-lg-10\" key=\"queryWrapper\">\n            {queryWrapper}\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  private renderQueryChild(\n    menuConfig: MenuConfig[],\n    queryConfig: CommonMenuProps,\n    groupIndex: number,\n  ) {\n    const {\n      token,\n      rgbIndex = 0,\n      isConsistent = false,\n      searchParams,\n      accordionConfig = [],\n      facetAliases = {},\n      entityId,\n    } = this.props\n    const {\n      cardConfiguration,\n      tableConfiguration,\n      stackedBarChartConfiguration,\n      unitDescription = '',\n      searchConfiguration,\n    } = queryConfig\n    const { activeMenuIndices, accordionGroupIndex } = this.state\n    let facetValue = ''\n    let facetValueFromSearchParams = ''\n    if (searchParams) {\n      ;({\n        facetValue = '',\n        facet: facetValueFromSearchParams = '',\n      } = searchParams)\n    }\n\n    return menuConfig.map((config: MenuConfig, index: number) => {\n      const isSelected: boolean =\n        groupIndex === accordionGroupIndex &&\n        activeMenuIndices[accordionGroupIndex] === index\n      const { facet, sql } = config\n      const name =\n        accordionConfig[groupIndex] && accordionConfig[groupIndex].name\n      const hasGroupByInSql = isGroupByInSql(sql)\n      // only show search component if its the last item in the menu config\n      const showSearch =\n        index === menuConfig.length - 1 && searchConfiguration !== undefined\n      const showBarChart =\n        stackedBarChartConfiguration !== undefined &&\n        !showSearch &&\n        !hasGroupByInSql\n      const aliasedFacet: string =\n        facet && (facetAliases[facet] || unCamelCase(facet))\n\n      // search class is only used for testing, no css is actually applied\n      let searchClass = showSearch ? SEARCH_CLASS_CSS : ''\n      if (!isSelected) {\n        searchClass = 'SRC-hidden'\n      }\n\n      // Get props for query wrapper\n      const usedUnitDescription = this.getUnitDescription(\n        unitDescription,\n        aliasedFacet,\n        showSearch,\n        accordionConfig.length > 0,\n        name,\n      )\n      const isSelectedFromURL =\n        config.facet !== undefined &&\n        config.facet === facetValueFromSearchParams\n      const selectedFacets = this.getSelectedFacets(\n        isSelectedFromURL,\n        facet,\n        facetValue,\n      )\n      const partMask = this.getPartMask(facet, hasGroupByInSql)\n      const tableLoadingScreen = this.getTableLoadingScreen(\n        hasGroupByInSql,\n        stackedBarChartConfiguration,\n        tableConfiguration,\n      )\n      return (\n        <span key={(facet || 'nofacet') + index} className={searchClass}>\n          <QueryWrapper\n            showBarChart={showBarChart}\n            loadNow={isSelected}\n            initQueryRequest={{\n              partMask,\n              concreteType:\n                'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n              entityId,\n              query: {\n                sql,\n                selectedFacets,\n                isConsistent,\n                limit: 25,\n                offset: 0,\n              },\n            }}\n            unitDescription={usedUnitDescription}\n            facet={facet}\n            token={token}\n            rgbIndex={rgbIndex}\n            facetAliases={facetAliases}\n          >\n            {showBarChart ? (\n              <StackedBarChart {...stackedBarChartConfiguration!} />\n            ) : (\n              <React.Fragment />\n            )}\n            {!showSearch ? <Facets /> : <React.Fragment />}\n            {showSearch ? (\n              <Search searchable={searchConfiguration!.searchable} />\n            ) : (\n              <React.Fragment />\n            )}\n            {/*\n                Using a conditional render fails here because QueryWrapper can't clone an undefined element\n                which will happen if either configuration is undefined.\n            */}\n            {tableConfiguration ? (\n              <SynapseTable\n                {...{\n                  ...tableConfiguration,\n                  loadingScreen: tableLoadingScreen,\n                }}\n              />\n            ) : (\n              <React.Fragment />\n            )}\n            {cardConfiguration ? (\n              <CardContainer {...cardConfiguration} />\n            ) : (\n              <React.Fragment />\n            )}\n          </QueryWrapper>\n        </span>\n      )\n    })\n  }\n\n  public getUnitDescription(\n    unitDescription: string,\n    aliasedFacet: string,\n    showSearch: boolean,\n    isAccordionConfigDefined: boolean,\n    name: string,\n  ) {\n    if (isAccordionConfigDefined && !showSearch) {\n      return `${name} Tools by ${aliasedFacet}`\n    }\n    if (isAccordionConfigDefined && showSearch) {\n      // This is also a hardcoded setting to detect if search within a tools accordion is being shown\n      return `${name} Tools`\n    }\n    return unitDescription\n  }\n\n  public getPartMask(facet: string | undefined, hasGroupByInSql: boolean) {\n    let partMask =\n      SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n      SynapseConstants.BUNDLE_MASK_QUERY_RESULTS |\n      SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS\n    if (facet) {\n      partMask = partMask | SynapseConstants.BUNDLE_MASK_QUERY_FACETS\n    } else {\n      // Needed to calculate the total count for TotalQueryResults\n      partMask = partMask | SynapseConstants.BUNDLE_MASK_QUERY_COUNT\n    }\n    // note: COLUMN_MODELS unnecessary for Synapse Table link for aggregate functions since we now rely on the sql parser to distinguish.\n    return partMask\n  }\n\n  public getSelectedFacets(\n    isSelected: boolean,\n    facet: string | undefined,\n    facetValue: string | undefined,\n  ): FacetColumnValuesRequest[] {\n    if (isSelected && facet && facetValue) {\n      return [\n        {\n          concreteType:\n            'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest',\n          facetValues: [facetValue],\n          columnName: facet,\n        },\n      ]\n    }\n    return []\n  }\n\n  public getSqlWithAdditionalClause(\n    isSelected: boolean,\n    facet: string | undefined,\n    facetValue: string | undefined,\n    sql: string,\n  ): string {\n    if (isSelected && facet && facetValue && this.props.searchParams) {\n      return insertConditionsFromSearchParams(\n        { [facet]: facetValue },\n        sql,\n        'LIKE',\n      )\n    }\n    return sql\n  }\n\n  public getTableLoadingScreen(\n    hasGroupByInSql: boolean,\n    stackedBarChartConfiguration: StackedBarChartProps | undefined,\n    tableConfiguration: SynapseTableProps | undefined,\n  ): JSX.Element {\n    if (hasGroupByInSql && stackedBarChartConfiguration && tableConfiguration) {\n      // Since the bar chart doesnt show when theres a a groupy statement we use the\n      // loadingScreen from the chart configuration\n      return stackedBarChartConfiguration.loadingScreen\n    }\n    return <></>\n  }\n\n  private renderQueryChildren() {\n    const { accordionConfig, menuConfig } = this.props\n    const { accordionGroupIndex } = this.state\n    if (accordionConfig) {\n      return accordionConfig.map((el, index) => {\n        return (\n          <div\n            key={JSON.stringify(el) + index}\n            className={accordionGroupIndex === index ? '' : 'SRC-hidden'}\n          >\n            {this.renderQueryChild(el.menuConfig, el, index)}\n          </div>\n        )\n      })\n    } else {\n      return this.renderQueryChild(menuConfig!, this.props, 0)\n    }\n  }\n\n  private renderMenuDropdown() {\n    const { accordionConfig, menuConfig, searchConfiguration } = this.props\n    const { accordionGroupIndex } = this.state\n    const { rgbIndex } = this.props\n    const { colorPalette } = getColorPallette(rgbIndex, 5)\n    const lightColor = '#F5F5F5'\n    if (accordionConfig) {\n      return accordionConfig.map((el, index) => {\n        const isActive = accordionGroupIndex === index\n        const primaryColor = colorPalette[0]\n        const style: React.CSSProperties = {\n          background: isActive ? primaryColor : lightColor,\n          color: isActive ? 'white' : '',\n        }\n        const indicatorClasses = isActive\n          ? 'SRC-whiteText SRC-pointed-triangle-down'\n          : ' SRC-hand-cursor '\n        if (isActive) {\n          style.borderTopColor = primaryColor\n        }\n        const hoverEnter: Info = {\n          isSelected: isActive,\n          originalColor: primaryColor,\n        }\n        const hoverLeave: Info = {\n          isSelected: isActive,\n          originalColor: lightColor,\n        }\n        const iconContainerStyle: React.CSSProperties = {\n          marginLeft: 5,\n        }\n        const iconStyle: React.CSSProperties = {\n          fontSize: '0.55em',\n        }\n        return (\n          <div\n            key={JSON.stringify(el)}\n            className={isActive ? ACCORDION_GROUP_ACTIVE_CSS : ''}\n          >\n            <div\n              style={style}\n              role={isActive ? '' : 'button'}\n              onMouseEnter={this.handleHoverLogic(hoverEnter)}\n              onMouseLeave={this.handleHoverLogic(hoverLeave)}\n              className={`${ACCORDION_GROUP_CSS} SRC-gap SRC-menu-button-base SRC-background-unset ${indicatorClasses}`}\n              onClick={\n                !isActive ? this.toggleGroupAccordionIndex(index) : undefined\n              }\n            >\n              {el.name}\n              <span style={iconContainerStyle}>\n                {!isActive && (\n                  <FontAwesomeIcon\n                    style={iconStyle}\n                    color={primaryColor}\n                    icon={'plus'}\n                  />\n                )}\n              </span>\n            </div>\n            <TransitionGroup component={null}>\n              {isActive && (\n                <CSSTransition\n                  // The component doesn't run a transition on mount, we override this\n                  // by setting appear to true because otherwise the triangle indicator wouldn't show\n                  appear={true}\n                  key={JSON.stringify(el)}\n                  classNames=\"SRC-accordion-menu\"\n                  timeout={{ enter: 1000, exit: 500 }}\n                >\n                  <div className={'SRC-accordion-menu'}>\n                    {this.renderFacetMenu(\n                      el.menuConfig,\n                      index,\n                      el.searchConfiguration,\n                    )}\n                  </div>\n                </CSSTransition>\n              )}\n            </TransitionGroup>\n          </div>\n        )\n      })\n    }\n    return this.renderFacetMenu(menuConfig!, 0, searchConfiguration)\n  }\n\n  private renderFacetMenu(\n    menuConfig: MenuConfig[],\n    curLevel: number,\n    searchConfiguration?: SearchProps,\n  ) {\n    const { rgbIndex, accordionConfig, facetAliases = {} } = this.props\n    const { activeMenuIndices, accordionGroupIndex } = this.state\n    const { colorPalette } = getColorPallette(rgbIndex, 5)\n    let originalColor = colorPalette[0]\n    let defaultColor = '#F5F5F5'\n    if (accordionConfig) {\n      originalColor = colorPalette[2]\n      defaultColor = colorPalette[4]\n    }\n    return menuConfig.map((config: MenuConfig, index: number) => {\n      const searchIconStyle: React.CSSProperties = {\n        margin: 'auto 0',\n        opacity: 0.4,\n      }\n      const { facet } = config\n      const isSelected: boolean =\n        activeMenuIndices[accordionGroupIndex] === index &&\n        curLevel === accordionGroupIndex\n      const style: React.CSSProperties = {}\n      const isSearchConfig =\n        index === menuConfig.length - 1 && searchConfiguration\n      let selectedStyling: string = ''\n      if (isSelected) {\n        // we have to programatically set the style since the color is chosen from a color\n        // wheel\n        style.background = originalColor\n        // below has to be set so the pseudo element created will inherit its color\n        // appropriately\n        style.borderLeftColor = originalColor\n        selectedStyling = 'SRC-pointed-triangle-right SRC-whiteText'\n        searchIconStyle.color = 'white'\n      } else {\n        // change background to class\n        selectedStyling = 'SRC-blackText'\n        style.background = defaultColor\n      }\n      const infoEnter: Info = { isSelected, originalColor }\n      const infoLeave: Info = { isSelected, originalColor: defaultColor }\n      const facetDisplayValue: string =\n        (facet && facetAliases[facet]) || unCamelCase(facet)\n      return (\n        <div\n          onMouseEnter={this.handleHoverLogic(infoEnter)}\n          onMouseLeave={this.handleHoverLogic(infoLeave)}\n          key={(config.facet || 'nofacet') + index}\n          className={`SRC-hand-cursor SRC-background-unset ${selectedStyling} SRC-menu-button-base SRC-gap`}\n          onClick={this.switchFacet(index, curLevel)}\n          onKeyPress={this.switchFacet(index, curLevel)}\n          role=\"button\"\n          tabIndex={0}\n          style={style}\n        >\n          {isSearchConfig ? 'Search' : facetDisplayValue}\n          {isSearchConfig && (\n            <span>\n              <FontAwesomeIcon\n                className={selectedStyling}\n                size={'sm'}\n                style={searchIconStyle}\n                icon=\"search\"\n              />\n            </span>\n          )}\n        </div>\n      )\n    })\n  }\n}\n","import * as React from 'react'\nimport {\n  createEntity,\n  getEntity,\n  lookupChildEntity,\n  updateEntity,\n  uploadFile,\n} from '../utils/SynapseClient'\nimport {\n  EntityId,\n  EntityLookupRequest,\n  FileEntity,\n  FileUploadComplete,\n} from '../utils/synapseTypes/'\n\ntype UploaderState = {\n  token?: string\n  error?: any\n  totalFilesToUploadCount: number\n  filesUploadedCount: number\n  isUploading?: boolean\n  successfullyUploaded: boolean\n}\n\nexport type UploaderProps = {\n  token?: string\n  parentContainerId: string\n}\n\nexport default class Uploader extends React.Component<\n  UploaderProps,\n  UploaderState\n> {\n  private readonly inputOpenFileRef: React.RefObject<HTMLInputElement>\n\n  constructor(props: UploaderProps) {\n    super(props)\n    this.state = {\n      token: '',\n      isUploading: false,\n      filesUploadedCount: 0,\n      totalFilesToUploadCount: 0,\n      successfullyUploaded: false,\n    }\n    this.inputOpenFileRef = React.createRef()\n  }\n\n  showOpenFileDlg = () => {\n    if (this.inputOpenFileRef && this.inputOpenFileRef.current) {\n      this.inputOpenFileRef.current.click()\n    }\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      this.handleFilesChanged(event.target.files)\n    }\n  }\n\n  finishedProcessingOneFile = () => {\n    const incrementedFilesUploadedCount = this.state.filesUploadedCount + 1\n    const isStillUploading =\n      incrementedFilesUploadedCount < this.state.totalFilesToUploadCount\n    this.setState({\n      isUploading: isStillUploading,\n      filesUploadedCount: incrementedFilesUploadedCount,\n      successfullyUploaded: !isStillUploading,\n    })\n  }\n\n  handleUploadError = (error: any) => {\n    this.finishedProcessingOneFile()\n    this.setState({ error })\n  }\n\n  handleFilesChanged = (selectorFiles: FileList) => {\n    this.setState({\n      error: undefined,\n      isUploading: true,\n      filesUploadedCount: 0,\n      totalFilesToUploadCount: selectorFiles.length,\n      successfullyUploaded: false,\n    })\n    Array.from(selectorFiles).forEach(file => {\n      // check for existing filename in parent folder before upload (add new version if exists).\n      // note that the parent container (project/folder) is configurable.\n      const newFileEntity: FileEntity = {\n        parentId: this.props.parentContainerId,\n        name: file.name,\n        concreteType: 'org.sagebionetworks.repo.model.FileEntity',\n        dataFileHandleId: '',\n      }\n      const entityLookupRequest: EntityLookupRequest = {\n        entityName: file.name,\n        parentId: this.props.parentContainerId,\n      }\n      lookupChildEntity(entityLookupRequest, this.props.token)\n        .then((entityId: EntityId) => {\n          // ok, found an entity of the same name.\n          getEntity<FileEntity>(this.props.token, entityId.id).then(\n            (existingEntity: FileEntity) => {\n              if (\n                existingEntity.concreteType ===\n                'org.sagebionetworks.repo.model.FileEntity'\n              ) {\n                this.updateEntityFile(existingEntity, file)\n              } else {\n                this.updateEntityFile(newFileEntity, file)\n              }\n            },\n          )\n        })\n        .catch((error: any) => {\n          if (error.status === 404) {\n            // great, it's a new file!\n            this.updateEntityFile(newFileEntity, file)\n          } else {\n            this.handleUploadError(error)\n          }\n        })\n    })\n  }\n\n  updateEntityFile = (fileEntity: FileEntity, file: File) => {\n    uploadFile(this.props.token, file.name, file)\n      .then((fileUploadComplete: FileUploadComplete) => {\n        const isCreate = fileEntity.dataFileHandleId === ''\n        fileEntity.dataFileHandleId = fileUploadComplete.fileHandleId\n        const createOrUpdate = isCreate ? createEntity : updateEntity\n        createOrUpdate(fileEntity, this.props.token).then(() => {\n          this.finishedProcessingOneFile()\n        })\n      })\n      .catch((error: any) => {\n        this.handleUploadError(error)\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        {/** This input field is used for it's functionally (browse for files), the button acts as the UI. */}\n        <input\n          ref={this.inputOpenFileRef}\n          type=\"file\"\n          style={{ display: 'none' }}\n          onChange={this.handleChange}\n          multiple={true}\n        />\n        <button\n          type=\"button\"\n          onClick={this.showOpenFileDlg}\n          className=\"SRC-uploadButton\"\n        >\n          Browse...\n        </button>\n        {this.state.isUploading && (\n          <React.Fragment>\n            <span style={{ marginLeft: '10px' }}>\n              {this.state.filesUploadedCount} /\n              {this.state.totalFilesToUploadCount} file(s)\n            </span>\n            <span style={{ marginLeft: '2px' }} className={'spinner'} />\n          </React.Fragment>\n        )}\n        {this.state.successfullyUploaded && (\n          <span style={{ marginLeft: '10px' }}>\n            Successfully uploaded {this.state.totalFilesToUploadCount} file(s)\n            to\n            <a\n              style={{ marginLeft: '2px' }}\n              href={`https://www.synapse.org/#!Synapse:${this.props.parentContainerId}`}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {this.props.parentContainerId}\n            </a>\n          </span>\n        )}\n        {this.state.error && <p>Upload error!</p>}\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport {\n  getEntity,\n  getFileEntityContent,\n  updateEntity,\n  uploadFile,\n} from '../utils/SynapseClient'\nimport { Entity, FileEntity, FileUploadComplete } from '../utils/synapseTypes/'\n\ntype FileContentDownloadUploadDemoState = {\n  token?: string\n  error?: any\n  isLoading?: boolean\n  fileContent?: string\n  targetEntity?: FileEntity\n}\n\nexport type FileContentDownloadUploadDemoProps = {\n  token?: string\n  targetEntityId: string\n}\n\nexport default class FileContentDownloadUploadDemo extends React.Component<\n  FileContentDownloadUploadDemoProps,\n  FileContentDownloadUploadDemoState\n> {\n  constructor(props: FileContentDownloadUploadDemoProps) {\n    super(props)\n    this.state = {\n      token: '',\n      isLoading: false,\n    }\n  }\n\n  public componentDidMount() {\n    const { token, targetEntityId } = this.props\n    // must be logged in to download content\n    if (token) {\n      this.setState({ isLoading: true })\n      getEntity(token, targetEntityId)\n        .then((entity: Entity) => {\n          // if file entity\n          if (\n            entity.concreteType === 'org.sagebionetworks.repo.model.FileEntity'\n          ) {\n            const fileEntity: FileEntity = entity as FileEntity\n            getFileEntityContent(token, fileEntity).then(content => {\n              this.setState({\n                fileContent: content,\n                targetEntity: fileEntity,\n                isLoading: false,\n              })\n            })\n          } else {\n            this.setState({ error: 'invalid type', isLoading: false })\n          }\n        })\n        .catch(err => {\n          this.setState({ error: err, isLoading: false })\n        })\n    }\n  }\n\n  updateFileContent = (event: React.MouseEvent<HTMLButtonElement>) => {\n    // create a new FileHandle, and update the FileEntity\n    if (this.props.token && this.state.targetEntity && this.state.fileContent) {\n      this.setState({ isLoading: true })\n      const newFileContent = new Blob([this.state.fileContent], {\n        type: 'text/plain',\n      })\n      uploadFile(this.props.token, this.state.targetEntity.name, newFileContent)\n        .then((fileUploadComplete: FileUploadComplete) => {\n          // now update the entity!\n          if (this.state.targetEntity) {\n            this.state.targetEntity.dataFileHandleId =\n              fileUploadComplete.fileHandleId\n            updateEntity(this.state.targetEntity, this.props.token)\n              .then((entity: Entity) => {\n                const fileEntity = entity as FileEntity\n                // updated the target entity, force it to get the updated entity\n                this.setState({ targetEntity: fileEntity, isLoading: false })\n              })\n              .catch((err: string) => {\n                this.setState({ error: err, isLoading: false })\n              })\n          }\n        })\n        .catch((err: string) => {\n          this.setState({ error: err, isLoading: false })\n        })\n    }\n  }\n  handleContentChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ fileContent: event.target.value })\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.fileContent && (\n          <React.Fragment>\n            <div>\n              <textarea\n                style={{ width: '100%', height: '300px' }}\n                value={this.state.fileContent}\n                onChange={this.handleContentChange}\n              />\n            </div>\n            <button onClick={this.updateFileContent}>\n              Update File Content...\n            </button>\n          </React.Fragment>\n        )}\n        {this.state.isLoading && (\n          <span style={{ marginLeft: '2px' }} className={'spinner'} />\n        )}\n\n        {this.state.error && <p>Download error!</p>}\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport Plotly from 'plotly.js-basic-dist'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { SynapseClient } from '../utils'\nimport {\n  ProjectFilesStatisticsRequest,\n  ProjectFilesStatisticsResponse,\n  FilesCountStatistics,\n} from '../utils/synapseTypes/'\nconst Plot = createPlotlyComponent(Plotly)\n\nconst months = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n]\n\nexport type StatisticsPlotProps = {\n  request: ProjectFilesStatisticsRequest\n  token?: string\n  title?: string\n  xtitle?: string\n  ytitle?: string\n  isHorizontal?: boolean\n  xaxistype?: string\n  showlegend?: boolean\n}\n\ntype StatisticsPlotState = {\n  isLoaded: boolean\n  plotData?: ProjectFilesStatisticsResponse\n}\n\nclass StatisticsPlot extends React.Component<\n  StatisticsPlotProps,\n  StatisticsPlotState\n> {\n  constructor(props: StatisticsPlotProps) {\n    super(props)\n    this.state = {\n      isLoaded: false,\n      plotData: {} as ProjectFilesStatisticsResponse,\n    }\n  }\n\n  public componentDidMount() {\n    this.fetchPlotlyData()\n  }\n  /**\n   * Get data for plotly\n   *\n   * @returns data corresponding to plotly widget\n   */\n  fetchPlotlyData = async () => {\n    const { request, token } = this.props\n    return SynapseClient.getProjectStatistics(request, token)\n      .then((data: ProjectFilesStatisticsResponse) => {\n        this.setState({\n          isLoaded: true,\n          plotData: data,\n        })\n      })\n      .catch((err: any) => {\n        console.log('Error on call to get statistics ', err)\n      })\n  }\n\n  getTrace = (\n    traceName: string,\n    stats: FilesCountStatistics[],\n    orientation: string,\n    markerColor: string,\n  ) => {\n    const x: string[] = []\n    const y: number[] = []\n    const trace = {\n      orientation,\n      x,\n      y,\n      name: traceName,\n      type: 'bar',\n      marker: { color: markerColor },\n      hovertemplate:\n        // see S3 Formatting options: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format\n        `%{y:n} <br><extra>${traceName}</extra>`,\n    }\n    for (const statPoint of stats) {\n      const statPointDate: Date = new Date(statPoint.rangeStart)\n      trace.x.push(\n        `${\n          months[statPointDate.getUTCMonth()]\n        } ${statPointDate.getUTCFullYear()}`,\n      )\n      trace.y.push(statPoint.filesCount)\n    }\n    return trace\n  }\n\n  showPlot = () => {\n    if (!this.state.isLoaded || !this.state.plotData) {\n      return\n    }\n    const {\n      title,\n      xtitle,\n      ytitle,\n      isHorizontal,\n      xaxistype,\n      showlegend,\n    } = this.props\n    const plotData = this.state.plotData\n    const layout: any = {\n      showlegend,\n      title,\n      barmode: 'stack',\n      hovermode: 'x',\n    }\n    const config: any = {\n      displayModeBar: true,\n      displaylogo: false,\n      // options found here: https://github.com/plotly/plotly.js/blob/master/src/components/modebar/buttons.js\n      modeBarButtonsToRemove: [\n        'sendDataToCloud',\n        'hoverCompareCartesian',\n        'select2d',\n        'lasso2d',\n        'zoom2d',\n        'resetScale2d',\n        'hoverClosestCartesian',\n        'toggleSpikelines',\n      ],\n    }\n    if (xtitle) {\n      layout.xaxis = {\n        title: xtitle,\n      }\n    }\n    if (xaxistype) {\n      layout.xaxis = {\n        ...layout.xaxis,\n        xaxistype: xaxistype.toLowerCase(),\n      }\n    }\n\n    if (ytitle) {\n      layout.yaxis = {\n        title: ytitle,\n      }\n    }\n    // init plot_data\n    const orientation: string = isHorizontal ? 'h' : 'v'\n    const traces: any = []\n    if (\n      plotData.fileDownloads &&\n      plotData.fileDownloads.months &&\n      plotData.fileDownloads.months.length > 0\n    ) {\n      // add file downloads trace\n      traces.push(\n        this.getTrace(\n          'File Downloads',\n          plotData.fileDownloads.months,\n          orientation,\n          '#7CC0C4',\n        ),\n      )\n    }\n    if (\n      plotData.fileUploads &&\n      plotData.fileUploads.months &&\n      plotData.fileUploads.months.length > 0\n    ) {\n      // add file uploads trace\n      traces.push(\n        this.getTrace(\n          'File Uploads',\n          plotData.fileUploads.months,\n          orientation,\n          '#D4689A',\n        ),\n      )\n    }\n    if (traces.length > 0)\n      return (\n        <Plot\n          layout={layout}\n          data={traces}\n          config={config}\n          className=\"SRC-fullWidth\"\n          useResizeHandler={true}\n        />\n      )\n    else return <></>\n  }\n\n  public render() {\n    if (!this.state.isLoaded) {\n      return null\n    }\n    return this.showPlot()\n  }\n}\nexport default StatisticsPlot\n","import * as React from 'react'\nimport { SynapseVersion } from '../../lib/utils/synapseTypes/'\nimport { SynapseClient } from '../../lib/utils/'\nimport QueryWrapperMenu, {\n  MenuConfig, QueryWrapperMenuProps,\n} from '../../lib/containers/QueryWrapperMenu'\nimport Uploader from '../../lib/containers/Uploader'\nimport FileContentDownloadUploadDemo from '../../lib/containers/FileContentDownloadUploadDemo'\nimport StatisticsPlot from 'lib/containers/StatisticsPlot'\nimport { testDownloadSpeed } from '../../lib/utils/functions/testDownloadSpeed'\nimport HasAccess from 'lib/containers/HasAccess'\n\ntype DemoState = {\n  token: string | null\n  ownerId: string\n  isLoading: boolean\n  showMarkdown: boolean\n  version: number\n  tabOne: QueryWrapperMenuProps\n  tabTwo: QueryWrapperMenuProps\n  showTabOne: boolean\n  userFormDataSynId?: string\n  estimatedDownloadBytesPerSecond?: number\n}\n\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n\n */\nclass Demo extends React.Component<{}, DemoState> {\n  entityFormRef: any\n  /**\n   * Maintain internal state of user session\n   */\n  constructor(props: any) {\n    super(props)\n    this.entityFormRef = React.createRef()\n    this.state = {\n      isLoading: true,\n      ownerId: '',\n      showMarkdown: true,\n      token: '',\n      version: 0,\n      showTabOne: true,\n      tabOne: {\n        unitDescription: 'datum',\n        tableConfiguration: {\n          title: 'title',\n          enableDownloadConfirmation: true,\n          enableLeftFacetFilter: true\n        },\n        entityId: 'syn16787123',\n        menuConfig: [\n          {\n            facet: 'dataStatus',\n            sql: 'SELECT studyStatus, dataStatus FROM syn16787123',\n          },\n          {\n            facet: 'projectStatus',\n            sql: 'SELECT * FROM syn16787123',\n          },\n          {\n            facet: 'name',\n            sql: 'SELECT name, grant FROM syn11346063',\n          },\n          {\n            facet: 'grant',\n            sql: 'SELECT name, grant FROM syn11346063 Group by grant',\n          },\n          {\n            facet: 'name',\n            sql: 'SELECT name, grant, sex, dataType, consortium FROM syn11346063 WHERE ( ( \"consortium\" = \\'AMP-AD\\') )',\n          },\n\n          {\n            facet: 'model',\n            sql: 'SELECT * FROM syn21498718',\n          },\n          {\n            facet: 'metadataType',\n            sql: \"SELECT `id`, `metadataType`, `dataType`, `assay`↵  FROM syn11346063↵  WHERE ((`study` LIKE '%BroadAstrom109%') AND (`dataSubtype` = 'metadata'))\"\n          }\n        ],\n        rgbIndex: 2,\n      },\n      tabTwo: {\n        entityId: 'syn16858331',\n        tableConfiguration: {\n          title: 'title',\n          showAccessColumn: true,\n        },\n        menuConfig: [\n          {\n            facet: 'assay',\n            sql: 'SELECT * FROM syn21156352',\n          },\n          {\n            facet: 'study',\n            sql:\n            'SELECT study, dataType, assay, id AS file_id, specimenID, individualID, diagnosis, sex, consortium as \"Program\", grant, species, organ, tissue, cellType, fileFormat FROM syn11346063',\n          },\n          {\n            facet: 'diagnosis',\n            sql:\n              'SELECT id, fundingAgency, assay, diagnosis, dataType FROM syn16858331',\n          },\n          {\n            facet: 'individuals',\n            sql:\n              'SELECT diagnosis, sex, dataType, assay, count(distinct(id)) as \"Files\", count(distinct(specimenID)) as \"Specimens\", count(distinct(individualID)) as \"Individuals\" FROM syn11346063 GROUP BY 1,2,3,4 ORDER BY 1 DESC',\n          },\n        ] as MenuConfig[],\n        rgbIndex: 5,\n      },\n    }\n    this.getVersion = this.getVersion.bind(this)\n    this.onRunDownloadSpeedTest = this.onRunDownloadSpeedTest.bind(this)\n  }\n\n  public onSubmitEntityForm() {\n    this.entityFormRef.current.submitForm()\n  }\n\n  public onEntityFormSubmitted(synId: string) {\n    this.setState({ userFormDataSynId: synId })\n  }\n\n  public onRunDownloadSpeedTest() {\n    const { token } = this.state\n    if (token) {\n      testDownloadSpeed(token)\n        .then((estimatedDownloadBytesPerSecond: number) => {\n          this.setState({ estimatedDownloadBytesPerSecond })\n        })\n        .catch((error: any) => {\n          console.error('estimate download speed failed', error)\n        })\n    }\n  }\n\n  /**\n   * Get the current version of Synapse\n   */\n  public getVersion(): void {\n    // IMPORTANT: Your component should have a property (with default) to change the endpoint.  This is necessary for Synapse.org integration.\n    // Pass your endpoint through to the rpc call:\n    // SynapseClient.getVersion('https://repo-staging.prod.sagebase.org')\n    SynapseClient.getVersion()\n      .then((data: SynapseVersion) => this.setState({ version: data.version }))\n      .catch((error: any) => {\n        // Handle HTTPError.  Has status and message.\n        console.error('Get version failed', error)\n      })\n  }\n\n  public componentDidMount() {\n    // Note:  All portals should do this once on the initial app load.\n    // This looks for the session token cookie (HttpOnly, unable to directly access), and initialize the session if it does exists.\n    SynapseClient.detectSSOCode()\n    SynapseClient.getSessionTokenFromCookie()\n      .then(sessionToken => {\n        this.setState({\n          token: sessionToken,\n        })\n      })\n      .catch((error: any) => {\n        console.error(error)\n      })\n    this.getVersion()\n  }\n  public render(): JSX.Element {\n    const { token, estimatedDownloadBytesPerSecond } = this.state\n    return (\n      <div>\n        <p className=\"App-intro text-center\">\n          Synapse production version: {this.state.version}\n        </p>\n        {token && (\n          <div className=\"container\">\n            <button\n              className=\"btn btn-default\"\n              onClick={this.onRunDownloadSpeedTest}\n            >\n              Run Download Speed Test\n            </button>\n            <hr />\n          </div>\n        )}\n        {estimatedDownloadBytesPerSecond && (\n          <div className=\"container\">\n            <h5>\n              Estimated Download Speed:{' '}\n              {(estimatedDownloadBytesPerSecond / 1000000).toFixed(2)} MBps\n            </h5>\n            <hr />\n          </div>\n        )}\n        {token && (\n          <div className=\"container\">\n            <h5>Upload File(s) Demo</h5>\n            <Uploader token={token} parentContainerId=\"syn18987891\" />\n            <hr />\n          </div>\n        )}\n        {token && (\n          <div className=\"container\">\n            <h5>Download File Content Demo (syn12196718)</h5>\n            <FileContentDownloadUploadDemo\n              token={token}\n              targetEntityId=\"syn12196718\"\n            />\n            <hr />\n          </div>\n        )}\n        { \n        <div className=\"container\">\n            <h5>Public Folder - HasAccess widget</h5>\n            <HasAccess\n              token={token ? token : undefined}\n              entityId={'syn7122428'}\n              isInDownloadList={false}\n            />\n            <h5>A Controlled Access Folder - HasAccess widget</h5>\n            <HasAccess\n              token={token ? token : undefined}\n              entityId={'syn7383419'}\n              isInDownloadList={false}\n            />\n            <h5>Open Data</h5>\n            <HasAccess\n              token={token ? token : undefined}\n              entityId={'syn5481758'}\n              isInDownloadList={false}\n            />\n            <hr />\n          </div>\n        }\n        {token && (\n          <div className=\"container\">\n            <h5>Project Statistics Demo</h5>\n            <StatisticsPlot\n              token={token}\n              request={{\n                concreteType:\n                  'org.sagebionetworks.repo.model.statistics.ProjectFilesStatisticsRequest',\n                objectId: 'syn2580853',\n                fileDownloads: true,\n                fileUploads: true,\n              }}\n            />\n            <StatisticsPlot\n              token={token}\n              request={{\n                concreteType:\n                  'org.sagebionetworks.repo.model.statistics.ProjectFilesStatisticsRequest',\n                objectId: 'syn5585645',\n                fileDownloads: true,\n                fileUploads: true,\n              }}\n            />\n            <hr />\n          </div>\n        )}\n        <div className=\"container\">\n          <button\n            className=\"btn btn-default\"\n            onClick={() => {\n              this.setState({ showTabOne: !this.state.showTabOne })\n            }}\n          >\n            toggle config for query wrapper menu\n          </button>\n          <QueryWrapperMenu\n            isConsistent={true}\n            name={'Demo'}\n            entityId={ this.state.showTabOne\n              ? this.state.tabOne.entityId\n              : this.state.tabTwo.entityId}\n            token={\n              SynapseClient.IS_OUTSIDE_SYNAPSE_ORG ? token! : this.state.token!\n            }\n            unitDescription={\n              this.state.showTabOne\n                ? this.state.tabOne.unitDescription\n                : this.state.tabTwo.unitDescription\n            }\n            tableConfiguration={\n              this.state.showTabOne\n                ? this.state.tabOne.tableConfiguration\n                : this.state.tabTwo.tableConfiguration\n            }\n            menuConfig={\n              this.state.showTabOne\n                ? this.state.tabOne.menuConfig\n                : this.state.tabTwo.menuConfig\n            }\n            rgbIndex={\n              this.state.showTabOne\n                ? this.state.tabOne.rgbIndex\n                : this.state.tabTwo.rgbIndex\n            }\n            stackedBarChartConfiguration={{\n              loadingScreen: <div />,\n            }}\n          />\n        </div>\n      </div>\n    )\n  }\n}\nexport default Demo\n","import * as React from 'react'\nimport QueryWrapperMenu, {\n  MenuConfig,\n  QueryWrapperMenuProps,\n} from '../../../lib/containers/QueryWrapperMenu'\nimport { SynapseConstants } from '../../../lib/utils'\nimport { GenericCardSchema } from '../../../lib/containers/GenericCard'\n\ntype DemoState = {\n  ownerId: string\n  isLoading: boolean\n  showMarkdown: boolean\n  version: number\n  tabOne: QueryWrapperMenuProps\n  tabTwo: QueryWrapperMenuProps\n  tabThree: QueryWrapperMenuProps\n  tabFour: QueryWrapperMenuProps\n  activeTab: number\n}\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n */\nclass QueryWrapperMenuDemo extends React.Component<\n  { rgbIndex: number },\n  DemoState\n> {\n  /**\n   * Maintain internal state of user session\n   */\n  constructor(props: any) {\n    super(props)\n    const experimentalSql =\n      \"SELECT * FROM syn20337467 WHERE toolType = 'experimental' LIMIT 100\"\n    const computationalSql =\n      \"SELECT * FROM syn20337467 WHERE toolType = 'computational' LIMIT 100\"\n    const genericCardSchema: GenericCardSchema = {\n      title: 'Title',\n      type: 'Generic Tool',\n      subTitle: 'softwareType',\n      description: 'summary',\n      icon: 'icon',\n      secondaryLabels: ['contributor', 'diagnosis', 'program'],\n    }\n    this.state = {\n      isLoading: true,\n      ownerId: '',\n      showMarkdown: true,\n      activeTab: 3,\n      tabFour: {\n        stackedBarChartConfiguration: {\n          loadingScreen: <div> Im loading as fast I can! </div>,\n        },\n        unitDescription: 'apples',\n        entityId: 'syn21085100',\n        tableConfiguration: {\n          title: 'title',\n          markdownColumns: ['fruit', 'vegetable'],\n        },\n        menuConfig: [\n          {\n            facet: 'fruit',\n            sql: 'select * from syn21085100',\n          },\n        ],\n        rgbIndex: 3,\n      },\n      tabThree: {\n        stackedBarChartConfiguration: {\n          loadingScreen: <div> Im loading as fast I can! </div>,\n        },\n        entityId: 'syn11346063',\n        unitDescription: 'datum',\n        tableConfiguration: {\n          title: 'title',\n        },\n        searchConfiguration: {\n          searchable: [\n            {\n              columnName: 'study',\n              hintText: 'study name',\n            },\n          ],\n        },\n        menuConfig: [\n          {\n            facet: 'species',\n            sql: 'SELECT id, name FROM syn11346063 LIMIT 1000',\n          },\n          {\n            facet: 'study',\n            sql: 'SELECT * FROM syn11346063 limit 1000',\n          },\n          {\n            sql: 'SELECT * FROM syn11346063 limit 1000',\n          },\n        ] as MenuConfig[],\n        rgbIndex: 5,\n      },\n      tabTwo: {\n        name: 'Demo',\n        unitDescription: 'persons',\n        cardConfiguration: {\n          genericCardSchema,\n          type: SynapseConstants.MEDIUM_USER_CARD,\n          loadingScreen: (\n            <div style={{ height: 450 }}> I'm loading as fast I can! </div>\n          ),\n        },\n        rgbIndex: 1,\n        facetAliases: {\n          grant: 'Grant',\n        },\n        entityId: 'syn20337467',\n        accordionConfig: [\n          {\n            name: 'Compuational',\n            cardConfiguration: {\n              genericCardSchema,\n              type: SynapseConstants.GENERIC_CARD,\n              loadingScreen: (\n                <div style={{ height: 450 }}> I'm loading as fast I can! </div>\n              ),\n            },\n            menuConfig: [\n              {\n                facet: 'grant',\n                sql: computationalSql,\n              },\n              {\n                facet: 'diagnosis',\n                sql: computationalSql,\n              },\n              {\n                facet: 'modelType',\n                sql: computationalSql,\n              },\n            ],\n          },\n          {\n            name: 'Experimental',\n            cardConfiguration: {\n              genericCardSchema,\n              type: SynapseConstants.GENERIC_CARD,\n              loadingScreen: (\n                <div style={{ height: 450 }}> I'm loading as fast I can! </div>\n              ),\n            },\n            menuConfig: [\n              {\n                facet: 'program',\n                sql: experimentalSql,\n              },\n              {\n                facet: 'reagentType',\n                sql: experimentalSql,\n              },\n              {\n                facet: 'softwareType',\n                sql: experimentalSql,\n              },\n            ],\n          },\n        ],\n      },\n      tabOne: {\n        unitDescription: 'datum',\n        tableConfiguration: {\n          title: 'title',\n        },\n        entityId: 'syn11346063',\n        searchConfiguration: {\n          searchable: [\n            {\n              columnName: 'study',\n              hintText: 'study name',\n            },\n          ],\n        },\n        menuConfig: [\n          {\n            facet: 'diagnosis',\n            sql:\n              'SELECT study, assay, count(distinct id) AS files, concat(organ) AS organs' +\n              \" FROM syn17024112 WHERE species='Human' AND assay='rnaSeq' group by 1,2 order by 3 desc limit 1000\",\n          },\n          {\n            facet: 'PORTALS-712',\n            sql:\n              'SELECT dataType, assay, fileFormat, COUNT(distinct id) AS Files ' +\n              \"FROM syn11346063 WHERE (study LIKE '%MODEL-AD_5XFAD%') GROUP BY 1, 2, 3 ORDER BY 4 DESC\",\n          },\n          {\n            facet: 'PORTALS-803',\n            sql:\n              'SELECT diagnosis AS \"Diagnosis\", sex as \"Sex\", dataType as \"Data Type\", assay as \"Assay\", count(distinct(id)) as \"Files\", count(distinct(specimenID)) as \"Specimens\", count(distinct(individualID)) as \"Individuals\" FROM syn11346063 GROUP BY 1,2,3,4 ORDER BY 1 DESC',\n          },\n          {\n            facet: 'study',\n            sql: 'SELECT * FROM syn11346063 limit 1000',\n          },\n          // {\n          //   facet: 'dataType',\n          //   sql: 'SELECT id, fundingAgency, assay, diagnosis, dataType FROM syn16858331',\n          //   synapseId: 'syn16858331',\n          //   title: 'title',\n          //   unitDescription: 'descriptive unit'\n          // },\n        ] as MenuConfig[],\n        rgbIndex: 5,\n      },\n      version: 0,\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.removeHandler = this.removeHandler.bind(this)\n  }\n\n  /**\n   * Update internal state\n   * @param {Object} updatedState new state to be updated by the component\n   */\n  public handleChange(updatedState: {}): void {\n    this.setState(updatedState)\n  }\n\n  public removeHandler(): void {\n    this.setState({ showMarkdown: !this.state.showMarkdown })\n  }\n\n  public render(): JSX.Element {\n    const { activeTab } = this.state\n    let props: QueryWrapperMenuProps = {} as QueryWrapperMenuProps\n    if (activeTab === 0) {\n      props = this.state.tabOne\n    } else if (activeTab === 1) {\n      props = this.state.tabTwo\n    } else if (activeTab === 2) {\n      props = this.state.tabThree\n    } else {\n      props = this.state.tabFour\n    }\n    return (\n      <div className=\"container\">\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {\n            this.setState({ activeTab: 0 })\n          }}\n        >\n          With Group By\n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {\n            this.setState({ activeTab: 1 })\n          }}\n        >\n          With Tools\n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {\n            this.setState({ activeTab: 2 })\n          }}\n        >\n          Standard\n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {\n            this.setState({ activeTab: 3 })\n          }}\n        >\n          Table with markdown\n        </button>\n        <h2>Demo of table</h2>\n        <QueryWrapperMenu isConsistent={true} {...props} />\n      </div>\n    )\n  }\n}\nexport default QueryWrapperMenuDemo\n","import * as React from 'react'\nimport { SynapseClient, SynapseConstants } from '../utils'\nimport { getNextPageOfData } from '../utils/functions/queryUtils'\nimport {\n  insertConditionsFromSearchParams,\n  KeyValue,\n  SQLOperator,\n} from '../utils/functions/sqlFunctions'\nimport { QueryBundleRequest, QueryResultBundle } from '../utils/synapseTypes/'\nimport CardContainer from './CardContainer'\nimport { GenericCardSchema, IconOptions } from './GenericCard'\n// TODO: this import nearly doubles the package size of SRC as a UMD build by ~400KB\n// will have to find a way to use individual lodash packages instead of the entire thing\nimport { cloneDeep, isEqual } from 'lodash-es'\nexport interface CardLink {\n  baseURL: string\n  // the key that will go into the url\n  URLColumnName: string\n  // the column name who's value will be used\n  matchColumnName: string\n  isMarkdown: false\n}\n\nexport type MarkdownLink = {\n  isMarkdown: true\n  // the columns whos value will be used for the markdown\n  matchColumnName: string\n}\n\nexport type MarkdownValue = {\n  isMarkdown: true\n}\n\n// Specify the indices in the values [] that should be rendered specially\nexport type LabelLinkConfig = (MarkdownLink | CardLink)[]\n\nexport type CommonCardProps = {\n  genericCardSchema?: GenericCardSchema\n  secondaryLabelLimit?: number\n  titleLinkConfig?: CardLink\n  labelLinkConfig?: LabelLinkConfig\n  descriptionLinkConfig?: MarkdownValue\n}\n\nexport type CardConfiguration = {\n  type: string\n  hasInternalLink?: boolean\n  iconOptions?: IconOptions\n  loadingScreen?: React.FunctionComponent | JSX.Element\n} & CommonCardProps\n\nexport type CardContainerLogicProps = {\n  token?: string\n  limit?: number\n  title?: string\n  unitDescription?: string\n  sqlOperator?: SQLOperator\n  searchParams?: KeyValue\n  facet?: string\n  entityId: string\n  facetAliases?: {}\n  backgroundColor?: string\n  isHeader?: boolean\n  isAlignToLeftNav?: boolean\n  sql: string\n} & CardConfiguration\n\ntype State = {\n  data: QueryResultBundle | undefined\n  isLoading: boolean\n  queryRequest: QueryBundleRequest\n  totalResultsNoFacet: number\n  hasMoreData: boolean\n}\n\n/**\n * Class wraps around CardContainer and serves as a standalone logic container for rendering cards.\n * This same logic exists in QueryWrapper, but the two serve two distinct purposes, making this component\n * sufficiently distinct.\n *\n * @class CardContainerLogic\n * @extends {React.Component}\n */\nexport default class CardContainerLogic extends React.Component<\n  CardContainerLogicProps,\n  State\n> {\n  public static defaultProps = {\n    token: '',\n  }\n\n  public static defaultState = {\n    data: undefined,\n    isLoading: true,\n    queryRequest: {} as QueryBundleRequest,\n    totalResultsNoFacet: 0,\n    hasMoreData: true,\n  }\n\n  constructor(props: CardContainerLogicProps) {\n    super(props)\n    this.executeInitialQueryRequest = this.executeInitialQueryRequest.bind(this)\n    this.getLastQueryRequest = this.getLastQueryRequest.bind(this)\n    this.getNextPageOfData = this.getNextPageOfData.bind(this)\n    this.state = CardContainerLogic.defaultState\n  }\n\n  /**\n   * Compute default query request\n   *\n   * @memberof QueryWrapper\n   */\n  public componentDidMount() {\n    this.executeInitialQueryRequest()\n  }\n\n  /**\n   * @memberof QueryWrapper\n   *\n   */\n  public componentDidUpdate(prevProps: CardContainerLogicProps) {\n    /**\n     *  If token has changed (they signed in) or sql query has changed\n     *  or search params have updated then perform an update.\n     */\n    const { searchParams: prevSearchParams = {} } = prevProps\n    const { searchParams: currentSearchParams = {} } = this.props\n    const hasSearchParamsChanged = !isEqual(\n      prevSearchParams,\n      currentSearchParams,\n    )\n    const hasTokenBeenAquired =\n      this.props.token !== '' && prevProps.token === ''\n    const hasSqlChanged = this.props.sql !== prevProps.sql\n    if (hasTokenBeenAquired || hasSqlChanged || hasSearchParamsChanged) {\n      this.executeInitialQueryRequest()\n    }\n  }\n\n  /**\n   * Pass down a deep clone (so no side affects on the child's part) of the\n   * last query request made\n   *\n   * @returns\n   * @memberof QueryWrapper\n   */\n  public getLastQueryRequest(): QueryBundleRequest {\n    return cloneDeep(this.state.queryRequest)\n  }\n\n  /**\n   * Grab the next page of data, pulling in 25 more rows.\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public async getNextPageOfData(queryRequest: QueryBundleRequest) {\n    this.setState({\n      isLoading: true,\n    })\n\n    await getNextPageOfData(\n      queryRequest,\n      this.state.data!,\n      this.props.token,\n    ).then(newState => {\n      this.setState({\n        ...newState,\n        isLoading: false,\n        queryRequest: cloneDeep(queryRequest),\n      })\n    })\n  }\n\n  /**\n   * Execute the initial query passed into the component\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public executeInitialQueryRequest() {\n    this.setState({\n      isLoading: true,\n    })\n\n    let sqlUsed = this.props.sql\n    if (this.props.searchParams) {\n      sqlUsed = insertConditionsFromSearchParams(\n        this.props.searchParams,\n        this.props.sql,\n        this.props.sqlOperator,\n      )\n    }\n    const entityId = this.props.entityId\n\n    // we don't set this in the state because it hardcodes the sql query, on componentDidUpdate\n    // we need the sql to change\n    const initQueryRequest: QueryBundleRequest = {\n      concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n      partMask:\n        SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n        SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n        SynapseConstants.BUNDLE_MASK_QUERY_RESULTS |\n        SynapseConstants.BUNDLE_MASK_QUERY_COUNT,\n      entityId,\n      query: {\n        sql: sqlUsed,\n        isConsistent: false,\n        limit: 25,\n        offset: 0,\n      },\n    }\n\n    SynapseClient.getQueryTableResults(initQueryRequest, this.props.token)\n      .then((data: QueryResultBundle) => {\n        const queryRequestWithoutCount = cloneDeep(initQueryRequest)\n        queryRequestWithoutCount.partMask =\n          SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n          SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n          SynapseConstants.BUNDLE_MASK_QUERY_RESULTS\n\n        const hasMoreData =\n          data.queryResult.queryResults.rows.length ===\n          SynapseConstants.PAGE_SIZE\n        const newState = {\n          hasMoreData,\n          data,\n          queryRequest: queryRequestWithoutCount,\n          isLoading: false,\n          totalResultsNoFacet: data.queryCount!,\n        }\n        this.setState(newState)\n      })\n      .catch(err => {\n        console.log('Failed to get data ', err)\n      })\n  }\n\n  /**\n   * Render the children without any formatting\n   */\n  public render() {\n    // only forward the necessary props\n    const { sql, searchParams, token, ...rest } = this.props\n    return (\n      <CardContainer\n        {...rest}\n        data={this.state.data}\n        token={token}\n        getLastQueryRequest={this.getLastQueryRequest}\n        getNextPageOfData={this.getNextPageOfData}\n        hasMoreData={this.state.hasMoreData}\n        isLoading={this.state.isLoading}\n      />\n    )\n  }\n}\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faCheck,\n  faDownload,\n  faFolder,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport React, { useState } from 'react'\nimport * as ReactBoostrap from 'react-bootstrap'\nimport {\n  getBulkFiles,\n  getDownloadOrder,\n  getFileHandleByIdURL,\n} from '../../utils/SynapseClient'\nimport {\n  BulkFileDownloadRequest,\n  BulkFileDownloadResponse,\n  FileDownloadStatus,\n  ZipFileFormat,\n} from '../../utils/synapseTypes/'\n\nlibrary.add(faCheck)\nlibrary.add(faDownload)\nlibrary.add(faFolder)\n\nexport type CreatePackageProps = {\n  token?: string\n  children?: JSX.Element\n  updateDownloadList: Function\n}\n\ntype Alert = {\n  message: string\n  variant: ReactBoostrap.AlertProps['variant']\n  className: string | undefined\n}\n\nexport const TEMPLATE_DOWNLOAD_MESSAGE =\n  'files were downloaded and removed from the list.'\nexport const TEMPLATE_ERROR_FILE_NAME =\n  'Please provide a package file name and try again.'\n\nexport const CreatePackage = (props: CreatePackageProps) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [fileName, setZipFileName] = useState('')\n  const [alert, setAlert] = useState<Alert>({\n    message: '',\n    className: undefined,\n    variant: undefined,\n  })\n  const [bulkFileDownloadResponse, setBulkFileDownloadResponse] = useState<\n    BulkFileDownloadResponse | undefined\n  >(undefined)\n  const { token, children, updateDownloadList } = props\n\n  const createPackageHandler = async (event: React.SyntheticEvent) => {\n    event.preventDefault()\n    if (!fileName) {\n      setAlert({\n        message: TEMPLATE_ERROR_FILE_NAME,\n        variant: 'danger',\n        className: undefined,\n      })\n      return\n    }\n    setAlert({ message: '', variant: undefined, className: undefined })\n    setIsLoading(true)\n    try {\n      const fileNameWithZipExtension = `${fileName}.zip`\n      const downloadOrder = await getDownloadOrder(\n        fileNameWithZipExtension,\n        token,\n      )\n      const bulkFileDownloadRequest: BulkFileDownloadRequest = {\n        concreteType:\n          'org.sagebionetworks.repo.model.file.BulkFileDownloadRequest',\n        requestedFiles: downloadOrder.files,\n        zipFileName: fileNameWithZipExtension,\n        zipFileFormat: ZipFileFormat.Flat,\n      }\n      const bulkFileDownloadResponse: BulkFileDownloadResponse = await getBulkFiles(\n        bulkFileDownloadRequest,\n        token,\n      )\n      setBulkFileDownloadResponse(bulkFileDownloadResponse)\n    } catch (err) {\n      setAlert({\n        message: err.reason,\n        variant: 'danger',\n        className: undefined,\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const downloadPackageHandler = async () => {\n    const { resultZipFileHandleId, fileSummary } = bulkFileDownloadResponse!\n    try {\n      const numfilesDownloaded = fileSummary.filter(\n        el => el.status === FileDownloadStatus.SUCCESS,\n      ).length\n      setAlert({\n        message: `${numfilesDownloaded} ${TEMPLATE_DOWNLOAD_MESSAGE}`,\n        className: 'SRC-primary-background-color SRC-whiteText',\n        variant: undefined,\n      })\n      const url = await getFileHandleByIdURL(resultZipFileHandleId, token)\n      window.location.href = url\n      updateDownloadList()\n      setBulkFileDownloadResponse(undefined)\n    } catch (err) {\n      console.error('Err on getFileHandleByIdURL = ', err)\n    }\n  }\n\n  const onChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    setZipFileName(event.currentTarget.value)\n  }\n\n  return (\n    <>\n      {alert.message && (\n        <ReactBoostrap.Alert\n          transition={'div'}\n          variant={alert.variant}\n          show={true}\n          className={alert.className}\n        >\n          {alert.message}\n        </ReactBoostrap.Alert>\n      )}\n      <div className=\"create-package-container\">\n        {children}\n        <div>\n          {isLoading && (\n            <span className=\"SRC-centerContentInline\">\n              <span className=\"spinner\" />\n              <span style={{ marginLeft: 5 }} className=\"create-package-text\">\n                Creating package...\n              </span>\n            </span>\n          )}\n          <div className=\"SRC-split\">\n            {!isLoading && !bulkFileDownloadResponse && (\n              <>\n                <form onSubmit={createPackageHandler}>\n                  <input\n                    onChange={onChange}\n                    type=\"text\"\n                    placeholder=\"PackageFileName\"\n                  ></input>\n                  <span className=\"zip-extension SRC-boldText\">.zip</span>\n                </form>\n                <button\n                  className=\"SRC-standard-button-shape SRC-primary-button action-button\"\n                  onClick={createPackageHandler}\n                  type=\"button\"\n                >\n                  <FontAwesomeIcon icon=\"folder\" />\n                  Create Package\n                </button>\n              </>\n            )}\n            {bulkFileDownloadResponse && (\n              <>\n                <div className=\"package-created\">\n                  <FontAwesomeIcon icon=\"check\" color=\"green\" />\n                  <span className=\"create-package-text\">\n                    Package created! Ready for download.\n                  </span>\n                </div>\n                <button\n                  className=\"SRC-standard-button-shape SRC-primary-button action-button\"\n                  onClick={downloadPackageHandler}\n                >\n                  <FontAwesomeIcon icon=\"download\" color=\"white\" />\n                  Download Package\n                </button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport moment from 'moment'\nimport React, { useEffect, useState } from 'react'\nimport * as ReactBootstrap from 'react-bootstrap'\nimport { calculateFriendlyFileSize } from '../../utils/functions/calculateFriendlyFileSize'\nimport useGetProfiles from '../../utils/hooks/useGetProfiles'\nimport {\n  deleteDownloadList,\n  deleteDownloadListFiles,\n  getDownloadList,\n  getEntityHeader,\n  getFiles,\n} from '../../utils/SynapseClient'\nimport {\n  BatchFileRequest,\n  BatchFileResult,\n  DownloadList,\n  EntityHeader,\n  FileHandleAssociateType,\n  FileHandleAssociation,\n  PaginatedResults,\n  Reference,\n} from '../../utils/synapseTypes'\nimport HasAccess, {\n  getDownloadTypeForFileHandle,\n  FileHandleDownloadTypeEnum,\n} from '../HasAccess'\nimport UserCard from '../UserCard'\nimport { CreatePackage } from './CreatePackage'\nimport DownloadDetails from './DownloadDetails'\n\nlibrary.add(faTrash)\n\ntype DownloadListTableData = {\n  references?: PaginatedResults<EntityHeader>\n  batchFileResult?: BatchFileResult\n  downloadList?: DownloadList\n}\n\ntype LoadingState = boolean\nexport type DownloadListTableProps = {\n  token?: string,\n  listUpdatedCallback?: VoidFunction\n}\n\nexport const TESTING_TRASH_BTN_CLASS = 'TESTING_TRASH_BTN_CLASS'\nexport const TESTING_CLEAR_BTN_CLASS = 'TESTING_CLEAR_BTN_CLASS'\n\nexport default function DownloadListTable(props: DownloadListTableProps) {\n  // https://reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables\n  const [data, setData] = useState<DownloadListTableData>({\n    references: undefined,\n    batchFileResult: undefined,\n    downloadList: undefined,\n  })\n  // https://reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables\n  const [isLoading, setIsLoading] = useState<LoadingState>(true)\n  const [fileBeingDeleted, setFileBeingDeleted] = useState<string>('')\n  const { token } = props\n  const { references, batchFileResult, downloadList } = data\n  const requestedFiles =\n    (batchFileResult && batchFileResult.requestedFiles) || []\n  // Get owner ids from download list by filtering to items that have a file handle\n  // then map to ownerIds\n  const ownerIds: string[] = requestedFiles\n    .filter(el => el.fileHandle && el.fileHandle.createdBy)\n    // use bang operator because filter function guarentee's that file handle will be defined\n    .map(el => el.fileHandle!.createdBy!)\n  const userProfiles = useGetProfiles({ ids: ownerIds, token })\n\n  useEffect(() => {\n    fetchData(token)\n  }, [token])\n\n  const fetchData = async (token: string | undefined) => {\n    if (!token) {\n      setIsLoading(false)\n      // doesn't make sense with anonymous user!\n      return\n    }\n    try {\n      setIsLoading(true)\n      const downloadList = await getDownloadList(token)\n      const { filesToDownload } = downloadList\n      if (filesToDownload.length === 0) {\n        setData({\n          downloadList,\n        })\n        invokeDownloadListUpdatedEvent()\n        return\n      }\n      const batchFileRequest: BatchFileRequest = {\n        requestedFiles: filesToDownload,\n        includeFileHandles: true,\n        includePreSignedURLs: false,\n        includePreviewPreSignedURLs: false,\n      }\n      // batch file result gives FilesHandle for the files the user can download\n      // which has additional metadata - createdBy, numBytes, etc.\n      const batchFileResult = await getFiles(batchFileRequest, token)\n\n      // Only make entity header calls to the files that the user doesn't have access to,\n      // which can be determined by whether the batchFileResult has a failure code for the\n      // corresponding download list item\n      const referenceCall: Reference[] = filesToDownload\n        .filter(el => {\n          return (\n            batchFileResult.requestedFiles.find(\n              batchFile => batchFile.fileHandleId === el.fileHandleId,\n            )!.failureCode !== undefined\n          )\n        })\n        .map(el => {\n          return { targetId: el.associateObjectId }\n        })\n      // entity header is used to get the names of the files that the user\n      // doesn't have access to\n      const references = await getEntityHeader(referenceCall, token)\n      setData({\n        references,\n        batchFileResult,\n        downloadList,\n      })\n      invokeDownloadListUpdatedEvent()\n    } catch (e) {\n      console.error('Error in DownloadList API call : ', e)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const invokeDownloadListUpdatedEvent = () => {\n    if (props.listUpdatedCallback) {\n      props.listUpdatedCallback()\n    }\n  }\n  \n  const clearDownloadList = async (\n    _event: React.SyntheticEvent<HTMLButtonElement>,\n  ) => {\n    setIsLoading(true)\n    try {\n      await deleteDownloadList(token)\n      setData({\n        downloadList: undefined,\n      })\n      invokeDownloadListUpdatedEvent()\n    } catch (err) {\n      console.error('Error on clearing download list: ', err)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const deleteFileFromList = async (\n    fileHandleId: string,\n    associateObjectId: string,\n  ) => {\n    const list: FileHandleAssociation[] = [\n      {\n        fileHandleId,\n        associateObjectId,\n        associateObjectType: FileHandleAssociateType.FileEntity,\n      },\n    ]\n    setIsLoading(true)\n    setFileBeingDeleted(fileHandleId)\n    try {\n      const downloadList = await deleteDownloadListFiles(list, token)\n      // The current references and batchFileResult can be kept because the download\n      // list drives the view, so the stale values in those two won't be viewed.\n      setData({ downloadList, references, batchFileResult })\n      invokeDownloadListUpdatedEvent()\n    } catch (err) {\n      console.error('Error on delete from download list', err)\n    } finally {\n      setFileBeingDeleted('')\n      setIsLoading(false)\n    }\n  }\n\n  const filesToDownload = (downloadList && downloadList.filesToDownload) || []\n  const results = (references && references.results) || []\n  let numBytes = 0\n  let numFiles = 0\n  return (\n    <div>\n      <div className=\"SRC-split download-list-table-top\">\n        <span className=\"create-package-text SRC-centerContentInline\">\n          Download List &nbsp;&nbsp; {isLoading && <span className=\"spinner\" />}\n        </span>\n        <button\n          className=\"SRC-primary-text-color SRC-underline-on-hover\"\n          onClick={clearDownloadList}\n          id={TESTING_CLEAR_BTN_CLASS}\n        >\n          Clear All\n        </button>\n      </div>\n      <ReactBootstrap.Table responsive={true}>\n        <thead>\n          <tr>\n            <th>File Name</th>\n            <th>Access</th>\n            <th>Created By</th>\n            <th>Created On</th>\n            <th>Size</th>\n            {/* th below is made for trash can icon but holds no content */}\n            <th />\n          </tr>\n        </thead>\n        <tbody className=\"download-list-table\">\n          {filesToDownload.map(item => {\n            let createdBy = ''\n            let createdOn = ''\n            let fileName = ''\n            let contentSize = undefined\n            const synId = item.associateObjectId\n            const fileHandleId = item.fileHandleId\n            const isCurrentlyBeingDeletedClass =\n              fileBeingDeleted === fileHandleId ? 'SRC-inactive-bg' : ''\n            // See if batch file results has this fileHandleId\n            const fileResult = requestedFiles.find(\n              fileRes => fileRes.fileHandleId === fileHandleId,\n            )\n            const fileHandle = fileResult ? fileResult.fileHandle : undefined\n            const canDownload = fileHandle !== undefined\n            if (fileHandle) {\n              // fileHandle is defined, this file is downloadable, show its metadata\n              ;({ createdBy, createdOn, fileName, contentSize } = fileHandle)\n              createdOn = moment(createdOn).format('L LT')\n              if (\n                getDownloadTypeForFileHandle(fileHandle) ===\n                FileHandleDownloadTypeEnum.Accessible\n              ) {\n                numBytes += contentSize\n                numFiles += 1\n              }\n            } else {\n              // file is not downloadable, only show its name from entity header info\n              const requestedFile = results.find(\n                req => req.id === item.associateObjectId,\n              )!\n              fileName = requestedFile.name\n            }\n            const userProfile = userProfiles.find(\n              el => el.ownerId === createdBy,\n            )\n            return (\n              <tr className={isCurrentlyBeingDeletedClass} key={fileHandleId}>\n                <td>\n                  <a\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href={`https://www.synapse.org/#!Synapse:${synId}`}\n                  >\n                    {fileName}\n                  </a>\n                </td>\n                <td>\n                  <HasAccess\n                    fileHandle={fileHandle}\n                    token={token}\n                    entityId={synId}\n                    isInDownloadList={true}\n                  />\n                </td>\n                <td>\n                  {userProfile && (\n                    <UserCard\n                      size={'SMALL USER CARD'}\n                      userProfile={userProfile}\n                      preSignedURL={userProfile.clientPreSignedURL}\n                    />\n                  )}\n                  {canDownload && !userProfile && <span className=\"spinner\" />}\n                </td>\n                <td>{createdOn}</td>\n                <td>{contentSize && calculateFriendlyFileSize(contentSize)}</td>\n                <td>\n                  <button\n                    className={TESTING_TRASH_BTN_CLASS}\n                    onClick={\n                      fileBeingDeleted === ''\n                        ? () => deleteFileFromList(fileHandleId, synId)\n                        : undefined\n                    }\n                  >\n                    <FontAwesomeIcon\n                      className=\"SRC-primary-text-color\"\n                      icon=\"trash\"\n                    />\n                  </button>\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </ReactBootstrap.Table>\n      <CreatePackage updateDownloadList={() => fetchData(token)} token={token}>\n        <DownloadDetails\n          numBytes={numBytes}\n          numFiles={numFiles}\n          token={token}\n        />\n      </CreatePackage>\n    </div>\n  )\n}\n","// EntityForm:\n// Will generate a Form (based on your schema files).\n// Gathers user input (including files)\n// Will give you the Synapse ID of the FileEntity that contains the user form data.\nimport * as React from 'react'\nimport Form from 'react-jsonschema-form'\nimport { SynapseClient } from '../utils'\nimport {\n  EntityId,\n  EntityLookupRequest,\n  FileEntity,\n  UserProfile,\n} from '../utils/synapseTypes/'\n\nexport type EntityFormProps = {\n  // Provide the parent container (folder/project), that should contain a folder (named <user_id>) that this user can write to.\n  parentContainerId: string\n  formSchemaEntityId: string // Synapse file that contains the form schema.\n  formUiSchemaEntityId: string // Synapse file that contains the form ui schema.\n  initFormData: boolean // If true, it indicates that you’d like to download and pre-fill the form with the user's previous response.\n  token?: string // user's session token\n  synIdCallback: (synId: string) => void // callback.  Once the form output has been saved to a FileEntity, will send synID back\n}\ntype EntityFormState = {\n  error?: any\n  isLoading?: boolean\n  successfullyUploaded: boolean\n  containerId?: string\n  userprofile?: UserProfile\n  currentFileEntity?: FileEntity // file holding user form data\n  formData?: any // form data that prepopulates the form\n  formSchema?: any // schema that drives the form\n  formUiSchema?: any // ui schema that directs how to render the form elements\n}\n\nexport default class EntityForm extends React.Component<\n  EntityFormProps,\n  EntityFormState\n> {\n  formRef: any\n\n  constructor(props: EntityFormProps) {\n    super(props)\n    this.formRef = React.createRef()\n    this.state = {\n      isLoading: true,\n      successfullyUploaded: false,\n    }\n  }\n\n  componentDidMount() {\n    this.refresh()\n  }\n\n  componentDidUpdate(prevProps: any) {\n    const shouldUpdate = this.props.token !== prevProps.token\n    if (shouldUpdate) {\n      this.refresh()\n    }\n  }\n\n  submitForm = () => {\n    this.formRef.current.submit()\n  }\n\n  refresh = () => {\n    if (this.props.token) {\n      const promises = [\n        SynapseClient.getUserProfile(this.props.token),\n        SynapseClient.getEntity(\n          this.props.token,\n          this.props.formSchemaEntityId,\n        ),\n        SynapseClient.getEntity(\n          this.props.token,\n          this.props.formUiSchemaEntityId,\n        ),\n      ] as Promise<any>[]\n      Promise.all(promises)\n        .then(values => {\n          const userprofile: UserProfile = values[0]\n          this.getTargetContainer(userprofile, this.props.token!).then(\n            // @ts-ignore\n            (targetContainerId: string) => {\n              const formSchemaFileEntity: FileEntity = values[1]\n              const formUiSchemaFileEntity: FileEntity = values[2]\n              this.getSchemaFileContent(\n                targetContainerId,\n                formSchemaFileEntity,\n                formUiSchemaFileEntity,\n              )\n            },\n          )\n        })\n        .catch(error => {\n          this.onError(error)\n        })\n    }\n  }\n\n  getSchemaFileContent = (\n    targetFolderId: string,\n    formSchemaFileEntity: FileEntity,\n    formUiSchemaFileEntity: FileEntity,\n  ) => {\n    const promises = [\n      SynapseClient.getFileEntityContent(\n        this.props.token!,\n        formSchemaFileEntity,\n      ),\n      SynapseClient.getFileEntityContent(\n        this.props.token!,\n        formUiSchemaFileEntity,\n      ),\n    ]\n    Promise.all(promises)\n      .then(values => {\n        const formSchemaContent = JSON.parse(values[0])\n        const formUiSchemaContent = JSON.parse(values[1])\n        this.getExistingFileData(\n          targetFolderId,\n          formSchemaContent,\n          formUiSchemaContent,\n        )\n      })\n      .catch(error => {\n        this.onError(error)\n      })\n  }\n\n  getExistingFileData = (\n    targetFolderId: string,\n    formSchemaContent: any,\n    formUiSchemaContent: any,\n  ) => {\n    // if data already exists, save a reference to the existing entity and prefill the form\n    const fileName = `${formSchemaContent.title}.json`\n    const entityLookupRequest = {\n      entityName: fileName,\n      parentId: targetFolderId,\n    }\n    let formData: any\n    let currentFileEntity: FileEntity\n    SynapseClient.lookupChildEntity(entityLookupRequest, this.props.token)\n      .then((entityId: EntityId) => {\n        // ok, found the existing file\n        return SynapseClient.getEntity<FileEntity>(\n          this.props.token,\n          entityId.id,\n        ).then(entity => {\n          currentFileEntity = entity\n          if (this.props.initFormData) {\n            return SynapseClient.getFileEntityContent(\n              this.props.token!,\n              currentFileEntity,\n            ).then(existingFileData => {\n              formData = JSON.parse(existingFileData)\n            })\n          }\n          // else we're done\n          return Promise.resolve()\n        })\n      })\n      .finally(() => {\n        this.setState({\n          formData,\n          currentFileEntity,\n          formSchema: formSchemaContent,\n          formUiSchema: formUiSchemaContent,\n        })\n      })\n  }\n\n  getTargetContainer = async (userprofile: UserProfile, token: string) => {\n    const entityLookupRequest: EntityLookupRequest = {\n      entityName: userprofile.ownerId,\n      parentId: this.props.parentContainerId,\n    }\n    try {\n      const entityId = await SynapseClient.lookupChildEntity(\n        entityLookupRequest,\n        token,\n      )\n      // ok, found an entity of the same name.\n      console.log(\n        `EntityForm uploading to https://www.synapse.org/#!Synapse:${entityId.id}`,\n      )\n      this.setState({\n        userprofile,\n        containerId: entityId.id,\n        isLoading: false,\n      })\n      return entityId.id\n    } catch (error) {\n      if (error.status === 404) {\n        return this.onError(\n          new Error(\n            'Your folder has not yet been set up, please retry in a few minutes.',\n          ),\n        )\n      }\n      // else\n      return this.onError(error)\n    }\n  }\n\n  finishedProcessing = () => {\n    this.setState({\n      isLoading: false,\n      successfullyUploaded: true,\n    })\n  }\n\n  onError = (error: any) => {\n    this.setState({\n      error,\n      isLoading: false,\n      successfullyUploaded: false,\n    })\n  }\n\n  onSubmit = ({ formData }: any) => {\n    this.setState({\n      isLoading: true,\n      successfullyUploaded: false,\n    })\n\n    const submissionFileAndForm: Blob = new Blob([JSON.stringify(formData)], {\n      type: 'text/json',\n    })\n    this.createEntityFile(submissionFileAndForm)\n  }\n\n  createEntityFile = (fileContentsBlob: Blob) => {\n    const fileName = `${this.state.formSchema.title}.json`\n    SynapseClient.uploadFile(this.props.token, fileName, fileContentsBlob)\n      .then(fileUploadComplete => {\n        // do we need to create a new file entity, or update an existing file entity?\n        const newFileHandleId = fileUploadComplete.fileHandleId\n        if (this.state.currentFileEntity) {\n          this.state.currentFileEntity.dataFileHandleId = newFileHandleId\n          return SynapseClient.updateEntity(\n            this.state.currentFileEntity,\n            this.props.token,\n          )\n        }\n        // else, it's a new file entity\n        const newFileEntity: FileEntity = {\n          parentId: this.state.containerId!,\n          name: fileName,\n          concreteType: 'org.sagebionetworks.repo.model.FileEntity',\n          dataFileHandleId: newFileHandleId,\n        }\n        return SynapseClient.createEntity(newFileEntity, this.props.token)\n      })\n      .then(fileEntity => {\n        // by this point we've either found and updated the existing file entity, or created a new one.\n        this.finishedProcessing()\n        if (this.props.synIdCallback) {\n          this.props.synIdCallback(fileEntity.id!)\n        }\n      })\n      .catch((error: any) => {\n        this.onError(error)\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.error && (\n          <div className=\"panel panel-danger errors\">\n            <div className=\"panel-heading\">\n              <h3 className=\"panel-title\">Error</h3>\n            </div>\n            <ul className=\"list-group\">\n              <li className=\"list-group-item text-danger\">\n                {this.state.error.name} {this.state.error.reason}\n                {this.state.error.message}\n              </li>\n            </ul>\n          </div>\n        )}\n        {this.props.token &&\n          !this.state.isLoading &&\n          !this.state.successfullyUploaded &&\n          this.state.formSchema &&\n          this.state.formUiSchema &&\n          !this.state.error && (\n            <Form\n              formData={this.state.formData}\n              schema={this.state.formSchema}\n              uiSchema={this.state.formUiSchema}\n              onSubmit={this.onSubmit}\n              showErrorList={true}\n              ref={this.formRef}\n            >\n              <div style={{ display: 'none' }}>\n                <button type=\"submit\" className=\"btn btn-info\">\n                  Submit\n                </button>\n              </div>\n            </Form>\n          )}\n        {!this.state.error && this.props.token && this.state.isLoading && (\n          <React.Fragment>\n            <span>Saving&hellip;</span>\n            <span style={{ marginLeft: '2px' }} className={'spinner'} />\n          </React.Fragment>\n        )}\n      </div>\n    )\n  }\n}\n","export enum StepStateEnum {\n  TODO,\n  PROGRESS,\n  COMPLETED,\n  EXCLUDED,\n  ERROR,\n}\n\nexport type Step = {\n  id: string\n  title: string\n  order: number\n  state: StepStateEnum\n  inProgress: boolean\n  rules?: any[]\n  validationRules?: any[]\n  default: string\n  excluded?: boolean\n  final?: boolean\n  description?: string\n  copy?: string\n  static?: boolean\n  child?: boolean\n  children?: string[]\n}\n\nexport enum NavActionEnum {\n  PREVIOUS,\n  NEXT,\n  GO_TO_STEP,\n  SAVE,\n  SUBMIT,\n  VALIDATE,\n  NONE,\n}\n\nexport enum StatusEnum {\n  PROGRESS,\n  ERROR,\n  SAVE_SUCCESS,\n  SUBMIT_SUCCESS,\n  ERROR_CRITICAL,\n}\n\nexport interface SummaryFormat {\n  screen: Step\n  label: string\n  value: string\n}\n\nexport type FormSchema = {\n  properties?: any\n  definitions?: any\n}\n\nexport interface IRulesEvent {\n  type: string\n  params: any\n}\nexport interface IRulesNavigationEvent extends IRulesEvent {\n  params: {\n    next: string\n  }\n}\n\nexport interface IRulesValidationEvent extends IRulesEvent {\n  params: {\n    message: string\n    name: string\n    property: string\n  }\n}\n\nexport type RulesResult = {\n  events: IRulesNavigationEvent[] | IRulesValidationEvent[]\n}\n\nexport interface IAdditionalError {\n  screen: string\n  field: string\n  message: string\n}\n","import * as React from 'react'\n\nexport type HeaderProps = {\n  isSubmitted?: boolean\n  bodyText?: string //should never take user input only use cardcoded text from a parent component. Uses dangerouslySetInnerHTML\n  title: string\n}\n\nexport default function Header(props: HeaderProps) {\n  let bodyText = <></>\n\n  if (props.isSubmitted) {\n    bodyText = <div>Your information has been submitted</div>\n  } else {\n    if (props.bodyText) {\n      bodyText = (\n        <div dangerouslySetInnerHTML={{ __html: props.bodyText }}></div>\n      )\n    }\n  }\n\n  return (\n    <div\n      className={`submission-header${props.isSubmitted ? ' submitted' : ''}`}\n    >\n      <h2>{props.title}</h2>\n      {bodyText}\n      <hr></hr>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { Step, StepStateEnum } from './types'\n\nimport { FlipProp, IconDefinition } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faCheckCircle,\n  faCircle,\n  faBan,\n  faExclamationCircle,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nexport type StepsSideNavProps = {\n  stepList: Step[]\n  onStepChange: Function\n  isWizardMode?: boolean\n}\n\nexport default function StepsSideNav(props: StepsSideNavProps) {\n  const nonChildSteps = props.stepList.filter(step => step.child !== true)\n\n  const getIcon = (\n    state: StepStateEnum,\n    isExcluded: boolean | undefined,\n    isStatic: boolean | undefined,\n    isSubmit: boolean | undefined,\n  ): { iconDef: IconDefinition; flip: FlipProp | undefined } => {\n    let iconDef: IconDefinition = faCircle\n    let flip: FlipProp | undefined = undefined\n    if (isStatic || isSubmit) {\n      return {\n        iconDef,\n        flip,\n      }\n    }\n\n    if (isExcluded) {\n      iconDef = faBan\n      flip = 'horizontal'\n    } else if (state == StepStateEnum.COMPLETED) {\n      iconDef = faCheckCircle\n    } else if (state == StepStateEnum.ERROR) {\n      iconDef = faExclamationCircle\n    }\n    return { iconDef, flip }\n  }\n\n  const getItemClass = (\n    isInProgress: boolean,\n    isStatic: boolean = false,\n  ): string => {\n    let liClassName = 'item'\n    if (isInProgress) {\n      liClassName = `${liClassName} pointed `\n    }\n    if (isStatic) {\n      liClassName = `${liClassName} static`\n    }\n    return liClassName\n  }\n\n  const getListItem = (\n    step: Step,\n    isWizard: boolean,\n    isRenderChild = false,\n  ): JSX.Element => {\n    if (!step || (step.child && !isRenderChild)) {\n      return <></>\n    }\n    const renderStepName = (\n      step: Step,\n      isWizard: boolean,\n      callback: Function,\n    ): JSX.Element => {\n      if (!step.inProgress && (!isWizard || !!step.final)) {\n        return (\n          <button className=\"btn btn-link\" onClick={() => callback(step)}>\n            {step.title}\n          </button>\n        )\n      } else {\n        return <span>{step.title}</span>\n      }\n    }\n    const icon = getIcon(step.state, step.excluded, step.static, step.final)\n    const itemClass = getItemClass(step.inProgress, step.static)\n\n    return (\n      <div className={itemClass}>\n        <FontAwesomeIcon icon={icon.iconDef} flip={icon.flip} />\n        {renderStepName(step, isWizard, props.onStepChange)}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"SRC-menuLayout json-forms-menu\" style={{ flex: '1' }}>\n      <ul>\n        {nonChildSteps.map((step: Step, i: number) => {\n          return (\n            <li className=\"item-wrap\" key={i + step.id}>\n              {getListItem(step, !!props.isWizardMode)}\n              {step.children && step.children.length > 0 && (\n                <div className=\"subMenu\">\n                  <ul>\n                    {step.children &&\n                      step.children.map((stepChildId: string, j: number) => {\n                        const childStep = props.stepList.find(\n                          step => step.id === stepChildId,\n                        )\n                        return typeof childStep === 'undefined' ? (\n                          <></>\n                        ) : (\n                          <li className=\"item-wrap\" key={j + stepChildId}>\n                            {getListItem(childStep, !!props.isWizardMode, true)}\n                          </li>\n                        )\n                      })}\n                  </ul>\n                </div>\n              )}\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { Step, NavActionEnum } from './types'\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nexport interface NavButtonsProps {\n  isWizardMode?: boolean\n  previousStepIds: string[]\n  onNavAction: Function\n  steps: Step[]\n  currentStep: Step\n  isFormSubmitted?: boolean\n}\n\nexport interface NextStepLinkProps {\n  onNavAction: Function\n  steps: Step[]\n  nextStepId: string | undefined\n}\n\nexport function NavButtons(props: NavButtonsProps): JSX.Element {\n  // in wizard mode we build an array of the previous steps. In regular mode back goes to\n  // a previous order step\n  const canGoBack = (props: NavButtonsProps): boolean => {\n    if (props.isWizardMode) {\n      return props.previousStepIds && props.previousStepIds.length > 0\n    } else {\n      return props.steps.findIndex(step => step.id === props.currentStep.id) > 0\n    }\n  }\n\n  const previousButton = canGoBack(props) ? (\n    <button\n      type=\"button\"\n      onClick={e => props.onNavAction(NavActionEnum.PREVIOUS)}\n      className=\"btn btn-link nav-link prev\"\n    >\n      <FontAwesomeIcon icon={faChevronLeft} />\n    </button>\n  ) : (\n    <></>\n  )\n\n  const nextButton = !props.currentStep.final ? (\n    <button\n      type=\"button\"\n      onClick={e => props.onNavAction(NavActionEnum.NEXT)}\n      className=\"btn btn-link nav-link next\"\n    >\n      <FontAwesomeIcon icon={faChevronRight} />\n    </button>\n  ) : (\n    <></>\n  )\n\n  const saveButton = (\n    <button\n      type=\"button\"\n      className=\"btn btn-action save\"\n      disabled={props.isFormSubmitted}\n      onClick={e => props.onNavAction(NavActionEnum.SAVE)}\n    >\n      SAVE\n    </button>\n  )\n\n  return (\n    <div>\n      <hr></hr>\n      <div className=\"buttonWrapper pull-right\">\n        {previousButton} {nextButton} {saveButton}\n      </div>\n    </div>\n  )\n}\n\nexport function NextStepLink(props: NextStepLinkProps): JSX.Element {\n  const nextStep = props.steps.find(step => step.id === props.nextStepId)\n  if (typeof nextStep === 'undefined') {\n    return <></>\n  }\n  return (\n    <span className=\"nav-link\">\n      <a onClick={e => props.onNavAction(nextStep)}>{nextStep.title}</a>\n      <FontAwesomeIcon icon={faChevronRight}></FontAwesomeIcon>\n    </span>\n  )\n}\n","import * as React from 'react'\n\ninterface DataDebugProps {\n  formData: any\n  hidden: boolean\n}\n\nexport default function DataDebug(props: DataDebugProps) {\n  const myData = (\n    <div>\n      <h6>Data</h6>\n      <pre>{JSON.stringify(props.formData, null, 2)}</pre>\n    </div>\n  )\n  return <>{!props.hidden && myData}</>\n}\n","import * as React from 'react'\n\nimport { UiSchema } from 'react-jsonschema-form'\nimport { SummaryFormat, Step, FormSchema } from './types'\nimport {\n  first,\n  cloneDeep,\n  keys,\n  find,\n  isObject,\n  get,\n  isArray,\n  isString,\n  isDate,\n} from 'lodash-es'\n\nexport interface SummaryTableProps {\n  isWizard?: boolean\n  formData: any\n  callbackFn?: Function\n  steps: Step[]\n  schema: FormSchema\n  uiSchema: UiSchema\n}\n\nfunction findLabel(key: string, schema: any, uiSchema: UiSchema): string {\n  const regex1 = /\\[\\d+\\]\\./g\n  const regex3 = /\\.(\\d)+/g\n\n  key = key.replace(regex3, '[$1]')\n\n  const propArr = key.split('.')\n  // some things require labels in schema (e.g. checkboxes) so this is preferred\n  const labelFromSchema = `${propArr.join('.properties.')}.title`\n  //can be overriden by label in UI\n  const labelFromUi = `${key}.ui:title`\n  //for array fields we need to change the property e.g.\n  //  ld50.experiments[0].species_other should look like 'ld50.experiments.items.species_other'\n  const arrayLabelFromSchema = labelFromSchema.replace(regex1, '.items.')\n  const arrayLabelFromUiSchema = labelFromUi.replace(regex1, '.items.')\n  const indexMatch = labelFromSchema.match(regex1)\n  let index = first(indexMatch)\n\n  if (index) {\n    index = index.substring(1, index.length - 2)\n    index = !isNaN(parseInt(index)) ? parseInt(index) + 1 + '' : ''\n  }\n\n  const label =\n    get(uiSchema, labelFromUi) ||\n    get(schema.properties, labelFromSchema) ||\n    get(uiSchema, arrayLabelFromUiSchema) ||\n    get(schema.properties, arrayLabelFromSchema) ||\n    `${arrayLabelFromSchema}`\n  return `${index ? '[' + index + '] ' : ''}${label}`\n}\n\nexport function getFlatData(\n  formData: any,\n  steps: Step[],\n  schema: FormSchema,\n  uiSchema: UiSchema,\n): SummaryFormat[] {\n  //takes nested json and converts it into flattened item list\n\n  function flatten(\n    object: any,\n    flattenedObject: any,\n    prefix: string,\n  ): string[] {\n    const separator = '.'\n    Object.keys(object).forEach(key => {\n      if (object[key] === null) {\n        flattenedObject[prefix + key] = ''\n      } else if (\n        //if the value is a proper array\n        isArray(object[key]) &&\n        !isString(object[key])\n      ) {\n        for (const i in object[key]) {\n          if (\n            isArray(object[key][i]) ||\n            (isObject(object[key]) && !isString(object[key][i]))\n          ) {\n            flatten(\n              object[key][i],\n              flattenedObject,\n              `${prefix}${key}[${i}]${separator}`,\n            )\n          } else {\n            let prevVal = flattenedObject[`${prefix}${key}`]\n            prevVal = prevVal ? prevVal + ', ' : ''\n            flattenedObject[`${prefix}${key}`] = prevVal + object[key][i]\n          }\n        }\n      } else if (isObject(object[key]) && !isDate(object[key])) {\n        flatten(object[key], flattenedObject, `${prefix}${key}${separator}`)\n      } else {\n        flattenedObject[prefix + key] = object[key]\n      }\n    })\n    return flattenedObject\n  }\n\n  const flatData = flatten(cloneDeep(formData), [], '')\n  const flatFormData = keys(flatData)\n    .map(key => {\n      let val = flatData[key]\n      if (flatData[key] === false) {\n        val = 'false'\n      }\n      if (flatData[key] === true) {\n        val = 'true'\n      }\n      const boundary = key.indexOf('.')\n      return {\n        screen: find(steps, { id: key.substring(0, boundary) }),\n        label: findLabel(key, schema, uiSchema),\n        value: val,\n      }\n    })\n    .filter(item => item.label.indexOf('.properties.included.title') === -1) //included is the property we generate to help with validation of optional forms\n\n  const result = flatFormData\n    .filter(item => item.screen && typeof item.value !== 'undefined')\n    .map(item => {\n      return {\n        label: item.label,\n        value: item.value,\n        screen: item.screen!,\n      }\n    })\n    .sort((a, b) => a.screen.order - b.screen.order)\n\n  return result\n}\n\nexport default function SummaryTable(props: SummaryTableProps): JSX.Element {\n  let flatFormData: SummaryFormat[] = []\n\n  flatFormData = getFlatData(\n    cloneDeep(props.formData),\n    props.steps,\n    props.schema,\n    props.uiSchema,\n  )\n\n  let prevScreenId = ''\n  const table = (\n    <>\n      <table className=\"table summary-table-header\">\n        <thead>\n          <tr>\n            <th>Step</th>\n            <th>Label</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n      </table>\n\n      <div className=\"scroll-area table-body\">\n        <table className=\"table summary-table\">\n          <tbody>\n            {flatFormData.map((line: SummaryFormat, i: number) => {\n              return (\n                <tr key={i + line.screen.id + line.label}>\n                  <td>\n                    {prevScreenId !== line.screen.id &&\n                      (prevScreenId = line.screen.id) && (\n                        <span>{line.screen.title}</span>\n                      )}\n                  </td>\n                  <td>{line.label}</td>\n\n                  <td>{line.value}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    </>\n  )\n\n  return (\n    <>\n      <p className=\"step-exclude-directions\">\n        Below is all of the data you have entered. Before submitting, click\n        'Validate' to ensure that all of the required data has been entered.\n      </p>\n      <button className=\"nav-link pull-right\" onClick={() => window.print()}>\n        Print this data\n      </button>\n      <div className=\"panel panel-default padding-full wrap\">\n        <div className=\"summary scroll-area\">{table}</div>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\n\nexport type WarningModalProps = {\n  title: string\n  copy: string | JSX.Element\n  confirmCopy?: string\n  className?: string\n  show: boolean\n  onOK: Function\n  onCancel: Function\n  callbackArgs: any\n}\n\nexport default function WarningModal(props: WarningModalProps) {\n  return (\n    <Modal show={props.show} animation={false} className={props.className}>\n      <Modal.Header closeButton={false} onHide={() => props.onCancel()}>\n        <Modal.Title>{props.title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{props.copy}</Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={() => props.onCancel()}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"success\"\n          onClick={() => props.onOK(...props.callbackArgs)}\n        >\n          <span>{props.confirmCopy || 'OK'}</span>\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}\n","import * as React from 'react'\nimport _ from 'lodash-es'\nimport { Engine } from 'json-rules-engine'\nimport {\n  default as Form,\n  UiSchema,\n  AjvError,\n  ErrorListProps,\n} from 'react-jsonschema-form'\n\nimport {\n  Step,\n  StepStateEnum,\n  NavActionEnum,\n  StatusEnum,\n  FormSchema,\n  RulesResult,\n  IRulesValidationEvent,\n  IRulesNavigationEvent,\n} from './types'\nimport Header from './Header'\nimport StepsSideNav from './StepsSideNav'\nimport { NavButtons, NextStepLink } from './NavButtons'\nimport DataDebug from './DataDebug'\nimport SummaryTable from './SummaryTable'\nimport WarningModal from './WarningModal'\nimport Switch from 'react-switch'\nimport { Prompt } from 'react-router-dom'\n\nexport interface IFormData {\n  [key: string]: {\n    included?: boolean\n    [key: string]: any\n  }\n}\n\nexport type SynapseFormProps = {\n  schema: FormSchema\n  uiSchema: UiSchema\n  navSchema: {\n    steps: any[]\n  }\n  formData: IFormData\n  onSubmit: Function\n  onSave: Function\n  formTitle: string\n  formClass?: string\n  isWizardMode?: boolean\n  callbackStatus?: StatusEnum\n  isSubmitted?: boolean\n}\n\ntype SynapseFormState = {\n  formData: IFormData // form data that prepopulates the form\n  currentStep: Step\n  nextStep?: Step\n  steps: Step[]\n  previousStepIds: string[]\n  hasValidated?: boolean //validation has been called and it passed\n  doShowErrors: boolean //if we should show error summary at the top of the page\n  doShowHelp: boolean\n  modalContext?: { action: Function; arguments: any[] }\n  hasUnsavedChanges: boolean\n  isSubmitted?: boolean\n  isLoadingSaved: boolean\n}\n\nexport interface SummaryFormat {\n  label: string\n  value: string\n}\n\nexport default class SynapseForm extends React.Component<\n  SynapseFormProps,\n  SynapseFormState\n> {\n  excludeWarningText = (\n    <div>\n      <p>\n        This action will clear any entered data on this page and remove this\n        form from your submission. You can include it again at anytime. Only\n        this page will be affected.\n      </p>\n      <p>Are you sure you want to skip this step and clear any entered data?</p>\n    </div>\n  )\n  excludeWarningHeader = 'Skip This Step?'\n  unsavedDataWarning = `You might have some unsaved data. Are you sure you want to leave?`\n  formRef: any //ref to form for submission\n  formDivRef: any // ref to the div containing form (for scrolling on validation failure)\n  navAction: NavActionEnum = NavActionEnum.NONE\n  uiSchema: {}\n  nextStep: Step | undefined\n  extraErrors: AjvError[] = []\n\n  isNewForm = (formData: IFormData): boolean => {\n    return (\n      (Object.keys(formData).length == 1 &&\n        Object.keys(formData)[0] === 'metadata') ||\n      Object.keys(formData).length == 0\n    )\n  }\n\n  getFirstStep = (steps: Step[], formData: IFormData): Step => {\n    if (!this.isNewForm(formData)) {\n      return steps.find(step => step.final === true) || steps[0]\n    } else {\n      return steps[0]\n    }\n  }\n\n  constructor(props: SynapseFormProps) {\n    super(props)\n\n    //will modify the ui:help to render html vs text\n    this.uiSchema = stringToElementForProp(\n      _.cloneDeep(props.uiSchema),\n      'ui:help',\n    )\n    //create steps array from the navSchema\n    const steps = props.navSchema.steps\n      .map((step, i) => {\n        return {\n          ...step,\n          inProgress: i === 0 ? true : false,\n        }\n      })\n      .sort((a, b) => a.order - b.order)\n\n    this.formRef = React.createRef()\n    this.formDivRef = React.createRef()\n    const currentStep = this.getFirstStep(steps, props.formData)\n    this.state = {\n      currentStep,\n      steps,\n      previousStepIds: [],\n      formData: props.formData,\n      doShowErrors: false,\n      doShowHelp: true,\n      hasUnsavedChanges: false,\n      isSubmitted: props.isSubmitted,\n      isLoadingSaved: !this.isNewForm(this.props.formData),\n    }\n  }\n\n  onUnload = (ev: any) => {\n    {\n      if (this.state.hasUnsavedChanges) {\n        ev.preventDefault()\n        return (ev.returnValue = this.unsavedDataWarning)\n      }\n      return\n    }\n  }\n  // Setup the `beforeunload` event listener\n  setupBeforeUnloadListener = () => {\n    window.addEventListener('beforeunload', this.onUnload)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onUnload)\n  }\n\n  componentDidUpdate(prevProps: SynapseFormProps) {\n    const shouldUpdate = this.props.callbackStatus !== prevProps.callbackStatus\n    const isSuccess =\n      this.props.callbackStatus === StatusEnum.SAVE_SUCCESS ||\n      this.props.callbackStatus === StatusEnum.SUBMIT_SUCCESS\n    if (shouldUpdate && isSuccess) {\n      this.setState({ hasUnsavedChanges: false })\n      if (this.props.callbackStatus === StatusEnum.SUBMIT_SUCCESS) {\n        this.setState({ isSubmitted: true })\n        window.history.back()\n      }\n    }\n  }\n\n  _setIncludedPropInFormDataNonWizard = (\n    currentState: SynapseFormState,\n    schemaScreens: any,\n  ): IFormData => {\n    const result = {}\n    const currentStateFormData = currentState.formData\n    //if there is a top level 'included' property in schema - update the form.\n    Object.keys(schemaScreens).forEach((key: string) => {\n      if (_.get(schemaScreens[key], `properties.included`)) {\n        _.set(result, `${key}.included`, true)\n      }\n    })\n    return { ...currentStateFormData, ...result }\n  }\n\n  _setIncludedPropInFormDataWizard = (\n    currentState: SynapseFormState,\n  ): IFormData => {\n    const firstStepId = currentState.currentStep.id\n    const newStateData = _.cloneDeep(currentState.formData)\n    _.set(newStateData, `${firstStepId}.included`, true)\n    return newStateData\n  }\n\n  componentDidMount() {\n    this.setupBeforeUnloadListener()\n    const isNewForm = this.isNewForm(this.state.formData)\n    if (!isNewForm) {\n      //when loading saved form - validate to see the steps status\n      this.triggerAction(NavActionEnum.VALIDATE)\n    } else {\n      // for validation of optional forms. Validation is enforced only if included property is set.\n      this.setState(prevState => {\n        const newFormData = this.props.isWizardMode\n          ? this._setIncludedPropInFormDataWizard(prevState)\n          : this._setIncludedPropInFormDataNonWizard(\n              prevState,\n              this.props.schema,\n            )\n        return {\n          formData: newFormData,\n        }\n      })\n    }\n  }\n\n  // get the schema slice for the current screen/step\n  getSchema = ({ id, final }: Step): FormSchema => {\n    if (final) {\n      return this.props.schema\n    }\n    //only get schema for current step. Only the portion of entire form is shown\n\n    const currentStepSlice = _.pick(this.props.schema, [\n      'title',\n      'type',\n      `properties.${id}`,\n    ])\n    return currentStepSlice\n  }\n\n  // find the next step\n  getNextStepId = async (\n    currentStep: Step,\n    formData: any,\n    nextStepId?: string,\n  ): Promise<string> => {\n    if (nextStepId) {\n      return nextStepId\n    }\n    if (!currentStep.rules || currentStep.rules.length === 0) {\n      return currentStep.default\n    }\n\n    // if there are rules - run the engine and go to the first next step\n    const engine = new Engine(currentStep.rules)\n\n    try {\n      const result: RulesResult = await engine.run(formData)\n      if (result.events.length > 0) {\n        return (result.events[0] as IRulesNavigationEvent).params.next\n      } else {\n        return currentStep.default\n      }\n    } catch (error) {\n      return currentStep.default\n    }\n  }\n\n  // called when going next, previous or a given step\n  moveStep = async (\n    formData: any,\n    nextStepId: string | undefined,\n    isError: boolean,\n    previousStack = [...this.state.previousStepIds],\n  ) => {\n    const currentStep = this.state.currentStep\n    let currentStepState: StepStateEnum\n    //we don't wnat to display errors on the page - this will be done explicitly in validation\n    this.formRef.current.setState({ errorSchema: {} })\n    //in wizard mode we can only move forwards (don't know next step yet) or backwards (do know next step)\n    const isMoveForwardInWizardMode = this.props.isWizardMode && !nextStepId\n\n    //previousStack is used for 'back' navigation is wizard mode.\n    //only need to do it if moving forward i.e. nextStepId is undefined\n    if (isMoveForwardInWizardMode) {\n      previousStack.push(currentStep.id)\n    }\n\n    if (!isError) {\n      currentStepState = StepStateEnum.COMPLETED\n\n      if (!isMoveForwardInWizardMode && this.props.isWizardMode) {\n        currentStepState = StepStateEnum.TODO\n      }\n    } else {\n      currentStepState = StepStateEnum.ERROR\n    }\n    // determine next step\n    nextStepId = await this.getNextStepId(currentStep, formData, nextStepId)\n\n    const steps = this.state.steps.map(step => {\n      if (step.id === currentStep.id) {\n        return {\n          ...step,\n          ...{ state: currentStepState, inProgress: false },\n        }\n      } else if (step.id === nextStepId) {\n        return { ...step, ...{ inProgress: true } }\n      }\n      return step\n    })\n    //if we are in wizard mode we want to make sure that we include the step we are about to go to\n    if (isMoveForwardInWizardMode) {\n      _.set(formData, `${nextStepId}.included`, true)\n    }\n\n    //at this point the form is valid and submitted and the data reflects the latest\n    const nextStep = this.state.steps.find(step => step.id === nextStepId)!\n    // clean up unused screens in wizard before getting to submit\n    if (this.props.isWizardMode && nextStep.final) {\n      Object.keys(formData).forEach(key => {\n        if (formData[key].included === undefined) {\n          formData[key] = {}\n        }\n      })\n    }\n\n    this.saveStepState(previousStack, steps, nextStep!, formData)\n  }\n\n  //save the state of the current screen\n  saveStepState = (\n    previousStepIds: string[],\n    steps: Step[],\n    currentStep: Step,\n    formData: any,\n  ) => {\n    this.setState({\n      previousStepIds,\n      steps,\n      currentStep,\n      formData,\n      hasValidated: false,\n      doShowErrors: false,\n    })\n  }\n\n  //--------- fns to support navigation --------------------//\n  goPrevious = async (formData: any, isError: boolean) => {\n    let previousStepId: string | undefined\n    const previousStack: string[] = [...this.state.previousStepIds]\n    // in wizard mode we go to the previously visited screen.\n    // In regular mode go to the screen with previous index\n    if (this.props.isWizardMode) {\n      previousStepId = previousStack.pop()\n      if (!this.isSubmitScreen()) {\n        //since we don't know if we'll get back to that step again - exclude it. We will include it again if we\n        // get to it.\n        _.set(formData, `${this.state.currentStep.id}.included`, undefined)\n      }\n    } else {\n      const currentIndex = _.findIndex(this.state.steps, {\n        id: this.state.currentStep.id,\n      })\n      if (currentIndex > 0) {\n        previousStepId = this.state.steps[currentIndex - 1].id\n      }\n    }\n    if (!_.isUndefined(previousStepId)) {\n      return this.moveStep(formData, previousStepId, isError, previousStack)\n    }\n  }\n\n  triggerAction = async (navAction: NavActionEnum) => {\n    // we don't need to validate on save so bypassing submit\n    if (navAction === NavActionEnum.SAVE) {\n      return this.props.onSave(this.state.formData)\n    } else {\n      this.navAction = navAction\n      // first run whatever custom validaton we have\n      this.extraErrors = await this.runCustomValidation(\n        this.state.formData,\n        this.state.currentStep,\n        this.state.steps,\n      )\n      if (this.formRef.current) {\n        this.formRef.current.submit()\n      }\n    }\n  }\n\n  // triggered when we click on the step name in left nav (doesn't happen in wizard mode)\n  triggerStepChange = (step: Step) => {\n    this.nextStep = step\n    this.triggerAction(NavActionEnum.GO_TO_STEP)\n  }\n\n  onError = (args: any) => {\n    this.setState({\n      doShowErrors: true,\n      hasValidated: false,\n    })\n    if (this.navAction === NavActionEnum.VALIDATE) {\n      const modifiedSteps = this.setStepStatusForFailedValidation(\n        args.props,\n        this.state.steps,\n        !!this.props.isWizardMode,\n        this.state.formData,\n        this.getSchema(this.state.currentStep).properties ||\n          this.getSchema(this.state.currentStep),\n      )\n      this.setState({ steps: modifiedSteps })\n      this.formDivRef.current.scrollTo(0, 0)\n      if (this.state.isLoadingSaved) {\n        this.moveStep(this.state.formData, modifiedSteps[0].id, true)\n        this.setState({ isLoadingSaved: false })\n      }\n    }\n  }\n\n  setStepStatusForFailedValidation = (\n    errors: AjvError[],\n    steps: Step[],\n    isWizard: boolean,\n    formData: IFormData,\n    currentSchemaProperties: any,\n  ): Step[] => {\n    //error property is in the format: step.somevalue.etc  .welcome.submission_name example\n    //find all the steps where there is an error\n    const stepsWithError = errors.map(\n      error => _.trimStart(error.property, '.').split('.')[0],\n    )\n    //find all steps in current schema\n    const stepsInCurrentSchema = Object.keys(currentSchemaProperties)\n    const updatedSteps: Step[] = steps.map(step => {\n      //if there is an error in this step\n      if (stepsWithError.indexOf(step.id) > -1) {\n        return {\n          ...step,\n          state: StepStateEnum.ERROR,\n        }\n        //if no error and included in schema\n      } else if (stepsInCurrentSchema.indexOf(step.id) > -1) {\n        let state = StepStateEnum.COMPLETED\n        //if we are in wizard and possibly have not visited this step\n        if (isWizard && !_.get(formData[step.id], 'included')) {\n          state = step.state\n        }\n\n        return {\n          ...step,\n          state: state,\n        }\n      } else {\n        return step\n      }\n    })\n    return updatedSteps\n  }\n\n  //we are constantly saving form data. Needed to overwrite on-error behavior\n  handleOnChange({ formData }: any) {\n    //this is just for form updates. submit screen goes different route\n    if (!this.isSubmitScreen() && !this.state.currentStep.excluded) {\n      const hasUnsavedChanges = !_.isEqual(this.state.formData, formData)\n      this.setState({ formData, hasUnsavedChanges })\n    }\n  }\n\n  performAction(navAction: NavActionEnum, hasError: boolean) {\n    const formData = this.state.formData\n\n    switch (navAction) {\n      case NavActionEnum.NEXT: {\n        return this.moveStep(formData, undefined, hasError)\n      }\n      case NavActionEnum.PREVIOUS: {\n        return this.goPrevious(formData, hasError)\n      }\n      case NavActionEnum.GO_TO_STEP: {\n        //nextStep is returned when clicked on the Steps left nav\n        if (!this.nextStep) {\n          return\n        }\n        return this.moveStep(formData, this.nextStep.id, hasError)\n      }\n\n      case NavActionEnum.SUBMIT: {\n        this.props.onSubmit(formData)\n        return\n      }\n      case NavActionEnum.VALIDATE: {\n        //we get here is we clicked validate and the data is valid.\n        // if it's not valid we handle it in onError fn\n        const steps = this.setStepStatusForFailedValidation(\n          [],\n          this.state.steps,\n          !!this.props.isWizardMode,\n          this.state.formData,\n          this.getSchema(this.state.currentStep).properties ||\n            this.getSchema(this.state.currentStep),\n        )\n        const currentStep = {\n          ...this.state.currentStep,\n          state: StepStateEnum.COMPLETED,\n        }\n\n        this.setState({ hasValidated: true, currentStep, steps })\n        if (this.state.isLoadingSaved) {\n          this.moveStep(this.state.formData, steps[0].id, false)\n          this.setState({ isLoadingSaved: false })\n        }\n        return\n      }\n      default:\n        return\n    }\n  }\n\n  //we need to route things through submit - otherwise validation does not kick in\n  // it triggers internal library validation and calls the performAction with the params for action\n  onSubmit = (): any => {\n    this.performAction(\n      this.navAction,\n      this.state.currentStep.state === StepStateEnum.ERROR,\n    )\n  }\n\n  isSubmitScreen = (): boolean => {\n    return this.state.currentStep.final === true && !this.state.isLoadingSaved\n  }\n\n  showExcludeStateWarningModal = (\n    stepId: string,\n    isUpdateFlattenedData: boolean = false,\n  ): void => {\n    this.setState({\n      modalContext: {\n        action: this.toggleExcludeStep,\n        arguments: [stepId, true, isUpdateFlattenedData],\n      },\n    })\n  }\n\n  toggleExcludeStep = (stepId: string, isExclude: boolean): void => {\n    this.setState((prevState, props) => {\n      const steps = prevState.steps.map(stp => {\n        if (stp.id === stepId) {\n          return { ...stp, ...{ excluded: isExclude } }\n        }\n        return stp\n      })\n\n      const formDataUpdated = _.cloneDeep(prevState.formData)\n      const currentStep = _.cloneDeep(prevState.currentStep)\n      //we need this because you can exclude on the ifnal screen so the currentStep.id\n      //is not always the one we need to exclude\n      if (currentStep.id === stepId) {\n        currentStep.excluded = isExclude\n      }\n      //if exluding - blow away the data for the step\n      if (isExclude) {\n        formDataUpdated[stepId] = {}\n        //_.set(formDataUpdated, `${stepId}.included`, false);\n      } else {\n        _.set(formDataUpdated, `${stepId}.included`, true)\n      }\n      return {\n        steps,\n        formData: formDataUpdated,\n        modalContext: undefined,\n        currentStep,\n      }\n    })\n  }\n\n  private renderNotification = (status?: StatusEnum): JSX.Element => {\n    if (status === StatusEnum.SAVE_SUCCESS) {\n      return <div className=\"notification-area\"> Successfully saved </div>\n    }\n    if (status === StatusEnum.SUBMIT_SUCCESS) {\n      return <div className=\"notification-area\"> Successfully submitted </div>\n    }\n    if (status === StatusEnum.PROGRESS) {\n      return <div className=\"notification-area\"> working on it ....</div>\n    }\n    return <></>\n  }\n\n  // displays the text for screens that don't have any form data\n  private renderTextForStaticScreen = (): JSX.Element => {\n    if (!this.state.currentStep.copy) {\n      return <></>\n    }\n    const copy = this.state.currentStep.copy\n    return (\n      <div\n        className=\"static-screen\"\n        dangerouslySetInnerHTML={{ __html: copy! }}\n      />\n    )\n  }\n\n  //displays subheader for forms that can be excluded\n  renderOptionalFormSubheader = (isWizard: boolean = false): JSX.Element => {\n    if (isWizard) {\n      return <></>\n    }\n    const currentStep = this.state.currentStep\n\n    if (currentStep.excluded === true) {\n      return (\n        <div className=\"step-exclude-directions\">\n          This form is currently not included in the submission.\n          <button\n            className=\"btn btn-link\"\n            onClick={() => this.toggleExcludeStep(currentStep.id, false)}\n          >\n            INCLUDE\n          </button>\n        </div>\n      )\n    } else if (currentStep.excluded === false) {\n      return (\n        <div className=\"step-exclude-directions\">\n          This form is currently included in the submission. Enter some data if\n          you have it, or click \"Skip\".\n          <button\n            className=\"btn btn-link\"\n            onClick={() =>\n              this.showExcludeStateWarningModal(this.state.currentStep.id)\n            }\n          >\n            SKIP\n          </button>\n        </div>\n      )\n    }\n    return <></>\n  }\n\n  renderHelpToggle = (\n    currentStep: Step,\n    showHelp: boolean,\n    callbackFn: Function,\n  ): JSX.Element => {\n    if (currentStep.static || currentStep.final) {\n      return <></>\n    }\n    return (\n      <>\n        <label className=\"pull-right toggle-help-label\">\n          <span>Hide help</span>\n          <Switch\n            checkedIcon={false}\n            uncheckedIcon={false}\n            height={20}\n            width={45}\n            className=\"toggle-help\"\n            offColor=\"#ccc\"\n            onChange={() => callbackFn()}\n            checked={showHelp}\n          />\n          <span>Show help</span>\n        </label>\n      </>\n    )\n  }\n\n  runCustomValidation = async (\n    formData: IFormData,\n    currentStep: Step,\n    allSteps: Step[],\n  ): Promise<AjvError[]> => {\n    const errors: AjvError[] = []\n\n    //default - running on current step\n    let rules = currentStep.validationRules || []\n    let data = {\n      [currentStep.id]: formData[currentStep.id],\n    }\n\n    // for final step -- concatenate all rules and run on all data\n    if (currentStep.final) {\n      rules = allSteps.reduce((acc: any, value: Step) => {\n        return value.validationRules && value.validationRules.length > 0\n          ? acc.concat(value.validationRules)\n          : acc\n      }, [])\n      data = _.cloneDeep(formData)\n    }\n\n    if (rules.length === 0) {\n      return []\n    }\n\n    //this is a workaround for inability to define a rule to run on all members of the data array\n    // we define the generic rule with path e.g.\"path\": \".experiments[*].dose_range.dose_range_min\",\n    const allRules: any[] = []\n    rules.forEach(rule => {\n      //take a rule\n      const paramProp = rule.event.params.property\n      // if it's just a normal rule - add it\n      if (paramProp.indexOf('[*]') === -1) {\n        allRules.push(rule)\n      } else {\n        const path = paramProp.split('[*]')[0].substring(1)\n        const data = _.get(formData, path)\n        // generate a rule for each item in the data array by substituting [*] w/ appropriate index\n        if (Array.isArray(data) && typeof data !== 'string') {\n          for (let i = 0; i < data.length; i++) {\n            const newRule = JSON.parse(\n              JSON.stringify(rule).replace(/\\[\\*\\]/g, `[${i}]`),\n            )\n            allRules.push(newRule)\n          }\n        } else {\n          allRules.push(rule)\n        }\n      }\n    })\n    // no we run  all the rules through the engine\n    const engine = new Engine(allRules, {\n      allowUndefinedFacts: true,\n    })\n\n    try {\n      const result: RulesResult = await engine.run(data)\n      const validationEvents = result.events as IRulesValidationEvent[]\n      validationEvents.forEach(event => {\n        const err: AjvError = {\n          ...event.params,\n          ...{\n            params: {},\n            stack: `${event.params.property} ${event.params.message}`,\n          },\n        }\n        errors.push(err)\n      })\n    } catch (error) {\n      console.log(error)\n    }\n\n    return errors\n  }\n\n  transformErrors = (errors: AjvError[]): AjvError[] => {\n    // if we are not in wizard mode and not trying to submit or validate we just want to skip\n    // over the errors and just set the step status\n    // https://github.com/rjsf-team/react-jsonschema-form/issues/1263\n    this.extraErrors.forEach(extraError => {\n      if (!errors.find(error => error.stack === extraError.stack)) {\n        errors.push(extraError)\n      }\n    })\n\n    if (\n      this.navAction !== NavActionEnum.SUBMIT &&\n      this.navAction !== NavActionEnum.VALIDATE &&\n      (!this.props.isWizardMode || this.state.currentStep.final)\n    ) {\n      const currentStep = {\n        ...this.state.currentStep,\n      }\n      if (errors.length > 0) {\n        currentStep.state = StepStateEnum.ERROR\n      } else {\n        currentStep.state = StepStateEnum.COMPLETED\n      }\n\n      this.setState({ currentStep })\n\n      return []\n    }\n\n    // there is an odd behavior in the lib that in cases when we have additional fields depending on enum\n    // value if it's required and not entered we get 3 error: enum, required, and oneOf\n    // so if there is an error Oneof on a parent - ignore it and enum on a child. and just output 'required'\n    // if there is an enum error and there is required with the same prefix remove it\n\n    const reqErrors = errors.filter(error => error.name === 'required')\n    reqErrors.forEach(error => {\n      const parentPath = error.property.substring(\n        0,\n        error.property.lastIndexOf('.'),\n      )\n      _.remove(errors, (error: AjvError) => {\n        return (\n          error.property.indexOf(parentPath) > -1 &&\n          (error.name === 'enum' || error.name === 'oneOf')\n        )\n      })\n    })\n\n    return errors.map(error => {\n      error.message = error.message.replace('property', 'field')\n\n      return error\n    })\n  }\n\n  renderErrorListTemplate = (props: ErrorListProps) => {\n    const { errors } = props\n    const currentLis = errors\n      .map((error, i) => {\n        return renderTransformedErrorObject(\n          this.state.steps,\n          error,\n          this.uiSchema,\n          i,\n          this.props.schema,\n        )\n      })\n      .sort((a, b) => a.order - b.order)\n      .map(li => li.element)\n\n    return (\n      <div className=\"form-error-summary\">\n        <ul className=\"error-detail\">{currentLis}</ul>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"outter-wrap\">\n        <Prompt\n          when={this.state.hasUnsavedChanges}\n          message={this.unsavedDataWarning}\n        />\n        <Header\n          isSubmitted={this.state.isSubmitted}\n          bodyText={this.state.currentStep.description}\n          title={this.props.formTitle}\n        ></Header>\n        <div>\n          <div className=\"inner-wrap\">\n            <StepsSideNav\n              stepList={this.state.steps}\n              isWizardMode={this.props.isWizardMode}\n              onStepChange={this.triggerStepChange}\n            ></StepsSideNav>\n            {this.state.isLoadingSaved && (\n              <div className=\"text-center\">\n                <span className={'spinner'} />\n              </div>\n            )}\n            <div className=\"form-wrap\">\n              <div className=\"form-title\">{this.state.currentStep.title}</div>\n              {this.renderNotification(this.props.callbackStatus)}\n              <div\n                className={`right-top-actions ${\n                  this.state.isSubmitted ? 'hide' : ''\n                }`}\n              >\n                {!this.state.currentStep.static && (\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-action save pull-right\"\n                    onClick={() => this.triggerAction(NavActionEnum.VALIDATE)}\n                  >\n                    VALIDATE\n                  </button>\n                )}\n                {this.renderHelpToggle(\n                  this.state.currentStep,\n                  this.state.doShowHelp,\n                  () =>\n                    this.setState({\n                      doShowHelp: !this.state.doShowHelp,\n                    }),\n                )}\n                {this.isSubmitScreen() && (\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-action save pull-right\"\n                    disabled={this.state.isSubmitted}\n                    onClick={() => this.triggerAction(NavActionEnum.SUBMIT)}\n                  >\n                    SUBMIT\n                  </button>\n                )}\n              </div>\n              {this.renderOptionalFormSubheader(this.props.isWizardMode)}\n              <div\n                className={\n                  this.isSubmitScreen() || this.state.currentStep.static\n                    ? 'hide-form-only'\n                    : 'wrap'\n                }\n              >\n                {this.state.hasValidated && (\n                  <div className=\"notification-area\">\n                    Great! All required data on this form has been entered.\n                  </div>\n                )}\n                <div\n                  ref={this.formDivRef}\n                  className={`scroll-area ${\n                    this.state.currentStep.excluded ? 'disabled' : ' '\n                  } `}\n                >\n                  <Form\n                    className={\n                      this.state.doShowHelp\n                        ? 'submissionInputForm'\n                        : 'submissionInputForm no-help'\n                    }\n                    liveValidate={false}\n                    formData={this.state.formData}\n                    schema={this.getSchema(this.state.currentStep)}\n                    uiSchema={this.uiSchema}\n                    onSubmit={this.onSubmit}\n                    onChange={args => this.handleOnChange(args)}\n                    onError={args =>\n                      this.onError({\n                        props: args,\n                        form: this.formRef,\n                      })\n                    }\n                    showErrorList={\n                      !!this.state.doShowErrors || !!this.props.isWizardMode\n                    }\n                    ErrorList={this.renderErrorListTemplate}\n                    transformErrors={this.transformErrors}\n                    ref={this.formRef}\n                    disabled={\n                      this.state.currentStep.excluded || this.state.isSubmitted\n                    }\n                  >\n                    <div style={{ display: 'none' }}>\n                      <button type=\"submit\"></button>\n                    </div>\n                  </Form>\n                  {this.renderTextForStaticScreen()}\n                  {!this.props.isWizardMode && (\n                    <NextStepLink\n                      steps={this.state.steps}\n                      nextStepId={this.state.currentStep.default}\n                      onNavAction={(step: Step) => this.triggerStepChange(step)}\n                    ></NextStepLink>\n                  )}\n                </div>\n              </div>\n\n              {this.isSubmitScreen() && (\n                <SummaryTable\n                  formData={this.state.formData}\n                  steps={this.state.steps}\n                  callbackFn={(screenId: string) =>\n                    this.showExcludeStateWarningModal(screenId, true)\n                  }\n                  uiSchema={this.props.uiSchema}\n                  schema={this.props.schema}\n                ></SummaryTable>\n              )}\n\n              <NavButtons\n                currentStep={this.state.currentStep}\n                steps={this.state.steps}\n                previousStepIds={this.state.previousStepIds}\n                isFormSubmitted={this.state.isSubmitted}\n                onNavAction={(e: NavActionEnum) => this.triggerAction(e)}\n              ></NavButtons>\n            </div>\n          </div>\n        </div>\n        {this.state.modalContext && (\n          <WarningModal\n            show={true}\n            title={this.excludeWarningHeader}\n            copy={this.excludeWarningText}\n            className={`theme-${this.props.formClass}`}\n            callbackArgs={this.state.modalContext.arguments}\n            onCancel={() => this.setState({ modalContext: undefined })}\n            onOK={(stepId: string, isExclude: boolean) =>\n              this.toggleExcludeStep(stepId, isExclude)\n            }\n          ></WarningModal>\n        )}\n        <DataDebug formData={this.state.formData} hidden={true}></DataDebug>\n      </div>\n    )\n  }\n}\n\n// takes in a single validation error and  and displays it in more readable manner\n// used by renderErrorListTemplate\nfunction renderTransformedErrorObject(\n  steps: Step[],\n  error: AjvError,\n  uiSchema: UiSchema,\n  i: number,\n  schema: any,\n): { order: number; element: JSX.Element } {\n  const propPath = _.trimStart(error.property, '.')\n  const propArr = propPath.split('.')\n\n  // some things require labels in schema (e.g. checkboxes) so this is preferred\n  const labelFromSchema = `${propArr.join('.properties.')}.title`\n  //can be overriden by label in UI\n  const labelFromUi = `${propPath}.ui:title`\n  //for array fields we need to change the property e.g.\n  //  ld50.experiments[0].species_other should look like 'ld50.experiments.items.species_other'\n  const arrayLabelFromSchema = labelFromSchema.replace(/\\[.*?\\]/, '.items')\n  const arrayLabelFromUI = labelFromUi.replace(/\\[.*?\\]/, '.items')\n  const indexMatch = labelFromSchema.match(/\\[.*?\\]/)\n\n  let index = _.first(indexMatch)\n\n  if (index) {\n    index = index.substring(1, index.length - 1)\n    index = !isNaN(parseInt(index)) ? ` [${parseInt(index) + 1}]` : ''\n  }\n\n  const label =\n    _.get(uiSchema, labelFromUi) ||\n    _.get(schema.properties, labelFromSchema) ||\n    _.get(uiSchema, arrayLabelFromUI) ||\n    _.get(schema.properties, arrayLabelFromSchema) ||\n    error.property\n\n  const screen = _.find(steps, { id: propArr[0] }) || {\n    title: propArr[0],\n    order: 0,\n  }\n  const element = (\n    <li key={i} className=\"\">\n      <span>\n        <strong>\n          {screen.title}\n          {index}:\n        </strong>\n        {label}&nbsp; {error.message}\n      </span>\n    </li>\n  )\n  return { order: screen.order, element }\n}\n\n//recursively sets property value to dangerouslySetInnerHTML of that value\nfunction stringToElementForProp(srcObject: any, key: string): object {\n  _.keys(srcObject).some(k => {\n    if (k === key) {\n      const value = srcObject[k]\n      srcObject[k] = <span dangerouslySetInnerHTML={{ __html: value }}></span>\n\n      return srcObject\n    }\n    if (srcObject[k] && typeof srcObject[k] === 'object') {\n      stringToElementForProp(srcObject[k], key)\n    }\n  })\n  return srcObject\n}\n","import $RefParser from 'json-schema-ref-parser'\nimport { get, includes } from 'lodash-es'\nimport * as React from 'react'\nimport Alert from 'react-bootstrap/Alert'\nimport { UiSchema } from 'react-jsonschema-form'\nimport { SynapseClient } from '../../utils'\nimport { SRC_SIGN_IN_CLASS } from '../../utils/SynapseConstants'\nimport { FileEntity, FormData } from '../../utils/synapseTypes/'\nimport SynapseForm from './SynapseForm'\nimport { StatusEnum } from './types'\n\nexport type UploadToolSearchParams = {\n  formDataId?: string //formDataId for user data form data\n  dataFileHandleId?: string //fileHandle to get userData\n  submitted?: boolean // if the file has been submitted\n  formGroupId: string\n}\n\nexport type SynapseFormWrapperProps = {\n  // Provide the parent container (folder/project), that should contain a folder (named <user_id>) that this user can write to.\n  formSchemaEntityId: string // Synapse file that contains the form schema.\n  formUiSchemaEntityId: string // Synapse file that contains the form ui schema.\n  formNavSchemaEntityId: string //Synapse file that consists screen nav schema\n  token?: string // user's session token\n  searchParams?: UploadToolSearchParams\n  isWizardMode?: boolean // if we are displaying the form in wizard mode\n  fileNamePath: string // path in data to specify the name of saved file\n  formTitle: string //for UI customization\n  formClass?: string // to support potential theaming\n}\n\ntype SynapseFormWrapperState = {\n  notification?: Notification\n  isLoading?: boolean\n  formDataId?: string // file holding user form data\n  formData?: any // form data that prepopulates the form\n  formSchema?: any // schema that drives the form\n  formUiSchema?: UiSchema // ui schema that directs how to render the form elements\n  formNavSchema?: any // drives the steps left panel\n\n  status?: StatusEnum\n}\n\ntype Error = {\n  name?: string\n  message?: string\n}\n\ninterface Notification extends Error {\n  type: StatusEnum\n}\n\nclass SynapseFormWrapper extends React.Component<\n  SynapseFormWrapperProps,\n  SynapseFormWrapperState\n> {\n  constructor(props: SynapseFormWrapperProps) {\n    super(props)\n    this.state = {\n      isLoading: true,\n      formDataId: this.props?.searchParams?.formDataId,\n    }\n  }\n\n  async componentDidMount() {\n    await this.getData(this.props.token)\n  }\n\n  async componentDidUpdate(prevProps: SynapseFormWrapperProps) {\n    const shouldUpdate = this.props.token !== prevProps.token\n    if (shouldUpdate) {\n      await this.getData(this.props.token)\n    }\n  }\n\n  //gets a file entity with content\n  getFileEntityData = async (\n    token: string,\n    entityId: string,\n    versionNumber?: string,\n  ): Promise<{ version?: number; content: JSON }> => {\n    try {\n      const entity: FileEntity = await SynapseClient.getEntity(\n        token,\n        entityId,\n        versionNumber,\n      )\n      const entityContent = await SynapseClient.getFileEntityContent(\n        token,\n        entity,\n      )\n      const content = JSON.parse(entityContent)\n      return {\n        version: entity.versionNumber,\n        content: content,\n      }\n    } catch (error) {\n      const newError = {\n        message: `${error.message}:  configuration data for ${entityId} failed to load`,\n      }\n      this.onError(newError)\n      return Promise.reject(newError)\n    }\n  }\n\n  //same as above but also uses $RefParser to convert json $refs to regular json\n  getFileEntityDataDereferenced = async (\n    token: string,\n    entityId: string,\n    versionNumber?: string,\n  ): Promise<{ version?: number; content: JSON }> => {\n    const { version, content } = await this.getFileEntityData(\n      token,\n      entityId,\n      versionNumber,\n    )\n    const derefContent = (await $RefParser.dereference(content)) as JSON\n    return {\n      version: version,\n      content: derefContent,\n    }\n  }\n\n  getData = async (token?: string): Promise<void> => {\n    if (!token) {\n      return\n    }\n    try {\n      let formData = {}\n      let dataFileHandleId: string | undefined\n      let submitted: boolean | undefined\n      let formSchemaVersion = undefined\n      let uiSchemaVersion = undefined\n      let navSchemaVersion = undefined\n      const { searchParams } = this.props\n      if (searchParams) {\n        ;({ dataFileHandleId, submitted } = searchParams)\n      }\n\n      //for not new form we need to get the data\n      //and if it is submitted form we need to pull appropriave schema versions\n      //for new form (no dataFileHandleId) we need to populate schema versions\n\n      if (dataFileHandleId) {\n        const fileData = await SynapseClient.getFileHandleContentFromID(\n          dataFileHandleId,\n          token,\n        )\n        formData = JSON.parse(fileData)\n        if (submitted && formData && formData['metadata']) {\n          ;({ formSchemaVersion, uiSchemaVersion, navSchemaVersion } = formData[\n            'metadata'\n          ])\n        }\n      }\n\n      const promises = [\n        this.getFileEntityDataDereferenced(\n          token,\n          this.props.formSchemaEntityId,\n          formSchemaVersion,\n        ),\n        this.getFileEntityData(\n          token,\n          this.props.formUiSchemaEntityId,\n          uiSchemaVersion,\n        ),\n        this.getFileEntityData(\n          token,\n          this.props.formNavSchemaEntityId,\n          navSchemaVersion,\n        ),\n      ]\n      const configData = await Promise.all(promises)\n\n      if (!dataFileHandleId) {\n        //if we are creating a new file - store the versions\n        formData = {\n          metadata: {\n            formSchemaVersion: configData[0].version,\n            uiSchemaVersion: configData[1].version,\n            navSchemaVersion: configData[2].version,\n          },\n        }\n      }\n      this.setState({\n        formData: formData,\n        formSchema: configData[0].content,\n        formUiSchema: configData[1].content,\n        formNavSchema: configData[2].content,\n        isLoading: false,\n      })\n    } catch (error) {\n      this.onError({ message: error })\n    } finally {\n      this.setState({\n        isLoading: false,\n      })\n    }\n  }\n\n  finishedProcessing = (status: StatusEnum, message?: string) => {\n    this.setState({\n      isLoading: false,\n      notification: { type: status, message: message },\n      status: status,\n    })\n    //this will show the update message for 7 seconds\n    setTimeout(() => {\n      this.setState({ status: undefined })\n    }, 7000)\n  }\n\n  onError = (error: Error) => {\n    this.setState({\n      notification: {\n        type: StatusEnum.ERROR,\n        message: error.message,\n        name: error.name,\n      },\n      status: StatusEnum.ERROR,\n      isLoading: false,\n    })\n  }\n\n  submitForm = async (formData: any) => {\n    await this.saveToFile(formData)\n\n    this.setState({\n      isLoading: true,\n    })\n\n    await SynapseClient.submitFormData(this.state.formDataId!, this.props.token)\n    this.finishedProcessing(StatusEnum.SUBMIT_SUCCESS, 'File Submitted')\n  }\n\n  createOrUpdateFormDataFile = async (\n    fileName: string,\n    fileContentsBlob: Blob,\n  ): Promise<FormData> => {\n    fileName = `${fileName}.json`\n    const fileUploadComplete = await SynapseClient.uploadFile(\n      this.props.token,\n      fileName,\n      fileContentsBlob,\n    )\n    const { searchParams } = this.props\n    const formGroupId = searchParams && searchParams.formGroupId\n    if (!formGroupId) {\n      console.error('formGroupId must be defined')\n      throw 'formGroupId must be defined'\n    }\n    try {\n      // do we need to create a new file entity, or update an existing file entity?\n      const newFileHandleId = fileUploadComplete.fileHandleId\n\n      let formData\n      if (this.state.formDataId) {\n        formData = await SynapseClient.updateFormData(\n          this.state.formDataId,\n          fileName,\n          newFileHandleId,\n          this.props.token!,\n        )\n      } else {\n        formData = await SynapseClient.createFormData(\n          formGroupId,\n          fileName,\n          newFileHandleId,\n          this.props.token!,\n        )\n      }\n\n      return formData\n    } catch (error) {\n      this.onError(error)\n      throw error\n    }\n  }\n\n  saveToFile = async (data: any) => {\n    const fileName = get(data, this.props.fileNamePath)\n    this.setState({\n      status: StatusEnum.PROGRESS,\n      notification: { type: StatusEnum.PROGRESS, message: 'Progress' },\n      isLoading: true,\n    })\n\n    if (!fileName) {\n      // try to find corresponding property. By convention it should be first level property\n      // and follow pattern screen.prop\n      let errorTitle = 'File Name'\n      try {\n        // get it to the schema format\n        const searchString = `${this.props.fileNamePath.replace(\n          '.',\n          '.properties.',\n        )}.title`\n        errorTitle = get(\n          this.state.formSchema.properties,\n          searchString,\n          errorTitle,\n        )\n      } finally {\n        const error = `Please Provide the ${errorTitle} before saving`\n        this.onError({ message: error })\n      }\n      return\n    }\n\n    try {\n      const fileContent: Blob = new Blob([JSON.stringify(data)], {\n        type: 'text/json',\n      })\n\n      const formData = await this.createOrUpdateFormDataFile(\n        fileName,\n        fileContent,\n      )\n      this.setState({\n        formDataId: formData.formDataId,\n      })\n\n      this.finishedProcessing(StatusEnum.SAVE_SUCCESS, 'File Saved')\n    } catch (error) {\n      this.onError({ message: error })\n    }\n  }\n\n  isReadyToDisplayForm = (state: SynapseFormWrapperState): boolean => {\n    return (\n      this.state.status !== StatusEnum.ERROR_CRITICAL &&\n      state.formSchema &&\n      state.formUiSchema &&\n      state.formNavSchema &&\n      state.formData\n    )\n  }\n\n  renderLoader = (\n    state: SynapseFormWrapperState,\n    props: SynapseFormWrapperProps,\n  ): JSX.Element => {\n    if (\n      includes([StatusEnum.ERROR, StatusEnum.ERROR_CRITICAL], state.status) &&\n      props.token &&\n      state.isLoading\n    ) {\n      return (\n        <div className=\"text-center\">\n          <span className={'spinner'} />\n        </div>\n      )\n    } else {\n      return <></>\n    }\n  }\n\n  renderNotification = (notification?: Notification): JSX.Element => {\n    if (!notification) {\n      return <></>\n    }\n    if (notification.type === StatusEnum.ERROR) {\n      return (\n        <Alert\n          variant=\"danger\"\n          onClose={() => this.setState({ status: undefined })}\n        >\n          <Alert.Heading>Error</Alert.Heading>\n\n          <p>\n            {notification.name} {notification.message}\n          </p>\n        </Alert>\n      )\n    }\n\n    return <></>\n  }\n\n  renderUnauthenticatedView = (token: string | undefined) => {\n    if (token) {\n      return <></>\n    } else {\n      return (\n        <div className=\"panel padding-full unauthenticated text-center\">\n          Please\n          <button\n            className={`SRC-standard-button-shape SRC-light-button SRC-sign-in-button ${SRC_SIGN_IN_CLASS}`}\n          >\n            sign in\n          </button>\n          to initiate or continue your submission\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className={`theme-${this.props.formClass}`}>\n        <div className=\"SRC-ReactJsonForm\">\n          {this.renderNotification(this.state.notification)}\n          {this.renderLoader(this.state, this.props)}\n          {this.renderUnauthenticatedView(this.props.token)}\n\n          {this.isReadyToDisplayForm(this.state) && (\n            <div>\n              <SynapseForm\n                schema={this.state.formSchema}\n                uiSchema={this.state.formUiSchema!}\n                formData={this.state.formData}\n                navSchema={this.state.formNavSchema}\n                isWizardMode={this.props.isWizardMode}\n                formTitle={this.props.formTitle}\n                formClass={this.props.formClass}\n                callbackStatus={this.state.status}\n                onSave={(data: any) => this.saveToFile(data)}\n                onSubmit={(data: any) => this.submitForm(data)}\n                isSubmitted={\n                  this.props.searchParams && !!this.props.searchParams.submitted\n                }\n              ></SynapseForm>\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SynapseFormWrapper\n","import * as React from 'react'\n\nimport { SynapseClient } from '../../utils'\nimport {\n  FormData,\n  ListRequest,\n  StatusEnum,\n  ListResponse,\n} from '../../utils/synapseTypes/'\nimport { faTrash, faPhone } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport WarningModal from './WarningModal'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\n\nimport moment from 'moment'\nimport { SRC_SIGN_IN_CLASS } from '../../utils/SynapseConstants'\nimport NoSubmissionsIcon from '../../assets/icons/json-form-tool-no-submissions.svg'\n\n\nexport type SynapseFormSubmissionGridProps = {\n  token?: string\n  formGroupId: string\n  pathpart: string\n  formClass?: string\n  itemNoun: string\n}\n\ntype FileListType = 'IN_PROGRESS' | 'SUBMITTED'\n\ntype SynapseFormSubmissionGridState = {\n  inProgress: {\n    fileList: FormData[]\n    nextPageToken?: string\n  }\n  submitted: {\n    fileList: FormData[]\n    nextPageToken?: string\n  }\n  isLoading: boolean\n  isShowInfoModal: boolean\n  modalContext?: { action: Function; arguments: any[] }\n}\n\nexport default class SynapseFormSubmissionGrid extends React.Component<\n  SynapseFormSubmissionGridProps,\n  SynapseFormSubmissionGridState\n> {\n  modalTitle = 'Trash Submission?'\n  listingText = {\n    inProgress: {\n      subhead: 'In Progress',\n      noRecords: `You don't have submissions in progress`,\n    },\n    submitted: {\n      subhead: 'Submitted',\n      noRecords: `You don't have anything submitted`,\n    },\n  }\n  modalCopy = (\n    <>\n      <p>\n        This submission is currently incomplete and has not been submitted. If\n        you trash this submission, you won't be able to recover the data.\n      </p>\n      <p>Are you sure you want to trash this submission?</p>\n    </>\n  )\n  static requestFilter = {\n    IN_PROGRESS: [StatusEnum.WAITING_FOR_SUBMISSION],\n    SUBMITTED: [\n      StatusEnum.SUBMITTED_WAITING_FOR_REVIEW,\n      StatusEnum.ACCEPTED,\n      StatusEnum.REJECTED,\n    ],\n  }\n\n  constructor(props: SynapseFormSubmissionGridProps) {\n    super(props)\n    this.state = {\n      isLoading: true,\n      isShowInfoModal: false,\n      inProgress: {\n        fileList: [],\n      },\n      submitted: {\n        fileList: [],\n      },\n    }\n  }\n\n  async componentDidMount() {\n    await this.refresh(this.props.token)\n  }\n\n  async componentDidUpdate(prevProps: SynapseFormSubmissionGridProps) {\n    const shouldUpdate = this.props.token !== prevProps.token\n    if (shouldUpdate) {\n      await this.refresh(this.props.token)\n    }\n  }\n\n  async refresh(token?: string) {\n    if (token) {\n      await this.getUserFileListing().catch(error => {\n        this.onError(error)\n      })\n    }\n  }\n\n  getTypeFileListing = async (\n    filter: StatusEnum[],\n    nextPageToken?: string,\n  ): Promise<{ fileList: FormData[]; nextPageToken?: string }> => {\n    this.setState({\n      isLoading: true,\n    })\n    const token = this.props.token\n    const groupId = this.props.formGroupId\n    try {\n      const cleanUpName = (item: FormData): FormData => {\n        item = { ...item, ...{ name: item.name.replace('.json', '') } }\n        return item\n      }\n      const request: ListRequest = {\n        filterByState: filter,\n        groupId,\n        nextPageToken: nextPageToken,\n      }\n\n      const response: ListResponse = await SynapseClient.listFormData(\n        request,\n        token,\n      )\n      const fileList = response.page\n        ? response.page.map(item => cleanUpName(item))\n        : []\n\n      return {\n        fileList,\n        nextPageToken: response.nextPageToken,\n      }\n    } catch (error) {\n      this.onError(error)\n      return Promise.reject(error)\n    } finally {\n      this.setState({\n        isLoading: false,\n      })\n    }\n  }\n\n  getMore = async (fileListType: FileListType, nextPageToken: string) => {\n    const statusList =\n      fileListType === 'SUBMITTED'\n        ? SynapseFormSubmissionGrid.requestFilter.SUBMITTED\n        : SynapseFormSubmissionGrid.requestFilter.IN_PROGRESS\n    const result = await this.getTypeFileListing(statusList, nextPageToken)\n    if (fileListType === 'SUBMITTED') {\n      this.setState(prevState => ({\n        submitted: {\n          fileList: [...prevState.submitted.fileList, ...result.fileList],\n          nextPageToken: result.nextPageToken,\n        },\n      }))\n    } else {\n      this.setState(prevState => ({\n        inProgress: {\n          fileList: [...prevState.inProgress.fileList, ...result.fileList],\n          nextPageToken: result.nextPageToken,\n        },\n      }))\n    }\n  }\n\n  getUserFileListing = async (): Promise<void> => {\n    const inProgress = await this.getTypeFileListing(\n      SynapseFormSubmissionGrid.requestFilter.IN_PROGRESS,\n      this.state.inProgress.nextPageToken,\n    )\n    const submitted = await this.getTypeFileListing(\n      SynapseFormSubmissionGrid.requestFilter.SUBMITTED,\n      this.state.submitted.nextPageToken,\n    )\n\n    this.setState({\n      inProgress: inProgress,\n      submitted: submitted,\n    })\n\n    return\n  }\n  onError = (args: any) => {\n    console.log(args)\n  }\n\n  deleteFile = async (token: string, formDataId: string): Promise<any> => {\n    this.setState({\n      isLoading: true,\n      modalContext: undefined,\n    })\n    try {\n      await SynapseClient.deleteFormData(formDataId, token)\n      //await this.getUserFileListing(token, this.props.formGroupId)\n      this.setState((prevState, props) => ({\n        inProgress: {\n          fileList: prevState.inProgress.fileList.filter(\n            item => item.formDataId !== formDataId,\n          ),\n          nextPageToken: prevState.inProgress.nextPageToken,\n        },\n      }))\n    } catch (error) {\n      this.onError(error)\n      return []\n    } finally {\n      this.setState({\n        isLoading: false,\n      })\n    }\n  }\n\n  setModalConfirmationState = (token: string, formDataId: string) => {\n    this.setState({\n      modalContext: {\n        action: this.deleteFile,\n        arguments: [token, formDataId],\n      },\n    })\n  }\n  /* ------------------------------------------   rendering fns  ------------------------------------------------*/\n\n  renderLoading = (\n    token: string | undefined,\n    isLoading: boolean,\n  ): JSX.Element => {\n    if (token && isLoading) {\n      return (\n        <div className=\"text-center\">\n          <span>Loading&hellip;</span>\n          <span style={{ marginLeft: '2px' }} className={'spinner'} />\n        </div>\n      )\n    } else {\n      return <></>\n    }\n  }\n\n  renderUnauthenticatedView = (token: string | undefined) => {\n    if (token) {\n      return <></>\n    } else {\n      return (\n        <div className=\"file-grid\">\n          <h3>Your Submissions</h3>\n          <div className=\"panel padding-full unauthenticated text-center\">\n          <p className=\"padding-full\">Please sign in or register to initiate or continue your submission</p>\n            <button className={`btn btn-large ${SRC_SIGN_IN_CLASS}`}>\n              sign in\n            </button>\n          </div>\n        </div>\n      )\n    }\n  }\n\n  renderSubmissionsTable = (\n    fileList: FormData[],\n    pathpart: string,\n    formGroupId: string,\n    fileListType: FileListType,\n    nextPageToken?: string,\n  ): JSX.Element => {\n    if (!formGroupId) {\n      this.onError('Form Group ID is undefined')\n      return <></>\n    }\n    const isInProgress = fileListType === 'IN_PROGRESS'\n    const textSource = isInProgress\n      ? this.listingText.inProgress\n      : this.listingText.submitted\n\n    const subhead = <h4>{textSource.subhead}</h4>\n    const tableTitleRow = isInProgress ? (\n      <tr>\n        <th>Submission Name</th>\n        <th>Edited On</th>\n        <th></th>\n        <th></th>\n      </tr>\n    ) : (\n      <tr>\n        <th>Submission Name</th>\n        <th>Submitted On</th>\n        <th>Status</th>\n        <th></th>\n      </tr>\n    )\n\n    let content = (\n      <h5 className=\"text-center no-submissions padding-full\">\n        {textSource.noRecords}\n      </h5>\n    )\n    const viewMore = nextPageToken ? (\n      <div className=\"view-more\">\n        <button\n          className=\"btn btn-link\"\n          onClick={() => this.getMore(fileListType, nextPageToken)}\n        >\n          more ...\n        </button>\n      </div>\n    ) : (\n      <></>\n    )\n    if (fileList.length > 0) {\n      content = (\n        <div className=\"file-table\" key={`table${fileListType}`}>\n          <table className=\"table\">\n            <thead>{tableTitleRow}</thead>\n            <tbody>\n              {fileList.map((dataFileRecord, key) => {\n                if (isInProgress) {\n                  return (\n                    <tr key={dataFileRecord.formDataId! + key + fileListType}>\n                      <td>\n                        <a\n                          href={`${pathpart}?formGroupId=${formGroupId}&formDataId=${dataFileRecord.formDataId}&dataFileHandleId=${dataFileRecord.dataFileHandleId}`}\n                        >\n                          {dataFileRecord.name}\n                        </a>\n                      </td>\n                      <td>{moment(dataFileRecord.modifiedOn).calendar()}</td>\n                      <td>&nbsp;</td>\n                      <td className=\"text-right\">\n                        <button\n                          className=\"btn\"\n                          aria-label=\"delete\"\n                          onClick={() =>\n                            this.setModalConfirmationState(\n                              this.props.token!,\n                              dataFileRecord.formDataId!,\n                            )\n                          }\n                        >\n                          <FontAwesomeIcon\n                            icon={faTrash}\n                            aria-hidden=\"true\"\n                          ></FontAwesomeIcon>\n                        </button>\n                      </td>\n                    </tr>\n                  )\n                } else {\n                  return (\n                    <tr key={dataFileRecord.formDataId! + key}>\n                      <td>\n                        <a\n                          href={`${pathpart}?formGroupId=${formGroupId}&formDataId=${dataFileRecord.formDataId}&dataFileHandleId=${dataFileRecord.dataFileHandleId}&submitted=1`}\n                        >\n                          {dataFileRecord.name}\n                        </a>\n                      </td>\n                      <td>{moment(dataFileRecord.modifiedOn).calendar()}</td>\n                      <td>{dataFileRecord.submissionStatus.state}</td>\n                      <td className=\"text-right\">\n                        <button\n                          className=\"btn\"\n                          aria-label=\"information\"\n                          onClick={() =>\n                            this.setState({ isShowInfoModal: true })\n                          }\n                        >\n                          <FontAwesomeIcon\n                            icon={faPhone}\n                            aria-hidden=\"true\"\n                          ></FontAwesomeIcon>\n                        </button>\n                      </td>\n                    </tr>\n                  )\n                }\n              })}\n            </tbody>\n          </table>\n          {viewMore}\n        </div>\n      )\n    }\n    return (\n      <div key={`grid-${fileListType}`}>\n        {subhead} {content}\n      </div>\n    )\n  }\n\n  renderSubmissionsTables = (\n    inProgress: { fileList: FormData[]; nextPageToken?: string },\n    submitted: { fileList: FormData[]; nextPageToken?: string },\n    pathpart: string,\n    formGroupId: string,\n  ): JSX.Element[] | JSX.Element => {\n    if (inProgress.fileList.length === 0 && submitted.fileList.length === 0) {\n      return (\n        <div className=\"text-center\">\n          <img src={NoSubmissionsIcon} alt=\"no submissions\"></img>\n          <p className=\"padding-full\">You have no submissions</p>\n        </div>\n      )\n    } else {\n      return [\n        this.renderSubmissionsTable(\n          inProgress.fileList,\n          pathpart,\n          formGroupId,\n          'IN_PROGRESS',\n          inProgress.nextPageToken,\n        ),\n\n       this.renderSubmissionsTable(\n          submitted.fileList,\n          pathpart,\n          formGroupId,\n          'SUBMITTED',\n          submitted.nextPageToken,\n        ),\n      ]\n    }\n  }\n\n  render() {\n    return (\n      <div className={`theme-${this.props.formClass}`}>\n        <div className=\"SRC-ReactJsonForm\">\n          {this.renderLoading(this.props.token, this.state.isLoading)}\n          {this.renderUnauthenticatedView(this.props.token)}\n\n          {!this.state.isLoading && (\n            <div className=\"file-grid \">\n              <h3>Your Submissions</h3>\n              <div className=\"panel panel-default padding-full\">\n                {this.renderSubmissionsTables(\n                  this.state.inProgress,\n                  this.state.submitted,\n                  this.props.pathpart,\n                  this.props.formGroupId,\n                )}\n\n                <div className=\"text-center\">\n                  <a\n                    className=\"btn btn-large\"\n                    href={`${this.props.pathpart}?formGroupId=${this.props.formGroupId}`}\n                  >\n                    Add new {this.props.itemNoun}\n                  </a>\n                </div>\n              </div>\n            </div>\n          )}\n          {this.state.modalContext && (\n            <WarningModal\n              className={`theme-${this.props.formClass}`}\n              show={typeof this.state.modalContext !== 'undefined'}\n              title={this.modalTitle}\n              copy={this.modalCopy}\n              callbackArgs={this.state.modalContext.arguments}\n              onCancel={() => this.setState({ modalContext: undefined })}\n              onOK={(token: string, formDataId: string) =>\n                this.deleteFile(token, formDataId)\n              }\n            />\n          )}\n\n          <Modal\n            show={this.state.isShowInfoModal}\n            animation={false}\n            className={`theme-${this.props.formClass}`}\n          >\n            <Modal.Header\n              closeButton={false}\n              onHide={() => this.setState({ isShowInfoModal: false })}\n            >\n              <Modal.Title>More Information</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              Please <a href=\"mailto:ModelAD@iupui.edu\">contact us</a> for more\n              information about your submission\n            </Modal.Body>\n            <Modal.Footer>\n              <Button\n                variant=\"success\"\n                onClick={() => this.setState({ isShowInfoModal: false })}\n              >\n                OK\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </div>\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { library, IconProp } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faLongArrowAltUp,\n  faLongArrowAltDown,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport Parser from 'rss-parser'\nlibrary.add(faLongArrowAltUp)\nlibrary.add(faLongArrowAltDown)\nlet rssParser = new Parser()\ntype RssState = {\n  rssFeed: any\n  isLoadingError: boolean\n  isShowingMoreItems: boolean\n  itemId2MoreItem: {}\n}\n\nexport type RssFeedProps = {\n  url: string\n  defaultItemsToShow: number\n}\n\nconst parser = new DOMParser()\n\nexport default class RssFeed extends React.Component<RssFeedProps, RssState> {\n  // only update the state if this component is mounted\n  _isMounted = false\n  \n  constructor(props: RssFeedProps) {\n    super(props)\n    this.state = {\n      rssFeed: {},\n      isLoadingError: false,\n      isShowingMoreItems: false,\n      itemId2MoreItem: {},\n    }\n  }\n  \n  componentDidMount() {\n    this._isMounted = true\n    const { url } = this.props\n    fetch(url)\n      .then(response => response.text())\n      .then(responseData => rssParser.parseString(responseData))\n      .then(rss => {\n        if (this._isMounted) {\n          this.setState({ rssFeed: rss })\n        }\n      })\n      .catch(err => {\n        if (this._isMounted) {\n          this.setState({ isLoadingError: true })\n        }\n      })\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false\n  }\n  public onToggleReadMore = (itemId: string) => (\n    event: React.SyntheticEvent<HTMLButtonElement>,\n  ) => {\n    let feedItemContentDiv = document.getElementById(itemId)\n    if (!this.state.itemId2MoreItem[itemId]) {\n      this.state.itemId2MoreItem[itemId] = {\n        text: 'View full post',\n        icon: 'long-arrow-alt-down',\n      }\n    }\n    const isShow: boolean = this.state.itemId2MoreItem[itemId].text.includes(\n      'View full post',\n    )\n    if (feedItemContentDiv) {\n      let foundMoreItem: boolean = false\n      // hide or show the elements after the More element\n      for (let i = 0; i < feedItemContentDiv.children.length; i++) {\n        // skip over children until we find the id that starts with 'more-'\n        let child = feedItemContentDiv.children[i]\n        if (foundMoreItem) {\n          if (isShow) {\n            child.classList.remove('hidden')\n          } else {\n            child.classList.add('hidden')\n          }\n        } else {\n          foundMoreItem = child.id.includes('more-')\n        }\n      }\n    }\n    // toggle, by updating text and icon\n    const newText: string = isShow ? 'Hide' : 'View full post'\n    const newIcon: IconProp = isShow\n      ? 'long-arrow-alt-up'\n      : 'long-arrow-alt-down'\n    this.state.itemId2MoreItem[itemId] = {\n      text: newText,\n      icon: newIcon,\n    }\n    this.setState({ itemId2MoreItem: this.state.itemId2MoreItem })\n  }\n\n  public onClickShowMoreItems = () => (\n    event: React.SyntheticEvent<HTMLButtonElement>,\n  ) => {\n    this.setState({ isShowingMoreItems: true })\n  }\n\n  render() {\n    return (\n      <ul className=\"srcRssFeed\">\n        {this.state.rssFeed.items &&\n          this.state.rssFeed.items.map((item: any, index: any) => {\n            // There are 2 \"more\" buttons here.  One is to hide long article content.  See moreElement and onClickReadMore()\n            // The other is to hide the large number of items in a particular feed (usually a max of 10 are returned).  See state.isShowingMoreItems\n            let parsedHtml = parser.parseFromString(\n              item['content:encoded'],\n              'text/html',\n            )\n            let bodyElement = parsedHtml.querySelector('body')\n            let moreElement = parsedHtml.querySelector('[id^=\"more-\"]')\n            if (moreElement && bodyElement) {\n              let foundMoreElement = false\n              const children = bodyElement.children\n              for (let i = 0; i < children.length; i++) {\n                let child = children[i]\n                if (foundMoreElement) {\n                  child.classList.add('hidden')\n                }\n                if (child === moreElement) {\n                  foundMoreElement = true\n                }\n              }\n            }\n            let isItemVisible: boolean =\n              index < this.props.defaultItemsToShow ||\n              this.state.isShowingMoreItems\n\n            let showMoreText: string = 'View full post'\n            let showMoreIcon: IconProp = 'long-arrow-alt-down'\n            if (this.state.itemId2MoreItem[item.guid]) {\n              showMoreText = this.state.itemId2MoreItem[item.guid].text\n              showMoreIcon = this.state.itemId2MoreItem[item.guid].icon\n            }\n            return (\n              <li\n                key={item.guid}\n                className={`srcRssFeedItem ${isItemVisible ? '' : 'hidden'}`}\n              >\n                <div className=\"srcRssFeedItemContent\">\n                  <div\n                    id={item.guid}\n                    dangerouslySetInnerHTML={{\n                      __html: parsedHtml.documentElement.innerHTML,\n                    }}\n                  ></div>\n                  {moreElement && (\n                    <div className=\"clearfix\">\n                      <button\n                        style={{\n                          textAlign: 'left',\n                          margin: 0,\n                          padding: '0px 50px 25px 35px',\n                        }}\n                        className=\"SRC-primary-text-color SRC-basicButton SRC-floatRight\"\n                        onClick={this.onToggleReadMore(item.guid)}\n                      >\n                        {showMoreText}\n                        <FontAwesomeIcon\n                          key={`${item.guid}${index}`}\n                          style={{ marginLeft: '5px' }}\n                          icon={showMoreIcon}\n                        />\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </li>\n            )\n          })}\n        {this.state.rssFeed.items &&\n          this.state.rssFeed.items.length > this.props.defaultItemsToShow &&\n          !this.state.isShowingMoreItems && (\n            <div className=\"clearfix\">\n              <button\n                className=\"btn SRC-grayBackground SRC-roundBorder SRC-floatRight\"\n                onClick={this.onClickShowMoreItems()}\n              >\n                View All\n              </button>\n            </div>\n          )}\n        {this.state.isLoadingError && (\n          <div>Unable to load feed: {this.props.url}</div>\n        )}\n      </ul>\n    )\n  }\n}\n","import * as React from 'react'\n\nexport type TwitterFeedProps = {\n  href: string\n}\n\nexport default class TwitterFeed extends React.Component<TwitterFeedProps> {\n  constructor(props: TwitterFeedProps) {\n    super(props)\n  }\n\n  componentDidMount() {\n    if (typeof (window as any).twttr !== 'undefined') {\n      ;(window as any).twttr.widgets.load(\n        document.getElementById(this.props.href),\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <a\n          id={this.props.href}\n          className=\"twitter-timeline\"\n          data-height=\"600\"\n          data-theme=\"light\"\n          href={this.props.href}\n        ></a>\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport RssFeed from './RssFeed'\nimport TwitterFeed from './TwitterFeed'\nimport MailchimpSubscribe from 'react-mailchimp-subscribe'\nimport { KeyValue } from '../utils/functions/sqlFunctions'\nimport { isEqual } from 'lodash-es'\nimport { Link } from 'react-router-dom'\n\nexport type MenuConfig = {\n  feedName: string\n  feedDescription: string\n  feedUrl: string\n  feedKeyValue?: KeyValue\n  defaultItemsToShow: number\n  mailChimpListName?: string\n  mailChimpUrl?: string\n  twitterFeedUrl?: string\n}\nexport type NewsFeedMenuProps = {\n  menuConfig: MenuConfig[]\n  searchParams?: KeyValue\n  routeToNewsFeed: string // news feed nav bar links are hardcoded to this route, with query params set to the selected menu config key/value\n}\n\nexport default class NewsFeedMenu extends React.Component<\n  NewsFeedMenuProps,\n  {}\n> {\n  constructor(props: NewsFeedMenuProps) {\n    super(props)\n    this.getMenuIndex = this.getMenuIndex.bind(this)\n  }\n\n  public render() {\n    const menuIndex = this.getMenuIndex()\n    const menuDropdown = this.renderMenu()\n    const { menuConfig } = this.props\n    const {\n      feedName,\n      feedDescription,\n      feedUrl,\n      feedKeyValue,\n      defaultItemsToShow,\n      mailChimpUrl,\n      twitterFeedUrl,\n      mailChimpListName,\n    } = menuConfig[menuIndex]\n    let modifiedFeedUrl = feedUrl\n    if (feedKeyValue) {\n      Object.getOwnPropertyNames(feedKeyValue).forEach(key => {\n        modifiedFeedUrl = `${modifiedFeedUrl}&${key}=${feedKeyValue[key]}`\n      })\n    }\n    return (\n      <div className=\"row\">\n        <div className=\"col-xs-2 SRC-menuLayout SRC-menuPadding\">\n          {menuDropdown}\n        </div>\n        <div className=\"col-xs-10\">\n          {\n            <>\n              {mailChimpUrl && (\n                <div className=\"SRC-mailchimpSubscribeContainer\">\n                  <h4>Subscribe</h4>\n                  <p className=\"SRC-marginBottomTop\">\n                    Subscribe to receive the {mailChimpListName} by e-mail,\n                    which provides information and updates related to the\n                    Portal. You can opt out at any time by using the unsubscribe\n                    link within the e-mail. We will not share your information\n                    with any third parties or use it for any other purposes.\n                  </p>\n                  <div className=\"SRC-marginBottomTop\">\n                    <MailchimpSubscribe url={mailChimpUrl} />\n                  </div>\n                </div>\n              )}\n              <h3 className=\"srcRssFeed\">{feedName}</h3>\n              <p>{feedDescription}</p>\n              <RssFeed\n                key={modifiedFeedUrl}\n                url={modifiedFeedUrl}\n                defaultItemsToShow={defaultItemsToShow}\n              />\n            </>\n          }\n          {twitterFeedUrl && <TwitterFeed href={twitterFeedUrl} />}\n        </div>\n      </div>\n    )\n  }\n\n  getMenuIndex = () => {\n    let menuIndex = 0\n    if (this.props.searchParams) {\n      // do the search params match a menu config?\n      this.props.menuConfig.forEach((config, index) => {\n        if (\n          config.feedKeyValue &&\n          isEqual(this.props.searchParams, config.feedKeyValue)\n        ) {\n          menuIndex = index\n        }\n      })\n    }\n    return menuIndex\n  }\n\n  private renderMenu() {\n    const menuIndex = this.getMenuIndex()\n    const { menuConfig, routeToNewsFeed } = this.props\n    return menuConfig.map((config: MenuConfig, index: number) => {\n      const isSelected: boolean = index === menuIndex\n      const style: any = {}\n      let selectedStyling: string = ''\n      if (isSelected) {\n        selectedStyling =\n          'SRC-pointed SRC-whiteText SRC-primary-background-color SRC-pointed-triangle-right SRC-primary-background-color-border-left'\n      } else {\n        selectedStyling = 'SRC-blackText SRC-light-background'\n      }\n      const urlParams = new URLSearchParams(window.location.search)\n      if (config.feedKeyValue) {\n        Object.getOwnPropertyNames(config.feedKeyValue).forEach(key => {\n          urlParams.set(key, config.feedKeyValue![key])\n        })\n      }\n      return (\n        <Link\n          key={config.feedName}\n          className={`SRC-hand-cursor SRC-menu-button-base SRC-gap SRC-hoverWhiteText SRC-primary-background-color-hover ${selectedStyling}`}\n          role=\"button\"\n          tabIndex={0}\n          style={style}\n          to={{\n            pathname: routeToNewsFeed,\n            search: urlParams + '',\n          }}\n        >\n          {config.feedName}\n        </Link>\n      )\n    })\n  }\n}\n","import React, { FunctionComponent/*, useState , useEffect */ } from 'react' // importing FunctionComponent\nimport Plotly from 'plotly.js-basic-dist'\nimport * as PlotlyTyped from 'plotly.js'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { GraphItem, MarkerStyle} from './types'\nimport _ from 'lodash-es'\nconst Plot = createPlotlyComponent(Plotly)\n\nexport type DotPlotProps = {\n  plotData: GraphItem[]\n  layoutConfig: Partial<PlotlyTyped.Layout>\n  optionsConfig: Partial<PlotlyTyped.Config>\n  label?: string, \n  style?: React.CSSProperties\n  id: string,\n  isLegend?: boolean,\n  isXAxis?: boolean,\n  xMax?: number,\n  markerStyle?: MarkerStyle,\n  onClick?: Function\n}\n\n\ntype LayoutOptions = {\n  isLegend: boolean\n  isXAxis: boolean\n  maxValue?: number\n}\n\nfunction getLayout(\n  dotPlotLayoutConfig: Partial<PlotlyTyped.Layout>,\n  layoutOptions?: LayoutOptions,\n): Partial<PlotlyTyped.Layout> {\n  const result = _.cloneDeep(dotPlotLayoutConfig)\n  if (!layoutOptions) {\n    return result\n  }\n  result.yaxis!.showticklabels = false\n  result.xaxis!.range = [-5, layoutOptions.maxValue! + 30]\n  result.xaxis!.visible = layoutOptions.isXAxis\n  result.showlegend = layoutOptions.isLegend\n  result.margin = {\n    t: 0,\n    b: layoutOptions.isXAxis ? 50 : 0,\n    l: 0,\n    r: 0,\n    pad: 15,\n  }\n  let height = 30\n  if (layoutOptions.isLegend) {\n    height = 35\n    result.margin.pad = 0\n    result.xaxis = {\n      visible: false,\n      zeroline: false,\n      showgrid: false,\n      showline: false,\n      range: [0, 1],\n    }\n\n    result.yaxis = {\n      visible: false,\n      showline: false,\n    }\n  }\n  if (layoutOptions.isXAxis) {\n    result.yaxis = {\n      visible: false,\n      showgrid: false,\n      showline: false,\n    }\n    height = 50\n  }\n\n  result.height = height\n\n  return result\n}\n\nfunction createArrayOfGroupValues(\n  headers: string[],\n  items: GraphItem[],\n): any[] {\n  const result = new Array(headers.length)\n  items.forEach(item => {\n    const index = headers.indexOf(item.y)\n    result[index] = item.x\n  })\n  return result\n}\n\nfunction getPlotDataPoints(\n  graphItems: GraphItem[],\n  markerStyle: MarkerStyle,\n  ySorted?: string[],\n): any[] {\n  const isFakeData = ySorted === undefined\n  var groups = _.uniq(graphItems.map(item => item.group))\n  let data: any = []\n  let symbols = [\n    'circle',\n    'triangle-up',\n    'cross-thin-open',\n    'triangle-up-open-dot',\n    'star-square-open',\n    'diamond-x',\n  ]\n\n  groups.forEach((group, i) => {\n    data.push({\n      type: 'scatter',\n\n      x: isFakeData\n        ? [-10]  // fake datavalue outside of the bounds\n        : createArrayOfGroupValues(\n            ySorted!,\n            graphItems.filter(row => row.group === group),\n          ),\n      y: ySorted,\n      text: [group],\n      hovertemplate: `%{x} %{text}<extra></extra>`,\n      mode: 'markers',\n      name: group,\n      marker: {\n        color: markerStyle.fill,\n        line: {\n          color: markerStyle.line,\n          width: 1,\n        },\n        symbol: symbols[i],\n        size: markerStyle.size,\n      },\n    })\n  })\n  return data\n}\n\nconst DotPlot: FunctionComponent<DotPlotProps> = ({\n  plotData,\n  optionsConfig,\n  layoutConfig,\n  label,\n  id,\n  xMax,\n  style = { width: '100%', height: '100%' },\n  markerStyle= { fill: '#515359', line: '#515359', size: 9},\n  onClick, isLegend= false, isXAxis = false\n}: DotPlotProps) => {\n  const pointsTypes = label? [label]: undefined\n\n  return (\n    <Plot\n      key={`dotPlot_${id}`}\n      layout={getLayout(layoutConfig, {\n        isLegend: isLegend,\n        isXAxis: isXAxis,\n        maxValue: xMax,\n      })}\n      style={style}\n      data={getPlotDataPoints(plotData, markerStyle, pointsTypes )}\n      config={optionsConfig}\n      onClick={(e: any) => onClick? onClick(e): _.noop}\n    />\n  )\n}\n\nexport default DotPlot\n","import React, { FunctionComponent } from 'react'\nimport Plotly from 'plotly.js-basic-dist'\nimport * as PlotlyTyped from 'plotly.js'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { GraphItem, BarPlotColors } from './types'\nimport _ from 'lodash-es'\n\nconst Plot = createPlotlyComponent(Plotly)\n\nexport type BarPlotProps = {\n  isTop: boolean\n  style?: React.CSSProperties\n  plotData: GraphItem[]\n  layoutConfig: Partial<PlotlyTyped.Layout>\n  optionsConfig: Partial<PlotlyTyped.Config>\n  label: string\n  xMax: number\n  colors?:  BarPlotColors\n  onClick?: Function\n}\n\ntype LayoutOptions = { isTop: boolean; maxValue: number; isLegend?: boolean }\n\nfunction getBarPlotDataPoints(\n  data: any[],\n  filter?: string,\n  colors?: BarPlotColors,\n): any[] {\n  if (filter) {\n    data = data.filter(item => item.y === filter)\n  }\n  var groups = _.uniq(data.map(item => item['group']))\n  const result: any[] = []\n  const defaultColors = [`(28,118,175,1)`, `rgba(91,176,181,1)`]\n\n  groups.forEach((group, i) => {\n    const items = data.filter(item => item.group === group)\n    result.push({\n      x: items.map(item => item.x),\n      y: items.map(item => item.y),\n      name: group,\n      orientation: 'h',\n      marker: {\n        color: colors ? colors[group] : defaultColors[i],\n        width: 1,\n      },\n      type: 'bar',\n    })\n  })\n\n  return result\n}\n\nfunction getLayout(\n  layoutConfig: Partial<PlotlyTyped.Layout>,\n  { isTop, maxValue }: LayoutOptions,\n): Partial<PlotlyTyped.Layout> {\n  const layout = _.cloneDeep(layoutConfig)\n  layout.xaxis = {\n    visible: false,\n    range: [0, maxValue],\n  }\n  layout.showlegend = false\n  layout.height = isTop ? 40 : 20\n  return layout\n}\n\nconst BarPlot: FunctionComponent<BarPlotProps> = ({\n  plotData,\n  optionsConfig,\n  isTop,\n  layoutConfig,\n  label,\n  xMax,\n  colors,\n  style = { width: '100%', height: '100%' },\n}: BarPlotProps) => {\n  return (\n    <Plot\n      style={style}\n      layout={getLayout(layoutConfig, {\n        isTop,\n        maxValue: xMax,\n      })}\n      config={optionsConfig}\n      data={getBarPlotDataPoints(plotData, label, colors)}\n    />\n  )\n}\n\nexport default BarPlot\n","import React, { FunctionComponent, useState, useEffect } from 'react' // importing FunctionComponent\nimport * as PlotlyTyped from 'plotly.js'\n\nimport { ElementWithTooltip, TooltipVisualProps } from '../ElementWithTooltip'\nimport { unCamelCase } from '../../../utils/functions/unCamelCase'\n\nimport { SynapseConstants } from '../../../utils'\nimport { getFullQueryTableResults } from '../../../utils/SynapseClient'\nimport {\n  QueryResultBundle,\n  QueryBundleRequest,\n  RowSet,\n} from '../../../utils/synapseTypes'\nimport { resultToJson } from '../../../utils/functions/sqlFunctions'\nimport { GraphItem, PlotProps, BarPlotColors } from './types'\nimport _ from 'lodash-es'\nimport DotPlot from './DotPlot'\nimport BarPlot from './BarPlot'\n\nexport type ThemesPlotProps = {\n  token?: string\n  onPointClick: ({\n    facetValue,\n    type,\n  }: {\n    facetValue: any\n    type: string\n  }) => void\n  dotPlot: PlotProps\n  topBarPlot: PlotProps\n  sideBarPlot: PlotProps\n  tooltipProps?: TooltipVisualProps\n}\n\ntype TotalsGroup = { y: string; count: number }\n\nconst optionsConfig: Partial<PlotlyTyped.Config> = {\n  displayModeBar: false,\n  responsive: true,\n  scrollZoom: false,\n  editable: false,\n  autosizable: true,\n}\n\nconst tooltipVisualProps: TooltipVisualProps = {\n  delayShow: 0,\n  place: 'right',\n  type: 'dark',\n  effect: 'float',\n}\nconst dotPlotLayoutConfig: Partial<PlotlyTyped.Layout> = {\n  showlegend: true,\n  dragmode: false,\n  legend: {\n    font: {\n      size: 11,\n    },\n\n    y: 1.1,\n    xanchor: 'right',\n    x: 1,\n\n    orientation: 'h',\n  },\n  xaxis: {\n    visible: true,\n    fixedrange: true,\n    zeroline: false,\n    showgrid: false,\n    showline: true,\n    linecolor: '#ddd', //bottom line\n    autotick: true,\n    ticks: 'outside',\n    tickcolor: '#ddd',\n  },\n\n  yaxis: {\n    fixedrange: true,\n    zeroline: false,\n    gridcolor: '#ddd', //horizontal lines\n    automargin: true,\n  },\n\n  margin: {\n    pad: 20,\n  },\n  hovermode: 'closest',\n}\n\nconst barLayoutConfig: Partial<PlotlyTyped.Layout> = {\n  barmode: 'stack',\n  showlegend: false,\n  dragmode: false,\n  hovermode: 'closest',\n  yaxis: { visible: false, fixedrange: true },\n  margin: {\n    l: 0,\n    r: 0,\n    b: 0,\n    t: 0,\n    pad: 0,\n  },\n}\n\nconst TableCellStyle: React.CSSProperties = {\n  boxSizing: 'border-box',\n  flex: 1,\n  height: '40px',\n  lineHeight: '40px',\n  padding: '0',\n  overflow: 'hidden',\n}\n\nfunction fetchData(\n  token: string,\n  { xField, yField, groupField, entityId, whereClause, infoField }: PlotProps,\n): Promise<RowSet> {\n  //renderTopBarLegend\n  const sql = `SELECT ${xField} as \"x\", ${yField} as \"y\", ${\n    infoField ? infoField + ' as \"info\", ' : ''\n  }   ${groupField} as \"group\" FROM ${entityId} ${\n    whereClause ? ' WHERE ' + whereClause : ''\n  }`\n\n  const queryRequest: QueryBundleRequest = {\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    partMask: SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n    entityId: entityId,\n    query: {\n      sql: sql,\n    },\n  }\n\n  return getFullQueryTableResults(queryRequest, token).then(\n    (data: QueryResultBundle) => {\n      return data.queryResult.queryResults\n    },\n  )\n}\n\nfunction getTotalsByY(data: GraphItem[]): { y: string; count: number }[] {\n  const resultObject = data.reduce((res, obj) => {\n    res[obj.y] = (obj.y in res ? Number(res[obj.y]) : 0) + Number(obj.x)\n    return res\n  }, {})\n  const result = []\n  for (const property in resultObject) {\n    result.push({ y: property, count: resultObject[property] as number })\n  }\n  return result\n}\n\nconst getClickTargetData = (e: PlotlyTyped.PlotMouseEvent) => {\n  const pointData = e.points[0].data\n  return { facetValue: pointData.y[0], type: pointData.name }\n}\n\nconst renderTopBarLegend = (\n  colors: BarPlotColors | undefined,\n  xLabels: string[],\n): JSX.Element => (\n  <div\n    style={{\n      textAlign: 'right',\n\n      float: 'right',\n      marginTop: '8px',\n    }}\n  >\n    {xLabels.map((item, i) => (\n      <div style={{ float: 'left' }} key={`topBar_${i}`}>\n        <div\n          key=\"topBar_label\"\n          style={{\n            width: '5px',\n            height: '15px',\n            float: 'left',\n            marginRight: '7px',\n            backgroundColor: `${colors ? colors[item] : 'transparent'}`,\n          }}\n        ></div>\n        <div\n          key=\"topBar_graph\"\n          style={{\n            paddingRight: '30px',\n            height: '15px',\n            lineHeight: '15px',\n            float: 'left',\n          }}\n        >\n          {item}\n        </div>{' '}\n      </div>\n    ))}\n  </div>\n)\n\nconst fadeColors = (colors: { [key: string]: string }, opacity: string) => {\n  for (let key in colors) {\n    colors[key] = colors[key]\n      .replace(',1)', `, ${opacity})`)\n      .replace(',1.0)', `, ${opacity})`)\n  }\n  return colors\n}\n\nconst getTooltip = (data: GraphItem[], filter: string) => {\n  return _.first(data.filter(item => item.y === filter).map(item => item.info))\n}\n\nconst ThemesPlot: FunctionComponent<ThemesPlotProps> = ({\n  token,\n  dotPlot,\n  topBarPlot,\n  sideBarPlot,\n  tooltipProps = tooltipVisualProps,\n  onPointClick,\n}: ThemesPlotProps) => {\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [dotPlotQueryData, setDotPlotQueryData] = useState<GraphItem[]>([])\n  const [topBarPlotData, setTopBarQueryData] = useState<GraphItem[]>([])\n  const [sideBarPlotData, setSideBarQueryData] = useState<GraphItem[]>([])\n  useEffect(() => {\n    const dotPlotData = fetchData(token!, dotPlot)\n    const topBarPlotData = fetchData(token!, topBarPlot)\n    const sideBarPlotData = fetchData(token!, sideBarPlot)\n    Promise.all([dotPlotData, topBarPlotData, sideBarPlotData])\n      .then(result => {\n        setDotPlotQueryData(resultToJson(result[0].headers, result[0].rows))\n        setTopBarQueryData(resultToJson(result[1].headers, result[1].rows))\n        setSideBarQueryData(resultToJson(result[2].headers, result[2].rows))\n        setIsLoaded(true)\n      })\n      .catch(err => {\n        throw err\n      })\n  }, [token, dotPlot, topBarPlot, sideBarPlot])\n  let yLabelsForDotPlot: string[] = []\n  let xLabelsForTopBarPlot: string[] = []\n  let xMaxForDotPlot = 0\n  let xMaxForSideBarPlot = 0\n  let topBarPlotDataSorted: TotalsGroup[] = []\n  let totalsByDotPlotY: TotalsGroup[] = []\n  if (isLoaded) {\n    totalsByDotPlotY = getTotalsByY(sideBarPlotData)\n    yLabelsForDotPlot = totalsByDotPlotY\n      .sort((a, b) => b.count - a.count)\n      .map(item => item.y)\n    xMaxForSideBarPlot = Math.max(...totalsByDotPlotY.map(item => item.count))\n    xMaxForDotPlot = Math.max(...dotPlotQueryData.map(item => Number(item.x)))\n    topBarPlotDataSorted = _.orderBy(getTotalsByY(topBarPlotData), ['y'])\n    xLabelsForTopBarPlot = _.uniq(topBarPlotData.map(item => item.group))\n  }\n\n  return (\n    <>\n      <div style={{ width: '100%' }}>\n        {!isLoaded && <span className=\"spinner\" />}\n        {isLoaded && (\n          <>\n            <div style={{ textAlign: 'right', width: '300px', float: 'right' }}>\n              <DotPlot\n                id=\"head\"\n                plotData={dotPlotQueryData}\n                isLegend={true}\n                style={{ width: '100%', height: '100%' }}\n                layoutConfig={dotPlotLayoutConfig}\n                optionsConfig={{\n                  ...optionsConfig,\n                  responsive: true,\n                  staticPlot: true,\n                }}\n                markerStyle={dotPlot.markerStyle}\n              ></DotPlot>\n            </div>\n            {topBarPlot.colors &&\n              renderTopBarLegend(topBarPlot.colors, xLabelsForTopBarPlot)}\n            {topBarPlotDataSorted.map((item, i) => (\n              <div\n                style={{ width: '100%', display: 'flex' }}\n                key={`topBarDiv_${i}`}\n              >\n                <div style={{ ...TableCellStyle, flex: '0 0 100px' }}>\n                  {item.count}&nbsp;{unCamelCase(item.y)}\n                </div>\n                <div style={{ ...TableCellStyle }}>\n                  <BarPlot\n                    style={{ width: '100%', height: '100%' }}\n                    layoutConfig={_.cloneDeep(barLayoutConfig)}\n                    optionsConfig={{ ...optionsConfig }}\n                    plotData={topBarPlotData}\n                    isTop={true}\n                    label={item.y}\n                    xMax={item.count}\n                    colors={\n                      i % 2 === 0\n                        ? topBarPlot.colors\n                        : fadeColors({ ...topBarPlot.colors }, '0.4')\n                    }\n                  />\n                </div>\n              </div>\n            ))}\n\n            <table style={{ width: '100%' }}>\n              <thead>\n                <tr>\n                  <th style={{ width: '20%' }}>&nbsp;</th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                {yLabelsForDotPlot.map((label, i) => (\n                  <tr key={`plotDiv_${+i}`}>\n                    <td style={{ height: '60px', padding: '10px' }}>\n                      <ElementWithTooltip\n                        idForToolTip={`plotDiv1_${+i}`}\n                        tooltipText={`${getTooltip(dotPlotQueryData, label)} `}\n                        tooltipVisualProps={tooltipProps}\n                        callbackFn={() => _.noop}\n                      >\n                        <div>\n                          <span>{label}</span>\n                          <br />\n                          {totalsByDotPlotY[i].count} {sideBarPlot.countLabel}\n                          <br />\n                          <BarPlot\n                            style={{ width: '100%' }}\n                            layoutConfig={barLayoutConfig}\n                            optionsConfig={{\n                              ...optionsConfig,\n                              staticPlot: true,\n                            }}\n                            plotData={sideBarPlotData}\n                            isTop={false}\n                            xMax={xMaxForSideBarPlot}\n                            label={label}\n                            colors={fadeColors({ ...topBarPlot.colors }, '0.4')}\n                          />\n                        </div>\n                      </ElementWithTooltip>\n                    </td>\n                    <td>\n                      <div style={{ width: '100%' }}>\n                        <DotPlot\n                          id={i + ''}\n                          onClick={(e: any) =>\n                            onPointClick(getClickTargetData(e))\n                          }\n                          plotData={dotPlotQueryData}\n                          markerStyle={dotPlot.markerStyle}\n                          xMax={xMaxForDotPlot}\n                          label={label}\n                          layoutConfig={dotPlotLayoutConfig}\n                          optionsConfig={{\n                            ...optionsConfig,\n                            responsive: false,\n                          }}\n                        ></DotPlot>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n                <tr>\n                  <td\n                    style={{\n                      textAlign: 'right',\n                      paddingBottom: '18px',\n                      paddingRight: '10px',\n                    }}\n                  >\n                    VOLUME:\n                  </td>\n                  <td>\n                    {' '}\n                    <DotPlot\n                      id={'footer'}\n                      plotData={dotPlotQueryData}\n                      isXAxis={true}\n                      xMax={xMaxForDotPlot}\n                      layoutConfig={dotPlotLayoutConfig}\n                      optionsConfig={{ ...optionsConfig, responsive: false }}\n                    ></DotPlot>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default ThemesPlot\n","import React, { useState, useEffect } from 'react'\nimport { AccessRequirement } from '../../utils/synapseTypes/AccessRequirement/AccessRequirement'\nimport { getAllAccessRequirements } from '../../utils/SynapseClient'\nimport { SynapseConstants } from '../../utils/'\nimport Modal from 'react-bootstrap/Modal'\nimport SelfSignAccessRequirement from './SelfSignAccessRequirement'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\nimport TermsOfUseAccessRequirement from './TermsOfUseAccessRequirement'\n\nlibrary.add(faCircle)\n\ntype Props = {\n  entityId: string\n  token: string | undefined\n  onHide?: Function\n}\n\nenum SUPPORTED_ACCESS_REQUIREMENTS {\n  SelfSignAccessRequirement = 'org.sagebionetworks.repo.model.SelfSignAccessRequirement',\n  TermsOfUseAccessRequirement = 'org.sagebionetworks.repo.model.TermsOfUseAccessRequirement',\n}\n\nexport default function AccessRequirementList({\n  entityId,\n  token,\n  onHide,\n}: Props) {\n  const [accessRequirements, setAccessRequirements] = useState<\n    Array<AccessRequirement>\n  >([])\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n\n  useEffect(() => {\n    const getAccessRequirements = async () => {\n      if (!token) {\n        setAccessRequirements([])\n        // this view only makes sense when the user is logged in\n        return\n      }\n      setIsLoading(true)\n      try {\n        const incomingAccessRequirements = await getAllAccessRequirements(\n          token,\n          entityId,\n        )\n        // we use a functional update below https://reactjs.org/docs/hooks-reference.html#functional-updates\n        // because we want react hooks to update without a dependency on accessRequirements\n        setAccessRequirements(prevAcessRequirements =>\n          prevAcessRequirements.concat(incomingAccessRequirements),\n        )\n      } catch (err) {\n        console.error('Error on get access requirements: ', err)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    getAccessRequirements()\n  }, [token, entityId])\n\n  /**\n   * Returns rendering for the access requirement.\n   *\n   * Only supports SelfSignAccessRequirement and TermsOfUseAccessRequirement\n   *\n   * @param {AccessRequirement} accessRequirement accessRequirement being rendered\n   */\n  const renderAccessRequirement = (accessRequirement: AccessRequirement) => {\n    switch (accessRequirement.concreteType) {\n      case SUPPORTED_ACCESS_REQUIREMENTS.SelfSignAccessRequirement:\n        return (\n          <SelfSignAccessRequirement accessRequirement={accessRequirement} />\n        )\n      case SUPPORTED_ACCESS_REQUIREMENTS.TermsOfUseAccessRequirement:\n        return (\n          <TermsOfUseAccessRequirement accessRequirement={accessRequirement} />\n        )\n      default:\n        // case not supported yet, go to synapse\n        return (\n          <a\n            href={`https://www.synapse.org/#!AccessRequirements:ID=${entityId}&TYPE=ENTITY`}\n          >\n            See Requirements on synapse.org\n          </a>\n        )\n    }\n  }\n\n  return (\n    <Modal onHide={() => onHide?.()} show={true} animation={false}>\n      <Modal.Header closeButton={true}>\n        <Modal.Title>Data Access Request</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <h4 className=\"uppercase-text bold-text\">You Requested Access For:</h4>\n        <p> TODO: Entity Name </p>\n        <h4 className=\"uppercase-text bold-text\"> What do I need to do? </h4>\n        <div className=\"requirement-container\">\n          <div className=\"direction-label\">1</div>\n          <div>\n            <p className=\"bold-text\">\n              <button\n                className={`${SynapseConstants.SRC_SIGN_IN_CLASS} sign-in-btn`}\n              >\n                Sign in\n              </button>\n              with a Sage Platform (synapse) user account.\n            </p>\n            <p>\n              If you do not have a Sage Account, you can\n              <a href=\"https://www.synapse.org/#!RegisterAccount:0\">\n                &nbsp;Register for free.\n              </a>\n            </p>\n          </div>\n        </div>\n        {isLoading && <span className=\"spinner\" />}\n        {accessRequirements.map(req => {\n          return renderAccessRequirement(req)\n        })}\n      </Modal.Body>\n    </Modal>\n  )\n}\n","import * as React from 'react'\nimport CardContainerLogic, {\n  CardConfiguration,\n} from '../../../lib/containers/CardContainerLogic'\nimport { SynapseConstants } from '../../../lib'\nimport brainSvg from './icons/brain.svg'\nimport circleSvg from './icons/circle.svg'\nimport mouseSvg from './icons/mouse.svg'\nimport resilienceadSvg from './icons/resiliencead.svg'\n\ntype State = {\n  tabIndex: Number\n}\n\nexport default class CardContainerLogicDemo extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      tabIndex: 2,\n    }\n  }\n\n  render() {\n    const { tabIndex } = this.state\n    const iconOptions = {\n      'AMP-AD': circleSvg,\n      'M2OVE-AD': brainSvg,\n      'MODEL-AD': mouseSvg,\n      'Resilience-AD': resilienceadSvg,\n    }\n    \n    const genericCardSchema: CardConfiguration = {\n      type: SynapseConstants.GENERIC_CARD,\n      genericCardSchema: {\n        type: SynapseConstants.DATASET,\n        title: 'portalDisplayName',\n        subTitle: 'centerName',\n        description: 'summary',\n        secondaryLabels: ['externalLink'],\n      },\n      labelLinkConfig: [\n        {\n          isMarkdown: true,\n          matchColumnName: 'externalLink',\n        },\n      ],\n    }\n    return (\n      <div>\n        <hr />\n        <p> Generic Card Rendering </p>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => this.setState({ tabIndex: 0 })}\n        >\n          Header Card\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => this.setState({ tabIndex: 1 })}\n        >\n          People Card\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => this.setState({ tabIndex: 2 })}\n        >\n          Other Card\n        </button>\n        <div style={{ height: 50 }} />\n        {tabIndex === 0 && (\n          <CardContainerLogic\n            type={SynapseConstants.GENERIC_CARD}\n            sql={'SELECT * FROM syn17024173'}\n            entityId={'syn17024173'}\n            searchParams={{ Program: 'AMP-AD' }}\n            genericCardSchema={{\n              type: 'Program',\n              title: 'Full Name',\n              subTitle: 'Short Description',\n              icon: 'Program',\n            }}\n            backgroundColor={'#5960a5'}\n            isHeader={true}\n            iconOptions={iconOptions}\n          />\n        )}\n        {tabIndex === 1 && (\n          <CardContainerLogic\n            type={SynapseConstants.MEDIUM_USER_CARD}\n            sql={'SELECT ownerID as ownerId FROM syn13897207'}\n            entityId={'syn13897207'}\n            loadingScreen={<div> Im loading as fast I can !!! </div>}\n          />\n        )}\n        {tabIndex === 2 && (\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-md-10 col-md-offset-1\">\n                <CardContainerLogic\n                  type={SynapseConstants.GENERIC_CARD}\n                  sql={'SELECT * FROM syn18488466 group by externalLink'}\n                  entityId={'syn18488466'}\n                  unitDescription=\"studies\"\n                  {...genericCardSchema}\n                  secondaryLabelLimit={3}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n        <div style={{ height: 50 }} />\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport QueryWrapper from 'lib/containers/QueryWrapper'\nimport Search, { Searchable } from 'lib/containers/Search'\nimport { SynapseConstants } from 'lib'\nimport { GenericCardSchema } from 'lib/containers/GenericCard'\nimport { CardConfiguration } from 'lib/containers/CardContainerLogic'\nimport CardContainer from 'lib/containers/CardContainer'\n\nexport const SearchDemo: React.SFC = () => {\n  const sql = 'SELECT * FROM syn20337467'\n  const facetAliases = {\n    contributor: 'Contributor',\n    diagnosis: 'Diagnosis',\n  }\n  const searchable: Searchable = [\n    {\n      columnName: 'summary',\n      hintText: 'summary',\n    },\n    {\n      columnName: 'contributor',\n      hintText: 'Jane',\n    },\n    {\n      columnName: 'diagnosis',\n      hintText: 'LOAD',\n    },\n    {\n      columnName: 'modelType',\n      hintText: 'hint',\n    },\n  ]\n  const genericCardSchema: GenericCardSchema = {\n    title: 'Title',\n    type: 'Generic Tool',\n    subTitle: 'softwareType',\n    description: 'summary',\n    icon: 'icon',\n    secondaryLabels: ['contributor', 'diagnosis', 'program'],\n  }\n  const cardConfiguration: CardConfiguration = {\n    type: SynapseConstants.GENERIC_CARD,\n    genericCardSchema,\n  }\n  return (\n    <div className=\"col-xs-8 col-xs-offset-2\">\n      <QueryWrapper\n        facetAliases={facetAliases}\n        rgbIndex={5}\n        initQueryRequest={{\n          entityId: 'syn20337467',\n          concreteType:\n            'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n          partMask:\n            SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n            SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n            SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n            SynapseConstants.BUNDLE_MASK_QUERY_COUNT |\n            SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n          query: {\n            sql,\n            limit: 25,\n            offset: 0,\n          },\n        }}\n        showBarChart={false}\n        unitDescription={'studies'}\n      >\n        <Search searchable={searchable} isQueryWrapperMenuChild={false} />\n        <CardContainer {...cardConfiguration} />\n      </QueryWrapper>\n    </div>\n  )\n}\n\nexport default SearchDemo\n","import * as React from 'react'\nimport ModalDownload from '../../../lib/containers/ModalDownload'\n\ntype State = {\n  showModal: boolean\n}\n\nclass ModalDownloadDemo extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      showModal: false,\n    }\n  }\n\n  onClose = () => {\n    this.setState({\n      showModal: false,\n    })\n  }\n\n  onOpen = () => {\n    console.log('opening')\n    this.setState({\n      showModal: true,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <button onClick={this.onOpen} className=\"btn btn-primary\">\n          {' '}\n          Show ModalDownload{' '}\n        </button>\n        {this.state.showModal && (\n          <ModalDownload\n            sql={'SELECT * from syn17328596'}\n            entityId={'syn17328596'}\n            onClose={this.onClose}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default ModalDownloadDemo\n","import * as React from 'react'\nimport UserCard from '../../../lib/containers/UserCard'\nimport { SynapseConstants } from '../../../lib'\nimport MarkdownSynapse from '../../../lib/containers/MarkdownSynapse'\n\nexport default class UserBadgeSmallDemo extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props)\n  }\n  public render() {\n    const profiles = [\n      '3376985',\n      '1131050',\n      '273960',\n      '3346401',\n      '3374422',\n      '273950',\n      '273950',\n    ]\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <div className=\"row\">\n            <h3>User Card Small </h3>\n            <p> sans photo- </p>\n            <UserCard\n              ownerId={'273950'}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <p> without text </p>\n            <UserCard\n              ownerId={'3374422'}\n              hideText={true}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <hr />\n            <p> with custom link- </p>\n            <UserCard\n              ownerId={'273950'}\n              size={SynapseConstants.SMALL_USER_CARD}\n              link={'https://google.com'}\n            />\n            <UserCard\n              ownerId={'3374422'}\n              hideText={true}\n              size={SynapseConstants.SMALL_USER_CARD}\n              link={'https://google.com'}\n            />\n            <hr />\n            <p> without tooltip </p>\n            <div className=\"SRC-centerContent\">\n              <UserCard\n                ownerId={'3374422'}\n                hideTooltip={true}\n                size={SynapseConstants.SMALL_USER_CARD}\n              />\n              <UserCard\n                ownerId={'3346401'}\n                hideTooltip={true}\n                size={SynapseConstants.SMALL_USER_CARD}\n              />\n            </div>\n            <hr />\n            <p> with photo- </p>\n            <UserCard\n              ownerId={'3346401'}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <UserCard\n              ownerId={'1131050'}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <p> without text- </p>\n            <UserCard\n              ownerId={'273960'}\n              hideText={true}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <hr />\n            <p>inside of markdown-</p>\n            <MarkdownSynapse wikiId={'588827'} ownerId={'syn18380882'} />\n          </div>\n          <div className=\"row\">\n            <h3> User Card Large </h3>\n            <p> with photo- </p>\n            <UserCard\n              ownerId={'1131050'}\n              // tslint:disable-next-line:jsx-no-lambda\n              size={SynapseConstants.LARGE_USER_CARD}\n              menuActions={[\n                {\n                  field: 'Projects',\n                  callback: userProfile => {\n                    console.log(userProfile)\n                  },\n                },\n                {\n                  field: 'Profile',\n                  callback: userProfile => {\n                    console.log(userProfile)\n                  },\n                },\n                {\n                  field: 'SEPERATOR',\n                },\n                {\n                  field: 'Teams',\n                  callback: userProfile => {\n                    console.log(userProfile)\n                  },\n                },\n              ]}\n            />\n            <br />\n            <p> sans photo- </p>\n            <br />\n            <UserCard\n              ownerId={'3374422'}\n              size={SynapseConstants.LARGE_USER_CARD}\n            />\n            <br />\n            <br />\n            <UserCard\n              ownerId={'345424'}\n              size={SynapseConstants.LARGE_USER_CARD}\n              menuActions={[\n                {\n                  field: 'Projects',\n                  callback: userProfile => {\n                    console.log(userProfile)\n                  },\n                },\n                {\n                  field: 'Profile',\n                  callback: userProfile => {\n                    console.log(userProfile)\n                  },\n                },\n                {\n                  field: 'SEPERATOR',\n                },\n                {\n                  field: 'Teams',\n                  callback: userProfile => {\n                    console.log(userProfile)\n                  },\n                },\n              ]}\n            />\n          </div>\n        </div>\n        <h3> User Card Medium Wrapping Example </h3>\n        <div className=\"SRC-card-grid-row\">\n          {[1, 2, 3, 4, 5].map((_el, index) => {\n            return (\n              <div className=\"SRC-grid-item\" key={index}>\n                <UserCard\n                  hideEmail={index % 2 === 0}\n                  menuActions={[\n                    {\n                      field: 'Projects',\n                      callback: userProfile => {\n                        console.log(userProfile)\n                      },\n                    },\n                    {\n                      field: 'Profile',\n                      callback: userProfile => {\n                        console.log(userProfile)\n                      },\n                    },\n                    {\n                      field: 'SEPERATOR',\n                    },\n                    {\n                      field: 'Teams',\n                      callback: userProfile => {\n                        console.log(userProfile)\n                      },\n                    },\n                  ]}\n                  ownerId={profiles[index]}\n                  size={SynapseConstants.MEDIUM_USER_CARD}\n                  link={index % 2 ? 'https://google.com' : ''}\n                />\n              </div>\n            )\n          })}\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n","import * as React from 'react'\nimport MarkdownSynapse, {\n  MarkdownSynapseProps,\n} from '../../../lib/containers/MarkdownSynapse'\n\ntype State = {\n  index: number\n  markdownPropsArray: MarkdownSynapseProps[]\n}\n\nexport default class MarkdownSynapseDemo extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      index: 3,\n      markdownPropsArray: [\n        {\n          // footnotes with html\n          ownerId: 'syn18380882',\n          wikiId: '588827',\n        },\n        {\n          // with details tag\n          ownerId: 'syn12666371',\n          wikiId: '585317',\n        },\n        {\n          //  with references\n          ownerId: 'syn17100797',\n          wikiId: '587923',\n        },\n        {\n          // with bookmark\n          ownerId: 'syn21097753',\n          wikiId: '597236',\n        },\n        {\n          // lego man\n          ownerId: 'syn18142975',\n        },\n        {\n          // nested link\n          ownerId: 'syn12666371',\n          wikiId: '595383',\n        },\n      ],\n    }\n  }\n  render() {\n    const { index, markdownPropsArray } = this.state\n    const props = markdownPropsArray[index]\n    return (\n      <div className=\"container\">\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {\n            this.setState({ index: 0 })\n          }}\n        >\n          Footnotes with html\n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {\n            this.setState({ index: 1 })\n          }}\n        >\n          Details tag\n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {\n            this.setState({ index: 2 })\n          }}\n        >\n          References\n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {\n            this.setState({ index: 3 })\n          }}\n        >\n          Table of Contents\n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {\n            this.setState({ index: 4 })\n          }}\n        >\n          Lego Man\n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {\n            this.setState({ index: 5 })\n          }}\n        >\n          Show nested anchor\n        </button>\n        {/* footnotes with html */}\n        <MarkdownSynapse {...props} />\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport NewsFeedMenu from '../../../lib/containers/NewsFeedMenu'\n\nexport const NewsFeedDemo:React.SFC = () => {\n  // in the portal, search params should be filled in based on URL query parameters.\n  const searchParams: any = {'cat':'3'}\n  return (\n    <NewsFeedMenu\n      menuConfig={[\n        {\n          feedName:'Data Releases',\n          feedDescription:'The AMP-AD Knowledge Portal releases new Alzheimer\\'s disease data twice annually, in May and November. Data releases may include new data, analyses, and results; as well as changes and updates to previously released data.',\n          feedUrl:'https://portalnews.wpengine.com/?feed=rss2',\n          feedKeyValue: {'cat':'4'},\n          defaultItemsToShow:3,\n        },\n        {\n          feedName:'Updates',\n          feedDescription:'The AMP-AD Knowledge Portal reaches the broader scientific community through multiple channels that encourage open-science collaborations. News updates include videos, events, and presentations that highlight the community behind the data.',\n          feedUrl:'https://portalnews.wpengine.com/?feed=rss2',\n          feedKeyValue: {'cat':'3'},\n          defaultItemsToShow:3,\n          twitterFeedUrl:'https://twitter.com/AMPADPortal?ref_src=twsrc%5Etfw'\n        },\n        {\n          feedName:'Newsletter',\n          feedDescription:'The AMP-AD Knowledge Portal sends a quarterly newsletter to interested members of the scientific community, delivering consolidated information and updates related to the Portal.',\n          feedUrl:'https://portalnews.wpengine.com/?feed=rss2',\n          feedKeyValue: {'cat':'5'},\n          defaultItemsToShow:3,\n          mailChimpListName:'AMP-AD quarterly newsletter',\n          mailChimpUrl:'https://sagebase.us7.list-manage.com/subscribe/post?u=b146de537186191a9d2110f3a&amp;id=96b614587a'\n        },\n      ]}\n      searchParams={searchParams}\n      routeToNewsFeed={'/Playground/NewsFeedDemo'}\n    />\n  )\n}\n\n\n","import { SynapseClient } from 'lib'\nimport {\n  FileUploadComplete,\n  FormData,\n  FormGroup,\n  ListRequest,\n  ListResponse,\n  StatusEnum,\n} from 'lib/utils/synapseTypes/'\nimport * as React from 'react'\nimport { TokenContext } from '../App'\n\ntype FormServicesIntegrationDemoState = {\n  token?: string\n  formGroup?: FormGroup\n  formData?: FormData\n  myFormDataList?: ListResponse\n  formAdminFormDataList?: ListResponse\n}\n\nclass FormServicesIntegrationDemo extends React.Component<\n  {},\n  FormServicesIntegrationDemoState\n> {\n  constructor(props: any) {\n    super(props)\n    this.state = {}\n    this.onCreateFormGroup = this.onCreateFormGroup.bind(this)\n    this.onCreateFormData = this.onCreateFormData.bind(this)\n    this.onUpdateFormData = this.onUpdateFormData.bind(this)\n    this.onSubmitFormData = this.onSubmitFormData.bind(this)\n    this.listMyFormData = this.listMyFormData.bind(this)\n    this.listFormAdminFormData = this.listFormAdminFormData.bind(this)\n    this.onReadFormDataFileHandleContents = this.onReadFormDataFileHandleContents.bind(\n      this,\n    )\n  }\n\n  public onCreateFormGroup(): void {\n    SynapseClient.createFormGroup(\n      'AAMP-ADExternalContribution(production)',\n      this.state.token!,\n    )\n      .then((data: FormGroup) => {\n        console.log('Successfully created FormGroup', data)\n        this.setState({ formGroup: data })\n      })\n      .catch((error: any) =>\n        console.error('Failed to create form group', error),\n      )\n  }\n  public onUpdateFormData(): void {\n    SynapseClient.uploadFile(\n      this.state.token,\n      'my test file',\n      new Blob(['hello form data 2']),\n    )\n      .then((fileUploadComplete: FileUploadComplete) => {\n        console.log(\n          'Successfully created test file handle, now update the form data!',\n        )\n        SynapseClient.updateFormData(\n          this.state.formData!.formDataId!,\n          'my test form data',\n          fileUploadComplete.fileHandleId,\n          this.state.token!,\n        )\n          .then((data: FormData) => {\n            console.log('Successfully updated FormData', data)\n            this.setState({ formData: data })\n          })\n          .catch((error: any) =>\n            console.error('Failed to update FormData', error),\n          )\n      })\n      .catch((error: any) =>\n        console.error('Failed to update a new file handle:', error),\n      )\n  }\n\n  public onCreateFormData(): void {\n    SynapseClient.uploadFile(\n      this.state.token,\n      'my test file',\n      new Blob(['hello form data']),\n    )\n      .then((fileUploadComplete: FileUploadComplete) => {\n        console.log(\n          'Successfully created test file handle, now create the form data!',\n        )\n        SynapseClient.createFormData(\n          this.state.formGroup!.groupId!,\n          'my test form data',\n          fileUploadComplete.fileHandleId,\n          this.state.token!,\n        )\n          .then((data: FormData) => {\n            console.log('Successfully created FormData', data)\n            this.setState({ formData: data })\n          })\n          .catch((error: any) =>\n            console.error('Failed to create FormData', error),\n          )\n      })\n      .catch((error: any) =>\n        console.error('Failed to create a new file handle:', error),\n      )\n  }\n\n  public onSubmitFormData(): void {\n    SynapseClient.submitFormData(\n      this.state.formData!.formDataId!,\n      this.state.token!,\n    )\n      .then((data: FormData) => {\n        console.log('Successfully submitted FormData', data)\n      })\n      .catch((error: any) => console.error('Failed to submit form data', error))\n  }\n\n  private listMyFormData = () => {\n    if (\n      this.state.token &&\n      this.state.formGroup &&\n      !this.state.myFormDataList\n    ) {\n      let request: ListRequest = {\n        groupId: this.state.formGroup.groupId!,\n        filterByState: [\n          StatusEnum.ACCEPTED,\n          StatusEnum.SUBMITTED_WAITING_FOR_REVIEW,\n          StatusEnum.WAITING_FOR_SUBMISSION,\n        ],\n      }\n      SynapseClient.listFormData(request, this.state.token)\n        .then((resp: ListResponse) => {\n          console.log('Successfully got a my FormData list', resp)\n          this.setState({ myFormDataList: resp })\n        })\n        .catch((error: any) =>\n          console.error('Failed to get my FormData list', error),\n        )\n    }\n  }\n\n  private listFormAdminFormData = () => {\n    if (\n      this.state.token &&\n      this.state.formGroup &&\n      !this.state.formAdminFormDataList\n    ) {\n      let request: ListRequest = {\n        groupId: this.state.formGroup.groupId!,\n        filterByState: [\n          StatusEnum.ACCEPTED,\n          StatusEnum.SUBMITTED_WAITING_FOR_REVIEW,\n        ],\n      }\n      SynapseClient.listFormDataAsFormAdmin(request, this.state.token)\n        .then((resp: ListResponse) => {\n          console.log('Successfully got FormGroup admin list', resp)\n          this.setState({ formAdminFormDataList: resp })\n        })\n        .catch((error: any) =>\n          console.error('Failed to get FormGroup admin FormData list', error),\n        )\n    }\n  }\n\n  private onReadFormDataFileHandleContents = () => {\n    SynapseClient.getFileHandleContentFromID(\n      this.state.formData!.dataFileHandleId,\n      this.state.token!,\n    )\n      .then((data: string) => {\n        console.log('Successfully fetched file handle contents: ', data)\n      })\n      .catch((error: any) =>\n        console.error('Failed to read form data file handle contents', error),\n      )\n  }\n\n  public componentDidUpdate() {\n    this.listMyFormData()\n    this.listFormAdminFormData()\n  }\n\n  render() {\n    return (\n      <TokenContext.Consumer>\n        {(token: string) => {\n          if (token !== this.state.token) {\n            this.setState({\n              token,\n            })\n          }\n          if (token) {\n            return (\n              <>\n                <div>\n                  <a onClick={this.onCreateFormGroup}>\n                    Create Form Group\n                    <br />\n                  </a>\n                  {!this.state.formData && (\n                    <a onClick={this.onCreateFormData}>\n                      Create Form Data\n                      <br />\n                    </a>\n                  )}\n                  {this.state.formData && (\n                    <a onClick={this.onReadFormDataFileHandleContents}>\n                      Get Form Data FileHandle contents\n                      <br />\n                    </a>\n                  )}\n\n                  {this.state.formData && (\n                    <a onClick={this.onUpdateFormData}>\n                      Update Form Data\n                      <br />\n                    </a>\n                  )}\n                  {this.state.formData && (\n                    <a onClick={this.onSubmitFormData}>\n                      Submit Form Data\n                      <br />\n                    </a>\n                  )}\n                </div>\n                {<h3>My FormData</h3>}\n                {this.state.myFormDataList && (\n                  <table>\n                    <thead>\n                      <tr>\n                        <th>Form Data name</th>\n                        <th>Data File Handle ID</th>\n                        <th>Status</th>\n                        <th>Rejection Reason</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.myFormDataList.page.map(value => {\n                        return (\n                          <tr key={value.formDataId}>\n                            <td>{value.name}</td>\n                            <td>{value.dataFileHandleId}</td>\n                            <td>{value.submissionStatus.state}</td>\n                            <td>{value.submissionStatus.rejectionMessage}</td>\n                          </tr>\n                        )\n                      })}\n                    </tbody>\n                  </table>\n                )}\n                {<h3>FormGroup Admin FormData</h3>}\n                {this.state.formAdminFormDataList && (\n                  <table>\n                    <thead>\n                      <tr>\n                        <th>Form Data name</th>\n                        <th>Data File Handle ID</th>\n                        <th>Status</th>\n                        <th>Rejection Reason</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.formAdminFormDataList.page.map(value => {\n                        return (\n                          <tr key={value.formDataId}>\n                            <td>{value.name}</td>\n                            <td>{value.dataFileHandleId}</td>\n                            <td>{value.submissionStatus.state}</td>\n                            <td>{value.submissionStatus.rejectionMessage}</td>\n                          </tr>\n                        )\n                      })}\n                    </tbody>\n                  </table>\n                )}\n              </>\n            )\n          } else\n            return (\n              <>\n                <p>Please log in and reload this route</p>\n              </>\n            )\n        }}\n      </TokenContext.Consumer>\n    )\n  }\n}\n\nexport default FormServicesIntegrationDemo\n","import Plotly from 'plotly.js-basic-dist'\nimport * as React from 'react'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { unCamelCase } from '../utils/functions/unCamelCase'\nimport {\n  FacetColumnResultValueCount,\n  FacetColumnResultValues,\n  FacetColumnValuesRequest,\n  QueryBundleRequest,\n  QueryResultBundle,\n} from '../utils/synapseTypes/'\nimport getColorPallette from './ColorGradient'\nimport { SELECT_SINGLE_FACET } from './Facets'\nimport { FacetSelection, QueryWrapperChildProps } from './QueryWrapper'\n\nexport const Plot = createPlotlyComponent(Plotly)\nconst ROW_HEIGHT: number = 160\nconst CHARTS_PER_ROW: number = 5\n\nexport type FacetsPlotNavState = {\n  isShowingMore: boolean\n  isResetPossible: boolean\n}\n\nexport type FacetsPlotNavProps = {\n  loadingScreen?: React.FunctionComponent | JSX.Element\n  facetsToPlot?: string[]\n}\n\ntype InternalProps = FacetsPlotNavProps & QueryWrapperChildProps\n/**\n * Make a chart for each facet\n *\n * @class FacetsPlotNav\n * @extends {React.Component}\n */\nexport default class FacetsPlotNav extends React.Component<\n  InternalProps,\n  FacetsPlotNavState\n> {\n  constructor(props: InternalProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n    // the text currently under the cursor\n    this.state = {\n      isShowingMore: false,\n      isResetPossible: false,\n    }\n    this.extractPlotDataArray = this.extractPlotDataArray.bind(this)\n    this.toggleShowMore = this.toggleShowMore.bind(this)\n    this.onReset = this.onReset.bind(this)\n    // this.onHover = this.onHover.bind(this)\n    // this.onUnhover = this.onUnhover.bind(this)\n  }\n\n  public toggleShowMore(event: React.MouseEvent<HTMLAnchorElement>) {\n    event.preventDefault()\n    this.setState({\n      isShowingMore: !this.state.isShowingMore,\n    })\n  }\n\n  public onReset(event: React.MouseEvent<HTMLAnchorElement>) {\n    event.preventDefault()\n    const { executeInitialQueryRequest } = this.props\n    if (executeInitialQueryRequest) {\n      executeInitialQueryRequest()\n    }\n    this.setState({\n      isResetPossible: false,\n    })\n  }\n\n  // public onHover = (event: any) => {\n  //   this.updateHover(true, event)\n  // }\n\n  // NOTE: There's an issue where onUnhover() is not called after the first onHover().\n  // Moving the plotData to state requires some consideration.  The plot must be updated by the table filter selection.\n  // Also, the Plot will not update if it points to the same (shallow compare) data object.  One way to force a Plot update is to\n  // update the layout.datarevision.\n  // public onUnhover = (event: any) => {\n  //   this.updateHover(false, event)\n  // }\n\n  // public updateHover = (isHover:boolean, event: any) => {\n  //   if (event.points && event.points[0] && this.state.plotData) {\n  //     const plotPointData: any = event.points[0]\n  //     const domain = plotPointData.data.domain\n  //     const newMarkerLineWidth: number = isHover ? 1 : 0\n  //     this.state.plotData[(domain.row * CHARTS_PER_ROW) + domain.column].marker.line.width[plotPointData.pointNumber] = newMarkerLineWidth\n  //     this.setState({datarevision: this.state.datarevision + 1})\n  //   }\n  // }\n\n  /**\n   * Handle click event\n   */\n  public handleClick = (event: any) => {\n    if (event.points && event.points[0]) {\n      const plotPointData: any = event.points[0]\n      const facetName = plotPointData.data.name\n      const facetValueClicked =\n        plotPointData.data.facetEnumerationValues[plotPointData.pointNumber]\n      // update the facet\n      const { isAllFilterSelectedForFacet = {} } = this.props\n      isAllFilterSelectedForFacet[facetName] = false\n      const lastFacetSelection = {\n        selector: SELECT_SINGLE_FACET,\n        facetValue: facetValueClicked,\n        columnName: facetName,\n      } as FacetSelection\n      this.props.updateParentState!({\n        lastFacetSelection,\n        isAllFilterSelectedForFacet,\n      })\n\n      // run the query with the selected facet value\n      const queryRequest: QueryBundleRequest = this.props.getLastQueryRequest!()\n      const { selectedFacets = [] } = queryRequest.query\n      const specificFacet = selectedFacets!.find(\n        el => el.columnName === facetName,\n      )!\n      if (!specificFacet) {\n        const facetColumnValuesRequest: FacetColumnValuesRequest = {\n          facetValues: [facetValueClicked],\n          concreteType:\n            'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest',\n          columnName: facetName,\n        }\n        selectedFacets.push(facetColumnValuesRequest)\n        // align the reference to selectedFacets\n        queryRequest.query.selectedFacets = selectedFacets\n      } else {\n        specificFacet.facetValues = [facetValueClicked]\n      }\n\n      queryRequest.query.offset = 0\n      this.props.executeQueryRequest!(queryRequest)\n    }\n    this.setState({\n      isResetPossible: true,\n    })\n  }\n\n  public render() {\n    const {\n      data,\n      isLoadingNewData,\n      loadingScreen,\n      // rgbIndex,\n      asyncJobStatus,\n    } = this.props\n    // while loading\n    if (isLoadingNewData || !data) {\n      return (\n        <div className=\"SRC-loadingContainer SRC-centerContentColumn\">\n          {/*\n            check loading screen is not undefined or null and show\n            it if so\n          */}\n          {!!loadingScreen && loadingScreen}\n          <div>{asyncJobStatus && asyncJobStatus.progressMessage}</div>\n        </div>\n      )\n    }\n    const plotData = this.extractPlotDataArray(data!)\n    const showMoreButton = plotData.length > CHARTS_PER_ROW && (\n      <a\n        style={{\n          fontSize: '14px',\n          cursor: 'pointer',\n          marginLeft: '5px',\n          marginBottom: '10px',\n        }}\n        className=\"SRC-primary-text-color\"\n        onClick={this.toggleShowMore}\n      >\n        {this.state.isShowingMore ? 'Show Less' : 'Show More'}\n      </a>\n    )\n    const resetButton = (\n      <a\n        style={{\n          fontSize: '14px',\n          cursor: 'pointer',\n          marginLeft: '5px',\n          marginRight: '5px',\n          marginBottom: '10px',\n          float: 'right',\n        }}\n        className=\"SRC-primary-text-color\"\n        onClick={this.onReset}\n      >\n        Reset\n      </a>\n    )\n\n    // create a pie chart for each facet (values) result\n    const plotDataToShow: any[] = this.state.isShowingMore\n      ? plotData\n      : plotData.slice(0, CHARTS_PER_ROW)\n\n    const rowCount: number = Math.ceil(plotDataToShow.length / CHARTS_PER_ROW)\n    const layout = {\n      grid: { rows: rowCount, columns: CHARTS_PER_ROW },\n      showlegend: false,\n      annotations: [],\n      margin: { l: 20, r: 20, b: 10, t: 10, pad: 40 },\n      height: ROW_HEIGHT * rowCount,\n      // datarevision: this.state.datarevision\n    }\n\n    return (\n      <>\n        <div className=\"SRC-bar-border SRC-bar-marginTop SRC-bar-border-top\">\n          <div>\n            <Plot\n              layout={layout}\n              data={plotDataToShow}\n              className=\"SRC-fullWidth\"\n              config={{ displayModeBar: false }}\n              useResizeHandler={true}\n              onClick={this.handleClick}\n              // onHover={this.onHover}\n              // onUnhover={this.onUnhover}\n            ></Plot>\n          </div>\n        </div>\n        <div\n          className=\"SRC-bar-border SRC-bar-border-bottom\"\n          style={{ marginBottom: '15px' }}\n        >\n          {showMoreButton}\n          {this.state.isResetPossible && resetButton}\n        </div>\n      </>\n    )\n  }\n  public extractPlotDataArray(data: QueryResultBundle) {\n    const { facetsToPlot } = this.props\n    const plotData: any[] = []\n\n    // pull out the data corresponding to the filter in question\n    let enumerationFacets = data.facets!.filter(\n      item => item.facetType === 'enumeration',\n    ) as FacetColumnResultValues[]\n    if (facetsToPlot) {\n      // filter to show plots for the chosen facets\n      enumerationFacets = enumerationFacets.filter(item =>\n        facetsToPlot.includes(item.columnName),\n      )\n    }\n\n    enumerationFacets.forEach(\n      (item: FacetColumnResultValues, index: number) => {\n        const { colorPalette } = getColorPallette(\n          index,\n          item.facetValues.length,\n        )\n        const singlePieChartData: any = {\n          values: [],\n          labels: [],\n          facetEnumerationValues: [],\n          name: item.columnName,\n          // The only thing supported in hoverlabel today is bordercolor, but this also effects the hoverlabel text color!\n          // https://github.com/plotly/plotly.js/issues/2342\n          // hoverlabel: {\n          //   bordercolor: 'rgb(216, 216, 218)',\n          //   opacity: 0.7\n          // },\n          hovertemplate:\n            '<b>%{label}</b><br>' +\n            '%{value} (%{percent})<br>' +\n            '<extra></extra>',\n          textposition: 'inside',\n          textinfo: 'none',\n          type: 'pie',\n          title: {\n            text: unCamelCase(item.columnName),\n            font: {\n              size: 14,\n            },\n            position: 'top center',\n          },\n          marker: {\n            colors: colorPalette,\n            line: {\n              width: [],\n            },\n          },\n          pull: [],\n          domain: {\n            row: Math.floor(index / CHARTS_PER_ROW),\n            column: index % CHARTS_PER_ROW,\n          },\n        }\n        plotData.push(singlePieChartData)\n        item.facetValues.forEach((facetValue: FacetColumnResultValueCount) => {\n          singlePieChartData.values.push(facetValue.count)\n          const displayValue =\n            facetValue.value === 'org.sagebionetworks.UNDEFINED_NULL_NOTSET'\n              ? 'unannotated'\n              : facetValue.value\n\n          singlePieChartData.labels.push(displayValue)\n          singlePieChartData.facetEnumerationValues.push(facetValue.value)\n          singlePieChartData.marker.line.width.push(\n            facetValue.isSelected ? 1 : 0,\n          )\n          singlePieChartData.pull.push(facetValue.isSelected ? 0.09 : 0)\n        })\n      },\n    )\n\n    return plotData\n  }\n}\n","import * as React from 'react'\nimport { QueryWrapperProps } from './QueryWrapper'\nimport QueryWrapper from './QueryWrapper'\nimport FacetsPlotNav, { FacetsPlotNavProps } from './FacetsPlotNav'\nimport { SynapseTableProps } from './table/SynapseTable'\nimport SynapseTable from './table/SynapseTable'\nimport { insertConditionsFromSearchParams, SQLOperator } from '../utils/functions/sqlFunctions'\n\ntype SearchParams = {\n  searchParams?: {\n    facetValue: string\n  }\n}\ntype Operator = {\n  sqlOperator: SQLOperator\n}\nexport type QueryWrapperPlotNavProps = QueryWrapperProps & Partial<FacetsPlotNavProps> & Partial<SynapseTableProps> & SearchParams & Operator\n\nconst QueryWrapperPlotNav: React.FunctionComponent<QueryWrapperPlotNavProps> = (props) => {\n  const {\n    title,\n    searchParams,\n    initQueryRequest,\n    sqlOperator,\n    facetsToPlot,\n    ...rest\n  } = props\n  if (searchParams) {\n    let sqlUsed = initQueryRequest.query.sql\n    if (searchParams) {\n      sqlUsed = insertConditionsFromSearchParams(searchParams, initQueryRequest.query.sql, sqlOperator)\n    }\n    initQueryRequest.query.sql = sqlUsed\n  }\n  return (\n    <QueryWrapper\n      {...rest}\n      initQueryRequest={initQueryRequest}\n    >\n      {\n        <FacetsPlotNav\n          loadingScreen={props.loadingScreen}\n          facetsToPlot={facetsToPlot}\n        />\n      }\n      {\n        title ?\n        <SynapseTable\n          loadingScreen={props.loadingScreen}\n          title={title}\n        />\n        :\n        <></>\n      }\n    </QueryWrapper>\n  )\n}\n\nexport default QueryWrapperPlotNav\n","import * as React from 'react'\nimport { SynapseConstants } from '../../../lib/utils'\nimport QueryWrapperPlotNav, { QueryWrapperPlotNavProps } from 'lib/containers/QueryWrapperPlotNav'\n\ntype DemoState = {\n  ownerId: string\n  isLoading: boolean\n  showMarkdown: boolean\n  version: number\n  tableProps: QueryWrapperPlotNavProps\n  activeTab: number\n}\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n */\nclass QueryWrapperPlotNavDemo extends React.Component<{},\n  DemoState\n> {\n  /**\n   * Maintain internal state of user session\n   */\n  constructor(props: any) {\n    super(props)\n    const sql:string =\n      \"SELECT * FROM syn16858331\"\n    this.state = {\n      isLoading: true,\n      ownerId: '',\n      showMarkdown: true,\n      activeTab: 3,\n      version: 0,\n      tableProps: \n      {\n        title: 'Test only',\n        sqlOperator: '=',\n        unitDescription: 'datum',\n        initQueryRequest:{\n          entityId: 'syn16858331',\n          concreteType:\n            'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n          partMask:\n            SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n            SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n            SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n            SynapseConstants.BUNDLE_MASK_QUERY_COUNT |\n            SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n          query: {\n            sql,\n            limit: 25,\n            offset: 0,\n          },\n        },\n        rgbIndex: 5,\n        // facetsToPlot: ['assay', 'dataType'],\n        loadingScreen:<div> Im loading as fast I can !!! </div>\n      }\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.removeHandler = this.removeHandler.bind(this)\n  }\n\n  /**\n   * Update internal state\n   * @param {Object} updatedState new state to be updated by the component\n   */\n  public handleChange(updatedState: {}): void {\n    this.setState(updatedState)\n  }\n\n  public removeHandler(): void {\n    this.setState({ showMarkdown: !this.state.showMarkdown })\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div className=\"container\">\n        <h2>Demo of plot nav table</h2>\n        <QueryWrapperPlotNav {...this.state.tableProps} />\n      </div>\n    )\n  }\n}\nexport default QueryWrapperPlotNavDemo\n","import * as React from 'react'\nimport { Checkbox } from '../../../lib/containers/widgets/Checkbox'\nimport { RadioGroup } from '../../../lib/containers/widgets/RadioGroup'\nimport ThemesPlot from '../../../lib/containers/widgets/themes-plot/ThemesPlot'\nimport { Range, RangeValues } from '../../../lib/containers/widgets/Range'\nimport { RangeSlider } from '../../../lib/containers/widgets/RangeSlider'\nimport { useState } from 'react'\n\ntype WigetDemoPros = {\n  token: string\n}\n\nexport const WidgetDemo: React.FunctionComponent<WigetDemoPros> = (\n  props: WigetDemoPros,\n) => {\n  const options = [\n    { label: 'option 1', value: 'option1' },\n    { label: 'option 2', value: 'option2' },\n    { label: 'option 3', value: 'option3' },\n  ]\n  const [check1, setCheck1] = useState(true)\n  const [check2, setCheck2] = useState(false)\n  const [optionValue, setOptionValue] = useState('option2')\n  const [rangeNumberValue, setRangeNumberValue] = useState(() => {\n    const result: RangeValues = {\n      min: '10.5',\n      max: '30',\n    }\n    return result\n  })\n  const [rangeDateValue, setRangeDateValue] = useState(() => {\n    const result: RangeValues = {\n      min: new Date(2019, 5, 10).toISOString(),\n      max: new Date(2019, 6, 11).toISOString(),\n    }\n    return result\n  })\n\n  const [rangeSliderValue, setRangeSliderValue] = useState({\n    min: '10',\n    max: '25',\n  })\n\n  const topBarPlotProps = {\n    entityId: 'syn21641485',\n    xField: 'totalCount',\n    yField: 'groupBy',\n    groupField: 'consortium',\n    whereClause: 'totalCount is not NULL',\n    colors: {\n      ['CSBC']: 'rgba(64,123,160, 1)',\n      ['PS-ON']: 'rgba(91,176,181,1)'\n    }\n  }\n  \n  const sideBarPlotProps = {\n    entityId: 'syn21649281',\n    xField: 'totalCount',\n    yField: 'theme',\n    groupField: 'consortium',\n    countLabel: 'projects',\n    colors: {\n      ['CSBC']: '#1c76af',\n      ['PS-ON']: '#5bb0b5'\n    }\n  }\n\n  const dotPlotProps = {\n    entityId: 'syn21639584',\n    xField: 'totalCount',\n    yField: 'theme',\n    groupField: 'groupBy',\n    infoField:  'themeDescription',\n    whereClause: \"groupBy IN ('publications', 'tools', 'datasets')\",\n    markerStyle: {\n      line: 'rgba(0, 0, 0,0.5)',\n      fill: 'rgba(0, 0, 0,0.5)',\n      size: 9\n    }\n  }\n\n  const plotCallback = ({\n    facetValue,\n    type,\n  }: {\n    facetValue: string\n    type: string\n  }) => {\n    alert(`facetValue: ${facetValue} type: ${type}`)\n  }\n  return (\n    <div className=\"container\">\n      <div style={{ fontWeight: 'bold' }}></div>\n      <h4 style={{ marginTop: '20px' }}>Checkbox</h4>\n      Checkbox 1 is {check1 ? 'checked' : 'unchecked'}\n      <br />\n      Checkbox 2 is {check2 ? 'checked' : 'unchecked'}\n      <br />\n      <Checkbox\n        label=\"Initially Checked Checkbox\"\n        id=\"ch1\"\n        checked={true}\n        onChange={(checked: boolean) => setCheck1(checked)}\n      ></Checkbox>\n      <Checkbox\n        label=\"Initially Unchecked Checkbox\"\n        id=\"ch2\"\n        onChange={(checked: boolean) => setCheck2(checked)}\n      ></Checkbox>\n      <hr></hr>\n      <h4 style={{ marginTop: '20px' }}>Radio</h4>\n      Option Value is: {optionValue}\n      <br />\n      <RadioGroup\n        id=\"radioGroup1\"\n        options={options}\n        value={optionValue}\n        onChange={(value: string) => setOptionValue(value)}\n      ></RadioGroup>\n      <hr></hr>\n      <h4 style={{ marginTop: '20px' }}>Number Range</h4>\n      Number Range Value is:\n      {` ${rangeNumberValue.min} - ${rangeNumberValue.max}`}\n      <br />\n      <Range\n        type=\"number\"\n        initialValues={{ min: rangeNumberValue.min, max: rangeNumberValue.max }}\n        onChange={(values: RangeValues) => setRangeNumberValue(values)}\n      ></Range>\n      <hr></hr>\n      <h4>Date Range</h4>\n      Number Date Value is: {rangeDateValue.min} - {rangeDateValue.max}\n      <br />\n      <Range\n        type=\"date\"\n        initialValues={{ min: rangeDateValue.min, max: rangeDateValue.max }}\n        onChange={(values: RangeValues) => setRangeDateValue(values)}\n      ></Range>\n      <hr></hr>\n      <h4>Range Slider</h4>\n      Range Slider Value is: {rangeSliderValue.min} - {rangeSliderValue.max}\n      <br />\n      <RangeSlider\n        initialValues={rangeSliderValue}\n        onChange={(values: { min: string; max: string }) =>\n          setRangeSliderValue(values)\n        }\n        domain={['0', '100']}\n        step={1}\n      ></RangeSlider>\n      <ThemesPlot\n        token={props.token}\n        onPointClick={plotCallback}\n        topBarPlot={topBarPlotProps}\n        sideBarPlot={sideBarPlotProps}\n        dotPlot={dotPlotProps}\n      ></ThemesPlot>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { AccessRequirement } from 'lib/utils/synapseTypes/AccessRequirement/AccessRequirement'\n\nexport type SelfSignAccessRequirement = {\n  accessRequirement: AccessRequirement\n}\n\nexport default function SelfSignAccessRequirement({\n  accessRequirement,\n}: SelfSignAccessRequirement) {\n  return <div></div>\n}\n","import * as React from 'react'\nimport { AccessRequirement } from 'lib/utils/synapseTypes/AccessRequirement/AccessRequirement'\n\nexport type TermsOfUseAccessRequirement = {\n  accessRequirement: AccessRequirement\n}\n\nexport default function TermsOfUseAccessRequirement({\n  accessRequirement,\n}: TermsOfUseAccessRequirement) {\n  return <div></div>\n}\n","import * as React from 'react'\nimport AccessRequirementList from 'lib/containers/access_requirement_list/AccessRequirementList'\n\ntype Props = {\n  token: string\n}\n\nexport const AccessRequirementDemo: React.FunctionComponent<Props> = props => {\n  const { token } = props\n  return (\n    <AccessRequirementList\n      onHide={() => {\n        window.location.href = 'http://localhost:3000/Playground'\n      }}\n      entityId={'syn2426398'}\n      token={token}\n    />\n  )\n}\n","import React, { useState } from 'react'\n\ntype Props = {\n  userId: string\n}\n\nexport default function TemplateComponent({ userId }: Props) {\n  const [count, setCount] = useState<number>(0)\n\n  return (\n    <div>\n      <button\n        style={{ backgroundColor: 'blue', color: 'white' }}\n        onClick={() => setCount(count + 1)}\n      >\n        Click to increment count!\n      </button>\n      <p> Count = {count} </p>\n\n      <p> Passed in userId = {userId} </p>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport TemplateComponent from '../../../lib/containers/TemplateComponent'\n\nexport default function TemplateComponentDemo() {\n  /*\n    Setup component with props for various scenarios\n  */\n  return <TemplateComponent userId={'1234'} />\n}\n","import * as React from 'react'\nimport { Link, Route } from 'react-router-dom'\nimport QueryWrapperMenuDemo from './QueryWrapperMenuDemo'\nimport CardContainerLogicDemo from './CardContainerLogicDemo'\nimport SearchDemo from './SearchDemo'\nimport ModalDownloadDemo from './ModalDownloadDemo'\nimport UserCardDemo from './UserCardDemo'\nimport MarkdownSynapseDemo from './MarkdownSynapseDemo'\nimport { NewsFeedDemo } from './NewsFeedDemo'\nimport FormServicesIntegrationDemo from './FormServicesIntegrationDemo'\nimport QueryWrapperPlotNavDemo from './QueryWrapperPlotNavDemo'\nimport DownloadListTable from 'lib/containers/download_list/DownloadListTable'\nimport { WidgetDemo } from './WidgetDemo'\nimport { RouteChildrenProps } from 'react-router'\nimport { AccessRequirementDemo } from './AccessRequirementDemo'\nimport TemplateComponentDemo from './TemplateComponentDemo'\n\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n */\nconst App = ({\n  match,\n  token,\n}: {\n  match?: RouteChildrenProps['match']\n  token: string\n}) => {\n  if (!match) {\n    return <div />\n  }\n  return (\n    <div>\n      <h2>Links to components under development </h2>\n      <ul>\n        <li>\n          <Link to={`${match.url}/QueryWrapperMenuDemo`}>\n            QueryWrapperMenuDemo\n          </Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/QueryWrapperPlotNavDemo`}>\n            QueryWrapperPlotNavDemo\n          </Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/SearchDemo`}>SearchDemo</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/CardContainerLogicDemo`}>\n            CardContainerLogicDemo\n          </Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/UserBadgeDemo`}>UserBadgeDemo</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/MarkdownSynapseDemo`}>\n            MarkdownSynapseDemo\n          </Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/NewsFeedDemo`}>NewsFeedDemo</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/FormServicesIntegrationDemo`}>\n            FormServicesIntegrationDemo\n          </Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/ModalDownloadDemo`}>ModalDownload</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/DownloadListTableDemo`}>\n            DownloadListTableDemo\n          </Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/WidgetDemo`}>WidgetDemo</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/AccessRequirementDemo`}>\n            AccessRequirementDemo\n          </Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/TemplateComponentDemo`}>\n            TemplateComponentDemo\n          </Link>\n        </li>\n      </ul>\n\n      <Route\n        exact={true}\n        path={`${match.url}/QueryWrapperMenuDemo`}\n        render={() => <QueryWrapperMenuDemo rgbIndex={0} />}\n      />\n\n      <Route\n        exact={true}\n        path={`${match.url}/QueryWrapperPlotNavDemo`}\n        render={() => <QueryWrapperPlotNavDemo />}\n      />\n\n      <Route\n        exact={true}\n        path={`${match.url}/SearchDemo`}\n        render={() => <SearchDemo />}\n      />\n\n      <Route\n        exact={true}\n        path={`${match.url}/CardContainerLogicDemo`}\n        component={CardContainerLogicDemo}\n      />\n\n      <Route\n        exact={true}\n        path={`${match.url}/UserBadgeDemo`}\n        component={() => <UserCardDemo />}\n      />\n\n      <Route\n        exact={true}\n        path={`${match.url}/MarkdownSynapseDemo`}\n        component={() => <MarkdownSynapseDemo />}\n      />\n\n      <Route\n        exact={true}\n        path={`${match.url}/NewsFeedDemo`}\n        component={() => <NewsFeedDemo />}\n      />\n      <Route\n        exact={true}\n        path={`${match.url}/FormServicesIntegrationDemo`}\n        component={() => <FormServicesIntegrationDemo />}\n      />\n      <Route\n        exact={true}\n        path={`${match.url}/ModalDownloadDemo`}\n        component={() => <ModalDownloadDemo />}\n      />\n\n      <Route\n        exact={true}\n        path={`${match.url}/DownloadListTableDemo`}\n        component={() => (\n          <div className=\"container download-list-demo\">\n            <div className=\"col-xs-10\">\n              <DownloadListTable token={token} listUpdatedCallback={() => {console.log('DownloadList updated')}} />\n            </div>\n          </div>\n        )}\n      />\n\n      <Route\n        exact={true}\n        path={`${match.url}/WidgetDemo`}\n        component={() => <WidgetDemo token={token} />}\n      />\n\n      <Route\n        exact={true}\n        path={`${match.url}/AccessRequirementDemo`}\n        component={() => <AccessRequirementDemo token={token} />}\n      />\n\n      <Route\n        exact={true}\n        path={`${match.url}/TemplateComponentDemo`}\n        component={() => <TemplateComponentDemo />}\n      />\n\n      <Route exact={true} path={match.path} component={() => <div />} />\n    </div>\n  )\n}\n\nexport default App\n","import * as React from 'react'\nimport { Link, BrowserRouter as Router, Route } from 'react-router-dom'\nimport Login from '../../lib/containers/Login'\nimport logoSvg from '../../images/logo.svg'\nimport '../style/App.scss'\nimport '../style/DemoStyle.scss'\nimport Demo from './Demo'\nimport Playground from './playground/Playground'\nimport SynapseFormWrapper from '../../lib/containers/synapse_form_wrapper/SynapseFormWrapper'\nimport SynapseFormSubmissionsGrid from '../../lib/containers/synapse_form_wrapper/SynapseFormSubmissionsGrid'\nimport { SynapseClient } from '../../lib/utils/'\nimport { RouteChildrenProps } from 'react-router'\n\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n */\n\ntype AppState = {\n  token: string\n}\nexport const TokenContext = React.createContext('')\n\nexport default class App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      token: '',\n    }\n  }\n\n  handleChange = (updatedState: {}): void => {\n    this.setState(updatedState)\n  }\n\n  public componentDidMount() {\n    // Note:  All portals should do this once on the initial app load.\n    // This looks for the session token cookie (HttpOnly, unable to directly access), and initialize the session if it does exists.\n    SynapseClient.detectSSOCode()\n    SynapseClient.getSessionTokenFromCookie()\n      .then(sessionToken => this.handleChange({ token: sessionToken }))\n      .catch((error: any) => {\n        console.error(error)\n      })\n  }\n\n  getSession = () => {\n    SynapseClient.detectSSOCode()\n    SynapseClient.getSessionTokenFromCookie()\n      .then(sessionToken => this.handleChange({ token: sessionToken }))\n      .catch((error: any) => {\n        console.error(error)\n      })\n  }\n\n  renderLoginAndSignout(token: string): JSX.Element {\n    const signedInState = (\n      <div className=\"bg-success text-center\" role=\"alert\">\n        You are logged in.&nbsp;\n        <button\n          onClick={() => {\n            SynapseClient.signOut(this.getSession)\n          }}\n        >\n          <span aria-hidden=\"true\">Sign out</span>\n        </button>\n      </div>\n    )\n\n    const notSignedInState = (\n      <div className=\"text-center\">\n        <h4>Synapse Production (Google SSO redirects here)</h4>\n        <Login sessionCallback={this.getSession} theme={'light'} icon={true} />\n        <details>\n          <summary>\n            Synapse Staging (Google SSO redirects to staging site)\n          </summary>\n          <Login\n            sessionCallback={this.getSession}\n            theme={'dark'}\n            icon={true}\n            googleRedirectUrl={\n              'https://staging.synapse.org/Portal/oauth2callback?oauth2provider=GOOGLE_OAUTH_2_0'\n            }\n          />\n        </details>\n        <hr />\n      </div>\n    )\n\n    if (token && token !== '') {\n      return signedInState\n    } else {\n      return notSignedInState\n    }\n  }\n\n  public render(): JSX.Element {\n    const { token } = this.state\n    return (\n      <TokenContext.Provider value={token}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <div>\n            <div className=\"App-header text-center\">\n              <img src={logoSvg} className=\"App-logo\" alt=\"logo\" />\n              <h4 className=\"white-text\">Synapse React Client Demo</h4>\n            </div>\n            {this.renderLoginAndSignout(token)}\n            <ul>\n              <li>\n                <Link to=\"/\">Demo</Link>\n              </li>\n              <li>\n                <Link to=\"/Playground\">Playground</Link>\n              </li>\n              <li>\n                <Link to=\"/drugUploadTool\">Drug Upload Tool</Link>\n              </li>\n              <li>\n                <Link to=\"/contribReqForm\">\n                  AMP-AD external data contribution{' '}\n                </Link>\n              </li>\n            </ul>\n\n            <Route exact={true} path=\"/\" component={Demo} />\n            <Route\n              path=\"/Playground\"\n              component={(props: RouteChildrenProps) => (\n                <Playground {...props} token={token} />\n              )}\n            />\n            <Route\n              exact={true}\n              path=\"/drugUploadTool\"\n              render={props => {\n                const searchParamsProps: any = {}\n                // https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams -- needs polyfill for ie11\n                const searchParams = new URLSearchParams(props.location.search)\n                searchParams.forEach((value, key) => {\n                  searchParamsProps[key] = value\n                })\n                return !props.location.search ? (\n                  <SynapseFormSubmissionsGrid\n                    pathpart=\"drugUploadTool\"\n                    token={token}\n                    formClass=\"drug-upload-tool\"\n                    formGroupId=\"9\"\n                    itemNoun=\"Compound\"\n                  />\n                ) : (\n                  <SynapseFormWrapper\n                    {...props}\n                    formSchemaEntityId=\"syn20680102\"\n                    fileNamePath=\"naming.compound_name\"\n                    formUiSchemaEntityId=\"syn20693568\"\n                    formNavSchemaEntityId=\"syn20680027\"\n                    token={token}\n                    formTitle=\"Your Submission\"\n                    formClass=\"drug-upload-tool\"\n                    searchParams={searchParamsProps}\n                  />\n                )\n              }}\n            />\n\n            {/*------------------- contributions request form ---------------------------------*/}\n            <Route\n              exact={true}\n              path=\"/contribReqForm\"\n              render={props => {\n                let searchParamsProps: any = {}\n                // https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams -- needs polyfill for ie11\n                const searchParams = new URLSearchParams(props.location.search)\n                searchParams.forEach((value, key) => {\n                  searchParamsProps[key] = value\n                })\n                return !props.location.search ? (\n                  <SynapseFormSubmissionsGrid\n                    pathpart=\"contribReqForm\"\n                    formGroupId=\"11\"\n                    token={token}\n                    formClass=\"contribution-request\"\n                    itemNoun={'Contribution Request'}\n                  />\n                ) : (\n                  <SynapseFormWrapper\n                    {...props}\n                    formSchemaEntityId=\"syn20692910\"\n                    fileNamePath=\"study.submission_name\"\n                    formUiSchemaEntityId=\"syn20692911\"\n                    formNavSchemaEntityId=\"syn20968007\"\n                    isWizardMode={true}\n                    token={token}\n                    formTitle=\"Your Contribution Request\"\n                    formClass=\"contribution-request\"\n                    searchParams={searchParamsProps}\n                  />\n                )\n              }}\n            />\n          </div>\n        </Router>\n      </TokenContext.Provider>\n    )\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport 'react-app-polyfill/ie11'\nimport 'react-app-polyfill/stable'\nimport App from './demo/containers/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","export * from './QueryTableResults'","module.exports = __webpack_public_path__ + \"static/media/Data2.1104e430.svg\";","// Folder exports\nexport * from './Download'\nexport * from './EvaluationQueryTable'\nexport * from './Table'\nexport * from './AccessRequirement'\n// https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\nexport * from './AccessCodeResponse'\nexport * from './AccessControlList'\nexport * from './AddFilesToDownloadListRequest'\nexport * from './AddFilesToDownloadListResponse'\nexport * from './AddPartResponse'\nexport * from './AttachmentData'\nexport * from './BatchFileRequest'\nexport * from './BatchFileResult'\nexport * from './BatchPresignedUploadUrlRequest'\nexport * from './BatchPresignedUploadUrlResponse'\nexport * from './BulkFileDownloadRequest'\nexport * from './BulkFileDownloadResponse'\nexport * from './Entity'\nexport * from './EntityHeader'\nexport * from './EntityId'\nexport * from './EntityLookupRequest'\nexport * from './Evaluation'\nexport * from './EvaluationQueryTable'\nexport * from './FileDownloadSummary'\nexport * from './FileEntity'\nexport * from './FileHandle'\nexport * from './FileHandleAssociation'\nexport * from './FileHandleResults'\nexport * from './FileResult'\nexport * from './FileUploadComplete'\nexport * from './Forms'\nexport * from './LoginRequest'\nexport * from './LoginResponse'\nexport * from './MultipartUploadRequest'\nexport * from './MultipartUploadStatus'\nexport * from './OAuthClientPublic'\nexport * from './OIDCAuthorizationRequest'\nexport * from './OAuthConsentGrantedResponse'\nexport * from './OIDCAuthorizationRequestDescription'\nexport * from './PaginatedResults'\nexport * from './PartPresignedUrl'\nexport * from './ReferenceList'\nexport * from './ResourceAccess'\nexport * from './RestrictionInformation'\nexport * from './Statistics'\nexport * from './Submission'\nexport * from './SubmissionContributor'\nexport * from './SubmissionQuota'\nexport * from './SynapseVersion'\nexport * from './UserBundle'\nexport * from './UserGroupHeader'\nexport * from './UserGroupHeaderResponsePage'\nexport * from './UserPreference'\nexport * from './UserProfile'\nexport * from './VerificationSubmission'\nexport * from './WikiPage'\nexport * from './Evaluation'\nexport * from './AccessApproval'\n","export * from './DownloadList'\nexport * from './DownloadOrder'","export * from './AsyncJobId'\nexport * from './AsynchronousJobStatus'\nexport * from './ColumnModel'\nexport * from './ColumnType'\nexport * from './CsvTableDescription'\nexport * from './DownloadFromTableRequest'\nexport * from './DownloadFromTableResult'\nexport * from './FacetColumnRequest'\nexport * from './FacetColumnResult'\nexport * from './FacetType'\nexport * from './Query'\nexport * from './QueryBundleRequest'\nexport * from './QueryResult'\nexport * from './QueryResultBundle'\nexport * from './SelectColumn'\nexport * from './SumFileSizes'","// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/ColumnType.html\nexport enum ColumnType {\n  STRING = 'STRING',\n  DOUBLE = 'DOUBLE',\n  BOOLEAN = 'BOOLEAN',\n  INTEGER = 'INTEGER',\n  DATE = 'DATE',\n  FILEHANDLEID = 'FILEHANDLEID',\n  ENTITYID = 'ENTITYID',\n  LINK = 'LINK',\n  LARGETEXT = 'LARGETEXT',\n  USERID = 'USERID',\n}\n","export * from './AccessRequirement'\nexport * from './RestrictableObjectDescriptor'\nexport * from './SelfSignAccessRequirement'\nexport * from './SelfSignAccessRequirementInterface'\nexport * from './TermsOfUseAccessRequirement'\n","import { RestrictableObjectDescriptor } from './RestrictableObjectDescriptor'\n\nexport enum ACCESS_TYPE {\n  CREATE = 'CREATE',\n  READ = 'READ',\n  UPDATE = 'UPDATE',\n  DELETE = 'DELETE',\n  CHANGE_PERMISSIONS = 'CHANGE_PERMISSIONS',\n  DOWNLOAD = 'DOWNLOAD',\n  UPLOAD = 'UPLOAD',\n  PARTICIPATE = 'PARTICIPATE',\n  SUBMIT = 'SUBMIT',\n  READ_PRIVATE_SUBMISSION = 'READ_PRIVATE_SUBMISSION',\n  UPDATE_SUBMISSION = 'UPDATE_SUBMISSION',\n  DELETE_SUBMISSION = 'DELETE_SUBMISSION',\n  TEAM_MEMBERSHIP_UPDATE = 'TEAM_MEMBERSHIP_UPDATE',\n  SEND_MESSAGE = 'SEND_MESSAGE',\n  CHANGE_SETTINGS = 'CHANGE_SETTINGS',\n  MODERATE = 'MODERATE',\n}\n\nexport interface AccessRequirement {\n  versionNumber: number //\tThe version number issued to this version on the object.\n  id: number //\tThe unique immutable ID. Provided by the system, the user may not set this field.\n  etag: string //\tSynapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an object is out-of-date.\n  createdOn: string //\tThe date this object was created. Provided by the system, the user may not set this field.\n  modifiedOn: string //\tThe date this object was last modified. Provided by the system, the user may not set this field.\n  createdBy: string //\tThe user that created this object. Provided by the system, the user may not set this field.\n  modifiedBy: string //\tThe user that last modified this object. Provided by the system, the user may not set this field.\n  subjectIds: Array<RestrictableObjectDescriptor> // The IDs of the items controlled by this Access Requirement. Required when creating or updating.\n  accessType: ACCESS_TYPE //\tThe enumeration of possible permission.\n  concreteType: string //\tIndicates which type of AccessRequirement this object represents. Provided by the system, the user may not set this field.\n}\n","import { FileHandleAssociation } from './FileHandleAssociation'\n\n// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/file/ZipFileFormat.html\nexport enum ZipFileFormat {\n  CommandLineCache = 'CommandLineCache', // This is the default format. Zip file format structure is: (%1000)//\n  Flat = 'Flat', // Files are writtent to the zip 'flat' with no directory structure.\n  //Each file is named after the original file. Duplicate file names are appended with a number in parenthesis to ensure all names are unique.\n}\n\n// Request for a bulk file download.\n// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/file/BulkFileDownloadRequest.html\nexport type BulkFileDownloadRequest = {\n  concreteType: 'org.sagebionetworks.repo.model.file.BulkFileDownloadRequest'\n  requestedFiles: FileHandleAssociation[] // The files to be included in the download.\n  zipFileName: string // Optional parameter to set the name of the resulting zip file.\n  zipFileFormat?: ZipFileFormat // Enumeration of all possible zip file formats produced by bulk file download worker\n}\n","import { FileHandleAssociateType } from './FileHandleAssociation'\n\n// The download status of this file.\nexport enum FileDownloadStatus {\n  SUCCESS = 'SUCCESS',\n  FAILURE = 'FAILURE',\n}\n\n// If the download status of this file is set to 'FAILURE', then this will be the failure code. Null for 'SUCCESS'.\nexport enum FileDownloadCode {\n  NOT_FOUND = 'NOT_FOUND',\n  UNAUTHORIZED = 'UNAUTHORIZED',\n  DUPLICATE = 'DUPLICATE',\n  EXCEEDS_SIZE_LIMIT = 'EXCEEDS_SIZE_LIMIT',\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n}\n\n// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/file/FileDownloadSummary.html\nexport type FileDownloadSummary = {\n  fileHandleId: string //\tThe file handle id of a requested file.\n  associateObjectId: string //\tThe ID of the object associated with the file\n  associateObjectType: FileHandleAssociateType //\tEnumeration of all possible objects types that can be associated with a file.\n  zipEntryName: string //\tThe zip entry name used for this file. This entry includes both the path and file name. The value will only be set if the status is set to 'SUCCESS'\n  status: FileDownloadStatus //\tThe download status of this file.\n  failureMessage: string //\tIf the download status of this file is set to 'FAILURE', then this will be the failure message. Null for 'SUCCESS'.\n  failureCode: FileDownloadCode | null // If the download status of this file is set to 'FAILURE', then this will be the failure code. Null for 'SUCCESS'.\n}\n","export enum FileHandleAssociateType {\n  FileEntity = 'FileEntity',\n  TableEntity = 'TableEntity',\n  WikiAttachment = 'WikiAttachment',\n  WikiMarkdown = 'WikiMarkdown',\n  UserProfileAttachment = 'UserProfileAttachment',\n  MessageAttachment = 'MessageAttachment',\n  TeamAttachment = 'TeamAttachment',\n  SubmissionAttachment = 'SubmissionAttachment',\n  VerificationSubmission = 'VerificationSubmission',\n  AccessRequirementAttachment = 'AccessRequirementAttachment',\n  DataAccessRequestAttachment = 'DataAccessRequestAttachment',\n  DataAccessSubmissionAttachment = 'DataAccessSubmissionAttachment',\n}\n\nexport type FileHandleAssociation = {\n  fileHandleId: string //\tThe ID of the FileHandle.\n  associateObjectId: string //\tThe ID of the object associated with the file\n  associateObjectType: FileHandleAssociateType //\tEnumeration of all possible objects types that can be associated with a file.\n}\n","//https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/FormGroup.html\nexport type FormGroup = {\n  groupId: string\n  name: string\n  createdBy: string\n  createdOn: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/FormData.html\nexport type FormData = {\n  formDataId: string\n  etag: string\n  groupId: string\n  name: string\n  createdBy: string\n  createdOn: string\n  modifiedOn: string\n  dataFileHandleId: string\n  submissionStatus: SubmissionStatus\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/FormChangeRequest.html\nexport type FormChangeRequest = {\n  name: string\n  fileHandleId: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/FormRejection.html\nexport type FormRejection = {\n  reason: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/SubmissionStatus.html\nexport type SubmissionStatus = {\n  submittedOn?: string\n  reviewedOn?: string\n  reviewedBy?: string\n  state: StatusEnum\n  rejectionMessage?: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/StatusEnum.html\nexport enum StatusEnum {\n  WAITING_FOR_SUBMISSION = 'WAITING_FOR_SUBMISSION',\n  SUBMITTED_WAITING_FOR_REVIEW = 'SUBMITTED_WAITING_FOR_REVIEW',\n  ACCEPTED = 'ACCEPTED',\n  REJECTED = 'REJECTED',\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/ListRequest.html\nexport type ListRequest = {\n  filterByState?: StatusEnum[]\n  groupId: string\n  nextPageToken?: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/ListResponse.html\nexport type ListResponse = {\n  page: FormData[]\n  nextPageToken?: string\n}\n","// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/RestrictableObjectType.html\nexport enum RestrictableObjectType {\n  ENTITY = 'ENTITY',\n  EVALUATION = 'EVALUATION',\n  TEAM = 'TEAM',\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/RestrictionInformationRequest.html\nexport type RestrictionInformationRequest = {\n  restrictableObjectType: RestrictableObjectType\n  objectId: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/RestrictionLevel.html\nexport enum RestrictionLevel {\n  OPEN = 'OPEN',\n  RESTRICTED_BY_TERMS_OF_USE = 'RESTRICTED_BY_TERMS_OF_USE',\n  CONTROLLED_BY_ACT = 'CONTROLLED_BY_ACT',\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/RestrictionInformationResponse.html\nexport type RestrictionInformationResponse = {\n  restrictionLevel: RestrictionLevel\n  hasUnmetAccessRequirement: boolean\n}\n","export enum ApprovalState {\n  APPROVED = 'APPROVED',\n  REVOKED = 'REVOKED',\n}\n\nexport interface AccessApproval {\n  id: number //\tThe unique immutable ID\n  etag: string //\tSynapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an object is out-of-date.\n  createdOn: string //\tThe date this object was created.\n  modifiedOn: string //\tThe date this object was last modified.\n  createdBy: string //\tThe user that created this object.\n  modifiedBy: string //\tThe user that last modified this object.\n  requirementId: number //\tThe ID of the Access Requirement that this object approves.\n  requirementVersion: number //\tThe version of the Access Requirement that this object approves.\n  submitterId: string //\tThe user who performed the necessary action(s) to gain this approval.\n  accessorId: string //\tThe ID of the principal (user or group) approved for access\n  expiredOn: string //\tThe date this object will be expired.\n  state: ApprovalState //\tJSON enum for the state of AccessApproval\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/study-active.bc52e72b.svg\";","module.exports = __webpack_public_path__ + \"static/media/study-complete.b012f80b.svg\";","module.exports = __webpack_public_path__ + \"static/media/DNA_Two.d8f80972.svg\";","module.exports = __webpack_public_path__ + \"static/media/expand.2b935894.svg\";","module.exports = __webpack_public_path__ + \"static/media/shrink.199a8060.svg\";","module.exports = __webpack_public_path__ + \"static/media/columns.94835d60.svg\";","module.exports = __webpack_public_path__ + \"static/media/file-dotted.2dcc2eac.svg\";","module.exports = __webpack_public_path__ + \"static/media/json-form-tool-no-submissions.e64940c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/brain.c6301611.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle.ed6d433a.svg\";","module.exports = __webpack_public_path__ + \"static/media/mouse.7e294e96.svg\";","module.exports = __webpack_public_path__ + \"static/media/resiliencead.7500217a.svg\";"],"sourceRoot":""}