{"version":3,"file":"AccessApproval.493867d3.js","sources":["../../src/lib/utils/synapseTypes/AccessApproval.ts"],"sourcesContent":["export type SortDirection = 'ASC' | 'DESC'\n\nexport enum ApprovalState {\n  APPROVED = 'APPROVED',\n  REVOKED = 'REVOKED',\n}\n\nexport enum AccessApprovalSortField {\n  MODIFIED_ON = 'MODIFIED_ON',\n  EXPIRED_ON = 'EXPIRED_ON',\n}\n\nexport interface AccessApprovalSearchSort {\n  field: AccessApprovalSortField\n  direction: SortDirection\n}\n\nexport interface AccessApprovalSearchResult {\n  id: string\n  accessRequirementId: string\n  accessRequirementVersion: string\n  accessRequirementName: string\n  submitterId: string\n  reviewerId: string\n  state: ApprovalState\n  modifiedOn: string\n  expiredOn: string\n}\n\nexport interface AccessApproval {\n  id?: number //\tThe unique immutable ID\n  etag?: string //\tSynapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an object is out-of-date.\n  createdOn?: string //\tThe date this object was created.\n  modifiedOn?: string //\tThe date this object was last modified.\n  createdBy?: string //\tThe user that created this object.\n  modifiedBy?: string //\tThe user that last modified this object.\n  requirementId: number //\tThe ID of the Access Requirement that this object approves.\n  requirementVersion?: number //\tThe version of the Access Requirement that this object approves.\n  submitterId: string //\tThe user who performed the necessary action(s) to gain this approval.\n  accessorId: string //\tThe ID of the principal (user or group) approved for access\n  expiredOn?: string //\tThe date this object will be expired.\n  state: ApprovalState //\tJSON enum for the state of AccessApproval\n}\n\nexport interface AccessApprovalSearchRequest {\n  accessorId: string // \tFilter by the id of the principal that is an accessor in the approval. Note that the submitter is always part of the accessors. This field is required.\n  accessRequirementId?: string // Filter by the id of the access requirement of the approvals.\n  sort?: AccessApprovalSearchSort[] // Identifies both the field and direction for a single sort operation.\n  nextPageToken?: string // A token used to get the next page of a request.\n}\n\nexport interface AccessApprovalSearchResponse {\n  results: AccessApprovalSearchResult[] // The matching Access Approval information corresponding to the search parameters\n  nextPageToken?: string // A token used to get the next page of a particular search query.\n}\n"],"names":[],"mappings":"AAEY,GAAA,IAAA,GACC,GAAA,SAAA,WACD,EAAA,QAAA,UAFA,IAAA,GAAA,CAAA,CAAA,EAKA,GAAA,GACI,GAAA,YAAA,cACD,EAAA,WAAA,aAFH,IAAA,GAAA,CAAA,CAAA"}