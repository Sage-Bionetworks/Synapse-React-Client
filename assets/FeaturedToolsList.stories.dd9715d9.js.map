{"version":3,"file":"FeaturedToolsList.stories.dd9715d9.js","sources":["../../src/lib/containers/home_page/featured_tools/FeaturedToolCard.tsx","../../src/lib/containers/home_page/featured_tools/FeaturedToolsList.tsx"],"sourcesContent":["import moment from 'moment'\nimport React from 'react'\nimport { formatDate } from '../../../utils/functions/DateFormatter'\n\nexport type FeaturedToolCardProps = {\n  id: string\n  name: string\n  description: string\n  type: string\n  toolDetailPageURL: string\n  date: string\n}\n\nexport const FeaturedToolCard: React.FunctionComponent<\n  FeaturedToolCardProps & React.HTMLAttributes<HTMLDivElement>\n> = ({ id, name, description, type, toolDetailPageURL, date, ...domProps }) => {\n  return (\n    <div\n      {...domProps}\n      className={`cardContainer FeaturedToolCard bootstrap-4-backport ${\n        domProps.className ?? ''\n      }`}\n    >\n      <div className=\"FeaturedToolCard__Type\">\n        <span className=\"SRC-tag\">{type}</span>\n      </div>\n      <div className=\"FeaturedToolCard__Date\">\n        {formatDate(moment(parseInt(date)), 'MMMM YYYY')}\n      </div>\n      <div className=\"FeaturedToolCard__Name\">{name}</div>\n      <div className=\"FeaturedToolCard__Description\">{description}</div>\n      <div>\n        <a\n          className=\"FeaturedToolCard__Link\"\n          href={`${toolDetailPageURL}${id}`}\n        >\n          View Tool\n        </a>\n      </div>\n    </div>\n  )\n}\n","import { SynapseConstants } from '../../../utils'\nimport { getFieldIndex } from '../../../utils/functions/queryUtils'\nimport useGetQueryResultBundle from '../../../utils/hooks/SynapseAPI/entity/useGetQueryResultBundle'\nimport { QueryBundleRequest } from '../../../utils/synapseTypes'\nimport React, { useState, useEffect } from 'react'\nimport { FeaturedToolCard } from './FeaturedToolCard'\nimport { ErrorBanner } from '../../ErrorBanner'\nimport { useSynapseContext } from '../../../utils/SynapseContext'\n\nexport type FeaturedToolsListProps = {\n  entityId: string\n  toolDetailPageURL: string\n  idColumnName?: string\n  nameColumnName?: string\n  descriptionColumnName?: string\n  typeColumnName?: string\n  dateColumnName?: string\n}\n\ntype ToolData = {\n  id: string\n  name: string\n  description: string\n  type: string\n  date: string\n}\n\n/**\n * Display a set of FeaturedToolCards (driven by a Table/View). Driven by the following annotations/column names:\n * 'id', 'name', 'type', and 'description'.\n */\nexport const FeaturedToolsList: React.FunctionComponent<\n  FeaturedToolsListProps\n> = ({\n  entityId,\n  toolDetailPageURL,\n  idColumnName = 'id',\n  nameColumnName = 'name',\n  descriptionColumnName = 'description',\n  typeColumnName = 'type',\n  dateColumnName = 'date',\n}) => {\n  const sql = `SELECT \"${idColumnName}\", \"${nameColumnName}\", \"${descriptionColumnName}\", \"${typeColumnName}\", \"${dateColumnName}\" FROM ${entityId} ORDER BY ROW_ID DESC LIMIT 3`\n  const queryBundleRequest: QueryBundleRequest = {\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    entityId,\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n      SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n    query: {\n      sql,\n    },\n  }\n\n  const { accessToken } = useSynapseContext()\n  const [tools, setTools] = useState<ToolData[]>([])\n  const [error, setError] = useState<Error>()\n  const { data: queryResultBundle, error: queryError } =\n    useGetQueryResultBundle(queryBundleRequest)\n\n  useEffect(() => {\n    const getData = () => {\n      try {\n        const idIndex = getFieldIndex(idColumnName, queryResultBundle)\n        const nameColumnIndex = getFieldIndex(nameColumnName, queryResultBundle)\n        const typeColumnIndex = getFieldIndex(typeColumnName, queryResultBundle)\n        const descriptionColumnIndex = getFieldIndex(\n          descriptionColumnName,\n          queryResultBundle,\n        )\n        const dateColumnIndex = getFieldIndex(dateColumnName, queryResultBundle)\n\n        const tools: ToolData[] =\n          queryResultBundle?.queryResult!.queryResults.rows.map(row => {\n            return {\n              name: row.values[nameColumnIndex],\n              description: row.values[descriptionColumnIndex],\n              type: row.values[typeColumnIndex],\n              id: row.values[idIndex],\n              date: row.values[dateColumnIndex],\n            }\n          }) ?? []\n        if (queryError) {\n          throw queryError\n        }\n        if (tools.length === 0) {\n          // wait for data to load\n          return\n        }\n\n        setTools(tools)\n      } catch (error) {\n        console.error(error)\n        setError(error)\n      }\n    }\n    getData()\n  }, [\n    entityId,\n    accessToken,\n    queryResultBundle,\n    queryError,\n    idColumnName,\n    nameColumnName,\n    typeColumnName,\n    descriptionColumnName,\n    dateColumnName,\n  ])\n\n  return error ? (\n    <ErrorBanner error={error}></ErrorBanner>\n  ) : (\n    <div className=\"FeaturedToolList\">\n      {tools.map(tool => {\n        return (\n          <FeaturedToolCard\n            key={tool.id}\n            name={tool.name}\n            type={tool.type}\n            description={tool.description}\n            id={tool.id}\n            date={tool.date}\n            toolDetailPageURL={toolDetailPageURL}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default FeaturedToolsList\n"],"names":["id","name","description","type","toolDetailPageURL","date","domProps","_jsxs","_jsx","moment","entityId","BUNDLE_MASK_QUERY_RESULTS","sql","accessToken","queryResultBundle","queryError","useEffect","getData","nameColumnIndex","descriptionColumnIndex","typeColumnIndex","idIndex","dateColumnIndex","setTools","console","setError"],"mappings":"msBAaO,KAAA,GAAA,CAAA,CAEF,KAAEA,OAAIC,cAAMC,OAAaC,oBAAMC,UAAmBC,KAASC,OAC9D,MAAAC,GAAA,MAAA,MAEQD,UAAAA,uDAAAA,KAAAA,YAAAA,OAAAA,KAEoB,SAAA,CAAAE,EAAA,MAAA,CAGxB,UAAA,yBAAe,SAAAA,EAAA,OAAA,CACb,UAAA,UAAgB,SAAA,CAAWL,CAAAA,CAA3B,CAAA,EAAAK,EAAA,MAAA,CAEF,UAAA,yBAAe,SAAA,EAAAC,EAAA,SAAA,CAAA,CAAA,EAAA,WAAA,CACF,CAAA,EAAAD,EAAA,MAAA,CAEb,UAAA,yBAAe,SAAA,CAA0BP,CAAAA,EAAAA,EAAAA,MAAAA,CACzC,UAAA,gCAAe,SAAA,CAAiCC,CAAAA,EAAAA,EAAAA,MAAAA,CAChD,SAAAM,EAAA,IAAA,CACE,UAAA,yBACY,KAAA,GAAA,IAAA,IACmBR,SAAAA,WAF/B,CAAA,CAAA,CAAA,CAAA,CAfJ,CAAA,CAwBH,g8BCrCD,KAAA,GAAA,OAAA,MAAA,kCA2BO,EAAA,CAAA,CAEF,WACHU,oBACAN,eAAAA,KACe,iBAAA,OACE,wBAAA,cACO,iBAAA,OACP,iBAAA,UACA,CAEjB,KAAA,GAAA,WAAA,QAAA,QAAA,QAAA,QAAA,WAAA,iCACA,EAAA,CAA+C,aAAA,0DAC/B,WACdM,SAAAA,EAAAA,EAGmBC,MAAAA,CACZ,KACLC,CADK,EAKT,CAAM,eAAEC,EAAAA,EACR,CAAA,EAAA,GAAA,EAAA,CAAA,CAAA,EACA,CAAA,EAAA,GAAA,EAAA,EACA,CAAM,KAAA,EAAQC,MAAAA,GAA0BC,EAAAA,CAAAA,EAGxCC,SAAAA,IAAAA,CAoCEC,AAnCA,KAAA,OACE,GAAA,CACE,KAAA,GAAA,EAAA,EAAA,CAAA,EACA,EAAA,EAAA,EAAA,CAAA,EACA,EAAA,EAAA,EAAA,CAAA,EACA,EAAA,EAAA,EAAA,CAAA,EAIA,EAAA,EAAA,EAAA,CAAA,EAEA,EAAA,oBAAA,YAAA,aAAA,KAAA,IAAA,AAAA,GAEI,EAAO,KAAA,EAAA,OAAA,GACYC,YAAAA,EAAAA,OAAAA,GACOC,KAAAA,EAAAA,OAAAA,GACPC,GAAAA,EAAAA,OAAAA,GACFC,KAAAA,EAAAA,OAAAA,EACEC,MAPvB,OAEW,CAAA,EAQX,GAAA,EACE,KAAA,GAEF,GAAA,EAAA,SAAA,EAEE,OAGFC,EAAAA,CAAAA,CAAQ,OAAA,EAAA,CAERC,QAAAA,MAAAA,CAAAA,EACAC,EAAAA,CAAAA,CAAQ,CACT,IAEI,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,CAAA,EAaT,EAAAjB,EAAA,EAAA,CACE,OAAa,CAAA,EAAAA,EAAA,MAAA,CAEb,UAAA,mBAAe,SAAA,EAAA,IAAA,AAAA,GAEXA,EAAA,EAAA,CACE,KAAA,EAAA,KAEaP,KAAAA,EAAAA,KACAE,YAAAA,EAAAA,YACOD,GAAAA,EAAAA,GACTF,KAAAA,EAAAA,KACEK,mBACX,EAAA,EAAA,EAAA,CAPF,CAFH,CAAA,CAeN,EAED,GAAA,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;"}