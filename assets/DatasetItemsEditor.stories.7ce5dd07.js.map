{"version":3,"file":"DatasetItemsEditor.stories.7ce5dd07.js","sources":["../../src/lib/utils/hooks/useSet.ts","../../src/lib/containers/table/datasets/DatasetItemsEditor.tsx"],"sourcesContent":["import { useState } from 'react'\n\nexport interface UseSetReturn<T> {\n  set: Omit<Set<T>, 'add' | 'delete' | 'clear'>\n  add: (...items: T[]) => void\n  remove: (item: T) => void\n  clear: () => void\n}\n\n/**\n * Hook for storing an ES6 set in React state. Methods that mutate the set have been hidden via TypeScript,\n * so if you adhere to the type definitions, the set is essentially immutable.\n * Modifications to the set should only be done via the functions returned by the hook, which will create a new object to trigger rerendering.\n * @param initialState\n * @returns\n */\nexport function useSet<T>(initialState?: T[] | Set<T>): UseSetReturn<T> {\n  const [set, setSet] = useState(new Set(initialState))\n\n  function add(...items: T[]) {\n    const newSet = new Set(set)\n    for (const item of items) {\n      newSet.add(item)\n    }\n    setSet(newSet)\n  }\n\n  function remove(item: T) {\n    const newSet = new Set(set)\n    newSet.delete(item)\n    setSet(newSet)\n  }\n\n  function clear() {\n    setSet(new Set())\n  }\n\n  return {\n    set,\n    add,\n    remove,\n    clear,\n  }\n}\n","import { Skeleton } from '@material-ui/lab'\nimport BaseTable, {\n  AutoResizer,\n  ColumnShape,\n} from '@sage-bionetworks/react-base-table'\nimport { isEqual } from 'lodash-es'\nimport pluralize from 'pluralize'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { SkeletonTable } from '../../../assets/skeletons/SkeletonTable'\nimport {\n  convertToEntityType,\n  entityTypeToFriendlyName,\n  isDataset,\n  isDatasetCollection,\n} from '../../../utils/functions/EntityTypeUtils'\nimport {\n  useGetEntity,\n  useGetEntityPath,\n  useUpdateEntity,\n} from '../../../utils/hooks/SynapseAPI/entity/useEntity'\nimport { useSet } from '../../../utils/hooks/useSet'\nimport {\n  EntityRef,\n  EntityRefCollectionView,\n  EntityType,\n  Reference,\n} from '../../../utils/synapseTypes'\nimport { RequiredProperties } from '../../../utils/types/RequiredProperties'\nimport Typography from '../../../utils/typography/Typography'\nimport {\n  BadgeIconsRenderer,\n  CellRendererProps,\n  CreatedOnRenderer,\n  DatasetEditorCheckboxRenderer,\n  DatasetEditorVersionRenderer,\n  EntityErrorRenderer,\n  EntityNameRenderer,\n  ModifiedByRenderer,\n  ModifiedOnRenderer,\n  ProjectRenderer,\n} from '../../entity_finder/details/view/DetailsViewTableRenderers'\nimport { EntityFinderModal } from '../../entity_finder/EntityFinderModal'\nimport { FinderScope } from '../../entity_finder/tree/EntityTree'\nimport IconSvg from '../../IconSvg'\nimport { BlockingLoader } from '../../LoadingScreen'\nimport WarningModal from '../../synapse_form_wrapper/WarningModal'\nimport { displayToast } from '../../ToastMessage'\nimport { Checkbox } from '../../widgets/Checkbox'\n\nfunction getSelectableTypes(entity: EntityRefCollectionView) {\n  if (isDataset(entity)) {\n    return [EntityType.FILE]\n  } else if (isDatasetCollection(entity)) {\n    return [EntityType.DATASET]\n  } else {\n    console.error(\n      'Cannot determine selectable types for entity type: ' +\n        entity.concreteType,\n    )\n    return []\n  }\n}\n\nexport function getCopy(entity?: EntityRefCollectionView) {\n  const displayName = entity\n    ? entityTypeToFriendlyName(convertToEntityType(entity.concreteType))\n    : 'Collection'\n  let itemName = 'Item'\n  let currentVersionName = 'Current Version'\n  if (entity && isDataset(entity)) {\n    itemName = entityTypeToFriendlyName(EntityType.FILE)\n    currentVersionName = 'Draft'\n  } else if (entity && isDatasetCollection(entity)) {\n    itemName = entityTypeToFriendlyName(EntityType.DATASET)\n  }\n\n  return {\n    ADD_ITEMS: `Add ${pluralize(itemName)}`,\n    ADD_ITEMS_TO: `Add ${pluralize(itemName)} + to ${displayName}`,\n    REMOVE_ITEMS: `Remove ${pluralize(itemName)}`,\n    NO_ITEMS_IN_THIS_DATASET: `No ${pluralize(\n      itemName,\n    )} in this ${displayName}`,\n    SAVE_TO_CONTINUE: `Save the ${displayName} to continue`,\n    CREATE_VERSION_TO_FREEZE: `Create a Version of this ${displayName} to freeze it in its current state`,\n    ENTITY_SAVED: `${displayName} Saved`,\n    SAVE_CHANGES: `Save changes to ${currentVersionName}`,\n    ENTITY_FINDER_POPOVER: `Use the left pane to browse to find ${pluralize(\n      itemName,\n    )} to add to this ${displayName}. You can also use Search to find and select ${pluralize(\n      itemName,\n    )}.`,\n    ENTITY_FINDER_PROMPT: `Find ${pluralize(\n      itemName,\n    )} to add to the ${displayName}.`,\n    PRECONDITION_FAILED_MESSAGE: `Re-retrieve the ${displayName} to get the latest changes. Your current changes will be lost.`,\n    PRECONDITION_FAILED_TITLE: `${displayName} updated since last fetched`,\n    PRECONDITION_FAILED_ACTION: `Retrieve ${displayName}`,\n  }\n}\n\nexport type DatasetItemsEditorProps = {\n  /* The synId of the EntityRefCollectionView to modify */\n  entityId: string\n  onSave?: () => void\n  onClose?: () => void\n}\n\nexport type DatasetItemsEditorTableData = EntityRef & {\n  isSelected: boolean\n  setSelected: (value: boolean) => void\n}\n\nconst ROW_HEIGHT = 42\nconst TABLE_HEIGHT = 350\n\nexport function DatasetItemsEditor(props: DatasetItemsEditorProps) {\n  const { entityId, onSave, onClose } = props\n\n  const [showEntityFinder, setShowEntityFinder] = useState<boolean>(false)\n  const [showWarningModal, setShowWarningModal] = useState<boolean>(false)\n  const [hasChangedSinceLastSave, setHasChangedSinceLastSave] = useState(false)\n  // Disable updating the entity after the initial fetch because we don't want to replace edits that the user makes.\n  const [datasetToUpdate, _setDatasetToUpdate] =\n    useState<RequiredProperties<EntityRefCollectionView, 'items'>>()\n  const [previousDatasetToUpdate, setPreviousDatasetToUpdate] =\n    useState<RequiredProperties<EntityRefCollectionView, 'items'>>()\n  const setDatasetToUpdate = (\n    dataset: React.SetStateAction<\n      RequiredProperties<EntityRefCollectionView, 'items'> | undefined\n    >,\n  ) => {\n    setHasChangedSinceLastSave(true)\n    _setDatasetToUpdate(dataset)\n  }\n\n  const { data: fetchedDataset, refetch } = useGetEntity<\n    RequiredProperties<EntityRefCollectionView, 'items'>\n  >(entityId, undefined, {\n    enabled: !datasetToUpdate,\n  })\n\n  const {\n    ADD_ITEMS,\n    ADD_ITEMS_TO,\n    REMOVE_ITEMS,\n    NO_ITEMS_IN_THIS_DATASET,\n    SAVE_TO_CONTINUE,\n    CREATE_VERSION_TO_FREEZE,\n    ENTITY_SAVED,\n    SAVE_CHANGES,\n    PRECONDITION_FAILED_TITLE,\n    PRECONDITION_FAILED_MESSAGE,\n    PRECONDITION_FAILED_ACTION,\n    ENTITY_FINDER_POPOVER,\n    ENTITY_FINDER_PROMPT,\n  } = useMemo(() => getCopy(fetchedDataset), [fetchedDataset])\n\n  useEffect(() => {\n    // Don't update when we already have datasetToUpdate\n    if (!datasetToUpdate && fetchedDataset) {\n      // SWC-5876: Dataset Items may be undefined. This has the same inherent meaning as the empty list, so we'll just change it to save us some null checks.\n      if (fetchedDataset.items == null) {\n        fetchedDataset.items = []\n      }\n      setDatasetToUpdate(fetchedDataset)\n      setHasChangedSinceLastSave(false)\n    }\n  }, [fetchedDataset, datasetToUpdate])\n\n  const {\n    set: selectedIds,\n    add: addSelectedId,\n    remove: removeSelectedId,\n    clear: clearSelectedIds,\n  } = useSet<string>()\n  const allItemsAreSelected = !!(\n    datasetToUpdate && datasetToUpdate.items.length === selectedIds.size\n  )\n\n  useEffect(() => {\n    if (\n      previousDatasetToUpdate &&\n      datasetToUpdate &&\n      !isEqual(previousDatasetToUpdate, datasetToUpdate)\n    ) {\n      const toastMessageTitle = getToastMessageTitle()\n      displayToast(SAVE_TO_CONTINUE, 'info', {\n        title: toastMessageTitle,\n        primaryButtonConfig: {\n          text: SAVE_CHANGES,\n          onClick: () => mutation.mutate(datasetToUpdate),\n        },\n      })\n    }\n    setPreviousDatasetToUpdate(datasetToUpdate)\n  }, [datasetToUpdate])\n\n  // We get the project ID to show the \"Current Project\" context in the Entity Finder.\n  const { data: path } = useGetEntityPath(entityId)\n  const projectId = path?.path[1]?.id\n\n  const mutation = useUpdateEntity<EntityRefCollectionView>({\n    onSuccess: () => {\n      if (onSave) {\n        onSave()\n      } else {\n        // If onSave isn't specified, push a generic toast message.\n        displayToast(CREATE_VERSION_TO_FREEZE, 'success', {\n          title: ENTITY_SAVED,\n        })\n      }\n    },\n    onError: error => {\n      if (error.status === 412) {\n        displayToast(PRECONDITION_FAILED_MESSAGE, 'warning', {\n          title: PRECONDITION_FAILED_TITLE,\n          primaryButtonConfig: {\n            text: PRECONDITION_FAILED_ACTION,\n            onClick: () => {\n              refetch()\n            },\n          },\n        })\n      } else {\n        displayToast(error.reason, 'danger', {\n          title: 'An Error Occurred',\n        })\n      }\n    },\n  })\n\n  const tableData = datasetToUpdate?.items.map((item: EntityRef) => {\n    return {\n      ...item,\n      isSelected: selectedIds.has(item.entityId),\n      setSelected: (value: boolean) => {\n        return value\n          ? addSelectedId(item.entityId)\n          : removeSelectedId(item.entityId)\n      },\n    }\n  })\n\n  function getDataSetDifference(\n    oldDataSet: EntityRef[],\n    changedItems: EntityRef[],\n  ) {\n    let unchangedItems = oldDataSet.filter(\n      oldItem =>\n        !changedItems.find(newItem => newItem.entityId === oldItem.entityId),\n    )\n    const deletedItems = [...unchangedItems]\n    const { updatedItems, newItems } = changedItems.reduce(\n      (results, result) => {\n        const oldItem = oldDataSet.find(old => old.entityId === result.entityId)\n        if (oldItem) {\n          if (result.versionNumber !== oldItem.versionNumber) {\n            results['updatedItems'].push(result)\n          } else {\n            unchangedItems.push(result)\n          }\n        } else {\n          results['newItems'].push(result)\n        }\n        return results\n      },\n      { updatedItems: [], newItems: [] } as {\n        updatedItems: EntityRef[]\n        newItems: EntityRef[]\n      },\n    )\n\n    return { unchangedItems, updatedItems, newItems, deletedItems }\n  }\n\n  function getToastMessageTitle() {\n    const { updatedItems, newItems, deletedItems } = getDataSetDifference(\n      previousDatasetToUpdate?.items!,\n      datasetToUpdate?.items!,\n    )\n    let toastTitle = ''\n\n    // \"X items(s) deleted\"\n    if (deletedItems.length > 0) {\n      toastTitle += `${deletedItems.length} Item${\n        deletedItems.length === 1 ? '' : 's'\n      } removed`\n    } else {\n      // \"Y item(s) added\"\n      toastTitle += `${newItems.length} Item${\n        newItems.length === 1 ? '' : 's'\n      } added`\n\n      // \"and Z item(s) updated\", only shown if there are updated items\n      if (updatedItems.length > 0) {\n        toastTitle += ` and ${updatedItems.length} Item${\n          updatedItems.length === 1 ? '' : 's'\n        } updated`\n      }\n    }\n    return toastTitle\n  }\n\n  function addItemsToDataset(itemsToAdd: Reference[]) {\n    setDatasetToUpdate(datasetToUpdate => {\n      if (datasetToUpdate) {\n        const refToDatasetItem = itemsToAdd.map(item => ({\n          entityId: item.targetId,\n          versionNumber: item.targetVersionNumber!,\n        }))\n        const { unchangedItems, updatedItems, newItems } = getDataSetDifference(\n          datasetToUpdate.items,\n          refToDatasetItem,\n        )\n        const items = [...unchangedItems, ...updatedItems, ...newItems]\n\n        return {\n          ...datasetToUpdate,\n          items: items,\n        }\n      } else {\n        console.warn(\n          'Cannot add items to the Collection because it is undefined. The Collection may not have been fetched yet.',\n        )\n        return datasetToUpdate\n      }\n    })\n    clearSelectedIds()\n  }\n\n  function removeSelectedItemsFromDataset() {\n    setDatasetToUpdate(dataset => ({\n      ...dataset!,\n      items: dataset!.items.filter(\n        datasetItem => !selectedIds.has(datasetItem.entityId),\n      ),\n    }))\n    clearSelectedIds()\n  }\n\n  function changeVersionOnItem(entityId: string, newVersion: number) {\n    setDatasetToUpdate(dataset => ({\n      ...dataset!,\n      items: dataset!.items.map(datasetItem =>\n        datasetItem.entityId === entityId\n          ? { entityId: entityId, versionNumber: newVersion }\n          : datasetItem,\n      ),\n    }))\n  }\n\n  const DatasetItemVersionRenderer = (\n    props: CellRendererProps<DatasetItemsEditorTableData>,\n  ) => {\n    return (\n      <DatasetEditorVersionRenderer\n        {...props}\n        toggleSelection={datasetItem => {\n          changeVersionOnItem(datasetItem.entityId, datasetItem.versionNumber)\n        }}\n      />\n    )\n  }\n\n  type SelectAllCheckboxRendererProps = {\n    datasetToUpdate: RequiredProperties<EntityRefCollectionView, 'items'>\n    selectedIds: Omit<Set<string>, 'add' | 'delete' | 'clear'>\n    addSelectedId: (...items: string[]) => void\n    clearSelectedIds: () => void\n    allItemsAreSelected: boolean\n  }\n  const SelectAllCheckboxRenderer = (props: SelectAllCheckboxRendererProps) => {\n    const { datasetToUpdate, clearSelectedIds, addSelectedId } = props\n    const isChecked = allItemsAreSelected\n\n    return datasetToUpdate ? (\n      <div\n        data-testid=\"Select All\"\n        style={{ cursor: 'pointer' }}\n        onClick={() => {\n          if (isChecked) {\n            clearSelectedIds()\n          } else {\n            addSelectedId(...datasetToUpdate.items.map(item => item.entityId))\n          }\n        }}\n      >\n        <Checkbox\n          label=\"\"\n          className=\"SRC-pointer-events-none\"\n          checked={isChecked}\n          disabled={datasetToUpdate.items.length === 0}\n          onChange={() => {\n            // no-op\n          }}\n        />\n      </div>\n    ) : (\n      <></>\n    )\n  }\n\n  const renderedSelectAllCheckbox = datasetToUpdate ? (\n    <SelectAllCheckboxRenderer\n      datasetToUpdate={datasetToUpdate}\n      selectedIds={selectedIds}\n      clearSelectedIds={clearSelectedIds}\n      addSelectedId={addSelectedId}\n      allItemsAreSelected={allItemsAreSelected}\n    />\n  ) : (\n    <></>\n  )\n\n  const defaultColumns: ColumnShape<DatasetItemsEditorTableData>[] = [\n    {\n      key: 'errorState',\n      width: 30,\n      cellRenderer: EntityErrorRenderer,\n    },\n    {\n      key: 'isSelected',\n      width: 40,\n      dataKey: 'isSelected',\n      headerRenderer: renderedSelectAllCheckbox,\n      cellRenderer: DatasetEditorCheckboxRenderer,\n    },\n    {\n      key: 'name',\n      width: 350,\n      dataKey: 'entityId',\n      title: 'Name',\n      resizable: true,\n      cellRenderer: EntityNameRenderer,\n    },\n    {\n      key: 'status',\n      width: 80,\n      dataKey: 'entityId',\n      resizable: true,\n      cellRenderer: BadgeIconsRenderer,\n    },\n    {\n      key: 'id',\n      width: 140,\n      title: 'ID',\n      dataKey: 'entityId',\n      resizable: true,\n    },\n    {\n      key: 'version',\n      width: 150,\n      title: 'Version',\n      dataKey: 'entityId',\n      cellRenderer: DatasetItemVersionRenderer,\n    },\n    {\n      key: 'createdOn',\n      width: 200,\n      title: 'Created On',\n      dataKey: 'entityId',\n      resizable: true,\n\n      cellRenderer: CreatedOnRenderer,\n    },\n    {\n      key: 'modifiedOn',\n      width: 200,\n      title: 'Modified On',\n      dataKey: 'entityId',\n      resizable: true,\n\n      cellRenderer: ModifiedOnRenderer,\n    },\n    {\n      key: 'modifiedBy',\n      width: 250,\n      title: 'Modified By',\n      dataKey: 'entityId',\n      resizable: true,\n\n      cellRenderer: ModifiedByRenderer,\n    },\n    {\n      key: 'projectId',\n      width: 300,\n      title: 'Project',\n      dataKey: 'entityId',\n      resizable: true,\n\n      cellRenderer: ProjectRenderer,\n    },\n  ]\n\n  const totalColumnWidth = defaultColumns.reduce((totalWidth, column) => {\n    return totalWidth + column.width\n  }, 0)\n\n  function NoItemsPlaceholder() {\n    return (\n      <div className=\"NoItemsPlaceholder\">\n        <Typography variant={'headline3'}>\n          {NO_ITEMS_IN_THIS_DATASET}\n        </Typography>\n        <Button\n          className=\"AddItemsButton\"\n          variant=\"sds-primary\"\n          onClick={() => setShowEntityFinder(true)}\n        >\n          <IconSvg options={{ icon: 'addCircleTwoTone' }} />\n          <span>{ADD_ITEMS}</span>\n        </Button>\n      </div>\n    )\n  }\n\n  const selectableTypes = useMemo(() => {\n    if (fetchedDataset) {\n      return getSelectableTypes(fetchedDataset)\n    } else {\n      return undefined\n    }\n  }, [fetchedDataset])\n\n  return (\n    <div className=\"DatasetEditor bootstrap-4-backport\">\n      <EntityFinderModal\n        configuration={{\n          projectId: projectId,\n          selectMultiple: true,\n          initialScope: FinderScope.CURRENT_PROJECT,\n          initialContainer: projectId ?? null,\n          selectableTypes: selectableTypes,\n          mustSelectVersionNumber: true,\n        }}\n        titlePopoverProps={{\n          markdownText: ENTITY_FINDER_POPOVER,\n          helpUrl: 'https://help.synapse.org/docs/Datasets.2611281979.html',\n        }}\n        promptCopy={ENTITY_FINDER_PROMPT}\n        show={showEntityFinder}\n        onClose={() => {\n          setShowEntityFinder(false)\n        }}\n        title={ADD_ITEMS_TO}\n        confirmButtonCopy={ADD_ITEMS}\n        onConfirm={items => {\n          addItemsToDataset(items)\n          setShowEntityFinder(false)\n        }}\n        onCancel={() => setShowEntityFinder(false)}\n      />\n      <WarningModal\n        title=\"Unsaved Changes\"\n        modalBody=\"Any unsaved changes will be lost. Are you sure you want to close the editor?\"\n        confirmButtonText=\"Close Editor\"\n        onConfirm={() => {\n          if (onClose) {\n            setShowWarningModal(false)\n            onClose()\n          }\n        }}\n        show={showWarningModal}\n        onConfirmCallbackArgs={[]}\n        onCancel={() => setShowWarningModal(false)}\n      />\n\n      <div className=\"DatasetEditorTopBottomPanel\">\n        <BlockingLoader show={mutation.isLoading} />\n        <div className=\"ItemCount\">\n          {datasetToUpdate ? (\n            <Typography variant=\"headline3\">\n              {datasetToUpdate.items.length === 0\n                ? 'No'\n                : datasetToUpdate.items.length.toLocaleString()}{' '}\n              File\n              {datasetToUpdate.items.length !== 1 && 's'}\n            </Typography>\n          ) : (\n            <Skeleton variant=\"rect\" width={200} />\n          )}\n        </div>\n\n        <Button\n          variant=\"sds-primary\"\n          disabled={datasetToUpdate == null}\n          onClick={() => setShowEntityFinder(true)}\n        >\n          {ADD_ITEMS}\n        </Button>\n        <Button\n          disabled={selectedIds.size === 0}\n          variant=\"outline\"\n          onClick={removeSelectedItemsFromDataset}\n        >\n          {REMOVE_ITEMS}\n        </Button>\n      </div>\n      <div className=\"DatasetEditorTableContainer\">\n        {datasetToUpdate ? (\n          datasetToUpdate.items.length === 0 ? (\n            <NoItemsPlaceholder></NoItemsPlaceholder>\n          ) : (\n            <AutoResizer height={TABLE_HEIGHT}>\n              {({ height, width }: { height: number; width: number }) => (\n                <BaseTable\n                  classPrefix=\"DatasetEditorTable\"\n                  data={tableData}\n                  height={height}\n                  width={width > totalColumnWidth ? width : totalColumnWidth}\n                  rowHeight={ROW_HEIGHT}\n                  overscanRowCount={5}\n                  columns={defaultColumns}\n                  rowClassName={'DatasetEditorRow'}\n                  rowProps={({ rowData }) => {\n                    return {\n                      'aria-selected': rowData.isSelected,\n                    }\n                  }}\n                  headerCellProps={{\n                    role: 'columnheader',\n                  }}\n                ></BaseTable>\n              )}\n            </AutoResizer>\n          )\n        ) : (\n          <SkeletonTable\n            className=\"DatasetItemsEditorSkeleton\"\n            numRows={8}\n            numCols={6}\n            rowHeight={`${ROW_HEIGHT}px`}\n          />\n        )}\n      </div>\n      <div className=\"DatasetEditorTopBottomPanel\">\n        <Button\n          variant={'outline'}\n          onClick={() => {\n            if (hasChangedSinceLastSave) {\n              setShowWarningModal(true)\n            } else if (onClose) {\n              onClose()\n            }\n          }}\n        >\n          Cancel\n        </Button>\n\n        <Button\n          disabled={!datasetToUpdate}\n          variant={'sds-primary'}\n          onClick={() => mutation.mutate(datasetToUpdate!)}\n        >\n          Save\n        </Button>\n      </div>\n    </div>\n  )\n}\n"],"names":["useState","console","itemName","currentVersionName","displayName","entityId","onSave","onClose","setHasChangedSinceLastSave","_setDatasetToUpdate","fetchedDataset","refetch","datasetToUpdate","ADD_ITEMS","ADD_ITEMS_TO","REMOVE_ITEMS","NO_ITEMS_IN_THIS_DATASET","SAVE_TO_CONTINUE","CREATE_VERSION_TO_FREEZE","ENTITY_SAVED","SAVE_CHANGES","PRECONDITION_FAILED_TITLE","PRECONDITION_FAILED_MESSAGE","PRECONDITION_FAILED_ACTION","ENTITY_FINDER_POPOVER","ENTITY_FINDER_PROMPT","useEffect","setDatasetToUpdate","selectedIds","addSelectedId","removeSelectedId","clearSelectedIds","displayToast","toastMessageTitle","setPreviousDatasetToUpdate","path","item","updatedItems","newItems","results","unchangedItems","deletedItems","toastTitle","targetId","targetVersionNumber","items","dataset","newVersion","EntityErrorRenderer","_jsx","isChecked","_Fragment","renderedSelectAllCheckbox","DatasetEditorCheckboxRenderer","EntityNameRenderer","BadgeIconsRenderer","props","changeVersionOnItem","DatasetItemVersionRenderer","CreatedOnRenderer","ModifiedOnRenderer","ModifiedByRenderer","ProjectRenderer","width","_jsxs","projectId","CURRENT_PROJECT","selectableTypes","showEntityFinder","setShowEntityFinder","addItemsToDataset","setShowWarningModal","showWarningModal","isLoading","removeSelectedItemsFromDataset","TABLE_HEIGHT","height","tableData","totalColumnWidth","ROW_HEIGHT","defaultColumns","isSelected"],"mappings":"uzGAAA,KAAAA,IAAA,OAAA,MAAA,SAgBO,YAAmB,EAA8C,CACtE,KAAM,CAAC,EAAK,GAAUA,GAAS,GAAI,KAAI,CAAY,CAAC,EAEpD,cAAgB,EAAY,CACpB,KAAA,GAAS,GAAI,KAAI,CAAG,EAC1B,SAAW,KAAQ,GACjB,EAAO,IAAI,CAAI,EAEjB,EAAO,CAAM,CACf,CAEA,WAAgB,EAAS,CACjB,KAAA,GAAS,GAAI,KAAI,CAAG,EAC1B,EAAO,OAAO,CAAI,EAClB,EAAO,CAAM,CACf,CAEiB,YAAA,CACR,EAAA,GAAI,IAAK,CAClB,CAEO,MAAA,CACL,MACA,MACA,SACA,OAAA,CAEJ,CCpCA,KAAA,GAAA,OAAA,MAAA,yDA2CA,YAAA,EAAA,CACE,MAAA,GAAA,CAAA,EACE,CAAA,EAAA,IAAA,EAAO,EAAA,CAAA,EAEP,CAAA,EAAA,OAAA,EAEAC,SAAAA,MAAAA,sDAAAA,EAAAA,YAAAA,EAIA,GAEH,CAEM,WAAA,EAAA,CACL,KAAA,GAAA,EAAA,EAAA,GAAA,EAAA,YAAA,CAAA,EAAA,aAGA,GAAA,GAAA,OACA,EAAA,kBACA,MAAA,IAAA,EAAA,CAAA,EACEC,GAAAA,EAAAA,EAAAA,IAAAA,EACAC,EAAAA,SAAqB,GAAA,EAAA,CAAA,GAErBD,GAAAA,EAAAA,EAAAA,OAAAA,GAGF,CAAO,UAAA,OAAA,EAAA,CAAA,IACsB,aAAA,OAAA,EAAA,CAAA,UAAA,IACsBE,aAAAA,UAAAA,EAAAA,CAAAA,IAChB,yBAAA,MAAA,EAAA,CAAA,aAAA,IAGpBA,iBAAAA,YAAAA,gBACiBA,yBAAAA,4BAAAA,sCACwBA,aAAAA,GAAAA,UACrCA,aAAAA,mBAAAA,IACgBD,sBAAAA,uCAAAA,EAAAA,CAAAA,oBAAAA,iDAAAA,EAAAA,CAAAA,KAGuD,qBAAA,QAAA,EAAA,CAAA,mBAAA,KAKrEC,4BAAAA,mBAAAA,kEAC6BA,0BAAAA,GAAAA,+BAClBA,2BAAAA,YAAAA,GACUA,CAE3C,CAcD,KAAA,GAAA,GACA,GAAA,IAEO,WAAA,EAAA,OACL,KAAA,CAAM,WAAEC,SAAUC,WAAQC,EAE1B,CAAA,EAAA,GAAA,EAAA,EAAA,EACA,CAAA,EAAA,GAAA,EAAA,EAAA,EACA,CAAA,EAAA,GAAA,EAAA,EAAA,EAEA,CAAA,EAAA,GAAA,EAAA,EAEA,CAAA,EAAA,GAAA,EAAA,EAEA,EAAA,AAAA,GAAA,CAKEC,EAAAA,EAAAA,EACAC,EAAAA,CAAAA,CAAmB,EAGrB,CAAM,KAAA,EAAQC,YAAgBC,GAAAA,EAAAA,OAAAA,CAEP,QAAA,CAAA,CACXC,CAAAA,EAGZ,CAAM,YACJC,gBACAC,gBACAC,4BACAC,oBACAC,4BACAC,gBACAC,gBACAC,6BACAC,+BACAC,8BACAC,yBACAC,yBACAC,EAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAGFC,EAAAA,IAAAA,CAEE,AAAA,CAAA,GAAA,GAEE,GAAA,OAAA,MACEhB,GAAAA,MAAAA,IAEFiB,EAAAA,CAAAA,EACAnB,EAAAA,EAAAA,EACD,EAAA,CAAA,EAAA,CAAA,CAAA,EAGH,KAAA,CAAM,IAAA,EACCoB,IAAAA,EACAC,OAAAA,GACGC,MAAAA,GACDC,GAAAA,EAET,EAAA,CAAA,CAAA,IAAA,EAAA,MAAA,SAAA,EAAA,MAIAL,EAAAA,IAAAA,CACE,GAAA,GAAA,GAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAKE,KAAA,GAAA,KACAM,EAAAA,GAAAA,OAAAA,CAAuC,MAAA,EAC9BC,oBAAAA,CACc,KAAA,GACbb,QAAAA,IAAAA,EAAAA,OAAAA,CAAAA,CACS,CAFI,CAAA,CAFX,CAQdc,EAAAA,CAAAA,CAA0B,EAAA,CAAA,CAAA,CAAA,EAI5B,KAAA,CAAM,KAAA,GAAQC,GAAAA,CAAAA,EACd,EAAA,oBAAA,KAAA,KAAA,cAAA,GAEA,EAAA,GAAA,CAA0D,UAAA,IAAA,CAEtD,AAAA,EACE7B,IAGA0B,EAAAA,GAAAA,UAAAA,CAAkD,MAAA,EACzCb,CAAAA,CAEV,EACF,QAAA,AAAA,GAAA,CAEC,AAAA,EAAA,SAAA,IACEa,EAAAA,GAAAA,UAAAA,CAAqD,MAAA,GAC5CX,oBAAAA,CACc,KAAA,GACbE,QAAAA,IAAAA,CAEJZ,IAAO,CACR,CAJkB,CAAA,EAQvBqB,EAAAA,EAAAA,OAAAA,SAAAA,CAAqC,MAAA,mBAC5B,CAAA,CAEV,CACF,CAAA,EAGH,GAAA,iBAAA,MAAA,IAAA,AAAA,GACE,EAAO,GAAA,EACFI,WAAAA,EAAAA,IAAAA,EAAAA,QAAAA,EACS,YAAA,AAAA,GAEV,EAAA,EAAA,EAAA,QAAA,EAAA,GAAA,EAAA,QAAA,CAGD,IAIL,WAAA,EAAA,EAAA,CAIE,GAAA,GAAA,EAAA,OAAA,AAAA,GAAA,CAAA,EAAA,KAAA,AAAA,GAAA,EAAA,WAAA,EAAA,QAAA,CAAA,EAIA,KAAA,GAAA,CAAA,GAAA,CAAA,EACA,CAAM,eAAEC,YAAcC,EAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAElB,KAAA,GAAA,EAAA,KAAA,AAAA,IAAA,GAAA,WAAA,EAAA,QAAA,EACA,MAAA,GACE,AAAA,EAAA,gBAAA,EAAA,cACEC,EAAAA,aAAAA,KAAAA,CAAAA,EAEAC,EAAAA,KAAAA,CAAAA,EAGFD,EAAAA,SAAAA,KAAAA,CAAAA,EAEF,CAAOA,EAAAA,CAET,aAAA,CAAA,EAAA,SAAA,CAAA,CAA8B,CAAA,EAMhC,MAAA,CAAO,iBAAEC,eAAgBH,WAAcC,cAAUG,CAA1C,CAGT,aAAA,CACE,KAAA,CAAM,eAAEJ,WAAcC,gBAAUG,EAAAA,iBAAAA,MAAAA,iBAAAA,KAAAA,EAIhC,GAAA,GAAA,GAGA,MAAA,GAAA,OAAA,EACEC,GAAAA,GAAAA,EAAAA,cAAAA,EAAAA,SAAAA,EAAAA,GAAAA,cAKAA,IAAAA,GAAAA,EAAAA,cAAAA,EAAAA,SAAAA,EAAAA,GAAAA,YAKA,EAAA,OAAA,GACEA,IAAAA,QAAAA,EAAAA,cAAAA,EAAAA,SAAAA,EAAAA,GAAAA,gBAKJ,CAAOA,CAGT,YAAA,EAAA,CACEf,EAAAA,AAAAA,GAAAA,CACE,GAAA,EAAA,CACE,KAAA,GAAA,EAAA,IAAA,AAAA,GAAA,EAAiD,SAAA,EAAA,SAChCgB,cAAAA,EAAAA,mBACKC,EAAAA,EAEtB,CAAM,iBAAEJ,eAAgBH,YAAcC,EAAAA,EAAAA,MAAAA,CAAAA,EAItC,EAAA,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAEA,MAAA,CAAO,GAAA,EACF1B,OACHiC,CAFK,KAKP5C,gBAAAA,KAAAA,2GAAAA,EAGA,CACD,CAAA,EAEH8B,GAAgB,CAGlB,aAAA,CACEJ,EAAAA,AAAAA,GAAAA,EAA+B,GAAA,EAC1BmB,MAAAA,EAAAA,MAAAA,OAAAA,AAAAA,GAAAA,CAAAA,EAAAA,IAAAA,EAAAA,QAAAA,CAAAA,CACI,EAAA,EAITf,GAAgB,CAGlB,YAAA,EAAA,EAAA,CACEJ,EAAAA,AAAAA,GAAAA,EAA+B,GAAA,EAC1BmB,MAAAA,EAAAA,MAAAA,IAAAA,AAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAGG,SAAA,EAAYzC,cAAAA,CAAyB0C,EAAAA,CAAAA,CAFpC,EAAA,CAFS,CAyEpB,KAAA,GAAA,CAAA,CACE,IAAA,aACO,MAAA,GACE,aAAA,EACOC,EAAAA,CAEhB,IAAA,aACO,MAAA,GACE,QAAA,aACE,eArBb,EAAAC,EA/BA,AAAA,GAAA,CACE,KAAA,CAAM,gBAAA,EAAErC,iBAAAA,EAAiBmB,cAAAA,GAAkBF,EAC3C,EAAA,EAEA,MAAA,GAAAoB,EAAA,MAAA,CACE,cAAA,aACc,MAAA,CACL,OAAA,SAAU,EAAV,QAAA,IAAA,CAEL,AAAA,EACElB,IAEAF,EAAAA,GAAAA,EAAAA,MAAAA,IAAAA,AAAAA,GAAAA,EAAAA,QAAAA,CAAAA,CACD,EACF,SAAAoB,EAAA,GAAA,CAED,MAAA,GACQ,UAAA,0BACI,QAAA,EACDC,SAAAA,EAAAA,MAAAA,SAAAA,EACkC,SAAA,IAAA,CAC3B,CAEf,CAAA,CAPH,CAAA,EAAAD,EAAAE,EAAA,CAAA,CAAA,CAZJ,EA2BF,CACE,kBACE,cACA,mBACA,gBACA,qBACA,CAAA,EAAAF,EAAAE,EAAA,CAAA,CAAA,EAgBgBC,aAAAA,EACFC,EAAAA,CAEhB,IAAA,OACO,MAAA,IACE,QAAA,WACE,MAAA,OACF,UAAA,GACI,aAAA,EACGC,EAAAA,CAEhB,IAAA,SACO,MAAA,GACE,QAAA,WACE,UAAA,GACE,aAAA,EACGC,EAAAA,CAEhB,IAAA,KACO,MAAA,IACE,MAAA,KACA,QAAA,WACE,UAAA,EACE,EAAA,CAEb,IAAA,UACO,MAAA,IACE,MAAA,UACA,QAAA,WACE,aAtGb,AAAA,GAGEN,EAAA,GAAA,CACE,GAAA,EACMO,gBAAAA,AAAAA,GAAAA,CAEFC,GAAAA,EAAAA,SAAAA,EAAAA,aAAAA,CAAmB,CACpB,CAAA,CA+FWC,EAAAA,CAEhB,IAAA,YACO,MAAA,IACE,MAAA,aACA,QAAA,WACE,UAAA,GACE,aAAA,EAEGC,EAAAA,CAEhB,IAAA,aACO,MAAA,IACE,MAAA,cACA,QAAA,WACE,UAAA,GACE,aAAA,EAEGC,EAAAA,CAEhB,IAAA,aACO,MAAA,IACE,MAAA,cACA,QAAA,WACE,UAAA,GACE,aAAA,EAEGC,EAAAA,CAEhB,IAAA,YACO,MAAA,IACE,MAAA,UACA,QAAA,WACE,UAAA,GACE,aAAA,EAEGC,CAAAA,EAIlB,EAAA,EAAA,OAAA,CAAA,EAAA,IACE,EAAA,EAAA,MAA2BC,CAAAA,EAG7B,aAAA,CACE,MAAAC,GAAA,MAAA,CACE,UAAA,qBAAe,SAAA,CAAAf,EAAA,EAAA,CACb,QAAA,YAAqB,SAAA,EAClBjC,CAAAA,EAAAA,EAAAA,EAAAA,CAEH,UAAA,iBACY,QAAA,cACF,QAAA,IAAA,EAAA,EAAA,EAC0B,SAAA,CAAAiC,EAAA,GAAA,CAElC,QAAA,CAAkB,KAAA,kBAAQ,CAAR,CAAA,EAAAA,EAAA,OAAA,CAClB,SAAA,CAAOpC,CAAAA,CAAAA,CANT,CAAA,CAAA,CAJF,CAAA,CADF,CAiBF,KAAA,IAAA,EAAA,IAAA,CACE,GAAA,EACE,MAAA,IAAA,CAAA,CAGD,EAAA,CAAA,CAAA,CAAA,EAGH,MAAAmD,GAAA,MAAA,CACE,UAAA,qCAAe,SAAA,CAAAf,EAAA,GAAA,CACb,cAAA,CACiB,YACbgB,eAAAA,GACgB,aAAA,GAAA,gBACUC,iBAAAA,UAAAA,KACK,mBAC/BC,wBAAAA,EACyB,EANZ,kBAAA,CAQI,aAAA,GACH3C,QAAAA,wDACL,EAFQ,WAAA,GAIPC,KAAAA,EACN2C,QAAAA,IAAAA,CAEJC,EAAAA,EAAAA,CAAmB,EACpB,MAAA,GACMvD,kBAAAA,EACYD,UAAAA,AAAAA,GAAAA,CAEjByD,GAAAA,CAAAA,EACAD,EAAAA,EAAAA,CAAmB,EACpB,SAAA,IAAA,EAAA,EAAA,CACkC,CAAA,EAAApB,EAAA,GAAA,CAErC,MAAA,kBACQ,UAAA,+EACI,kBAAA,eACQ,UAAA,IAAA,CAEhB,AAAA,GACEsB,GAAAA,EAAAA,EACAhE,IACD,EACF,KAAA,EACKiE,sBAAAA,CAAAA,EAVR,SAAA,IAAA,EAAA,EAAA,CAYqC,CAAA,EAAAR,EAAA,MAAA,CAGrC,UAAA,8BAAe,SAAA,CAAAf,EAAA,GAAA,CACb,KAAA,EAAA,SAA+BwB,CAAAA,EAAAA,EAAAA,MAAAA,CAC/B,UAAA,YAAe,SAAA,EAAAT,EAAA,EAAA,CAEX,QAAA,YAAoB,SAAA,CAAA,EAAA,MAAA,SAAA,EAAA,KAAA,EAAA,MAAA,OAAA,eAAA,EAAA,IAAA,OAAA,EAAA,MAAA,SAAA,GAAA,GAAA,CAApB,CAAA,EAAAf,EAAA,GAAA,CAQA,QAAA,OAAkB,MAAA,GAAc,CAAA,CAAhC,CAAA,EAAAA,EAAA,EAAA,CAIJ,QAAA,cACU,SAAA,GAAA,KACqB,QAAA,IAAA,EAAA,EAAA,EACK,SAAA,CAEjCpC,CAAAA,EAAAA,EAAAA,EAAAA,CAEH,SAAA,EAAA,OAAA,EACiC,QAAA,UACvB,QAAA,GACC6D,SAAAA,EAER3D,CAAAA,CAAAA,CA5BL,CAAA,EAAAkC,EAAA,MAAA,CA+BA,UAAA,8BAAe,SAAA,EAAA,EAAA,MAAA,SAAA,EAAAA,EAAA,GAAA,CAAA,CAAA,EAAAA,EAAA,GAAA,CAKT,OAAA,GAAqB0B,SAAAA,CAAAA,CACjB,SAAEC,WAAQb,EAAAA,GAAAA,CACV,YAAA,qBACc,KAAA,GACNc,SACN,MAAA,EAAA,EAAA,EAAA,EAC0CC,UAAAA,EAC/BC,iBAAAA,EACO,QAAA,EACTC,aAAAA,mBACK,SAAA,CAAA,CACH,aACT,EAAO,gBAAA,EAAA,UACoBC,GAE5B,gBAAA,CACgB,KAAA,cACT,CADS,CAAA,CAdnB,CAAA,EAAAhC,EAAA,GAAA,CAsBN,UAAA,6BACY,QAAA,EACD,QAAA,EACA,UAAA,GAAA,KACK8B,CAAAA,CAJhB,CAAA,EAAAf,EAAA,MAAA,CAQJ,UAAA,8BAAe,SAAA,CAAAf,EAAA,EAAA,CACb,QAAA,UACW,QAAA,IAAA,CAEP,AAAA,EACEsB,EAAAA,EAAAA,EAAmB,GAEnBhE,GACD,EACF,SAAA,QARH,CAAA,EAAA0C,EAAA,EAAA,CAaA,SAAA,CAAA,EACarC,QAAAA,cACF,QAAA,IAAA,EAAA,OAAA,CAAA,EACM,SAAA,MAHjB,CAAA,CAAA,CAdF,CAAA,CAAA,CA9GF,CAAA,CAsIH;;;;;;;;;;;;;;;;;"}