{"version":3,"file":"EvaluationEditorPage.stories.8a88f7e4.js","sources":["../../src/lib/containers/evaluation_queues/EvaluationEditor.tsx","../../src/lib/assets/icons/icon_plus_square_filled.svg","../../src/lib/assets/icons/icon_times.svg","../../src/lib/containers/evaluation_queues/round_limits/EvaluationRoundLimitOptions.tsx","../../src/lib/containers/evaluation_queues/round_limits/EvaluationRoundLimitOptionsList.tsx","../../node_modules/shortid/lib/random/random-from-seed.js","../../node_modules/shortid/lib/alphabet.js","../../node_modules/shortid/lib/random/random-byte-browser.js","../../node_modules/shortid/node_modules/nanoid/format.browser.js","../../node_modules/shortid/lib/generate.js","../../node_modules/shortid/lib/build.js","../../node_modules/shortid/lib/is-valid.js","../../node_modules/shortid/lib/index.js","../../node_modules/shortid/index.js","../../src/lib/containers/evaluation_queues/input_models/models.ts","../../src/lib/containers/evaluation_queues/EvaluationRoundEditorDropdown.tsx","../../src/lib/containers/evaluation_queues/EvaluationRoundEditor.tsx","../../src/lib/containers/evaluation_queues/EvaluationRoundEditorList.tsx","../../src/lib/containers/evaluation_queues/EvaluationEditorPage.tsx"],"sourcesContent":["import { Alert, Button, Col, Dropdown, Form, Row } from 'react-bootstrap'\nimport React, { useEffect, useState } from 'react'\nimport {\n  createEvaluation,\n  deleteEvaluation,\n  getEvaluation,\n  updateEvaluation,\n} from '../../utils/SynapseClient'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { ErrorBanner } from '../ErrorBanner'\nimport { Evaluation } from '../../utils/synapseTypes/Evaluation/Evaluation'\nimport { CreatedOnByUserDiv } from './CreatedOnByUserDiv'\nimport WarningModal from '../synapse_form_wrapper/WarningModal'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport IconSvg from '../IconSvg'\n\nexport type EvaluationEditorProps = {\n  /** Use if UPDATING an existing Evaluation. Id of the evaluation to edit */\n  readonly evaluationId?: string\n  /** Use if CREATING a new Evaluation. Id of the Entity that will be associated with the Evaluation */\n  readonly entityId?: string\n  /** Callback after successful deletion of the Evaluation */\n  readonly onDeleteSuccess: () => void\n  /** Callback after successful save of the Evaluation */\n  readonly onSaveSuccess?: (evaluationId: string) => void\n}\n\n/**\n * Edits basic properties of an Evaluation\n */\nexport const EvaluationEditor: React.FunctionComponent<\n  EvaluationEditorProps\n> = ({\n  evaluationId,\n  entityId,\n  onDeleteSuccess,\n  onSaveSuccess,\n}: EvaluationEditorProps) => {\n  if (evaluationId && entityId) {\n    throw new Error('please use either evaluationId or entityId but not both')\n  }\n  const { accessToken } = useSynapseContext()\n  const [error, setError] = useState<SynapseClientError>()\n  const [showSaveSuccess, setShowSaveSuccess] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (error) {\n      setShowSaveSuccess(false)\n    }\n  }, [error])\n\n  const [name, setName] = useState<string>('')\n  const [description, setDescription] = useState<string>('')\n  const [submissionInstructionsMessage, setSubmissionInstructionsMessage] =\n    useState<string>('')\n  const [submissionReceiptMessage, setSubmissionReceiptMessage] =\n    useState<string>('')\n\n  const [evaluation, setEvaluation] = useState<Evaluation>({\n    contentSource: entityId,\n  })\n\n  useEffect(() => {\n    setName(evaluation.name ?? '')\n    setDescription(evaluation.description ?? '')\n    setSubmissionInstructionsMessage(\n      evaluation.submissionInstructionsMessage ?? '',\n    )\n    setSubmissionReceiptMessage(evaluation.submissionReceiptMessage ?? '')\n  }, [evaluation])\n\n  useEffect(() => {\n    // if we initially passed in a update the we retrieve a new Evaluation\n    if (evaluationId) {\n      //clear error\n      setError(undefined)\n      getEvaluation(evaluationId, accessToken)\n        .then(retrievedEvaluation => {\n          setEvaluation(retrievedEvaluation)\n        })\n        .catch(error => setError(error))\n    }\n  }, [evaluationId, accessToken])\n\n  const onSave = () => {\n    // clear out error\n    setError(undefined)\n    setShowSaveSuccess(false)\n    const newOrUpdatedEvaluation: Evaluation = {\n      ...evaluation,\n      name,\n      description,\n      submissionInstructionsMessage,\n      submissionReceiptMessage,\n    }\n\n    const promise = newOrUpdatedEvaluation.id\n      ? updateEvaluation(newOrUpdatedEvaluation, accessToken)\n      : createEvaluation(newOrUpdatedEvaluation, accessToken)\n\n    promise\n      .then(evaluation => {\n        setEvaluation(evaluation)\n        setShowSaveSuccess(true)\n        if (onSaveSuccess) {\n          onSaveSuccess(evaluation.id!)\n        }\n      })\n      .catch(error => setError(error))\n  }\n\n  // create delete callback if the evaluation has id\n  const onDelete = evaluation?.id\n    ? () => {\n        setError(undefined)\n        deleteEvaluation(evaluation.id!, accessToken)\n          .then(onDeleteSuccess)\n          .catch(error => setError(error))\n      }\n    : undefined\n\n  return (\n    <div className=\"bootstrap-4-backport\">\n      <div className=\"evaluation-editor\">\n        <Row>\n          <Col>\n            <h4>{evaluation.id ? 'Edit' : 'Create'} Evaluation Queue</h4>\n          </Col>\n          <Col>\n            <EvaluationEditorDropdown onClick={onSave} onDelete={onDelete} />\n          </Col>\n        </Row>\n        <Form>\n          <Form.Group>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={name}\n              onChange={event => setName(event.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Description</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              value={description}\n              rows={2}\n              onChange={event => setDescription(event.target.value)}\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Submission Instructions</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              value={submissionInstructionsMessage}\n              rows={2}\n              onChange={event =>\n                setSubmissionInstructionsMessage(event.target.value)\n              }\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Submission Receipt Message</Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={submissionReceiptMessage}\n              onChange={event =>\n                setSubmissionReceiptMessage(event.target.value)\n              }\n            />\n          </Form.Group>\n          {evaluation?.createdOn && (\n            <CreatedOnByUserDiv\n              userId={evaluation.ownerId!}\n              date={new Date(evaluation.createdOn)}\n            />\n          )}\n          {error && <ErrorBanner error={error} />}\n          {showSaveSuccess && (\n            <Alert\n              className=\"save-success-alert\"\n              dismissible={true}\n              variant=\"success\"\n              transition={false}\n              onClose={() => setShowSaveSuccess(false)}\n            >\n              Successfully saved.\n            </Alert>\n          )}\n          <div className=\"d-flex justify-content-end\">\n            <Button className=\"save-button\" onClick={onSave}>\n              Save\n            </Button>\n          </div>\n        </Form>\n      </div>\n    </div>\n  )\n}\n\ntype EvaluationEditorDropdownProps = {\n  onClick: () => void\n  onDelete?: () => void\n}\n\nconst EvaluationEditorDropdown: React.FunctionComponent<\n  EvaluationEditorDropdownProps\n> = ({ onClick, onDelete }) => {\n  const [deleteWarningShow, setDeleteWarningShow] = useState<boolean>(false)\n\n  return (\n    <>\n      {onDelete && (\n        <WarningModal\n          title=\"Delete Evaluation Queue\"\n          modalBody=\"Are you sure you want to delete this Evaluation Queue?\"\n          show={deleteWarningShow}\n          confirmButtonText=\"Delete\"\n          onConfirm={() => {\n            onDelete()\n            setDeleteWarningShow(false)\n          }}\n          onConfirmCallbackArgs={[]}\n          onCancel={() => {\n            setDeleteWarningShow(false)\n          }}\n          confirmButtonVariant=\"danger\"\n        />\n      )}\n      <Dropdown className=\"float-right\">\n        <Dropdown.Toggle variant=\"link\" className=\"dropdown-no-caret\">\n          <IconSvg options={{ icon: 'verticalEllipsis' }} />\n        </Dropdown.Toggle>\n        <Dropdown.Menu alignRight={true}>\n          <Dropdown.Item onClick={onClick}>Save</Dropdown.Item>\n          {onDelete && (\n            <>\n              <Dropdown.Divider />\n              <Dropdown.Item onClick={() => setDeleteWarningShow(true)}>\n                Delete\n              </Dropdown.Item>\n            </>\n          )}\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  )\n}\n","export default \"__VITE_ASSET__9ab2fda4__\"","export default \"__VITE_ASSET__8fd688b6__\"","import { EvaluationRoundLimitType } from '../../../utils/synapseTypes/Evaluation'\nimport React from 'react'\nimport { FormControl, FormGroup } from 'react-bootstrap'\nimport { EvaluationRoundLimitInput } from '../input_models/models'\n\nexport type EvaluationRoundLimitOptionsProps = {\n  limitInput: EvaluationRoundLimitInput\n  //all types for which an EvaluationRoundLimitOptions was already created\n  allSelectedTypes: Set<EvaluationRoundLimitType>\n  onChange: (limitInput: EvaluationRoundLimitInput) => void\n}\n\nexport const LIMIT_TYPE_DISPLAY_NAME: Partial<\n  Record<EvaluationRoundLimitType, string>\n> = {\n  // EvaluationRoundLimitType.TOTAL is purposely omitted because an <input> in the parent handles it\n  DAILY: 'Daily Limit',\n  WEEKLY: 'Weekly Limit',\n  MONTHLY: 'Monthly Limit',\n}\n\nexport const EvaluationRoundLimitOptions: React.FunctionComponent<\n  EvaluationRoundLimitOptionsProps\n> = ({ limitInput, allSelectedTypes, onChange }) => {\n  return (\n    <React.Fragment>\n      <FormGroup className=\"limit-type\">\n        <label>Limit Type</label>\n        <FormControl\n          as=\"select\"\n          custom\n          value={limitInput.type}\n          onChange={event => {\n            onChange({\n              type: event.target.value as EvaluationRoundLimitType,\n              maxSubmissionString: limitInput.maxSubmissionString,\n            })\n          }}\n        >\n          {Object.entries(LIMIT_TYPE_DISPLAY_NAME).map(\n            ([displayLimitType, displayName]) => (\n              <option\n                key={displayLimitType}\n                value={displayLimitType}\n                disabled={\n                  allSelectedTypes.has(\n                    displayLimitType as EvaluationRoundLimitType,\n                  ) && displayLimitType !== limitInput.type\n                }\n              >\n                {displayName}\n              </option>\n            ),\n          )}\n        </FormControl>\n      </FormGroup>\n\n      <FormGroup className=\"limit-input\">\n        <label>Maximum Submissions</label>\n        <FormControl\n          type=\"text\"\n          pattern=\"[0-9]*\"\n          value={limitInput.maxSubmissionString}\n          onChange={event => {\n            onChange({\n              type: limitInput.type,\n              maxSubmissionString: event.target.value,\n            })\n          }}\n        />\n      </FormGroup>\n    </React.Fragment>\n  )\n}\n","import React, { useCallback, useEffect } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { ReactComponent as IconPlusSquareFilled } from '../../../assets/icons/icon_plus_square_filled.svg'\nimport { ReactComponent as IconTimes } from '../../../assets/icons/icon_times.svg'\nimport { EvaluationRoundLimitType } from '../../../utils/synapseTypes/Evaluation'\nimport { EvaluationRoundLimitInput } from '../input_models/models'\nimport {\n  EvaluationRoundLimitOptions,\n  LIMIT_TYPE_DISPLAY_NAME,\n} from './EvaluationRoundLimitOptions'\n\nconst AVAILABLE_LIMIT_TYPES = Object.keys(LIMIT_TYPE_DISPLAY_NAME)\n\nexport type EvaluationRoundLimitOptionsListProps = {\n  limitInputs: EvaluationRoundLimitInput[]\n  handleChange: (\n    index: number,\n  ) => (limitInput: EvaluationRoundLimitInput) => void\n\n  handleDeleteLimit: (index: number) => () => void\n\n  onAddNewLimit: (limit: EvaluationRoundLimitInput) => void\n}\n\nconst selectUnusedType = (\n  selectedTypes: Set<EvaluationRoundLimitType>,\n): EvaluationRoundLimitType => {\n  return AVAILABLE_LIMIT_TYPES.find(\n    key => !selectedTypes.has(key as EvaluationRoundLimitType),\n  ) as EvaluationRoundLimitType\n}\n\nexport const EvaluationRoundLimitOptionsList: React.FunctionComponent<\n  EvaluationRoundLimitOptionsListProps\n> = ({ limitInputs, handleChange, handleDeleteLimit, onAddNewLimit }) => {\n  // all types that are currently being used\n  const selectedTypes: Set<EvaluationRoundLimitType> = new Set(\n    limitInputs.map(limit => limit.type),\n  )\n\n  const addNewLimit = useCallback(() => {\n    onAddNewLimit({\n      type: selectUnusedType(selectedTypes),\n      maxSubmissionString: '',\n    })\n  }, [onAddNewLimit, selectedTypes])\n\n  //display some input even if no limits currently exist\n  useEffect(() => {\n    if (limitInputs.length === 0) {\n      addNewLimit()\n    }\n  }, [limitInputs, addNewLimit])\n\n  return (\n    <div className=\"advanced-limits-grid\">\n      {limitInputs.map((limit, index) => {\n        return (\n          <React.Fragment key={limit.type}>\n            <EvaluationRoundLimitOptions\n              limitInput={limit}\n              allSelectedTypes={selectedTypes}\n              onChange={handleChange(index)}\n            />\n\n            {/*remove button for the EvaluationRoundLimitOptions*/}\n            <Button\n              // use an invalid variant, we just want the basic bootstrap 4 \"btn\" class behavior\n              variant=\"\"\n              aria-label=\"Remove\"\n              className=\"remove-button\"\n              onClick={handleDeleteLimit(index)}\n            >\n              <IconTimes className=\"SRC-icon-fill\" />\n            </Button>\n\n            {/*conditionally create a \"add\" button*/}\n            {\n              // if last element\n              index === limitInputs.length - 1 &&\n                // if the are unused limit types\n                limitInputs.length < AVAILABLE_LIMIT_TYPES.length && (\n                  <Button\n                    // use an invalid variant, we just want the basic bootstrap 4 \"btn\" class behavior\n                    variant=\"\"\n                    aria-label=\"Add\"\n                    onClick={addNewLimit}\n                    className=\"add-button\"\n                  >\n                    <IconPlusSquareFilled className=\"SRC-icon-fill\" />\n                  </Button>\n                )\n            }\n          </React.Fragment>\n        )\n      })}\n    </div>\n  )\n}\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nmodule.exports = require('./lib/index');\n","import {\n  EvaluationRound,\n  EvaluationRoundLimit,\n  EvaluationRoundLimitType,\n} from '../../../utils/synapseTypes/Evaluation'\nimport shortid from 'shortid'\n\nexport type EvaluationRoundLimitInput = {\n  readonly type: EvaluationRoundLimitType\n  readonly maxSubmissionString: string\n}\nexport type EvaluationRoundInput = {\n  // must be present\n  evaluationId: string\n\n  //used for React's \"key\" identifier when used inside a list.\n  reactListKey: string\n\n  //may not exist if newly crated\n  id?: string\n  etag?: string\n\n  //may be empty string, but not undefined\n  roundStart: string\n  roundEnd: string\n  totalSubmissionLimit: string\n\n  //may be an empty list, but not undefined\n  otherLimits: EvaluationRoundLimitInput[]\n}\n\nexport const convertEvaluationRoundToInput = (\n  evaluationRound: EvaluationRound,\n  reactListKey?: string,\n): EvaluationRoundInput => {\n  return {\n    reactListKey: reactListKey ?? shortid.generate(),\n    evaluationId: evaluationRound.evaluationId,\n    id: evaluationRound.id,\n    etag: evaluationRound.etag,\n    roundStart: evaluationRound.roundStart,\n    roundEnd: evaluationRound.roundEnd,\n    totalSubmissionLimit: extractTotalLimit(evaluationRound.limits),\n    otherLimits: convertRoundLimitsToInput(evaluationRound.limits),\n  }\n}\n\nconst extractTotalLimit = (\n  limits: EvaluationRoundLimit[] | undefined,\n): string =>\n  (limits || [])\n    .filter(evaluationLimit => evaluationLimit.limitType === 'TOTAL')\n    .reduce((ignorePrevValue, evaluationLimit) => {\n      //after filtering there should exist at most one evaluationLimit\n      return evaluationLimit.maximumSubmissions.toString()\n    }, '')\n\nconst convertRoundLimitsToInput = (\n  evaluationRoundLimits: EvaluationRoundLimit[] | undefined,\n): EvaluationRoundLimitInput[] => {\n  return (evaluationRoundLimits || [])\n    .filter(evaluationLimit => evaluationLimit.limitType !== 'TOTAL')\n    .reduce<EvaluationRoundLimitInput[]>((limitInputList, evaluationLimit) => {\n      limitInputList.push({\n        type: evaluationLimit.limitType,\n        maxSubmissionString: evaluationLimit.maximumSubmissions.toString(),\n      })\n      //after filtering there should exist at most one evaluationLimit\n      return limitInputList\n    }, [])\n}\n","import { Dropdown } from 'react-bootstrap'\nimport React, { useState } from 'react'\nimport WarningModal from '../synapse_form_wrapper/WarningModal'\nimport IconSvg from '../IconSvg'\n\nexport type EvaluationRoundEditorDropdownProps = {\n  onDelete: () => void\n  onSave: () => void\n}\n\nexport const EvaluationRoundEditorDropdown: React.FunctionComponent<\n  EvaluationRoundEditorDropdownProps\n> = ({ onSave, onDelete }) => {\n  const [deleteWarningShow, setDeleteWarningShow] = useState<boolean>(false)\n\n  return (\n    <>\n      <WarningModal\n        title=\"Delete Evaluation Round\"\n        modalBody=\"Are you sure you want to delete this Evaluation Round?\"\n        show={deleteWarningShow}\n        confirmButtonText=\"Delete\"\n        onConfirm={() => {\n          onDelete()\n          setDeleteWarningShow(false)\n        }}\n        onConfirmCallbackArgs={[]}\n        onCancel={() => {\n          setDeleteWarningShow(false)\n        }}\n        confirmButtonVariant=\"danger\"\n      />\n\n      <Dropdown className=\"float-right\">\n        <Dropdown.Toggle\n          variant=\"link\"\n          className=\"dropdown-no-caret evaluation-round-editor-dropdown\"\n        >\n          <IconSvg options={{ icon: 'verticalEllipsis' }} />\n        </Dropdown.Toggle>\n        <Dropdown.Menu alignRight={true}>\n          <Dropdown.Item onClick={onSave}>Save</Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item onClick={() => setDeleteWarningShow(true)}>\n            Delete\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  )\n}\n","import { EvaluationRound, EvaluationRoundLimit } from '../../utils/synapseTypes'\nimport React, { useEffect, useState } from 'react'\nimport {\n  Alert,\n  Button,\n  Card,\n  Col,\n  Form,\n  FormControl,\n  FormGroup,\n  Row,\n} from 'react-bootstrap'\nimport moment, { Moment } from 'moment'\nimport { CalendarWithIconFormGroup } from './CalendarWithIconFormGroup'\nimport { EvaluationRoundLimitOptionsList } from './round_limits/EvaluationRoundLimitOptionsList'\nimport { useListState } from '../../utils/hooks/useListState'\nimport {\n  convertEvaluationRoundToInput,\n  EvaluationRoundInput,\n  EvaluationRoundLimitInput,\n} from './input_models/models'\nimport {\n  updateEvaluationRound,\n  createEvaluationRound,\n  deleteEvaluationRound,\n} from '../../utils/SynapseClient'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { EvaluationRoundEditorDropdown } from './EvaluationRoundEditorDropdown'\nimport { ErrorBanner } from '../ErrorBanner'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport IconSvg, { IconSvgOptions } from '../IconSvg'\n\nexport type EvaluationRoundEditorProps = {\n  evaluationRoundInput: EvaluationRoundInput\n  onDelete: () => void\n  onSave: (evaluationRound: EvaluationRoundInput) => void\n}\n\nconst disallowCalendarDateBefore = (date: Moment) => {\n  const startOfDay = date.startOf('day')\n  return (currentDate: Moment) => currentDate.isSameOrAfter(startOfDay)\n}\n\nconst determineRoundStatus = (\n  roundStart: Moment | string,\n  roundEnd: Moment | string,\n) => {\n  let className: string\n  let icon: IconSvgOptions | undefined\n  let status: string\n  const now = moment()\n  // based off of start/end datetime from props so that users making\n  // unsaved changes to the start/end dates do not change the status\n  if (now.isSameOrAfter(roundStart)) {\n    if (now.isBefore(roundEnd)) {\n      className = 'status-in-progress'\n      icon = { icon: 'sync' }\n      status = 'IN PROGRESS'\n    } else {\n      className = 'status-completed'\n      icon = { icon: 'clipboardCheck' }\n      status = 'COMPLETED'\n    }\n  } else {\n    className = 'status-not-yet-started'\n    icon = undefined\n    status = 'NOT YET STARTED'\n  }\n\n  return (\n    <div className={className}>\n      <div className=\"status\">\n        {icon && <IconSvg options={icon} />}\n        <span>{status}</span>\n      </div>\n    </div>\n  )\n}\n\nconst convertInputsToEvaluationRound = (\n  evaluationRoundInputProp: EvaluationRoundInput,\n  startDate: string | Moment,\n  endDate: string | Moment,\n  totalSubmissionLimit: string,\n  advancedLimits: EvaluationRoundLimitInput[],\n): EvaluationRound => {\n  const limits: EvaluationRoundLimit[] = []\n  if (totalSubmissionLimit) {\n    const totalSubmissionLimitInt = Number(totalSubmissionLimit)\n    if (Number.isNaN(totalSubmissionLimitInt)) {\n      throw TypeError('Total Submission is not an integer')\n    }\n    limits.push({\n      limitType: 'TOTAL',\n      maximumSubmissions: totalSubmissionLimitInt,\n    })\n  }\n  advancedLimits.forEach(limitInput => {\n    if (limitInput.maxSubmissionString) {\n      const maxSubmissionInt = Number(limitInput.maxSubmissionString)\n      if (Number.isNaN(maxSubmissionInt)) {\n        throw TypeError(limitInput.type + ' Limit is not an integer')\n      }\n      limits.push({\n        limitType: limitInput.type,\n        maximumSubmissions: maxSubmissionInt,\n      })\n    }\n  })\n\n  return {\n    id: evaluationRoundInputProp.id,\n    etag: evaluationRoundInputProp.etag,\n    evaluationId: evaluationRoundInputProp.evaluationId,\n    roundStart: moment.utc(startDate).toJSON(),\n    roundEnd: moment.utc(endDate).toJSON(),\n    limits: limits,\n  }\n}\n\nexport const EvaluationRoundEditor: React.FunctionComponent<\n  EvaluationRoundEditorProps\n> = ({ evaluationRoundInput, onSave, onDelete }) => {\n  const { accessToken } = useSynapseContext()\n  const [error, setError] = useState<string | SynapseClientError | undefined>()\n  const [showSaveSuccess, setShowSaveSuccess] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (error) {\n      setShowSaveSuccess(false)\n    }\n  }, [error])\n\n  const [startDate, setStartDate] = useState<string | Moment>(\n    moment(evaluationRoundInput.roundStart),\n  )\n  const [endDate, setEndDate] = useState<string | Moment>(\n    moment(evaluationRoundInput.roundEnd),\n  )\n\n  const [totalSubmissionLimit, setTotalSubmissionLimit] = useState<string>(\n    evaluationRoundInput.totalSubmissionLimit,\n  )\n\n  const [advancedMode, setAdvancedMode] = useState<boolean>(false)\n\n  const {\n    list: advancedLimits,\n    handleListRemove,\n    handleListChange: handleAdvancedLimitsChange,\n    appendToList: addAdvancedLimit,\n  } = useListState<EvaluationRoundLimitInput>(evaluationRoundInput.otherLimits)\n\n  // if we remove the last advanced limit, hide the advanced limits\n  const handleAdvancedLimitsRemove = (index: number) => {\n    const generatedRemoveFunc = handleListRemove(index)\n    return () => {\n      //we are deleting the last advanced limit\n\n      generatedRemoveFunc()\n      if (advancedLimits.length === 1) {\n        // NOTE: we dont check for length == 0 because we don't modify the original list,\n        // instead the generated function will setState() with a NEW empty list\n        // so the original list we reference still has 1 element\n        setAdvancedMode(false)\n      }\n    }\n  }\n\n  const onSaveButtonClick = () => {\n    setShowSaveSuccess(false)\n    let evaluationRound\n    try {\n      evaluationRound = convertInputsToEvaluationRound(\n        evaluationRoundInput,\n        startDate,\n        endDate,\n        totalSubmissionLimit,\n        advancedLimits,\n      )\n    } catch (err) {\n      // error thrown if number\n      setError(err)\n    }\n    if (evaluationRound) {\n      const promise = evaluationRound.id\n        ? updateEvaluationRound(evaluationRound, accessToken)\n        : createEvaluationRound(evaluationRound, accessToken)\n\n      promise\n        .then(createdOrUpdatedRound => {\n          const newInput = convertEvaluationRoundToInput(\n            createdOrUpdatedRound,\n            evaluationRoundInput.reactListKey,\n          )\n          //clear out previous error if any\n          setError(undefined)\n          setShowSaveSuccess(true)\n          onSave(newInput)\n        })\n        .catch(error => setError(error))\n    }\n  }\n\n  const onDeleteButtonClick = () => {\n    if (evaluationRoundInput.id) {\n      deleteEvaluationRound(\n        evaluationRoundInput.evaluationId,\n        evaluationRoundInput.id,\n        accessToken,\n      )\n        .then(() => onDelete())\n        .catch(error => setError(error))\n    } else {\n      onDelete()\n    }\n  }\n\n  const disallowDatesBeforeNow = disallowCalendarDateBefore(moment())\n\n  // https://react-bootstrap.github.io/components/forms/#forms-validation-native\n  return (\n    <div className=\"evaluation-round-editor\">\n      <Card>\n        <Card.Body>\n          <Form>\n            <Row>\n              <Col>\n                <h5>\n                  ROUND STATUS\n                  {evaluationRoundInput.id &&\n                    ' (' + evaluationRoundInput.id + ')'}\n                </h5>\n              </Col>\n              <Col>\n                <EvaluationRoundEditorDropdown\n                  onDelete={onDeleteButtonClick}\n                  onSave={onSaveButtonClick}\n                />\n              </Col>\n            </Row>\n\n            <Row className=\"mb-3\">\n              <Col>\n                <div className=\"round-status\">\n                  {determineRoundStatus(\n                    evaluationRoundInput.roundStart,\n                    evaluationRoundInput.roundEnd,\n                  )}\n                </div>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <h5>DURATION</h5>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col>\n                <CalendarWithIconFormGroup\n                  value={startDate}\n                  setterCallback={setStartDate}\n                  label=\"Round Start\"\n                  isValidDate={disallowDatesBeforeNow}\n                  disabled={moment().isSameOrAfter(\n                    evaluationRoundInput.roundStart,\n                  )}\n                />\n              </Col>\n              <Col>\n                <CalendarWithIconFormGroup\n                  value={endDate}\n                  label=\"Round End\"\n                  setterCallback={setEndDate}\n                  isValidDate={disallowDatesBeforeNow}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <h5>SUBMISSION LIMITS</h5>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col>\n                <FormGroup>\n                  <label>Total Submissions / Round</label>\n                  <FormControl\n                    value={totalSubmissionLimit}\n                    type=\"text\"\n                    pattern=\"[0-9]*\"\n                    onChange={event =>\n                      setTotalSubmissionLimit(event.target.value)\n                    }\n                    // Chrome for some reason decides to autofill this input box with email address, so we must disable autofill\n                    // this is a hacky, but consistent way to disable autofill because Chrome does not respect the spec :(\n                    // https://bugs.chromium.org/p/chromium/issues/detail?id=914451\n                    autoComplete=\"new-password\"\n                  />\n                </FormGroup>\n              </Col>\n            </Row>\n            <Row className=\"mb-3\">\n              <Col>\n                <Button\n                  variant=\"link\"\n                  className=\"advanced-limits-link font-weight-bold\"\n                  onClick={() => setAdvancedMode(!advancedMode)}\n                >\n                  Advanced Limits\n                </Button>\n              </Col>\n            </Row>\n\n            {advancedMode && (\n              <EvaluationRoundLimitOptionsList\n                limitInputs={advancedLimits}\n                handleChange={handleAdvancedLimitsChange}\n                handleDeleteLimit={handleAdvancedLimitsRemove}\n                onAddNewLimit={addAdvancedLimit}\n              />\n            )}\n\n            {error && (\n              <Row className=\"my-3\">\n                <Col>\n                  <ErrorBanner error={error} />\n                </Col>\n              </Row>\n            )}\n\n            {showSaveSuccess && (\n              <Row className=\"my-3\">\n                <Col>\n                  <Alert\n                    className=\"save-success-alert\"\n                    dismissible={true}\n                    variant=\"success\"\n                    transition={false}\n                    onClose={() => setShowSaveSuccess(false)}\n                  >\n                    Successfully saved.\n                  </Alert>\n                </Col>\n              </Row>\n            )}\n\n            <Row className=\"mt-3\">\n              <Col>\n                <Button\n                  className=\"save-button float-right border-0\"\n                  onClick={onSaveButtonClick}\n                >\n                  Save\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </Card.Body>\n      </Card>\n    </div>\n  )\n}\n\nexport const HelpersToTest = {\n  disallowCalendarDateBefore,\n  determineRoundStatus,\n  convertInputsToEvaluationRound,\n}\n","import React, { useEffect, useState } from 'react'\nimport { useListState } from '../../utils/hooks/useListState'\nimport { EvaluationRoundEditor } from './EvaluationRoundEditor'\nimport { Button } from 'react-bootstrap'\nimport {\n  convertEvaluationRoundToInput,\n  EvaluationRoundInput,\n} from './input_models/models'\nimport { getEvaluationRoundsList } from '../../utils/SynapseClient'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport shortid from 'shortid'\nimport { EvaluationRoundListResponse } from '../../utils/synapseTypes/Evaluation/EvaluationRoundListResponse'\nimport { ErrorBanner } from '../ErrorBanner'\nimport { useSynapseContext } from '../../utils/SynapseContext'\n\nexport type EvaluationRoundEditorListProps = {\n  /** id of the Evaluation containing EvaluationRounds to edit*/\n  evaluationId: string\n}\n\nconst fetchEvaluationList = (\n  evaluationId: string,\n  accessToken: string,\n  setListCallback: (items: EvaluationRoundInput[]) => void,\n  errorHandleCallback: (error: string | SynapseClientError | undefined) => void,\n): void => {\n  const allEvaluationRoundInputList: EvaluationRoundInput[] = []\n\n  const getEvaluationRounds = (nextPageToken?: string) => {\n    getEvaluationRoundsList(\n      evaluationId,\n      { nextPageToken: nextPageToken },\n      accessToken,\n    )\n      .then((response: EvaluationRoundListResponse) => {\n        const convertedToInput: EvaluationRoundInput[] = response.page.map(\n          evaluationRound => convertEvaluationRoundToInput(evaluationRound),\n        )\n\n        allEvaluationRoundInputList.push(...convertedToInput)\n        errorHandleCallback(undefined)\n\n        if (response.nextPageToken) {\n          getEvaluationRounds(response.nextPageToken)\n        } else {\n          // no more pages left. we can set the list\n          setListCallback(allEvaluationRoundInputList)\n        }\n      })\n      .catch(error => {\n        errorHandleCallback(error)\n      })\n  }\n\n  //initially no next page token\n  getEvaluationRounds(undefined)\n}\n\n/**\n * Edits EvaluationsRounds for an Evaluation.\n */\nexport const EvaluationRoundEditorList: React.FunctionComponent<\n  EvaluationRoundEditorListProps\n> = ({ evaluationId }: EvaluationRoundEditorListProps) => {\n  const { accessToken } = useSynapseContext()\n  const [error, setError] = useState<string | SynapseClientError | undefined>()\n\n  const {\n    list: evaluationRoundInputList,\n    appendToList: appendToEvaluationRoundInputList,\n    handleListChange: handleEvaluationRoundInputListChange,\n    handleListRemove: handleEvaluationRoundInputListRemove,\n    setList: setEvaluationRoundInputList,\n  } = useListState<EvaluationRoundInput>([])\n\n  //run only once\n  useEffect(\n    () => {\n      fetchEvaluationList(\n        evaluationId,\n        accessToken!,\n        setEvaluationRoundInputList,\n        setError,\n      )\n    },\n    // we explicitly dont want to list setEvaluationRoundInputList nor setError as a dependency\n    // if we do, the fetchEvaluationList will re-fetch from the backend on every new render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [accessToken, evaluationId],\n  )\n\n  if (error) {\n    return <ErrorBanner error={error} />\n  }\n\n  return (\n    <div className=\"evaluation-round-editor-list bootstrap-4-backport\">\n      <div className=\"evaluation-rounds\">\n        {evaluationRoundInputList.map((evaluationRoundInput, index) => {\n          return (\n            <EvaluationRoundEditor\n              key={evaluationRoundInput.reactListKey}\n              evaluationRoundInput={evaluationRoundInput}\n              onSave={handleEvaluationRoundInputListChange(index)}\n              onDelete={handleEvaluationRoundInputListRemove(index)}\n            />\n          )\n        })}\n      </div>\n\n      <div>\n        <Button\n          className=\"add-round-button\"\n          variant=\"primary\"\n          onClick={() => {\n            appendToEvaluationRoundInputList({\n              reactListKey: shortid(),\n              evaluationId: evaluationId,\n              roundStart: '',\n              roundEnd: '',\n              totalSubmissionLimit: '',\n              otherLimits: [],\n            })\n          }}\n        >\n          Add Round\n        </Button>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { EvaluationEditor } from './EvaluationEditor'\nimport { EvaluationRoundEditorList } from './EvaluationRoundEditorList'\nimport { Alert, Button } from 'react-bootstrap'\n\nexport type EvaluationEditorPageProps = {\n  /** Use if UPDATING an existing Evaluation. Id of the evaluation to edit */\n  readonly evaluationId?: string\n  /** Use if CREATING a new Evaluation. Id of the Entity that will be associated with the Evaluation */\n  readonly entityId?: string\n  /** Callback after successful deletion of the Evaluation */\n  readonly onDeleteSuccess: () => void\n}\n\n/**\n * Combined editor that allows editing an Evaluation's data and also it's associated rounds (once the Evaluation exists on Synapse)\n */\nexport const EvaluationEditorPage: React.FunctionComponent<\n  EvaluationEditorPageProps\n> = ({\n  evaluationId,\n  entityId,\n  onDeleteSuccess,\n}: EvaluationEditorPageProps) => {\n  const [savedEvaluationId, setSavedEvaluationId] = useState<\n    string | undefined\n  >(evaluationId)\n  return (\n    <div className=\"bootstrap-4-backport\">\n      <EvaluationEditor\n        evaluationId={savedEvaluationId}\n        //do not use entityId if we already have the evaluation Id\n        entityId={savedEvaluationId ? undefined : entityId}\n        onDeleteSuccess={onDeleteSuccess}\n        onSaveSuccess={setSavedEvaluationId}\n      />\n\n      <div className=\"mt-4\">\n        {savedEvaluationId ? (\n          <EvaluationRoundEditorList evaluationId={savedEvaluationId} />\n        ) : (\n          // shows an alert informing user to first create an Evaluation if they\n          // click the \"Add Round\" button\n          <FakeEvaluationRoundEditorList />\n        )}\n      </div>\n    </div>\n  )\n}\n\n/**\n * special case handling when the evaluation has not been created yet (i.e. does not exist)\n * in this case, we show a fake \"add round\" button that when clicked, will\n * display an alert telling the user to first create an Evaluation\n *\n * Note: an alternative would be to modify the existing EvaluationRoundEditorList\n * to accept a nullable evaluationId (i.e. `string?` instead of `string`)\n * so that we can move this fake Alert functionality into it.\n *\n * Since the \"uncreated Evaluation\" edge case is currently only specific to the EvaluationEditorPage,\n * I believe adopting this alternative would add unnecessary complexity,\n * forcing EvaluationRoundEditorList to handle undefined `evaluationId`.\n */\nconst FakeEvaluationRoundEditorList: React.FunctionComponent = () => {\n  const [showEvaluationNotExistAlert, setShowEvaluationNotExistAlert] =\n    useState<boolean>(false)\n\n  return (\n    <div>\n      {showEvaluationNotExistAlert ? (\n        <Alert\n          dismissible={false}\n          show={true}\n          variant={'info'}\n          transition={false}\n        >\n          Evaluation Rounds can be edited once the Evaluation has been created.\n        </Alert>\n      ) : (\n        <Button\n          className=\"add-round-button\"\n          variant=\"primary\"\n          onClick={() => {\n            setShowEvaluationNotExistAlert(true)\n          }}\n        >\n          Add Round\n        </Button>\n      )}\n    </div>\n  )\n}\n\nexport const HelpersToTest = {\n  FakeEvaluationRoundEditorList,\n}\n"],"names":["useEffect","evaluationId","entityId","onDeleteSuccess","onSaveSuccess","accessToken","useState","setShowSaveSuccess","setName","setDescription","setSubmissionInstructionsMessage","setSubmissionReceiptMessage","setError","getEvaluation","setEvaluation","evaluation","name","description","submissionInstructionsMessage","submissionReceiptMessage","promise","deleteEvaluation","_jsx","_jsxs","onSave","ownerId","onClick","onDelete","_Fragment","deleteWarningShow","setDeleteWarningShow","React.createElement","React","limitInput","allSelectedTypes","type","onChange","value","maxSubmissionString","displayLimitType","displayName","limitInputs","handleChange","handleDeleteLimit","onAddNewLimit","addNewLimit","limit","selectedTypes","IconTimes","IconPlusSquareFilled","randomFromSeed","setSeed","require$$0","alphabet","require$$1","require$$2","generate","isValid","moment","className","icon","status","limits","totalSubmissionLimitInt","advancedLimits","maxSubmissionInt","id","etag","evaluationRoundInput","handleListRemove","handleAdvancedLimitsChange","addAdvancedLimit","generatedRemoveFunc","setAdvancedMode","evaluationRound","deleteEvaluationRound","onDeleteButtonClick","onSaveButtonClick","startDate","setStartDate","disallowDatesBeforeNow","endDate","setEndDate","totalSubmissionLimit","handleAdvancedLimitsRemove","getEvaluationRoundsList","nextPageToken","allEvaluationRoundInputList","errorHandleCallback","getEvaluationRounds","setListCallback","evaluationRoundInputList","appendToEvaluationRoundInputList","handleEvaluationRoundInputListChange","handleEvaluationRoundInputListRemove","setEvaluationRoundInputList","fetchEvaluationList","savedEvaluationId","setSavedEvaluationId","setShowEvaluationNotExistAlert"],"mappings":"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"}