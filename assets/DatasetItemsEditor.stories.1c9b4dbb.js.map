{"version":3,"file":"DatasetItemsEditor.stories.1c9b4dbb.js","sources":["../../src/lib/utils/hooks/useSet.ts","../../src/lib/containers/table/datasets/DatasetItemsEditor.tsx"],"sourcesContent":["import { useState } from 'react'\n\nexport interface UseSetReturn<T> {\n  set: Omit<Set<T>, 'add' | 'delete' | 'clear'>\n  add: (...items: T[]) => void\n  remove: (item: T) => void\n  clear: () => void\n}\n\n/**\n * Hook for storing an ES6 set in React state. Methods that mutate the set have been hidden via TypeScript,\n * so if you adhere to the type definitions, the set is essentially immutable.\n * Modifications to the set should only be done via the functions returned by the hook, which will create a new object to trigger rerendering.\n * @param initialState\n * @returns\n */\nexport function useSet<T>(initialState?: T[] | Set<T>): UseSetReturn<T> {\n  const [set, setSet] = useState(new Set(initialState))\n\n  function add(...items: T[]) {\n    const newSet = new Set(set)\n    for (const item of items) {\n      newSet.add(item)\n    }\n    setSet(newSet)\n  }\n\n  function remove(item: T) {\n    const newSet = new Set(set)\n    newSet.delete(item)\n    setSet(newSet)\n  }\n\n  function clear() {\n    setSet(new Set())\n  }\n\n  return {\n    set,\n    add,\n    remove,\n    clear,\n  }\n}\n","import { Skeleton } from '@material-ui/lab'\nimport BaseTable, {\n  AutoResizer,\n  ColumnShape,\n} from '@sage-bionetworks/react-base-table'\nimport React, { useEffect, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport ReactTooltip from 'react-tooltip'\nimport { SkeletonTable } from '../../../assets/skeletons/SkeletonTable'\nimport { rebuildTooltip } from '../../../utils/functions/TooltipUtils'\nimport {\n  useGetEntity,\n  useGetEntityPath,\n  useUpdateEntity,\n} from '../../../utils/hooks/SynapseAPI/entity/useEntity'\nimport { useSet } from '../../../utils/hooks/useSet'\nimport {\n  Dataset,\n  DatasetItem,\n  EntityType,\n  Reference,\n} from '../../../utils/synapseTypes'\nimport { RequiredProperties } from '../../../utils/types/RequiredProperties'\nimport Typography from '../../../utils/typography/Typography'\nimport { ENTITY_BADGE_ICONS_TOOLTIP_ID } from '../../EntityBadgeIcons'\nimport {\n  BadgeIconsRenderer,\n  CellRendererProps,\n  CreatedOnRenderer,\n  DatasetEditorCheckboxRenderer,\n  DatasetEditorVersionRenderer,\n  EntityErrorRenderer,\n  EntityNameRenderer,\n  ModifiedByRenderer,\n  ModifiedOnRenderer,\n  ProjectRenderer,\n} from '../../entity_finder/details/view/DetailsViewTableRenderers'\nimport { EntityFinderModal } from '../../entity_finder/EntityFinderModal'\nimport { FinderScope } from '../../entity_finder/tree/EntityTree'\nimport IconSvg from '../../IconSvg'\nimport WarningModal from '../../synapse_form_wrapper/WarningModal'\nimport { displayToast } from '../../ToastMessage'\nimport { Checkbox } from '../../widgets/Checkbox'\n\nexport const ADD_FILES = 'Add Files'\nexport const REMOVE_FILES = 'Remove Files'\nexport const NO_FILES_IN_THIS_DATASET = 'No files in this Dataset'\nexport const SAVE_THE_DATASET_TO_CONTINUE = 'Save the Dataset to continue.'\nexport const CREATE_VERSION_TO_FREEZE =\n  'Create a Version of this Dataset to freeze it in its current state'\nexport const DATASET_SAVED = 'Dataset Saved'\n\nexport type DatasetItemsEditorProps = {\n  /* The synId of the Dataset to modify */\n  entityId: string\n  onSave?: () => void\n  onClose?: () => void\n}\n\nexport type DatasetItemsEditorTableData = DatasetItem & {\n  isSelected: boolean\n  setSelected: (value: boolean) => void\n}\n\nconst ROW_HEIGHT = 42\nconst TABLE_HEIGHT = 350\n\nexport function DatasetItemsEditor(props: DatasetItemsEditorProps) {\n  const { entityId, onSave, onClose } = props\n\n  const [showEntityFinder, setShowEntityFinder] = useState<boolean>(false)\n  const [showWarningModal, setShowWarningModal] = useState<boolean>(false)\n  const [hasChangedSinceLastSave, setHasChangedSinceLastSave] = useState(false)\n\n  // Disable updating the entity after the initial fetch because we don't want to replace edits that the user makes.\n  const [datasetToUpdate, _setDatasetToUpdate] =\n    useState<RequiredProperties<Dataset, 'items'>>()\n  const setDatasetToUpdate = (\n    dataset: React.SetStateAction<\n      RequiredProperties<Dataset, 'items'> | undefined\n    >,\n  ) => {\n    setHasChangedSinceLastSave(true)\n    _setDatasetToUpdate(dataset)\n  }\n\n  const { data: fetchedDataset, refetch } = useGetEntity<\n    RequiredProperties<Dataset, 'items'>\n  >(entityId, undefined, {\n    enabled: !datasetToUpdate,\n  })\n\n  useEffect(() => {\n    // Don't update when we already have datasetToUpdate\n    if (!datasetToUpdate && fetchedDataset) {\n      // SWC-5876: Dataset Items may be undefined. This has the same inherent meaning as the empty list, so we'll just change it to save us some null checks.\n      if (fetchedDataset.items == null) {\n        fetchedDataset.items = []\n      }\n      setDatasetToUpdate(fetchedDataset)\n      setHasChangedSinceLastSave(false)\n    }\n  }, [fetchedDataset, datasetToUpdate])\n\n  const {\n    set: selectedIds,\n    add: addSelectedId,\n    remove: removeSelectedId,\n    clear: clearSelectedIds,\n  } = useSet<string>()\n  const allItemsAreSelected = !!(\n    datasetToUpdate && datasetToUpdate.items.length === selectedIds.size\n  )\n\n  // We get the project ID to show the \"Current Project\" context in the Entity Finder.\n  const { data: path } = useGetEntityPath(entityId)\n  const projectId = path?.path[1]?.id\n\n  const mutation = useUpdateEntity<Dataset>({\n    onSuccess: () => {\n      if (onSave) {\n        onSave()\n      } else {\n        // If onSave isn't specified, push a generic toast message.\n        displayToast(CREATE_VERSION_TO_FREEZE, 'success', {\n          title: DATASET_SAVED,\n        })\n      }\n    },\n    onError: error => {\n      if (error.status === 412) {\n        displayToast(\n          'Re-retrieve the dataset to get the latest changes. Your current changes will be lost.',\n          'warning',\n          {\n            title: 'Dataset Updated since Last Fetched',\n            primaryButtonConfig: {\n              text: 'Retrieve Dataset',\n              onClick: () => {\n                refetch()\n              },\n            },\n          },\n        )\n      } else {\n        displayToast(error.reason, 'danger', {\n          title: 'An Error Occurred',\n        })\n      }\n    },\n  })\n\n  const tableData = datasetToUpdate?.items.map((item: DatasetItem) => {\n    return {\n      ...item,\n      isSelected: selectedIds.has(item.entityId),\n      setSelected: (value: boolean) => {\n        return value\n          ? addSelectedId(item.entityId)\n          : removeSelectedId(item.entityId)\n      },\n    }\n  })\n\n  function addItemsToDataset(itemsToAdd: Reference[]) {\n    setDatasetToUpdate(datasetToUpdate => {\n      if (datasetToUpdate) {\n        // Items that were already in the dataset and are not being updated\n        const unchangedItems = datasetToUpdate.items.filter(\n          item =>\n            !itemsToAdd.find(newItem => newItem.targetId === item.entityId),\n        )\n\n        // Items that were already in the dataset, but were selected so the version may have been updated\n        const updatedItems = itemsToAdd.filter(newItem =>\n          datasetToUpdate.items.find(\n            existingItem => existingItem.entityId === newItem.targetId,\n          ),\n        )\n\n        // Items that were not previously in the dataset\n        const newItems = itemsToAdd.filter(\n          newItem =>\n            !datasetToUpdate.items.find(\n              existingItem => existingItem.entityId === newItem.targetId,\n            ),\n        )\n\n        // \"X item(s) added\"\n        let toastMessageTitle = `${newItems.length} Item${\n          newItems.length === 1 ? '' : 's'\n        } added`\n\n        // \"and Y item(s) updated\", only shown if there are updated items\n        if (updatedItems.length > 0) {\n          toastMessageTitle += ` and ${updatedItems.length} Item${\n            updatedItems.length === 1 ? '' : 's'\n          } updated`\n        } else {\n          // if no items were updated, title = \"X items(s) added\" + \" to Dataset\"\n          toastMessageTitle += ` to Dataset`\n        }\n\n        displayToast(SAVE_THE_DATASET_TO_CONTINUE, 'info', {\n          title: toastMessageTitle,\n        })\n\n        const items = [\n          ...unchangedItems,\n          ...updatedItems.map(item => ({\n            entityId: item.targetId,\n            versionNumber: item.targetVersionNumber!,\n          })),\n          ...newItems.map(item => ({\n            entityId: item.targetId,\n            versionNumber: item.targetVersionNumber!,\n          })),\n        ]\n        return {\n          ...datasetToUpdate,\n          items: items,\n        }\n      } else {\n        console.warn(\n          'Cannot add items to the Dataset because it is undefined. The Dataset may not have been fetched yet.',\n        )\n        return datasetToUpdate\n      }\n    })\n    clearSelectedIds()\n  }\n\n  function removeSelectedItemsFromDataset() {\n    setDatasetToUpdate(dataset => ({\n      ...dataset!,\n      items: dataset!.items.filter(\n        datasetItem => !selectedIds.has(datasetItem.entityId),\n      ),\n    }))\n\n    displayToast(SAVE_THE_DATASET_TO_CONTINUE, 'info', {\n      title: `${selectedIds.size} Item${\n        selectedIds.size === 1 ? '' : 's'\n      } removed from the Dataset`,\n    })\n\n    clearSelectedIds()\n  }\n\n  function changeVersionOnItem(entityId: string, newVersion: number) {\n    setDatasetToUpdate(dataset => ({\n      ...dataset!,\n      items: dataset!.items.map(datasetItem =>\n        datasetItem.entityId === entityId\n          ? { entityId: entityId, versionNumber: newVersion }\n          : datasetItem,\n      ),\n    }))\n  }\n\n  const DatasetItemVersionRenderer = (\n    props: CellRendererProps<DatasetItemsEditorTableData>,\n  ) => {\n    return (\n      <DatasetEditorVersionRenderer\n        {...props}\n        toggleSelection={datasetItem => {\n          changeVersionOnItem(datasetItem.entityId, datasetItem.versionNumber)\n        }}\n      />\n    )\n  }\n\n  type SelectAllCheckboxRendererProps = {\n    datasetToUpdate: RequiredProperties<Dataset, 'items'>\n    selectedIds: Omit<Set<string>, 'add' | 'delete' | 'clear'>\n    addSelectedId: (...items: string[]) => void\n    clearSelectedIds: () => void\n    allItemsAreSelected: boolean\n  }\n  const SelectAllCheckboxRenderer = (props: SelectAllCheckboxRendererProps) => {\n    const { datasetToUpdate, clearSelectedIds, addSelectedId } = props\n    const isChecked = allItemsAreSelected\n\n    return datasetToUpdate ? (\n      <div\n        data-testid=\"Select All\"\n        style={{ cursor: 'pointer' }}\n        onClick={() => {\n          if (isChecked) {\n            clearSelectedIds()\n          } else {\n            addSelectedId(...datasetToUpdate.items.map(item => item.entityId))\n          }\n        }}\n      >\n        <Checkbox\n          label=\"\"\n          className=\"SRC-pointer-events-none\"\n          checked={isChecked}\n          disabled={datasetToUpdate.items.length === 0}\n          onChange={() => {\n            // no-op\n          }}\n        />\n      </div>\n    ) : (\n      <></>\n    )\n  }\n\n  const renderedSelectAllCheckbox = datasetToUpdate ? (\n    <SelectAllCheckboxRenderer\n      datasetToUpdate={datasetToUpdate}\n      selectedIds={selectedIds}\n      clearSelectedIds={clearSelectedIds}\n      addSelectedId={addSelectedId}\n      allItemsAreSelected={allItemsAreSelected}\n    />\n  ) : (\n    <></>\n  )\n\n  const defaultColumns: ColumnShape<DatasetItemsEditorTableData>[] = [\n    {\n      key: 'errorState',\n      width: 30,\n      cellRenderer: EntityErrorRenderer,\n    },\n    {\n      key: 'isSelected',\n      width: 40,\n      dataKey: 'isSelected',\n      headerRenderer: renderedSelectAllCheckbox,\n      cellRenderer: DatasetEditorCheckboxRenderer,\n    },\n    {\n      key: 'name',\n      width: 350,\n      dataKey: 'entityId',\n      title: 'Name',\n      resizable: true,\n      cellRenderer: EntityNameRenderer,\n    },\n    {\n      key: 'status',\n      width: 80,\n      dataKey: 'entityId',\n      resizable: true,\n      cellRenderer: BadgeIconsRenderer,\n    },\n    {\n      key: 'id',\n      width: 140,\n      title: 'ID',\n      dataKey: 'entityId',\n      resizable: true,\n    },\n    {\n      key: 'version',\n      width: 150,\n      title: 'Version',\n      dataKey: 'entityId',\n      cellRenderer: DatasetItemVersionRenderer,\n    },\n    {\n      key: 'createdOn',\n      width: 200,\n      title: 'Created On',\n      dataKey: 'entityId',\n      resizable: true,\n\n      cellRenderer: CreatedOnRenderer,\n    },\n    {\n      key: 'modifiedOn',\n      width: 200,\n      title: 'Modified On',\n      dataKey: 'entityId',\n      resizable: true,\n\n      cellRenderer: ModifiedOnRenderer,\n    },\n    {\n      key: 'modifiedBy',\n      width: 250,\n      title: 'Modified By',\n      dataKey: 'entityId',\n      resizable: true,\n\n      cellRenderer: ModifiedByRenderer,\n    },\n    {\n      key: 'projectId',\n      width: 300,\n      title: 'Project',\n      dataKey: 'entityId',\n      resizable: true,\n\n      cellRenderer: ProjectRenderer,\n    },\n  ]\n\n  const totalColumnWidth = defaultColumns.reduce((totalWidth, column) => {\n    return totalWidth + column.width\n  }, 0)\n\n  function NoItemsPlaceholder() {\n    return (\n      <div className=\"NoItemsPlaceholder\">\n        <Typography variant={'headline3'}>\n          {NO_FILES_IN_THIS_DATASET}\n        </Typography>\n        <Button\n          className=\"AddItemsButton\"\n          variant=\"sds-primary\"\n          onClick={() => setShowEntityFinder(true)}\n        >\n          <IconSvg options={{ icon: 'addCircleTwoTone' }} />\n          <span>{ADD_FILES}</span>\n        </Button>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"DatasetEditor bootstrap-4-backport\">\n      <EntityFinderModal\n        configuration={{\n          projectId: projectId,\n          selectMultiple: true,\n          initialScope: FinderScope.ALL_PROJECTS,\n          initialContainer: null,\n          selectableTypes: [EntityType.FILE],\n          mustSelectVersionNumber: true,\n        }}\n        titlePopoverProps={{\n          markdownText:\n            'Use the left pane to browse Projects and Folders to find Files to add to this Dataset. Files in a Dataset can be added from multiple folders. You can also use Search to find and select Files.',\n          helpUrl: 'https://help.synapse.org/docs/Datasets.2611281979.html',\n        }}\n        promptCopy=\"Find Files located across one or more Folders to add to the Dataset.\"\n        show={showEntityFinder}\n        onClose={() => {\n          setShowEntityFinder(false)\n        }}\n        title={ADD_FILES + ' to Dataset'}\n        confirmButtonCopy={ADD_FILES}\n        onConfirm={items => {\n          addItemsToDataset(items)\n          setShowEntityFinder(false)\n        }}\n        onCancel={() => setShowEntityFinder(false)}\n      />\n      <WarningModal\n        title=\"Unsaved Changes\"\n        modalBody=\"Any unsaved changes will be lost. Are you sure you want to close the editor?\"\n        confirmButtonText=\"Close Editor\"\n        onConfirm={() => {\n          if (onClose) {\n            setShowWarningModal(false)\n            onClose()\n          }\n        }}\n        show={showWarningModal}\n        onConfirmCallbackArgs={[]}\n        onCancel={() => setShowWarningModal(false)}\n      />\n\n      <div className=\"DatasetEditorTopBottomPanel\">\n        <div className=\"ItemCount\">\n          {datasetToUpdate ? (\n            <Typography variant=\"headline3\">\n              {datasetToUpdate.items.length === 0\n                ? 'No'\n                : datasetToUpdate.items.length.toLocaleString()}{' '}\n              File\n              {datasetToUpdate.items.length !== 1 && 's'}\n            </Typography>\n          ) : (\n            <Skeleton variant=\"rect\" width={200} />\n          )}\n        </div>\n\n        <Button\n          variant=\"sds-primary\"\n          disabled={datasetToUpdate == null}\n          onClick={() => setShowEntityFinder(true)}\n        >\n          {ADD_FILES}\n        </Button>\n        <Button\n          disabled={selectedIds.size === 0}\n          variant=\"outline\"\n          onClick={removeSelectedItemsFromDataset}\n        >\n          {REMOVE_FILES}\n        </Button>\n      </div>\n      <div className=\"DatasetEditorTableContainer\">\n        {datasetToUpdate ? (\n          datasetToUpdate.items.length === 0 ? (\n            <NoItemsPlaceholder></NoItemsPlaceholder>\n          ) : (\n            <AutoResizer height={TABLE_HEIGHT} onResize={rebuildTooltip}>\n              {({ height, width }: { height: number; width: number }) => (\n                <BaseTable\n                  classPrefix=\"DatasetEditorTable\"\n                  data={tableData}\n                  height={height}\n                  width={width > totalColumnWidth ? width : totalColumnWidth}\n                  rowHeight={ROW_HEIGHT}\n                  overscanRowCount={5}\n                  columns={defaultColumns}\n                  rowClassName={'DatasetEditorRow'}\n                  rowProps={({ rowData }) => {\n                    return {\n                      'aria-selected': rowData.isSelected,\n                    }\n                  }}\n                  headerCellProps={{\n                    role: 'columnheader',\n                  }}\n                  onRowsRendered={rebuildTooltip}\n                  onScroll={rebuildTooltip}\n                ></BaseTable>\n              )}\n            </AutoResizer>\n          )\n        ) : (\n          <SkeletonTable\n            className=\"DatasetItemsEditorSkeleton\"\n            numRows={8}\n            numCols={6}\n            rowHeight={`${ROW_HEIGHT}px`}\n          />\n        )}\n        <ReactTooltip\n          id={ENTITY_BADGE_ICONS_TOOLTIP_ID}\n          className=\"EntityBadgeTooltip\"\n          delayShow={100}\n          place={'right'}\n          effect={'solid'}\n        />\n      </div>\n      <div className=\"DatasetEditorTopBottomPanel\">\n        <Button\n          variant={'outline'}\n          onClick={() => {\n            if (hasChangedSinceLastSave) {\n              setShowWarningModal(true)\n            } else if (onClose) {\n              onClose()\n            }\n          }}\n        >\n          Cancel\n        </Button>\n\n        <Button\n          disabled={!datasetToUpdate}\n          variant={'sds-primary'}\n          onClick={() => mutation.mutate(datasetToUpdate!)}\n        >\n          Save\n        </Button>\n      </div>\n    </div>\n  )\n}\n"],"names":["useState","entityId","onSave","onClose","setHasChangedSinceLastSave","_setDatasetToUpdate","fetchedDataset","refetch","datasetToUpdate","useEffect","setDatasetToUpdate","selectedIds","addSelectedId","removeSelectedId","clearSelectedIds","path","displayToast","DATASET_SAVED","item","toastMessageTitle","targetId","targetVersionNumber","items","console","dataset","newVersion","EntityErrorRenderer","_jsx","isChecked","_Fragment","renderedSelectAllCheckbox","DatasetEditorCheckboxRenderer","EntityNameRenderer","BadgeIconsRenderer","props","changeVersionOnItem","DatasetItemVersionRenderer","CreatedOnRenderer","ModifiedOnRenderer","ModifiedByRenderer","ProjectRenderer","width","_jsxs","NO_FILES_IN_THIS_DATASET","ADD_FILES","projectId","ALL_PROJECTS","showEntityFinder","setShowEntityFinder","addItemsToDataset","setShowWarningModal","showWarningModal","removeSelectedItemsFromDataset","REMOVE_FILES","TABLE_HEIGHT","rebuildTooltip","height","tableData","totalColumnWidth","ROW_HEIGHT","defaultColumns","isSelected","ENTITY_BADGE_ICONS_TOOLTIP_ID"],"mappings":"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"}