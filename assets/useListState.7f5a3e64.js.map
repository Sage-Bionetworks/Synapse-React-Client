{"version":3,"file":"useListState.7f5a3e64.js","sources":["../../src/lib/utils/hooks/useListState.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useState } from 'react'\n\nexport interface ListStateReturn<T> {\n  // initial state of the list\n  list: T[]\n  // generates a function to update a specific index of the list\n  handleListChange: (index: number) => (changedValue: T) => void\n  // generates a function to remove a index from the list\n  handleListRemove: (index: number) => () => void\n  // generates a function to append to the end of the list\n  appendToList: (...newItem: T[]) => void\n  //changes the entire list state\n  setList: Dispatch<SetStateAction<T[]>>\n}\n/**\n * This is used when a component's state uses a List<T> and has child components\n * that are responsible for creating, updating, deleting the objects within the List.\n *\n *\n * This should be used in conjunction with list.map() to generate child elements.\n *\n * The handle*() functions will generate a callback function for\n * the child to use to perform an item change, or removal on the list.\n *\n * Generally, appending items to the list will be handled by the parent\n * so appendToList() is just a regular function instead of a function generator\n * For Example:\n *\n * ```\n * export const ParentComponent: React.FunctionComponent<ParentComponentProps> = ({\n *  prop1,\n *  prop2,\n * }) => {\n *    const {list: myList,\n *           handleListChange: handleMyListChange,\n *           handleListRemove: handleMyListPush,\n *           appendToList: handleMyListRemove} = useListState<string>(['asdf','qwerty'])\n *\n *    return (\n *      <div>\n *        myList.map((item, index) => {\n            return <ChildComponent\n              value={item}\n              onChange={handleMyListChange(index)}\n              onRemove={handleMyListRemove(index)}\n            />\n          })\n          <button onClick={(event) => {appendToList(\"some new value\")} }> >Add Child</button>\n *      </div>\n *    )\n *\n * }\n * ```\n *\n *\n * @param initialState The initial value of the array\n * @returns an ListStateReturn object containing the useState value and additonal change/remove/push hnndlers. Use object destructuring\n */\nexport const useListState = <T>(initialState: T[]): ListStateReturn<T> => {\n  const [list, setList] = useState<T[]>(initialState)\n\n  const handleListChange =\n    (index: number) =>\n    (changedValue: T): void => {\n      const modifiedList = [...list]\n      modifiedList[index] = changedValue\n      setList(modifiedList)\n    }\n\n  const handleListRemove = (index: number) => (): void => {\n    const modifiedList = list.filter((value, arr_index) => index !== arr_index)\n    setList(modifiedList)\n  }\n\n  const appendToList = (...newItem: T[]): void => {\n    const modifiedList = [...list]\n    modifiedList.push(...newItem)\n    setList(modifiedList)\n  }\n  return { list, handleListChange, handleListRemove, appendToList, setList }\n}\n"],"names":[],"mappings":"AAAA,KAAA,GAAA,OAAA,MAAA,SA0Da,EAAe,AAAI,GAA0C,CACxE,KAAM,CAAC,EAAM,GAAW,EAAc,CAAY,EAoBlD,MAAO,CAAE,OAAM,iBAjBb,AAAC,GACD,AAAC,GAA0B,CACnB,KAAA,GAAe,CAAC,GAAG,CAAI,EAC7B,EAAa,GAAS,EACtB,EAAQ,CAAY,CAAA,EAaS,iBAVR,AAAC,GAAkB,IAAY,CACtD,KAAM,GAAe,EAAK,OAAO,CAAC,EAAO,IAAc,IAAU,CAAS,EAC1E,EAAQ,CAAY,CAAA,EAQ6B,aAL9B,IAAI,IAAuB,CACxC,KAAA,GAAe,CAAC,GAAG,CAAI,EAChB,EAAA,KAAK,GAAG,CAAO,EAC5B,EAAQ,CAAY,CAAA,EAE2C,SAAQ,CAC3E"}