{"version":3,"file":"UserCardList.04075ae9.js","sources":["../../src/lib/containers/UserCardList.tsx"],"sourcesContent":["import * as React from 'react'\nimport { getUserProfileWithProfilePicAttached } from '../utils/functions/getUserData'\nimport { UserProfileList } from '../utils/SynapseClient'\nimport { MEDIUM_USER_CARD } from '../utils/SynapseConstants'\nimport {\n  QueryResultBundle,\n  UserProfile,\n  ColumnType,\n} from '../utils/synapseTypes/'\nimport UserCard, { UserCardSize } from './UserCard'\nimport { without } from 'lodash-es'\n\nexport type UserCardListProps = {\n  list: string[]\n  size?: UserCardSize\n  // Data should not be needed, however, it gives the option to fill in a user profile with other column\n  // fields. This is required specifically by AMP-AD Explore/People page\n  data?: QueryResultBundle\n}\n\ntype MapOwnerIdToUserProfile = {\n  [index: number]: UserProfile\n}\nexport type UserCardListState = {\n  userProfileMap: MapOwnerIdToUserProfile\n}\nexport default class UserCardList extends React.Component<\n  UserCardListProps,\n  UserCardListState\n> {\n  constructor(props: UserCardListProps) {\n    super(props)\n    this.state = {\n      userProfileMap: {},\n    }\n    this.update = this.update.bind(this)\n  }\n\n  componentDidMount() {\n    const { list } = this.props\n    this.update(list)\n  }\n\n  componentDidUpdate(prevProps: UserCardListProps) {\n    const priorListOfIds = prevProps.list\n    const newValues = without(\n      this.props.list.filter(el => el),\n      ...priorListOfIds,\n    )\n    // check that the props have changed by seeing that at least one element is different\n    if (newValues.length > 0) {\n      this.update(newValues)\n    }\n  }\n\n  update(list: string[]) {\n    getUserProfileWithProfilePicAttached(list.filter(el => el))\n      .then((data: UserProfileList) => {\n        const newEntries = {}\n        data.list.forEach(el => {\n          const { ownerId } = el\n          newEntries[ownerId] = el\n        })\n        this.setState({\n          userProfileMap: { ...this.state.userProfileMap, ...newEntries },\n        })\n      })\n      .catch((err: string) => {\n        console.log('Error on batch call =', err)\n      })\n  }\n\n  /**\n   * Given data this will find rows where there is no userId columnType and create faux user profiles\n   * using firstName, lastName, and instituion (company in UserProfile object).\n   * @param {QueryResultBundle} data\n   * @returns list of UserProfiles with firstName, lastName, company, userName (first letter of firstName) filled out.\n   * @memberof UserCardList\n   */\n  manuallyExtractData(data: QueryResultBundle) {\n    const firstNameIndex = data.queryResult.queryResults.headers.findIndex(\n      el => el.name === 'firstName',\n    )\n    const lastNameIndex = data.queryResult.queryResults.headers.findIndex(\n      el => el.name === 'lastName',\n    )\n    const institutionIndex = data.queryResult.queryResults.headers.findIndex(\n      el => el.name === 'institution',\n    )\n    const ownerId = data.queryResult.queryResults.headers.findIndex(\n      el => el.columnType === ColumnType.USERID,\n    )\n    const nullOwnerIdsRows = data.queryResult.queryResults.rows.filter(\n      el => !el.values[ownerId],\n    )\n    return nullOwnerIdsRows.map<UserProfile>(el => {\n      const values = el.values\n      return {\n        firstName: values[firstNameIndex],\n        lastName: values[lastNameIndex],\n        company: values[institutionIndex],\n        ownerId: '',\n        userName: values[firstNameIndex][0],\n      }\n    })\n  }\n\n  render() {\n    const { size = MEDIUM_USER_CARD, data, list } = this.props\n    const { userProfileMap = {} } = this.state\n    const fauxUserProfilesList = data && this.manuallyExtractData(data)\n    let fauxUserProfileIndex = 0\n    return (\n      <div className=\"SRC-card-grid-row\">\n        {\n          // we loop through the list from the props because thats the 'active set of data' whereas the data stored in state could be stale\n          list.map(ownerId => {\n            const userProfile = userProfileMap[ownerId]\n            if (userProfile) {\n              return (\n                <div\n                  key={JSON.stringify(userProfile)}\n                  className=\"SRC-grid-item SRC-narrow-grid-item\"\n                >\n                  <UserCard\n                    size={size}\n                    preSignedURL={userProfile.clientPreSignedURL}\n                    userProfile={userProfile}\n                  />\n                </div>\n              )\n            }\n            const fauxUserProfile =\n              fauxUserProfilesList && fauxUserProfilesList[fauxUserProfileIndex]\n            if (!fauxUserProfile) {\n              // This could happen in one of two cases:\n              // - The props just updated with a new userlist where the data is being gathered for this particular user\n              //   OR there is no mapping for this user\n              return false\n            }\n            fauxUserProfileIndex += 1\n            return (\n              <div\n                key={JSON.stringify(fauxUserProfile)}\n                className=\"SRC-grid-item SRC-narrow-grid-item\"\n              >\n                <UserCard\n                  disableLink={true}\n                  hideEmail={true}\n                  size={size}\n                  userProfile={fauxUserProfile}\n                />\n              </div>\n            )\n          })\n        }\n      </div>\n    )\n  }\n}\n"],"names":["list","getUserProfileWithProfilePicAttached","data","ownerId","newEntries","el","userProfileMap","console","firstNameIndex","lastNameIndex","institutionIndex","MEDIUM_USER_CARD","_jsx","clientPreSignedURL","fauxUserProfileIndex","fauxUserProfile"],"mappings":"4PAAA,KAAA,GAAA,OAAA,MA0BA,MAAA,SAAA,GAAA,SAAA,CAGE,YAAA,EAAA,CAEE,MAAA,CAAA,EACA,KAAA,MAAA,CAAa,eAAA,CAAA,CACK,EAElB,KAAA,OAAA,KAAA,OAAA,KAAA,IAAA,CAAc,CACf,mBAAA,CAGC,KAAA,CAAM,QAAEA,KAAAA,MACR,KAAA,OAAA,CAAA,CAAA,CACD,mBAAA,EAAA,CAGC,KAAA,GAAA,EAAA,KACA,EAAA,EAAA,KAAA,MAAA,KAAA,OAAA,AAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAKA,AAAA,EAAA,OAAA,GACE,KAAA,OAAA,CAAA,CACD,CACF,OAAA,EAAA,CAGCC,EAAAA,EAAAA,OAAAA,AAAAA,GAAAA,CAAAA,CAAAA,EAAAA,KAAAA,AAAAA,GAAAA,CAEI,KAAA,GAAA,CAAA,EACAC,EAAAA,KAAAA,QAAAA,AAAAA,GAAAA,CACE,KAAA,CAAM,WAAEC,EACRC,EAAAA,GAAAA,CAAsBC,CAAAA,EAExB,KAAA,SAAA,CAAc,eAAA,CACI,GAAA,KAAA,MAAA,eAAgBC,GAAAA,CAAmBF,CAAnC,CAAA,CADlB,CAAA,EAAA,MAAA,AAAA,GAAA,CAKAG,QAAAA,IAAAA,wBAAAA,CAAAA,CAAA,CAAA,CAZJ,CAcD,oBAAA,EAAA,CAUC,KAAA,GAAA,EAAA,YAAA,aAAA,QAAA,UAAA,AAAA,GAAA,EAAA,OAAA,WAAA,EAGA,EAAA,EAAA,YAAA,aAAA,QAAA,UAAA,AAAA,GAAA,EAAA,OAAA,UAAA,EAGA,EAAA,EAAA,YAAA,aAAA,QAAA,UAAA,AAAA,GAAA,EAAA,OAAA,aAAA,EAGA,EAAA,EAAA,YAAA,aAAA,QAAA,UAAA,AAAA,GAAA,EAAA,aAAA,EAAA,MAAA,EAMA,MAAA,AAHA,GAAA,YAAA,aAAA,KAAA,OAAA,AAAA,GAAA,CAAA,EAAA,OAAA,EAAA,EAGA,IAAA,AAAA,GAAA,CACE,KAAA,GAAA,EAAA,OACA,MAAA,CAAO,UAAA,EAAA,GACaC,SAAAA,EAAAA,GACDC,QAAAA,EAAAA,GACDC,QAAAA,GACP,SAAA,EAAA,GAAA,EACwB,CAL5B,CAAA,CAFF,CAUR,QAAA,CAGC,KAAA,CAAM,OAAA,EAASC,OAAkBT,QAAMF,KAAAA,MACvC,CAAM,iBAAA,CAAA,GAAmB,KAAA,MACzB,EAAA,GAAA,KAAA,oBAAA,CAAA,EACA,GAAA,GAAA,EACA,MAAAY,GAAA,MAAA,CACE,UAAA,oBAAe,SAAA,EAAA,IAAA,AAAA,GAAA,CAIT,KAAA,GAAA,EAAA,GACA,GAAA,EACE,MAAAA,GAAA,MAAA,CACE,UAAA,qCAEY,SAAAA,EAAA,EAAA,CAEV,OACE,aAAA,EAAA,mBAC0BC,aAC1B,CAAA,CAHF,EAAA,KAAA,UAAA,CAAA,CAAA,EAQN,KAAA,GAAA,GAAA,EAAA,GAEA,MAAA,GAMAC,IAAAA,EACAF,EAAA,MAAA,CACE,UAAA,qCAEY,SAAAA,EAAA,EAAA,CAEV,YAAA,GACe,UAAA,GACF,OACX,YAAA,CACaG,CAAAA,CAJf,EAAA,KAAA,UAAA,CAAA,CAAA,GARF,EAIA,CAAA,CA1BJ,CAAA,CAJN,CAnFF"}