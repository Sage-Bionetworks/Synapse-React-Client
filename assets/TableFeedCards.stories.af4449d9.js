import{h as w,am as E}from"./index.a967ac4c.js";import{r as l,a as C,j as e}from"./jsx-runtime.d95d6493.js";import{h as R}from"./moment.a565bb48.js";import{a as N}from"./CardContainerLogic.46c33d4a.js";import{l as v}from"./LoadingScreen.7e8ade87.js";import{B as M}from"./Button.a2dbd16c.js";import{i as D}from"./SynapseConstants.b6aa8bf5.js";import"./index.7a9149c6.js";import"./iframe.7f51ef58.js";import"./styled.3f404f86.js";import"./utils.39b72e5d.js";import"./Alert.ac443a97.js";import"./createWithBsPrefix.4fb80af1.js";import"./index.35ce73ec.js";import"./isArray.6553b885.js";import"./getEndpoint.bb7ded34.js";import"./SvgIcon.67322144.js";import"./sqlFunctions.7213c897.js";import"./RegularExpressions.3cd69849.js";import"./QueryFilter.221666e3.js";import"./useGetInfoFromIds.a7c30767.js";import"./use-deep-compare-effect.esm.61fac49d.js";import"./uniq.c4aef444.js";import"./_baseSlice.50189bc5.js";import"./toInteger.eafc4c9b.js";import"./isSymbol.641f0fe1.js";import"./_cacheHas.902be7b7.js";import"./without.6b0b9205.js";import"./uniqueId.82d1329f.js";import"./_Set.274d01e6.js";import"./_setToArray.a82100c8.js";import"./ColumnType.744125d2.js";import"./FacetNav.cae1a765.js";import"./queryUtils.48ac5c76.js";import"./useInfiniteQuery.6acea356.js";import"./queryKeys.e0d3085f.js";import"./cloneDeep.63080ad6.js";import"./_baseClone.2f5e4c45.js";import"./_getTag.68c416fc.js";import"./NoSearchResults.12bc7c93.js";import"./NoData.ee4cc3d1.js";import"./unCamelCase.07e38083.js";import"./useEntity.93f548ef.js";import"./useMutation.d7ef8afa.js";import"./pick.2ba7038c.js";import"./isEqual.dd9f6922.js";import"./ElementWithTooltip.a90e0a7b.js";import"./SynapseTableConstants.07ecdebd.js";import"./IconSvg.05cf2f3e.js";import"./Tooltip.bdb5981c.js";import"./createSvgIcon.54e8e52e.js";import"./InfoOutlined.2d1c81ce.js";import"./Dropdown.8aec79ad.js";import"./usePrevious.be61f2cf.js";import"./contains.bddd4731.js";import"./usePopperMarginModifiers.d9524712.js";import"./hasClass.56fd144a.js";import"./isRequiredForA11y.20ed4857.js";import"./Checkbox.4ac4ac02.js";import"./RadioGroup.16460db1.js";import"./RangeSlider.389bf474.js";import"./factory.c6443813.js";import"./react-sizeme.491b19e0.js";import"./Skeleton.d72513ec.js";import"./emotion-react.browser.esm.1bce0706.js";import"./hoist-non-react-statics.cjs.a7086e34.js";import"./ColorGradient.16f0e0f2.js";import"./colorPalette.8145e2e2.js";import"./Modal.44dfdffd.js";import"./inheritsLoose.003389ab.js";import"./removeClass.27874bcb.js";import"./useWaitForDOMRef.2249f319.js";import"./SelectionCriteriaPill.857b3a81.js";import"./Close.f3088fe6.js";import"./react-select.esm.6039698f.js";import"./Select-54ac8379.esm.467230d6.js";import"./CustomSelectWidget.7fdd1bf4.js";import"./index.browser.de06311f.js";import"./Typography.5462d0e3.js";import"./UserCard.f4ef9e5a.js";import"./IconCopy.57146dc0.js";import"./SkeletonTable.239236e1.js";import"./times.5a8d2fe1.js";import"./ToastMessage.1b9e5ec3.js";import"./FullWidthAlert.c5df0de8.js";import"./Overlay.2efb852e.js";import"./WarningModal.10b23a64.js";import"./react-intersection-observer.esm.bdb50a70.js";import"./DateFormatter.04e6c641.js";import"./EntityIcon.9488f4b0.js";import"./core.esm.f6a33a63.js";import"./isEmpty.73cf3d8e.js";import"./union.e570b19b.js";import"./isString.821ed06b.js";import"./useGetDownloadListStatistics.337bb6e8.js";import"./QueryCount.b15a2b71.js";import"./useGetAccessRequirement.d4717c56.js";import"./ManagedACTAccessRequirementStatus.a0ce8e8f.js";import"./FileUpload.a214d144.js";import"./UserSearchBox.9051ec64.js";import"./UserOrTeamBadge.25d96305.js";import"./EntityLink.f17f7e5c.js";import"./SynapseVideo.c640d11b.js";import"./IconList.6f141d04.js";import"./UserCardList.65e78400.js";const s=({tableEntityId:r})=>{const{accessToken:c}=w(),[i,y]=l.exports.useState(),[n,T]=l.exports.useState(3);let u=!0;if(l.exports.useEffect(()=>((()=>{if(u){if(i)return;const m={concreteType:"org.sagebionetworks.repo.model.table.QueryBundleRequest",query:{sql:`SELECT "categories", "date", "title", "mdDescription" FROM ${r} ORDER BY "date" desc`},entityId:r,partMask:D};E(m,c).then(o=>{var a;y((a=o.queryResult)==null?void 0:a.queryResults)})}})(),()=>{u=!1}),[r,c]),!i)return v;const p=i.headers,b=p.findIndex(t=>t.name==="categories"),S=p.findIndex(t=>t.name==="date"),F=p.findIndex(t=>t.name==="title"),g=p.findIndex(t=>t.name==="mdDescription");return C("div",{className:"Feed bootstrap-4-backport",children:[e("div",{className:"FeedItems",children:i.rows.map((t,m)=>{if(m>n-1)return;const o=t.values;o.some(d=>d===null)&&console.warn("Row has null value(s) when no nulls expected");const a=JSON.parse(o[b]),I=o[S],h=o[F],x=o[g];return e("div",{className:"FeedItem",children:C("div",{children:[a&&e("div",{className:"FeedItemCategories",children:a.map((d,_)=>e("div",{className:"FeedItemCategory",children:d},`row-${m},categoryIndex-${_}`))}),e("p",{className:"FeedItemDate",children:R(new Date(parseInt(I))).format("MMMM YYYY")}),e("p",{className:"FeedItemTitle",children:h}),e("div",{className:"FeedItemDescription",children:e(N,{markdown:x})})]})},`row-${m}`)})}),i.rows.length>n&&e("div",{className:"FeedViewAllNewsButtonContainer",children:e(M,{variant:"primary",size:"lg",className:"pill",onClick:()=>T(n+3),children:"VIEW MORE NEWS"})})]})},f=s;try{s.displayName="TableFeedCards",s.__docgenInfo={description:"",displayName:"TableFeedCards",props:{tableEntityId:{defaultValue:null,description:"",name:"tableEntityId",required:!0,type:{name:"string"}}}},typeof STORYBOOK_REACT_CLASSES<"u"&&(STORYBOOK_REACT_CLASSES["src/lib/containers/TableFeedCards.tsx#TableFeedCards"]={docgenInfo:s.__docgenInfo,name:"TableFeedCards",path:"src/lib/containers/TableFeedCards.tsx#TableFeedCards"})}catch{}const Dt={parameters:{storySource:{source:`import React from 'react'
import { ComponentStory, ComponentMeta } from '@storybook/react'
import TableFeedCards from './TableFeedCards'

export default {
  title: 'Synapse/TableFeedCards',
  component: TableFeedCards,
} as ComponentMeta<typeof TableFeedCards>

const Template: ComponentStory<typeof TableFeedCards> = args => (
  <TableFeedCards {...args} />
)

export const Demo = Template.bind({})
Demo.args = {
  tableEntityId: 'syn23520190',
}
`,locationsMap:{demo:{startLoc:{col:56,line:10},endLoc:{col:1,line:12},startBody:{col:56,line:10},endBody:{col:1,line:12}}}}},title:"Synapse/TableFeedCards",component:f},O=r=>e(f,{...r}),B=O.bind({});B.args={tableEntityId:"syn23520190"};const Ot=["Demo"];export{B as Demo,Ot as __namedExportsOrder,Dt as default};
