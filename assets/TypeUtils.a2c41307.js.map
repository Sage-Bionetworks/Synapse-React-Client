{"version":3,"file":"TypeUtils.a2c41307.js","sources":["../../src/lib/utils/functions/TypeUtils.ts"],"sourcesContent":["/**\n * TypeScript doesn't support nominal typing, but we can utilize the concreteType field in Synapse objects to identify the class of an object. This function\n * will return a function that can be used as a type guard using the concreteType field.\n *\n * Generic `TTypeChecked` is the type that you are trying to verify/assert.\n * Generic `ObjectType` is optional and can be used to require a specific interface or type before calling this method. Defaults to `unknown`.\n *\n * @param expectedConcreteType\n * @returns a function that checks if a given object is an instance of `TTypeChecked` using the expected concrete type value.\n */\nexport function isTypeViaConcreteTypeFactory<\n  TTypeChecked extends ObjectType, // The type that you are trying to verify/assert\n  ObjectType extends { concreteType: string } = { concreteType: string },\n>(...expectedConcreteTypes: TTypeChecked['concreteType'][]) {\n  return (object: ObjectType): object is TTypeChecked =>\n    !!(\n      object &&\n      typeof object === 'object' &&\n      'concreteType' in object &&\n      expectedConcreteTypes.includes(object['concreteType'])\n    )\n}\n"],"names":[],"mappings":"AAUO,cAGF,EAAuD,CAC1D,MAAO,AAAC,IACN,CAAC,CAEC,IAAA,MAAO,IAAW,UAClB,gBAAkB,IAClB,EAAsB,SAAS,EAAO,YAAe,EAE3D"}