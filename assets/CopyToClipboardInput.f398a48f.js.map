{"version":3,"file":"CopyToClipboardInput.f398a48f.js","sources":["../../src/lib/containers/CopyToClipboardInput.tsx"],"sourcesContent":["import * as React from 'react'\nimport IconCopy from '../../lib/assets/icons/IconCopy'\nimport { Button, FormControl } from 'react-bootstrap'\nimport { ToastMessage } from './ToastMessage'\n\nexport type CopyToClipboardInputProps = {\n  value: string\n  inputWidth: string\n}\n\n/**\n * Component that holds a large string in a readonly <input> to be copied to the user's clipboard when clicked.\n * This component should only be used when the value to copy is not very long AND the full length of the string\n * does not necessarily need to be seen by the user. This component was adapted from the email address copy to\n * clipboard functionality in UserCardMedium. For smaller/inline strings, look at UserCardMedium functionality\n * for displaying the value in a <p> tag instead of a readonly <input> tag.\n */\nexport const CopyToClipboardInput: React.FunctionComponent<\n  CopyToClipboardInputProps\n> = ({ value, inputWidth }: CopyToClipboardInputProps) => {\n  const [showModal, setShowModal] = React.useState(false)\n  const ref = React.createRef<HTMLDivElement>()\n\n  const copyToClipboard =\n    (ref: React.RefObject<HTMLElement>, value: string) =>\n    (event: React.SyntheticEvent) => {\n      event.preventDefault()\n\n      // use the Clipboard API\n      // https://caniuse.com/mdn-api_clipboard_writetext\n      navigator.clipboard.writeText(value).then(() => {\n        // show modal and hide after 4 seconds, the timing is per Material Design\n        setShowModal(true)\n        // hide after 4 seconds\n        setTimeout(() => {\n          setShowModal(false)\n        }, 4000)\n      })\n    }\n\n  return (\n    <>\n      <ToastMessage\n        text=\"Successfully copied to clipboard\"\n        show={showModal}\n        autohide={true}\n      ></ToastMessage>\n      <div\n        className=\"SRC-copyToClipboardInputContainer SRC-marginBottomTop\"\n        ref={ref}\n      >\n        <FormControl\n          className=\"SRC-copyToClipboardInput\"\n          type=\"text\"\n          style={{\n            width: inputWidth,\n          }}\n          value={value}\n          readOnly={true}\n          onClick={copyToClipboard(ref, value)}\n        ></FormControl>\n        <Button\n          className=\"SRC-copyToClipboardButton\"\n          onClick={copyToClipboard(ref, value)}\n        >\n          <IconCopy />\n        </Button>\n      </div>\n    </>\n  )\n}\n\nexport default CopyToClipboardInput\n"],"names":["value","inputWidth","event","navigator","setShowModal","setTimeout","_jsxs","_Fragment","_jsx","showModal"],"mappings":"sMAAA,KAAA,GAAA,OAAA,MAiBO,EAAA,CAAA,CAEF,QAAEA,gBAAOC,CACZ,KAAA,CAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EACA,EAAA,EAAA,YAEA,EAAA,CAAA,EAAA,IAAA,AAAA,GAAA,CAGIC,EAAAA,eAAAA,EAIAC,UAAAA,UAAAA,UAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAEEC,EAAAA,EAAAA,EAEAC,WAAAA,IAAAA,CACED,EAAAA,EAAAA,CAAY,EAAA,GAAA,CADJ,CAAA,CAJZ,EAUJ,MAAAE,GAAAC,EAAA,CACE,SAAA,CAAAC,EAAA,EAAA,CACE,KAAA,mCACO,KAAA,EACCC,SAAAA,EACI,CAAA,EAAAH,EAAA,MAAA,CAEZ,UAAA,wDACY,MACV,SAAA,CAAAE,EAAA,EAAA,CAEA,UAAA,2BACY,KAAA,OACL,MAAA,CACE,MAAA,CACEP,EADF,QAGP,SAAA,GACU,QAAA,EAAA,EAAA,CAAA,CACc,CAAA,EAAAO,EAAA,EAAA,CAE1B,UAAA,4BACY,QAAA,EAAA,EAAA,CAAA,EACc,SAAAA,EAAA,EAAA,EAAA,CAExB,CAAA,CAAA,CAlBJ,CAAA,CAAA,CANF,CAAA,CA6BH;;;;"}