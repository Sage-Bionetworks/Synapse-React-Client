{"version":3,"file":"AccessRequirementSearchBox.3651359e.js","sources":["../../src/lib/containers/dataaccess/AccessRequirementSearchBox.tsx"],"sourcesContent":["import { Skeleton } from '@material-ui/lab'\nimport React from 'react'\nimport { components } from 'react-select'\nimport AsyncSelect from 'react-select/async'\nimport { SelectComponents } from 'react-select/src/components'\nimport { SynapseClient } from '../../utils'\nimport useGetAccessRequirement from '../../utils/hooks/SynapseAPI/dataaccess/useGetAccessRequirement'\nimport { useSynapseContext } from '../../utils/SynapseContext'\n\nexport type AccessRequirementSearchBoxProps = {\n  /* id for the input tag */\n  inputId?: string\n  initialId?: string | number\n  onChange: (accessRequirementId?: string | undefined) => void\n  placeholder?: string\n}\n\nexport function getOptionLabel(id: string | number, name: string) {\n  if (id.toString() === name) {\n    return name\n  } else {\n    return `${name} (${id})`\n  }\n}\n\nconst customSelectComponents: Partial<\n  SelectComponents<\n    {\n      id: string | number\n      value: string | number\n      label: string\n    },\n    false\n  >\n> = {\n  Control: props => {\n    return (\n      <components.Control\n        {...props}\n        className={`form-control ${props.className ?? ''}`}\n      />\n    )\n  },\n}\n\nexport default function AccessRequirementSearchBox(\n  props: AccessRequirementSearchBoxProps,\n) {\n  const { inputId, initialId, onChange, placeholder } = props\n  const { accessToken } = useSynapseContext()\n  const { data: initialAccessRequirement, isLoading: isLoadingInitialAR } =\n    useGetAccessRequirement(initialId!, {\n      enabled: !!initialId,\n    })\n\n  async function loadOptions(inputValue: string) {\n    // Check to see if the entered text is an AR ID\n    const parsedId = parseInt(inputValue)\n    let data: Array<{ id: string | number; name: string }> | undefined =\n      undefined\n    if (parsedId) {\n      data = [\n        await SynapseClient.getAccessRequirementById(accessToken, parsedId),\n      ]\n    }\n\n    // If the input wasn't an integer, or didn't match an existing AR ID, then search ARs\n    if (!data) {\n      data = (\n        await SynapseClient.searchAccessRequirements(accessToken, {\n          nameContains: inputValue,\n        })\n      )?.results\n    }\n\n    // Map the AR(s) to options for the select input component\n    return (\n      data?.map(item => ({\n        id: item.id.toString(),\n        value: item.id.toString(),\n        label: getOptionLabel(item.id, item.name),\n      })) ?? []\n    )\n  }\n\n  if (initialId && isLoadingInitialAR) {\n    return <Skeleton width=\"100%\" />\n  }\n\n  return (\n    <AsyncSelect\n      className=\"bootstrap-4-backport\"\n      defaultInputValue={\n        initialId\n          ? getOptionLabel(\n              initialId,\n              initialAccessRequirement?.name ?? initialId.toString(),\n            )\n          : undefined\n      }\n      defaultOptions={\n        initialId\n          ? [\n              {\n                id: initialId,\n                value: initialId,\n                label: getOptionLabel(\n                  initialId,\n                  initialAccessRequirement?.name ?? initialId.toString(),\n                ),\n              },\n            ]\n          : true\n      }\n      inputId={inputId}\n      cacheOptions\n      isClearable\n      styles={{\n        // Bootstrap's form-control class overrides the display value, manually set to flex (the default without Bootstrap)\n        control: styles => ({ ...styles, display: 'flex !important' }),\n      }}\n      components={customSelectComponents}\n      loadOptions={loadOptions}\n      onChange={option => {\n        onChange(option?.id.toString())\n      }}\n      placeholder={placeholder}\n    />\n  )\n}\n"],"names":["_jsx","props","inputId","initialId","onChange","placeholder","accessToken","initialAccessRequirement","isLoadingInitialAR","data","inputValue","undefined","styles","customSelectComponents"],"mappings":"0TAiBO,WAAA,EAAA,EAAA,CACL,MAAA,GAAA,SAAA,IAAA,EACE,EAEA,GAAA,MAAA,IAEH,CAED,KAAA,GAAA,CASI,QAAA,AAAA,GAAA,OAEA,MAAAA,GAAA,EAAA,QAAA,MAEQC,UAAAA,gBAAAA,KAAAA,YAAAA,OAAAA,IAC0C,CAAA,CAHlD,CAFA,EAWJ,WAAA,EAAA,SAGE,KAAA,CAAM,UAAEC,YAASC,WAAWC,eAAUC,EACtC,CAAM,eAAEC,EAAAA,EACR,CAAM,KAAA,EAAQC,UAAAA,GAAqCC,EAAAA,EAAAA,CACb,QAAA,CAAA,CAAA,CACvBL,CAAAA,EAGf,iBAAA,EAAA,SAEE,KAAA,GAAA,SAAA,CAAA,EACA,GAAA,GAEA,MAAA,IACEM,GAAAA,CAAAA,KAAAA,GAAAA,EAAAA,CAAAA,CAAAA,GAMF,GACEA,GAAAA,QAAAA,GAAAA,EAAAA,CAC4D,aAAA,CAC1CC,CAAAA,IAFlBD,cAEkBC,SAMpB,oBAAA,IAAA,AAAA,GAAA,EACqB,GAAA,EAAA,GAAA,SAAA,EAAA,MAAA,EAAA,GAAA,SAAA,EAAA,MAAA,EAAA,EAAA,GAAA,EAAA,IAAA,CAGI,MAJzB,OAIyB,CAAA,CAJzB,CASF,MAAA,IAAA,EACEV,EAAA,EAAA,CAAO,MAAA,MAAgB,CAAA,EAGzBA,EAAA,EAAA,CACE,UAAA,uBACY,kBAAA,EAAA,EAAA,EAAA,oBAAA,OAAA,OAAA,EAAA,UAAA,EAAA,OAOJW,eAAAA,EAAAA,CAAAA,CAKE,GAAA,EACMR,MAAAA,EACGA,MAAAA,EAAAA,EAAAA,oBAAAA,OAAAA,OAAAA,EAAAA,UAAAA,CACc,CAAA,EAAA,GAMzB,UAEN,aAAA,GAxBF,YAAA,GAAA,OAAA,CA2BU,QAAA,AAAA,GAAA,EAEc,GAAA,EAAKS,QAAAA,iBAAiB,EAAtB,EAFd,WAAA,EAIIC,cACZ,SAAA,AAAA,GAAA,CAEET,EAAAA,iBAAAA,GAAAA,UAAAA,CAAQ,EACT,aACD,CAAA,CAGL"}