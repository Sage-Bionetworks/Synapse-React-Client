{"version":3,"file":"UserCardListRotate.77c808e1.js","sources":["../../src/lib/containers/UserCardListRotate.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  insertConditionsFromSearchParams,\n  KeyValue,\n  parseEntityIdFromSqlStatement,\n  SQLOperator,\n} from '../utils/functions/sqlFunctions'\nimport { SynapseClient, SynapseConstants } from '../utils'\nimport {\n  FacetColumnRequest,\n  QueryBundleRequest,\n  QueryResultBundle,\n} from '../utils/synapseTypes/Table'\nimport { ColumnType } from '../utils/synapseTypes'\nimport UserCardList from './UserCardList'\nimport { UserCardSize } from './UserCard'\nimport { LARGE_USER_CARD } from '../utils/SynapseConstants'\nimport { Button } from 'react-bootstrap'\nimport { useSynapseContext } from '../utils/SynapseContext'\nimport { LoadingUserCardMedium } from './UserCardMedium'\nimport { useDeepCompareEffectNoCheck } from 'use-deep-compare-effect'\n\nconst STORED_UID_KEY = 'sage_rotate_uids'\nconst DEFAULT_DISPLAY_COUNT = 3\n\nexport type UserCardListRotateProps = {\n  sql: string\n  count: number\n  useQueryResultUserData?: boolean\n  size?: UserCardSize\n  summaryLink?: string\n  summaryLinkText?: string\n  selectedFacets?: FacetColumnRequest[]\n  sqlOperator?: SQLOperator\n  searchParams?: KeyValue\n}\n\nexport const getDisplayIds = (\n  ids: string[] = [],\n  count: number = DEFAULT_DISPLAY_COUNT,\n  storageUidKey: string,\n) => {\n  let storedIds: string[] = []\n  let newIds: string[] = []\n  const storedIdsStr = localStorage.getItem(storageUidKey)\n  if (storedIdsStr != null) {\n    storedIds = JSON.parse(storedIdsStr)\n  }\n  if (!storedIds.length) {\n    // no stuff in storage\n    newIds = ids.slice(0, count)\n    localStorage.setItem(storageUidKey, JSON.stringify(newIds))\n    return newIds\n  } else {\n    // has stuff in storage\n    const filtered = ids.filter(item => !storedIds.includes(item))\n    if (filtered.length >= count) {\n      newIds = filtered.slice(0, count)\n      localStorage.setItem(\n        storageUidKey,\n        JSON.stringify(storedIds.concat(newIds)),\n      )\n      return newIds\n    } else {\n      localStorage.removeItem(storageUidKey)\n      const part = ids.slice(0, count - filtered.length)\n      localStorage.setItem(storageUidKey, JSON.stringify(part))\n      return filtered.concat(part)\n    }\n  }\n}\n\nconst UserCardListRotate: React.FunctionComponent<UserCardListRotateProps> = ({\n  sql,\n  count,\n  useQueryResultUserData = false,\n  size = LARGE_USER_CARD,\n  summaryLink,\n  summaryLinkText,\n  selectedFacets,\n  searchParams,\n  sqlOperator,\n}) => {\n  const { accessToken } = useSynapseContext()\n  const [userIds, setUserIds] = useState<string[]>([])\n  const [queryData, setQueryData] = useState<QueryResultBundle>()\n  const [isLoading, setIsLoading] = useState<boolean>()\n  let mounted = true\n  const storageUidKey = `${STORED_UID_KEY}-${sql}-${JSON.stringify(\n    selectedFacets,\n  )}`\n  useDeepCompareEffectNoCheck(() => {\n    const fetchData = async function () {\n      setIsLoading(true)\n      const sqlUsed = insertConditionsFromSearchParams(\n        sql,\n        searchParams,\n        sqlOperator,\n      )\n      const entityId = parseEntityIdFromSqlStatement(sql)\n      const partMask = SynapseConstants.BUNDLE_MASK_QUERY_RESULTS\n      const request: QueryBundleRequest = {\n        partMask,\n        concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n        entityId,\n        query: {\n          sql: sqlUsed,\n          selectedFacets,\n        },\n      }\n\n      const queryResultBundle = await SynapseClient.getFullQueryTableResults(\n        request,\n        accessToken,\n      )\n      const { queryResult } = queryResultBundle\n      if (queryResult?.queryResults.rows) {\n        // find the column that has the USER_ID in it.\n        const ownerIdColumnIndex = queryResult.queryResults.headers.findIndex(\n          el => el.columnType === ColumnType.USERID,\n        )\n        const ids: string[] = queryResult.queryResults.rows.map(\n          d => d.values[ownerIdColumnIndex],\n        )\n        if (mounted) {\n          const newIds = getDisplayIds(ids, count, storageUidKey)\n          setUserIds(newIds)\n          if (useQueryResultUserData) {\n            setQueryData(queryResultBundle)\n          }\n          setIsLoading(false)\n        }\n      } else {\n        console.log('UserCardListRotate: Error getting data')\n      }\n    }\n    fetchData()\n\n    return () => {\n      mounted = false\n    }\n  }, [sql, selectedFacets, count, accessToken, searchParams, sqlOperator])\n\n  return (\n    <div className=\"UserCardListRotate bootstrap-4-backport\">\n      {isLoading && <LoadingUserCardMedium />}\n      {!isLoading && userIds.length === 0 && (\n        <p className=\"font-italic\">No one was found.</p>\n      )}\n      {!isLoading && userIds.length > 0 && (\n        <UserCardList list={userIds} size={size} data={queryData} />\n      )}\n      {summaryLink && summaryLinkText && (\n        <div className=\"UserCardListRotate__summary\">\n          <Button\n            className=\"pill\"\n            variant=\"secondary\"\n            size=\"lg\"\n            href={summaryLink}\n          >\n            {summaryLinkText}\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default UserCardListRotate\n"],"names":["storedIds","newIds","localStorage","sql","count","LARGE_USER_CARD","summaryLink","summaryLinkText","selectedFacets","searchParams","sqlOperator","accessToken","useDeepCompareEffectNoCheck","fetchData","setIsLoading","SynapseClient.getFullQueryTableResults","SynapseConstants.BUNDLE_MASK_QUERY_RESULTS","partMask","entityId","sqlUsed","queryResult","setUserIds","setQueryData","console","mounted","_jsxs","_jsx","userIds","queryData"],"mappings":"obAAA,KAAA,GAAA,OAAA,MAAA,SAsBA,EAAA,mBACA,EAAA,EAcO,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,IAAA,CAKL,GAAA,GAAA,CAAA,EACA,EAAA,CAAA,EACA,KAAA,GAAA,aAAA,QAAA,CAAA,EAIA,GAHA,GAAA,MACEA,GAAAA,KAAAA,MAAAA,CAAAA,GAEF,EAAA,OAISC,CAGP,KAAA,GAAA,EAAA,OAAA,AAAA,GAAA,CAAA,EAAA,SAAA,CAAA,CAAA,EACA,GAAA,EAAA,QAAA,EACEA,SAAAA,EAAAA,MAAAA,EAAAA,CAAAA,EACAC,aAAAA,QAAAA,EAAAA,KAAAA,UAAAA,EAAAA,OAAAA,CAAAA,CAAAA,CAAAA,EAIA,EAAOD,CAEPC,aAAAA,WAAAA,CAAAA,EACA,KAAA,GAAA,EAAA,MAAA,EAAA,EAAA,EAAA,MAAA,EACAA,oBAAAA,QAAAA,EAAAA,KAAAA,UAAAA,CAAAA,CAAAA,EACA,EAAA,OAAA,CAAA,CAAO,CACR,KAlBDD,UAAAA,EAAAA,MAAAA,EAAAA,CAAAA,EACAC,aAAAA,QAAAA,EAAAA,KAAAA,UAAAA,CAAAA,CAAAA,EACA,CAkBH,EAED,EAAA,CAAA,CAA8E,MAC5EC,QACAC,yBAAAA,GACyB,OAAA,EAClBC,cACPC,kBACAC,iBACAC,eACAC,iBACAC,CAEA,KAAA,CAAM,eAAEC,EAAAA,EACR,CAAA,EAAA,GAAA,EAAA,CAAA,CAAA,EACA,CAAA,EAAA,GAAA,EAAA,EACA,CAAA,EAAA,GAAA,EAAA,EACA,GAAA,GAAA,GACA,KAAA,GAAA,GAAA,KAAA,KAAA,KAAA,UAAA,CAAA,IAGAC,SAAAA,IA6CEC,CA5CA,gBAAA,CACEC,EAAAA,EAAAA,EACA,KAAA,GAAA,EAAA,EAAA,EAAA,CAAA,EAKA,EAAA,EAAA,CAAA,EAYA,EAAA,KAAAC,GAVA,CAAoC,SADpCC,EAEEC,aAAAA,0DACc,WACdC,MAAAA,CACO,IAAA,EACAC,gBACLX,CAFK,EAMT,CAAA,EAIA,CAAM,eAAEY,EACR,GAAA,WAAA,aAAA,KAAA,CAEE,KAAA,GAAA,EAAA,aAAA,QAAA,UAAA,AAAA,GAAA,EAAA,aAAA,EAAA,MAAA,EAGA,EAAA,EAAA,aAAA,KAAA,IAAA,AAAA,GAAA,EAAA,OAAA,EAAA,EAGA,GAAA,EAAA,CACE,KAAA,GAAA,EAAA,EAAA,EAAA,CAAA,EACAC,EAAAA,CAAAA,EACA,GACEC,EAAAA,CAAAA,EAEFR,EAAAA,EAAAA,CAAY,CACb,KAEDS,SAAAA,IAAAA,wCAAAA,CACD,IAIH,IAAA,CACEC,EAAAA,EAAU,GACX,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,CAAA,EAGHC,EAAA,MAAA,CACE,UAAA,0CAAe,SAAA,CAAA,GAAAC,EAAA,EAAA,CAAA,CAAA,EAAA,CAAA,GAAA,EAAA,SAAA,GAAAA,EAAA,IAAA,CAGX,UAAA,cAAa,SAAA,mBAAb,CAAA,EAAA,CAAA,GAAA,EAAA,OAAA,GAAAA,EAAA,EAAA,CAGA,KAAA,EAAoBC,OAAS,KAAA,CAAkBC,CAAAA,EAAAA,GAAAA,GAAAA,EAAAA,MAAAA,CAG/C,UAAA,8BAAe,SAAAF,EAAA,EAAA,CACb,UAAA,OACY,QAAA,YACF,KAAA,KACH,KAAA,EACCpB,SAAAA,CAELC,CAAAA,CANH,CAAA,CAAA,CAVN,CAAA,CAsBH,EAED,GAAA,IAAA"}