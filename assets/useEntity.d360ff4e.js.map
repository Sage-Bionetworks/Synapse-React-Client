{"version":3,"file":"useEntity.d360ff4e.js","sources":["../../src/lib/utils/synapseTypes/Entity/Entity.ts","../../node_modules/react-query/es/core/mutationObserver.js","../../node_modules/react-query/es/react/useMutation.js","../../src/lib/utils/hooks/SynapseAPI/entity/useEntity.ts"],"sourcesContent":["import { AttachmentData } from '../AttachmentData'\nimport { TABLE_CONCRETE_TYPE_VALUES } from '../Table/Table'\nimport { FILE_ENTITY_CONCRETE_TYPE_VALUE } from './FileEntity'\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/Entity.html\n\nexport interface Entity {\n  /** The name of this entity? */\n  name: string\n  /** The description of this entity. */\n  description?: string\n  /** The unique immutable ID for this entity. A new ID will be generated for new Entities. Once issued, this ID is guaranteed to never change or be re-issued */\n  readonly id?: string\n  /** Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date. */\n  readonly etag?: string\n  /** The date this entity was created. */\n  readonly createdOn?: string\n  /** The date this entity was last modified. */\n  readonly modifiedOn?: string\n  /** The ID of the user that created this entity. */\n  readonly createdBy?: string\n  /** The ID of the user that last modified this entity. */\n  readonly modifiedBy?: string\n  /** The ID of the Entity that is the parent of this Entity. */\n  parentId?: string\n  /** Indicates which implementation of Entity this object represents. */\n  readonly concreteType: ENTITY_CONCRETE_TYPE\n  /** @deprecated This field is deprecated and will be removed in future versions of Synapse */\n  attachments?: AttachmentData[]\n  /** @deprecated This field is deprecated and will be removed in future versions of Synapse */\n  annotations?: string\n  /** @deprecated This field is deprecated and will be removed in future versions of Synapse */\n  accessControlList?: string\n  /** @deprecated This field is deprecated and will be removed in future versions of Synapse */\n  entityType?: string\n  /** @deprecated This field is deprecated and will be removed in future versions of Synapse */\n  uri?: string\n}\n\ntype LINK_CONCRETE_TYPE = 'org.sagebionetworks.repo.model.Link'\ntype DOCKER_REPOSITORY_CONCRETE_TYPE =\n  'org.sagebionetworks.repo.model.docker.DockerRepository'\ntype FOLDER_CONCRETE_TYPE = 'org.sagebionetworks.repo.model.Folder'\ntype PROJECT_CONCRETE_TYPE = 'org.sagebionetworks.repo.model.Project'\n\n// This is not a real object in Synapse, merely a collection of potential string values to represent the \"concreteType\" field on Entities\nexport type ENTITY_CONCRETE_TYPE =\n  | LINK_CONCRETE_TYPE\n  | DOCKER_REPOSITORY_CONCRETE_TYPE\n  | VERSIONABLE_ENTITY_CONCRETE_TYPE\n  | FOLDER_CONCRETE_TYPE\n  | PROJECT_CONCRETE_TYPE\n\nexport interface Versionable {\n  /* The version number issued to this version on the object */\n  versionNumber?: number\n}\n\nexport const VERSIONABLE_ENTITY_CONCRETE_TYPE_VALUES = [\n  FILE_ENTITY_CONCRETE_TYPE_VALUE,\n  ...TABLE_CONCRETE_TYPE_VALUES,\n] as const\n\nexport type VERSIONABLE_ENTITY_CONCRETE_TYPE =\n  typeof VERSIONABLE_ENTITY_CONCRETE_TYPE_VALUES[number]\n\nexport interface VersionableEntity extends Entity, Versionable {\n  /* The version label for this entity */\n  versionLabel?: string\n  /* The version comment for this entity */\n  versionComment?: string\n  /* If this is the latest version of the object */\n  isLatestVersion?: boolean\n  concreteType: VERSIONABLE_ENTITY_CONCRETE_TYPE\n}\n\n// Possible value types in an entity JSON object.\nexport type EntityJsonValue =\n  | string\n  | number\n  | boolean\n  | string[]\n  | number[]\n  | boolean[]\n  | undefined\n\n// Entity data returned as in https://docs.synapse.org/rest/GET/entity/id/json.html\n// Not comprehensive, but we don't need it to be, since we currently only use JSON for annotations.\nexport interface EntityJson extends Record<string, EntityJsonValue> {\n  name: string\n  id: string\n  etag: string\n  createdOn: string\n  modifiedOn: string\n  createdBy: string\n  modifiedBy: string\n  parentId: string\n  concreteType: ENTITY_CONCRETE_TYPE\n  versionNumber?: number\n  versionLabel?: string\n  isLatestVersion?: boolean\n  dataFileHandleId?: string\n}\n\n/**\n * A string array of all possible keys used by Synapse in Entity objects (objects that inherit this interface: https://docs.synapse.org/rest/org/sagebionetworks/repo/model/Entity.html).\n * This object is used to determine which fields are standard and which are annotations,\n * so it's important that this array contains all keys in the objects that implement the linked interface above.\n *\n * It may make sense to make this a function that accepts the entity type and returns the set of standard keys, since not all entity types have the same keys.\n */\nexport const entityJsonKeys = [\n  'name',\n  'description',\n  'id',\n  'etag',\n  'createdOn',\n  'modifiedOn',\n  'createdBy',\n  'modifiedBy',\n  'parentId',\n  'concreteType',\n  'versionNumber',\n  'versionLabel',\n  'versionComment',\n  'isLatestVersion',\n  'dataFileHandleId',\n  'fileNameOverride',\n  'columnIds',\n  'scopeIds',\n  'linksTo',\n  'linksToClassName',\n  'repositoryName',\n  'isManaged',\n  'viewTypeMask',\n  'type',\n  'alias',\n  'items',\n  'definingSQL',\n]\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { getDefaultState } from './mutation';\nimport { notifyManager } from './notifyManager';\nimport { Subscribable } from './subscribable';\n// CLASS\nexport var MutationObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(MutationObserver, _Subscribable);\n\n  function MutationObserver(client, options) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n\n    _this.setOptions(options);\n\n    _this.bindMethods();\n\n    _this.updateResult();\n\n    return _this;\n  }\n\n  var _proto = MutationObserver.prototype;\n\n  _proto.bindMethods = function bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  };\n\n  _proto.setOptions = function setOptions(options) {\n    this.options = this.client.defaultMutationOptions(options);\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      var _this$currentMutation;\n\n      (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);\n    }\n  };\n\n  _proto.onMutationUpdate = function onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    var notifyOptions = {\n      listeners: true\n    };\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.notify(notifyOptions);\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n\n  _proto.reset = function reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  };\n\n  _proto.mutate = function mutate(variables, options) {\n    this.mutateOptions = options;\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, _extends({}, this.options, {\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    }));\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  };\n\n  _proto.updateResult = function updateResult() {\n    var state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n\n    var result = _extends({}, state, {\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    });\n\n    this.currentResult = result;\n  };\n\n  _proto.notify = function notify(options) {\n    var _this2 = this;\n\n    notifyManager.batch(function () {\n      // First trigger the mutate callbacks\n      if (_this2.mutateOptions) {\n        if (options.onSuccess) {\n          _this2.mutateOptions.onSuccess == null ? void 0 : _this2.mutateOptions.onSuccess(_this2.currentResult.data, _this2.currentResult.variables, _this2.currentResult.context);\n          _this2.mutateOptions.onSettled == null ? void 0 : _this2.mutateOptions.onSettled(_this2.currentResult.data, null, _this2.currentResult.variables, _this2.currentResult.context);\n        } else if (options.onError) {\n          _this2.mutateOptions.onError == null ? void 0 : _this2.mutateOptions.onError(_this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);\n          _this2.mutateOptions.onSettled == null ? void 0 : _this2.mutateOptions.onSettled(undefined, _this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n\n      if (options.listeners) {\n        _this2.listeners.forEach(function (listener) {\n          listener(_this2.currentResult);\n        });\n      }\n    });\n  };\n\n  return MutationObserver;\n}(Subscribable);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { noop, parseMutationArgs } from '../core/utils';\nimport { MutationObserver } from '../core/mutationObserver';\nimport { useQueryClient } from './QueryClientProvider';\nimport { shouldThrowError } from './utils'; // HOOK\n\nexport function useMutation(arg1, arg2, arg3) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var options = parseMutationArgs(arg1, arg2, arg3);\n  var queryClient = useQueryClient();\n  var obsRef = React.useRef();\n\n  if (!obsRef.current) {\n    obsRef.current = new MutationObserver(queryClient, options);\n  } else {\n    obsRef.current.setOptions(options);\n  }\n\n  var currentResult = obsRef.current.getCurrentResult();\n  React.useEffect(function () {\n    mountedRef.current = true;\n    var unsubscribe = obsRef.current.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, []);\n  var mutate = React.useCallback(function (variables, mutateOptions) {\n    obsRef.current.mutate(variables, mutateOptions).catch(noop);\n  }, []);\n\n  if (currentResult.error && shouldThrowError(undefined, obsRef.current.options.useErrorBoundary, [currentResult.error])) {\n    throw currentResult.error;\n  }\n\n  return _extends({}, currentResult, {\n    mutate: mutate,\n    mutateAsync: currentResult.mutate\n  });\n}","/*\n * Hooks to access Entity Services in Synapse\n */\n\nimport { omit, pick } from 'lodash-es'\nimport { useEffect, useState } from 'react'\nimport {\n  QueryFunctionContext,\n  QueryKey,\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport {\n  Entity,\n  EntityJson,\n  entityJsonKeys,\n  EntityJsonValue,\n  EntityPath,\n  PaginatedResults,\n} from '../../../synapseTypes'\nimport { VersionInfo } from '../../../synapseTypes/VersionInfo'\nimport { entityQueryKeys, invalidateAllQueriesForEntity } from './queryKeys'\n\nexport function useGetEntity<T extends Entity>(\n  entityId: string,\n  versionNumber?: string | number,\n  options?: UseQueryOptions<T, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<T, SynapseClientError>(\n    entityQueryKeys.version(entityId, versionNumber),\n    () =>\n      SynapseClient.getEntity<T>(\n        accessToken,\n        entityId,\n        versionNumber?.toString(),\n      ),\n    options,\n  )\n}\n\nexport function useUpdateEntity<T extends Entity>(\n  options?: UseMutationOptions<T, SynapseClientError, T>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<T, SynapseClientError, T>(\n    (entity: T) => SynapseClient.updateEntity<T>(entity, accessToken),\n    {\n      ...options,\n      onSuccess: async (updatedEntity, variables, ctx) => {\n        await invalidateAllQueriesForEntity(queryClient, updatedEntity.id!)\n        queryClient.setQueryData(\n          entityQueryKeys.entity(updatedEntity.id!),\n          updatedEntity,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedEntity, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useDeleteEntity(\n  options?: UseMutationOptions<void, SynapseClientError, string>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, string>(\n    (entityId: string) => SynapseClient.deleteEntity(accessToken, entityId),\n    {\n      ...options,\n      onSuccess: async (voidReturn, entityId, ctx) => {\n        await invalidateAllQueriesForEntity(queryClient, entityId)\n        if (options?.onSuccess) {\n          await options.onSuccess(voidReturn, entityId, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useGetVersions(\n  entityId: string,\n  offset: number = 0,\n  limit: number = 200,\n  options?: UseQueryOptions<PaginatedResults<VersionInfo>, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<PaginatedResults<VersionInfo>, SynapseClientError>(\n    entityQueryKeys.versionsQuery(entityId, limit, offset),\n    () => SynapseClient.getEntityVersions(entityId, accessToken, offset, limit),\n    options,\n  )\n}\n\nexport function useGetVersionsInfinite(\n  entityId: string,\n  options: UseInfiniteQueryOptions<\n    PaginatedResults<VersionInfo>,\n    SynapseClientError\n  >,\n) {\n  const LIMIT = 200\n  const { accessToken } = useSynapseContext()\n  return useInfiniteQuery<PaginatedResults<VersionInfo>, SynapseClientError>(\n    entityQueryKeys.versions(entityId),\n    async (context: QueryFunctionContext<QueryKey, number>) => {\n      return await SynapseClient.getEntityVersions(\n        entityId,\n        accessToken,\n        context.pageParam,\n        LIMIT,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        if (lastPage.results.length > 0) return pages.length * LIMIT\n        //set the new offset to (page * limit)\n        else return undefined\n      },\n    },\n  )\n}\n\nexport function getStandardEntityFields(json: EntityJson): EntityJson {\n  return pick(json, entityJsonKeys) as EntityJson\n}\n\nexport function removeStandardEntityFields(\n  json: EntityJson,\n): Record<\n  string,\n  string | number | boolean | string[] | number[] | boolean[] | undefined\n> {\n  return omit(json, entityJsonKeys)\n}\n\n/**\n * In addition to the standard objects returned by {@link useQuery}, this hook also returns the following objects:\n * - `entityMetadata`: the standard entity fields contained in the JSON response\n * - `annotations`: the annotations contained in the JSON response\n *\n * The union of these objects would be equal in value to the `data` object.\n */\nexport function useGetJson(\n  entityId: string,\n  options?: UseQueryOptions<EntityJson, SynapseClientError>,\n) {\n  const [entityMetadata, setEntityMetadata] = useState<EntityJson | undefined>()\n  const [annotations, setAnnotations] = useState<\n    Record<string, EntityJsonValue> | undefined\n  >()\n  const { accessToken } = useSynapseContext()\n  const query = useQuery<EntityJson, SynapseClientError>(\n    entityQueryKeys.json(entityId),\n    () => SynapseClient.getEntityJson(entityId, accessToken),\n    options,\n  )\n\n  // Separate the standard fields and annotations.\n  useEffect(() => {\n    if (query.data) {\n      setEntityMetadata(getStandardEntityFields(query.data))\n      setAnnotations(removeStandardEntityFields(query.data))\n    }\n  }, [query.data])\n\n  return {\n    ...query,\n    entityMetadata,\n    annotations,\n  }\n}\n\nexport function useUpdateViaJson(\n  options?: UseMutationOptions<EntityJson, SynapseClientError, EntityJson>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n  return useMutation<EntityJson, SynapseClientError, EntityJson>(\n    (json: EntityJson) => {\n      const entityId = json.id\n      return SynapseClient.updateEntityJson(entityId, json, accessToken)\n    },\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        const entityId = data.id\n\n        await invalidateAllQueriesForEntity(queryClient, entityId)\n        queryClient.setQueryData(entityQueryKeys.json(entityId), data)\n\n        if (options?.onSuccess) {\n          await options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useGetEntityPath(\n  entityId: string,\n  options?: UseQueryOptions<EntityPath, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<EntityPath, SynapseClientError>(\n    entityQueryKeys.path(entityId),\n    () => SynapseClient.getEntityPath(entityId, accessToken),\n    options,\n  )\n}\n"],"names":["SynapseClient.getEntity","SynapseClient.updateEntity","SynapseClient.deleteEntity","SynapseClient.getEntityVersions","SynapseClient.getEntityJson","SynapseClient.updateEntityJson","SynapseClient.getEntityPath"],"mappings":"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"}