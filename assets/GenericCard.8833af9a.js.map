{"version":3,"file":"GenericCard.8833af9a.js","sources":["../../src/lib/containers/HeaderCard.tsx","../../src/lib/containers/widgets/ImageFileHandle.tsx","../../src/lib/containers/GenericCard.tsx"],"sourcesContent":["import { CardFooter } from './row_renderers/utils'\nimport { DescriptionConfig } from './CardContainerLogic'\nimport MarkdownSynapse from './MarkdownSynapse'\nimport React, { useState, useEffect } from 'react'\n\nexport type IconOptions = {\n  [index: string]: string\n}\nexport type HeaderCardProps = {\n  rgbIndex?: number\n  type: string\n  title: string\n  subTitle?: string\n  description: string\n  secondaryLabelLimit?: number\n  values?: string[][]\n  isAlignToLeftNav?: boolean\n  descriptionConfig?: DescriptionConfig\n  href?: string\n  target?: string\n  icon: JSX.Element\n}\n\nconst HeaderCard: React.FunctionComponent<HeaderCardProps> = ({\n  type,\n  title,\n  subTitle = '',\n  description,\n  values,\n  secondaryLabelLimit,\n  isAlignToLeftNav,\n  descriptionConfig,\n  href,\n  target,\n  rgbIndex,\n  icon,\n}) => {\n  // store old document title and description so that we can restore when this component is removed\n  const descriptionElement: Element | null = document.querySelector(\n    'meta[name=\"description\"]',\n  )\n  const [docTitle] = useState<string>(document.title)\n  const [docDescription] = useState<string>(\n    descriptionElement ? descriptionElement.getAttribute('content')! : '',\n  )\n  useEffect(() => {\n    // update page title and description based on header card values\n    if (title && document.title !== title) {\n      document.title = title\n    }\n\n    if (description || subTitle) {\n      descriptionElement?.setAttribute(\n        'content',\n        description ? description : subTitle,\n      )\n    }\n\n    return function cleanup() {\n      document.title = docTitle\n      descriptionElement?.setAttribute('content', docDescription)\n    }\n  })\n\n  return (\n    <div\n      className={`SRC-portalCard SRC-portalCardHeader ${\n        isAlignToLeftNav ? 'isAlignToLeftNav' : ''\n      }`}\n    >\n      <div className=\"container-fluid container-full-width\">\n        <div className=\"row\">\n          <div className=\"col-md-offset-1 col-md-10\">\n            <div className=\"SRC-portalCardMain\">\n              {icon}\n              <div style={{ width: '100%' }}>\n                <div className=\"SRC-cardContent\" style={{ marginLeft: '15px' }}>\n                  <div className=\"SRC-type\">{type}</div>\n                  <div>\n                    <h3 className=\"SRC-boldText\" style={{ margin: 'none' }}>\n                      {href ? (\n                        <a\n                          target={target}\n                          href={href}\n                          className=\"highlight-link\"\n                        >\n                          {title}\n                        </a>\n                      ) : (\n                        <span> {title} </span>\n                      )}\n                    </h3>\n                  </div>\n                  {subTitle && <div className=\"SRC-author\"> {subTitle} </div>}\n                  {description && (\n                    <span className=\"SRC-font-size-base\">\n                      {descriptionConfig?.isMarkdown ? (\n                        <MarkdownSynapse markdown={description} />\n                      ) : (\n                        description\n                      )}\n                    </span>\n                  )}\n                </div>\n                <div\n                  style={{\n                    borderTop: '1px solid rgba(26, 28, 41, 0.2)',\n                    marginTop: '15px',\n                    paddingTop: '5px',\n                  }}\n                />\n                <div className=\"SRC-cardContent\">\n                  {values && (\n                    <CardFooter\n                      isHeader={true}\n                      secondaryLabelLimit={secondaryLabelLimit}\n                      values={values}\n                    />\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default HeaderCard\n","import { FileHandleAssociation } from '../../utils/synapseTypes'\nimport React, { useEffect, useState } from 'react'\nimport { SynapseClient } from '../../utils'\nimport { useInView } from 'react-intersection-observer'\nimport { useSynapseContext } from '../../utils/SynapseContext'\n\ntype ImageFileHandleProps = {\n  fileHandleAssociation: FileHandleAssociation\n}\n\nexport const ImageFileHandle = (props: ImageFileHandleProps) => {\n  const {\n    fileHandleAssociation: {\n      fileHandleId,\n      associateObjectId,\n      associateObjectType,\n    },\n  } = props\n  const { accessToken } = useSynapseContext()\n  const [url, setUrl] = useState<string>()\n  const { ref, inView } = useInView({\n    triggerOnce: true,\n    rootMargin: '500px 0px',\n  })\n\n  useEffect(() => {\n    const getData = () => {\n      if (fileHandleId && associateObjectId && associateObjectType && inView) {\n        SynapseClient.getActualFileHandleByIdURL(\n          fileHandleId,\n          accessToken,\n          associateObjectType,\n          associateObjectId,\n          false,\n        )\n          .then(url => {\n            setUrl(url)\n          })\n          .catch(err => {\n            console.error('Error on retrieving file handle url ', err)\n          })\n      }\n    }\n\n    getData()\n  }, [\n    inView,\n    fileHandleId,\n    associateObjectId,\n    accessToken,\n    associateObjectType,\n  ])\n\n  return (\n    <span ref={ref}>\n      {url && (\n        <img src={url} alt=\"\" className=\"ImageFileHandle\" loading=\"lazy\"></img>\n      )}\n    </span>\n  )\n}\n","import { isEmpty } from 'lodash-es'\nimport React from 'react'\nimport { SynapseConstants } from '../utils'\nimport { isTableEntity } from '../utils/functions/EntityTypeUtils'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../utils/functions/getEndpoint'\nimport {\n  DOI_REGEX,\n  SYNAPSE_ENTITY_ID_REGEX,\n} from '../utils/functions/RegularExpressions'\nimport { unCamelCase } from '../utils/functions/unCamelCase'\nimport { SMALL_USER_CARD } from '../utils/SynapseConstants'\nimport { SynapseContext } from '../utils/SynapseContext'\nimport {\n  ColumnModel,\n  ColumnType,\n  Entity,\n  FileHandleAssociateType,\n  FileHandleAssociation,\n  SelectColumn,\n} from '../utils/synapseTypes'\nimport Tooltip from '../utils/tooltip/Tooltip'\nimport {\n  CardLink,\n  ColumnSpecifiedLink,\n  CommonCardProps,\n  DescriptionConfig,\n  MarkdownLink,\n} from './CardContainerLogic'\nimport HeaderCard from './HeaderCard'\nimport IconList from './IconList'\nimport IconSvg, { type2SvgIconName } from './IconSvg'\nimport MarkdownSynapse from './MarkdownSynapse'\nimport { QueryContextType } from './QueryContext'\nimport { CardFooter, Icon } from './row_renderers/utils'\nimport UserCard from './UserCard'\nimport { FileHandleLink } from './widgets/FileHandleLink'\nimport { ImageFileHandle } from './widgets/ImageFileHandle'\n\nexport type KeyToAlias = {\n  key: string\n  alias?: string\n}\n\nexport type KeyToAliasMap = {\n  [index: number]: KeyToAlias\n  [index: string]: KeyToAlias\n}\n\nexport type GenericCardSchema = {\n  type: string\n  title: string\n  subTitle?: string\n  description?: string\n  icon?: string\n  imageFileHandleColumnName?: string\n  thumbnailRequiresPadding?: boolean\n  secondaryLabels?: any[]\n  link?: string\n  dataTypeIconNames?: string\n}\n\nexport type IconOptions = {\n  [index: string]: string\n}\n\nexport type GenericCardProps = {\n  selectColumns?: SelectColumn[]\n  columnModels?: ColumnModel[]\n  facetAliases?: Record<string, string>\n  iconOptions?: IconOptions\n  useTypeColumnForIcon?: boolean\n  isHeader?: boolean\n  isAlignToLeftNav?: boolean\n  // Maps columnName to index\n  schema: Record<string, number>\n  // Row values\n  data: string[]\n  tableId: string | undefined\n  columnIconOptions?: {}\n  queryContext: QueryContextType\n} & CommonCardProps\n\nexport type GenericCardState = {\n  hasClickedShowMore: boolean\n}\n\nconst CHAR_COUNT_CUTOFF = 400\nexport const CARD_SHORT_DESCRIPTION_CSS = 'SRC-short-description'\nexport const CARD_LONG_DESCRIPTION_CSS = 'SRC-long-description'\n\n// This function isn't in the class only for ease of testing with renderShortDescription\nexport const getCutoff = (summary: string) => {\n  let previewText = ''\n  const summarySplit = summary.split(' ')\n  // find num words to join such that its >= char_count_cutoff\n  let i = 0\n  while (previewText.length < CHAR_COUNT_CUTOFF && i < summarySplit.length) {\n    previewText += `${summarySplit[i]} `\n    i += 1\n  }\n  previewText = previewText.trim()\n  return { previewText }\n}\n\nexport const getFileHandleAssociation = (\n  table?: Entity,\n  fileHandleId?: string,\n  rowSynapseId?: string, // only applicable if this is an EntityView\n) => {\n  let fileHandleAssociation: FileHandleAssociation | undefined = undefined\n  if (table && fileHandleId) {\n    if (isTableEntity(table)) {\n      // The file handle is in the table\n      fileHandleAssociation = {\n        fileHandleId,\n        associateObjectId: table?.id ?? '',\n        associateObjectType: FileHandleAssociateType.TableEntity,\n      }\n    } else if (rowSynapseId) {\n      // We're looking at a view, so the FileEntity (whose ID matches the row ID) gives permission to download the file handle\n      fileHandleAssociation = {\n        fileHandleId,\n        associateObjectId: rowSynapseId,\n        associateObjectType: FileHandleAssociateType.FileEntity,\n      }\n    }\n  }\n  return fileHandleAssociation\n}\n\nexport const getValueOrMultiValue = ({\n  columnName,\n  value,\n  selectColumns,\n  columnModels,\n}: {\n  columnName?: string\n  value?: string\n  selectColumns?: SelectColumn[]\n  columnModels?: ColumnModel[]\n}): ValueOrMultiValue => {\n  if (!value) {\n    return {\n      str: '',\n      strList: undefined,\n      columnModelType: undefined,\n    }\n  }\n  const selectedColumnOrUndefined =\n    selectColumns?.find(el => el.name === columnName) ||\n    columnModels?.find(el => el.name === columnName)\n  const isMultiValue = selectedColumnOrUndefined?.columnType.endsWith('_LIST')\n\n  if (isMultiValue) {\n    let val: any = value\n    let strList: any\n    try {\n      strList = JSON.parse(val)\n      val = (strList as string[]).join(', ')\n      return {\n        strList,\n        str: val,\n        columnModelType: selectedColumnOrUndefined?.columnType,\n      }\n    } catch (e) {\n      console.error(\n        'Could not parse multivalue string ',\n        val,\n        ' caught err ',\n        e,\n      )\n    }\n  }\n  return { str: value, columnModelType: selectedColumnOrUndefined?.columnType }\n}\n\nexport const getColumnIndex = (\n  columnName?: string,\n  selectColumns?: SelectColumn[],\n  columnModels?: ColumnModel[],\n): number | undefined => {\n  return (\n    selectColumns?.findIndex(el => el.name === columnName) ||\n    columnModels?.findIndex(el => el.name === columnName)\n  )\n}\n\n// SWC-6115: special rendering of the version column (for Views)\nexport const VersionLabel: React.FC<{\n  synapseId: string\n  version: string\n}> = props => {\n  const { synapseId, version } = props\n  return (\n    <span>\n      {version}&nbsp;&nbsp;\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${synapseId}.${version}`}\n      >\n        (Show Version History on Synapse)\n      </a>\n    </span>\n  )\n}\n\ntype SynapseCardLabelProps = {\n  value: string\n  columnName: string\n  labelLink: CardLink | MarkdownLink | ColumnSpecifiedLink | undefined\n  selectColumns: SelectColumn[] | undefined\n  columnModels: ColumnModel[] | undefined\n  isHeader: boolean\n  className?: string\n  rowData: string[]\n}\n\nexport const SynapseCardLabel: React.FC<SynapseCardLabelProps> = props => {\n  const {\n    value,\n    columnName,\n    labelLink,\n    selectColumns,\n    columnModels,\n    isHeader,\n    className,\n    rowData,\n  } = props\n  if (!value) {\n    return <>{value}</>\n  }\n  const { strList, str, columnModelType } = getValueOrMultiValue({\n    columnName,\n    value,\n    selectColumns,\n    columnModels,\n  })\n\n  if (!str) {\n    // the array came back empty\n    return <>{str}</>\n  }\n\n  let newClassName = className\n  const style: React.CSSProperties = {}\n  if (isHeader) {\n    newClassName = className?.concat(' ', 'SRC-lightLink')\n  }\n  // PORTALS-1913: special rendering for user ID lists\n  if (columnModelType === ColumnType.USERID_LIST && strList) {\n    return (\n      <>\n        {strList.map((val: string, index: number) => {\n          return (\n            <span key={val}>\n              <UserCard\n                ownerId={val}\n                size={SMALL_USER_CARD}\n                className={newClassName}\n              />\n              {/* \\u00a0 is a nbsp; */}\n              {index < strList.length - 1 && ',\\u00a0\\u00a0'}\n            </span>\n          )\n        })}\n      </>\n    )\n  }\n  if (columnModelType === ColumnType.USERID && str) {\n    return (\n      <UserCard ownerId={str} size={SMALL_USER_CARD} className={newClassName} />\n    )\n  }\n\n  if (!labelLink) {\n    // if this looks like a Synapse ID, then autolink.\n    if (str.match(SYNAPSE_ENTITY_ID_REGEX)) {\n      // its a synId\n      return (\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${str}`}\n          className={newClassName}\n        >\n          {str}\n        </a>\n      )\n    } else {\n      // they don't need a link\n      return <>{str}</>\n    }\n  }\n\n  let labelContent: JSX.Element\n  if (labelLink.isMarkdown) {\n    if (strList) {\n      labelContent = (\n        <>\n          {strList.map((el, index) => {\n            return (\n              <span key={el}>\n                <MarkdownSynapse key={el} renderInline={true} markdown={el} />\n                {/* \\u00a0 is a nbsp; */}\n                {index < strList.length - 1 && ',\\u00a0\\u00a0'}\n              </span>\n            )\n          })}\n        </>\n      )\n    } else {\n      labelContent = <MarkdownSynapse renderInline={true} markdown={value} />\n    }\n  } else {\n    const split = strList ? strList : str.split(',')\n    if ('linkColumnName' in labelLink) {\n      const linkIndex = getColumnIndex(\n        labelLink.linkColumnName,\n        selectColumns,\n        columnModels,\n      )\n      if (linkIndex == null) {\n        console.warn(\n          `Could not determine column index of ${labelLink.linkColumnName}`,\n        )\n        labelContent = <>{value}</>\n      } else {\n        const href = rowData[linkIndex]\n\n        if (isEmpty(href)) {\n          labelContent = <>{value}</>\n        } else {\n          labelContent = (\n            <>\n              {split.map((el, index) => {\n                return (\n                  <React.Fragment key={el}>\n                    <a\n                      href={href}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      key={el}\n                      className={newClassName}\n                      style={style}\n                    >\n                      {el}\n                    </a>\n                    {index < split.length - 1 && (\n                      <span style={{ marginRight: 4 }}>, </span>\n                    )}\n                  </React.Fragment>\n                )\n              })}\n            </>\n          )\n        }\n      }\n    } else {\n      labelContent = (\n        <>\n          {split.map((el, index) => {\n            const { baseURL, URLColumnName, wrapValueWithParens } = labelLink\n            const value = wrapValueWithParens ? `(${el})` : el\n            const href = `/${baseURL}?${URLColumnName}=${value}`\n\n            return (\n              <React.Fragment key={el}>\n                <a href={href} key={el} className={newClassName} style={style}>\n                  {el}\n                </a>\n                {index < split.length - 1 && (\n                  <span style={{ marginRight: 4 }}>, </span>\n                )}\n              </React.Fragment>\n            )\n          })}\n        </>\n      )\n    }\n  }\n\n  if (labelLink.tooltipText) {\n    // wrap in a tooltip\n    return (\n      <Tooltip title={labelLink.tooltipText} enterNextDelay={300}>\n        <span>{labelContent}</span>\n      </Tooltip>\n    )\n  } else {\n    return labelContent\n  }\n}\n\ntype ValueOrMultiValue = {\n  str: string\n  strList?: string[]\n  columnModelType?: ColumnType\n}\n\n/**\n * Renders a card from a table query\n */\nexport default class GenericCard extends React.Component<\n  GenericCardProps,\n  GenericCardState\n> {\n  static contextType = SynapseContext\n\n  constructor(props: GenericCardProps) {\n    super(props)\n    this.state = {\n      hasClickedShowMore: false,\n    }\n    this.getLinkParams = this.getLinkParams.bind(this)\n    this.getCardLinkHref = this.getCardLinkHref.bind(this)\n    this.renderLongDescription = this.renderLongDescription.bind(this)\n    this.renderShortDescription = this.renderShortDescription.bind(this)\n  }\n\n  public getLinkParams(\n    link: string,\n    cardLinkConfig: CardLink | undefined,\n    data: string[] | undefined,\n    schema: any | undefined,\n  ): {\n    href: string\n    target: string\n  } {\n    link = link.trim()\n    let href = link\n    let target = '_self'\n    if (link.match(SYNAPSE_ENTITY_ID_REGEX)) {\n      // its a synId\n      href = `${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${link}`\n    } else if (link.match(DOI_REGEX)) {\n      target = '_blank'\n      href = `https://dx.doi.org/${link}`\n    } else if (!cardLinkConfig) {\n      target = '_blank'\n    } else if (cardLinkConfig) {\n      href = this.getCardLinkHref(cardLinkConfig, data, schema) ?? ''\n    }\n    return { href, target }\n  }\n\n  public getCardLinkHref(\n    cardLink: CardLink | undefined,\n    data: string[] | undefined,\n    schema: Record<string, number> | undefined,\n  ): string | undefined {\n    if (cardLink) {\n      if (!data || !schema) {\n        throw Error('Must specify CardLink and data for linking to work')\n      }\n      const { matchColumnName, URLColumnName, overrideLinkURLColumnName } =\n        cardLink\n\n      // PORTALS-2088:  Return the link, unless...\n      // an overrideLinkURLColumnName has been set and it's value is defined.\n      // In this case, just use the overrideLinkURLColumnName value\n      if (overrideLinkURLColumnName && schema[overrideLinkURLColumnName]) {\n        const indexOfOverrideLinkURLColumnName =\n          schema[overrideLinkURLColumnName]\n        const overrideLinkValue = data[indexOfOverrideLinkURLColumnName]\n        if (overrideLinkValue) {\n          return overrideLinkValue\n        }\n      }\n\n      const indexInData = schema[matchColumnName]\n      if (indexInData === undefined) {\n        console.error(\n          `Could not find match for data: ${data} with columnName ${matchColumnName}`,\n        )\n      } else {\n        const value = data[indexInData]\n        if (value) {\n          // value is defined!\n          return `/${cardLink.baseURL}?${URLColumnName}=${value}`\n        }\n      }\n    }\n    return undefined\n  }\n\n  getCutoff = (summary: string) => {\n    let previewText = ''\n    const summarySplit = summary!.split(' ')\n    // find num words to join such that its >= char_count_cutoff\n    let i = 0\n    while (previewText.length < CHAR_COUNT_CUTOFF && i < summarySplit.length) {\n      previewText += `${summarySplit[i]} `\n      i += 1\n    }\n    previewText = previewText.trim()\n    return { previewText }\n  }\n\n  toggleShowMore = () => {\n    this.setState({\n      hasClickedShowMore: true,\n    })\n  }\n\n  renderTitle = ({\n    href,\n    target,\n    titleSearchHandle,\n    title,\n  }: {\n    target: string\n    titleSearchHandle: string | undefined\n    title: string\n    href: string\n  }) => {\n    if (href) {\n      return (\n        <a\n          data-search-handle={titleSearchHandle}\n          target={target}\n          href={href}\n          className=\"highlight-link\"\n        >\n          {title}\n        </a>\n      )\n    } else {\n      return <span data-search-handle={titleSearchHandle}> {title} </span>\n    }\n  }\n\n  render() {\n    const {\n      schema,\n      data,\n      genericCardSchema,\n      secondaryLabelLimit,\n      selectColumns,\n      columnModels,\n      iconOptions,\n      useTypeColumnForIcon = false,\n      isHeader = false,\n      titleLinkConfig,\n      ctaLinkConfig,\n      labelLinkConfig,\n      facetAliases = {},\n      descriptionConfig,\n      rgbIndex,\n      columnIconOptions,\n      queryContext: { entity: table },\n    } = this.props\n    // GenericCard inherits properties from CommonCardProps so that the properties have the same name\n    // and type, but theres one nuance which is that we can't override if one specific property will be\n    // defined, so we assert genericCardSchema is not null and assign to genericCardSchemaDefined\n    const genericCardSchemaDefined = genericCardSchema!\n    const { hasClickedShowMore } = this.state\n    const { link = '', type } = genericCardSchemaDefined\n    const title = data[schema[genericCardSchemaDefined.title]]\n    let subTitle =\n      genericCardSchemaDefined.subTitle &&\n      data[schema[genericCardSchemaDefined.subTitle]]\n    subTitle =\n      genericCardSchemaDefined?.subTitle &&\n      getValueOrMultiValue({\n        value: subTitle,\n        columnName: genericCardSchemaDefined?.subTitle,\n        selectColumns,\n        columnModels,\n      }).str\n    const description = data[schema[genericCardSchemaDefined.description || '']]\n    const iconValue = data[schema[genericCardSchemaDefined.icon || '']]\n    const dataTypeIconNames =\n      data[schema[genericCardSchemaDefined.dataTypeIconNames || '']]\n    const imageFileHandleIdValue =\n      data[schema[genericCardSchemaDefined.imageFileHandleColumnName || '']]\n    const titleColumnModel = columnModels?.find(\n      el => genericCardSchemaDefined.link === el.name,\n    )\n    const titleColumnType = titleColumnModel?.columnType\n    // wrap link in parens because undefined would throw an error\n    const linkValue: string = data[schema[link]] || ''\n    const { href, target } = this.getLinkParams(\n      linkValue,\n      titleLinkConfig,\n      data,\n      schema,\n    )\n    const values: string[][] = []\n    const { secondaryLabels = [] } = genericCardSchemaDefined\n    const isView = table && !isTableEntity(table)\n    for (let i = 0; i < secondaryLabels.length; i += 1) {\n      const columnName = secondaryLabels[i]\n      let value: any = data[schema[columnName]]\n      let columnDisplayName\n      if (value) {\n        // SWC-6115: special rendering of the version column (for Views)\n        if (isView && columnName === 'currentVersion') {\n          const synapseId = data[schema.id]\n          const version = value\n          value = VersionLabel({ synapseId, version })\n          columnDisplayName = 'Version'\n        } else {\n          const labelLink = labelLinkConfig?.find(\n            el => el.matchColumnName === columnName,\n          )\n          value = SynapseCardLabel({\n            value,\n            columnName,\n            labelLink,\n            isHeader,\n            selectColumns,\n            columnModels,\n            rowData: data,\n          })\n          columnDisplayName = unCamelCase(columnName, facetAliases)\n        }\n        const keyValue = [columnDisplayName, value, columnName]\n        values.push(keyValue)\n      }\n    }\n\n    const fileHandleId = imageFileHandleIdValue || linkValue\n\n    /**\n     * To show a direct download link to a file, we need to determine the association that gives permission to download the file.\n     */\n    const fileHandleAssociation = getFileHandleAssociation(\n      table,\n      fileHandleId,\n      data[schema.id],\n    )\n\n    const showFooter = values.length > 0\n\n    const style: React.CSSProperties = {\n      // undefined, take default value from class\n      marginTop: isHeader ? '0px' : undefined,\n      marginBottom: isHeader ? '0px' : undefined,\n      paddingBottom: showFooter || imageFileHandleIdValue ? undefined : '15px',\n    }\n    const icon: JSX.Element = (\n      <>\n        {!useTypeColumnForIcon && imageFileHandleIdValue && (\n          <div\n            className=\"SRC-imageThumbnail\"\n            style={{\n              padding: genericCardSchemaDefined.thumbnailRequiresPadding\n                ? '21px'\n                : undefined,\n            }}\n          >\n            {fileHandleAssociation && (\n              <ImageFileHandle fileHandleAssociation={fileHandleAssociation} />\n            )}\n          </div>\n        )}\n        {!useTypeColumnForIcon && !imageFileHandleIdValue && (\n          <div className=\"SRC-cardThumbnail\">\n            <Icon iconOptions={iconOptions} value={iconValue} type={type} />\n          </div>\n        )}\n        {useTypeColumnForIcon && (\n          <div className=\"SRC-cardThumbnail\">\n            <IconSvg\n              options={{ icon: type2SvgIconName[data[schema['type']]] }}\n            />\n          </div>\n        )}\n      </>\n    )\n\n    if (isHeader) {\n      return (\n        <HeaderCard\n          descriptionConfig={descriptionConfig}\n          title={title}\n          subTitle={subTitle}\n          description={description}\n          type={type}\n          icon={icon}\n          values={values}\n          href={href}\n          target={target}\n          isAlignToLeftNav={true}\n          secondaryLabelLimit={secondaryLabelLimit}\n          rgbIndex={rgbIndex}\n        />\n      )\n    }\n\n    const titleSearchHandle = unCamelCase(\n      genericCardSchemaDefined.title,\n      facetAliases,\n    )\n    const stubTitleSearchHandle = unCamelCase(\n      genericCardSchemaDefined.subTitle,\n      facetAliases,\n    )\n    const descriptionSubTitle = unCamelCase(\n      genericCardSchemaDefined.description,\n      facetAliases,\n    )\n\n    let ctaHref: string | undefined = undefined,\n      ctaTarget: string | undefined = undefined\n    if (ctaLinkConfig) {\n      const ctaLinkValue: string = data[schema[ctaLinkConfig.link]] || ''\n      const { href: newCtaHref, target: newCtaTarget } = this.getLinkParams(\n        ctaLinkValue,\n        undefined, //card link config\n        data,\n        schema,\n      )\n      ctaHref = newCtaHref\n      ctaTarget = newCtaTarget\n    }\n\n    return (\n      <div style={style} className={'SRC-portalCard'}>\n        <div className={'SRC-portalCardMain'}>\n          {icon}\n          <div className=\"SRC-cardContent\">\n            <div className=\"SRC-type\">{type}</div>\n            {\n              // If the portal configs has columnIconOptions.columns.dataType option\n              // and the column value is not null, display the card data type icons\n              columnIconOptions?.columns?.dataType && dataTypeIconNames?.length && (\n                <div style={{ marginTop: '20px' }}>\n                  <IconList\n                    iconConfigs={columnIconOptions.columns.dataType}\n                    iconNames={JSON.parse(dataTypeIconNames)}\n                    useBackground={true}\n                    useTheme={true}\n                  />\n                </div>\n              )\n            }\n            <div>\n              <h3\n                className=\"SRC-boldText SRC-blackText\"\n                style={{ margin: 'none' }}\n              >\n                {!titleLinkConfig &&\n                titleColumnType === ColumnType.FILEHANDLEID &&\n                fileHandleAssociation ? (\n                  <FileHandleLink\n                    fileHandleAssociation={fileHandleAssociation}\n                    showDownloadIcon={type !== SynapseConstants.EXPERIMENTAL}\n                    displayValue={title}\n                  />\n                ) : (\n                  this.renderTitle({\n                    href,\n                    target,\n                    titleSearchHandle,\n                    title,\n                  })\n                )}\n              </h3>\n            </div>\n            {subTitle && (\n              <div\n                data-search-handle={stubTitleSearchHandle}\n                className=\"SRC-author\"\n              >\n                {subTitle}\n              </div>\n            )}\n            {/* \n              Below is a hack that allows word highlighting to work, the Search component insert's\n              html elements outside of the React DOM which if detected would break the app,\n              but as written below this avoids that reconcilliation process.\n            */}\n            {description &&\n              this.renderShortDescription(\n                description,\n                hasClickedShowMore,\n                descriptionSubTitle,\n                descriptionConfig,\n              )}\n            {description &&\n              this.renderLongDescription(\n                description,\n                hasClickedShowMore,\n                descriptionSubTitle,\n                descriptionConfig,\n              )}\n            {ctaLinkConfig && ctaHref && ctaTarget && (\n              <div className=\"SRC-portalCardCTALink bootstrap-4-backport\">\n                <a target={ctaTarget} rel=\"noopener noreferrer\" href={ctaHref}>\n                  {ctaLinkConfig.text}\n                </a>\n              </div>\n            )}\n          </div>\n        </div>\n        {showFooter && (\n          <CardFooter\n            isHeader={false}\n            secondaryLabelLimit={secondaryLabelLimit}\n            values={values}\n            columnIconOptions={columnIconOptions}\n            className={`${imageFileHandleIdValue ? 'hasImage' : 'hasIcon'}`}\n          />\n        )}\n      </div>\n    )\n  }\n\n  public renderLongDescription(\n    description: string,\n    hasClickedShowMore: boolean,\n    descriptionSubTitle: any,\n    descriptionConfig?: DescriptionConfig,\n  ): React.ReactNode {\n    let content: JSX.Element | string = description\n    if (descriptionConfig?.isMarkdown) {\n      content = <MarkdownSynapse markdown={content} />\n    }\n    const show =\n      hasClickedShowMore || descriptionConfig?.showFullDescriptionByDefault\n    return (\n      <div className={show ? '' : 'SRC-hidden'}>\n        <span\n          data-search-handle={descriptionSubTitle}\n          className={`SRC-font-size-base ${CARD_LONG_DESCRIPTION_CSS}`}\n        >\n          {content}\n        </span>\n      </div>\n    )\n  }\n\n  public renderShortDescription(\n    description: string,\n    hasClickedShowMore: boolean,\n    descriptionSubTitle: any,\n    descriptionConfig?: DescriptionConfig,\n  ): React.ReactNode {\n    if (descriptionConfig?.showFullDescriptionByDefault) {\n      return <></>\n    }\n    return (\n      <div className={hasClickedShowMore ? 'SRC-hidden' : ''}>\n        <span\n          data-search-handle={descriptionSubTitle}\n          className={`SRC-font-size-base ${CARD_SHORT_DESCRIPTION_CSS} SRC-short-description`}\n        >\n          {getCutoff(description).previewText}\n        </span>\n        {description.length >= CHAR_COUNT_CUTOFF && (\n          <a\n            style={{\n              fontSize: '16px',\n              cursor: 'pointer',\n              marginLeft: '5px',\n            }}\n            className=\"highlight-link\"\n            onClick={this.toggleShowMore}\n          >\n            ...Show More\n          </a>\n        )}\n      </div>\n    )\n  }\n}\n"],"names":["useState","type","title","description","values","secondaryLabelLimit","isAlignToLeftNav","descriptionConfig","href","target","rgbIndex","icon","useEffect","document","descriptionElement","_jsx","_jsxs","fileHandleId","associateObjectId","associateObjectType","accessToken","ref","inView","getData","SynapseClient","setUrl","console","url","previewText","i","fileHandleAssociation","TableEntity","rowSynapseId","FileEntity","columnName","value","selectColumns","columnModels","undefined","strList","val","columnType","synapseId","version","labelLink","isHeader","className","rowData","_Fragment","str","columnModelType","newClassName","SMALL_USER_CARD","labelContent","el","baseURL","URLColumnName","wrapValueWithParens","tooltipText","getCutoff","toggleShowMore","renderTitle","titleSearchHandle","link","matchColumnName","overrideLinkURLColumnName","schema","data","genericCardSchema","iconOptions","titleLinkConfig","ctaLinkConfig","labelLinkConfig","columnIconOptions","table","hasClickedShowMore","subTitle","columnDisplayName","iconValue","newCtaHref","newCtaTarget","ctaHref","ctaTarget","dataType","SynapseConstants.EXPERIMENTAL","EXPERIMENTAL","stubTitleSearchHandle","text","content","descriptionSubTitle","CARD_LONG_DESCRIPTION_CSS","CARD_SHORT_DESCRIPTION_CSS","GenericCard"],"mappings":"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"}