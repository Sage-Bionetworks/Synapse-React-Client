{"version":3,"file":"SubsectionRowRenderer.stories.047b1a65.js","sources":["../../src/lib/containers/SubsectionRowRenderer.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  insertConditionsFromSearchParams,\n  KeyValue,\n  parseEntityIdFromSqlStatement,\n  SQLOperator,\n} from '../utils/functions/sqlFunctions'\nimport { SynapseClient, SynapseConstants } from '../utils'\nimport {\n  ColumnType,\n  QueryBundleRequest,\n  RowSet,\n} from '../utils/synapseTypes/Table'\nimport { useSynapseContext } from '../utils/SynapseContext'\nimport MarkdownSynapse from './MarkdownSynapse'\nimport { SkeletonTable } from '../assets/skeletons/SkeletonTable'\nimport { ColumnSpecifiedLink } from './CardContainerLogic'\nimport Typography from '../utils/typography/Typography'\nimport { useDeepCompareEffectNoCheck } from 'use-deep-compare-effect'\n\nexport type FriendlyValuesMap = {\n  [index: string]: string\n}\n\nexport type SubsectionRowRendererProps = {\n  sql: string\n  isMarkdown?: boolean\n  sqlOperator?: SQLOperator\n  searchParams?: KeyValue\n  columnLink?: ColumnSpecifiedLink\n  friendlyValuesMap?: FriendlyValuesMap\n  columnNameIsSectionTitle?: boolean\n  limit?: number\n}\n\nconst LIST_COLUMN_TYPES = [\n  ColumnType.BOOLEAN_LIST,\n  ColumnType.DATE_LIST,\n  ColumnType.ENTITYID_LIST,\n  ColumnType.INTEGER_LIST,\n  ColumnType.STRING_LIST,\n]\n\nconst SubsectionRowRenderer: React.FunctionComponent<\n  SubsectionRowRendererProps\n> = ({\n  sql,\n  searchParams,\n  sqlOperator,\n  isMarkdown = false,\n  columnLink,\n  friendlyValuesMap,\n  columnNameIsSectionTitle = false,\n  limit,\n}) => {\n  const { accessToken } = useSynapseContext()\n  const [rowSet, setRowSet] = useState<RowSet>()\n  const [isLoading, setIsLoading] = useState<boolean>()\n  let mounted = true\n  useDeepCompareEffectNoCheck(() => {\n    const fetchData = async function () {\n      setIsLoading(true)\n      const sqlUsed = insertConditionsFromSearchParams(\n        sql,\n        searchParams,\n        sqlOperator,\n      )\n      const entityId = parseEntityIdFromSqlStatement(sql)\n      const partMask = SynapseConstants.BUNDLE_MASK_QUERY_RESULTS\n      const request: QueryBundleRequest = {\n        partMask,\n        concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n        entityId,\n        query: {\n          sql: sqlUsed,\n          limit,\n        },\n      }\n\n      const queryResultBundle = await SynapseClient.getQueryTableResults(\n        request,\n        accessToken,\n      )\n      setIsLoading(false)\n      const queryResults = queryResultBundle?.queryResult?.queryResults\n      if (queryResults) {\n        if (mounted) {\n          setRowSet(queryResults)\n        }\n      } else {\n        console.log('SubsectionRowRenderer: Error getting data')\n      }\n    }\n    fetchData()\n\n    return () => {\n      mounted = false\n    }\n  }, [sql, accessToken, searchParams, sqlOperator])\n\n  /**\n   * If a \"friendly values map\" was provided, then use the friendly value if any of the raw values match.\n   * Otherwise, just return the raw value.\n   * @param rawValue\n   * @returns\n   */\n  const getFriendlyValue = (rawValue: string) => {\n    if (!friendlyValuesMap) {\n      return rawValue\n    }\n    const friendlyValue = friendlyValuesMap[rawValue]\n    return friendlyValue ? friendlyValue : rawValue\n  }\n\n  return (\n    <div className=\"SubsectionRowRenderer bootstrap-4-backport\">\n      {isLoading && <SkeletonTable numRows={2} numCols={1} />}\n      {!isLoading &&\n        rowSet &&\n        rowSet.rows.length > 0 &&\n        rowSet.headers.map((selectColumn, colIndex) => {\n          // If a link column was provided (that contain URLs), do not create a page sub-section for that column.\n          if (columnLink && selectColumn.name == columnLink.linkColumnName) {\n            return <></>\n          }\n          return (\n            <div\n              key={`${colIndex}`}\n              className=\"SubsectionRowRenderer__item\"\n              role=\"table\"\n            >\n              <Typography\n                variant={\n                  columnNameIsSectionTitle ? 'sectionTitle' : 'subsectionHeader'\n                }\n                role=\"heading\"\n              >\n                {selectColumn.name}\n              </Typography>\n              {columnNameIsSectionTitle && <hr />}\n              <div role=\"rowgroup\">\n                {rowSet.rows.map((row, rowIndex) => {\n                  const cellValue = row.values[colIndex]\n                  // If the cell value is undefined, then go to the next row.\n                  if (!cellValue) {\n                    return <></>\n                  }\n                  let values\n                  // If this cell value represents a multi-value (the select column type is a *_LIST column), then parse it and break it apart\n                  if (LIST_COLUMN_TYPES.includes(selectColumn.columnType)) {\n                    const jsonData: string[] = JSON.parse(cellValue)\n                    values = jsonData.map((val: string, index: number) => {\n                      return (\n                        <div\n                          key={index}\n                          className=\"SubsectionRowRenderer__item__value\"\n                          role=\"row\"\n                        >\n                          {isMarkdown && (\n                            <MarkdownSynapse markdown={getFriendlyValue(val)} />\n                          )}\n                          {!isMarkdown && <p>{getFriendlyValue(val)}</p>}\n                        </div>\n                      )\n                    })\n                  } else {\n                    // If this cell value represents a single value\n                    let renderedValue\n                    const friendlyCellValue = getFriendlyValue(cellValue)\n                    if (isMarkdown) {\n                      renderedValue = (\n                        <MarkdownSynapse markdown={friendlyCellValue} />\n                      )\n                    } else if (\n                      columnLink &&\n                      columnLink.matchColumnName == selectColumn.name\n                    ) {\n                      // If a link column was provided, then we need to create links (the url is in this other column)\n                      const urlColumnIndex = rowSet.headers.findIndex(\n                        col => col.name == columnLink.linkColumnName,\n                      )\n                      const values = row.values as string[]\n                      if (values.some(value => value === null)) {\n                        console.warn(\n                          'Row has null value(s) when no nulls expected',\n                        )\n                      }\n\n                      if (urlColumnIndex > -1) {\n                        renderedValue = (\n                          <a\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                            href={values[urlColumnIndex]}\n                          >\n                            {friendlyCellValue}\n                          </a>\n                        )\n                      } else {\n                        renderedValue = <p>{friendlyCellValue}</p>\n                      }\n                    } else {\n                      renderedValue = <p>{friendlyCellValue}</p>\n                    }\n                    values = (\n                      <div\n                        key={rowIndex}\n                        className=\"SubsectionRowRenderer__item__value\"\n                        role=\"row\"\n                      >\n                        {renderedValue}\n                      </div>\n                    )\n                  }\n                  return values\n                })}\n              </div>\n            </div>\n          )\n        })}\n    </div>\n  )\n}\n\nexport default SubsectionRowRenderer\n"],"names":["sql","searchParams","sqlOperator","columnLink","friendlyValuesMap","limit","accessToken","useDeepCompareEffectNoCheck","fetchData","setIsLoading","SynapseClient.getQueryTableResults","SynapseConstants.BUNDLE_MASK_QUERY_RESULTS","partMask","entityId","sqlUsed","setRowSet","console","mounted","rawValue","_jsxs","_jsx","_Fragment","name","values","renderedValue","friendlyCellValue","urlColumnIndex"],"mappings":"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"}