{"version":3,"file":"AccessSubmission.c8503001.js","sources":["../../src/lib/utils/hooks/SynapseAPI/dataaccess/useDataAccessSubmission.ts","../../src/lib/utils/synapseTypes/AccessSubmission.ts"],"sourcesContent":["import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { Submission } from '../../../synapseTypes/AccessRequirement/Submission'\nimport { SubmissionStateChangeRequest } from '../../../synapseTypes/AccessRequirement/SubmissionStateChangeRequest'\nimport {\n  SubmissionSearchRequest,\n  SubmissionSearchResponse,\n} from '../../../synapseTypes/AccessSubmission'\n\nconst dataAccessSubmissionQueryKeys = {\n  submission: (id: string | number) => ['dataAccessSubmission', id],\n  search: (params?: SubmissionSearchRequest) =>\n    params ? ['accessSubmissionSearch', params] : ['accessSubmissionSearch'],\n}\n\nexport default function useGetDataAccessSubmission(\n  submissionId: string | number,\n  options?: UseQueryOptions<Submission, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n\n  return useQuery<Submission, SynapseClientError>(\n    dataAccessSubmissionQueryKeys.submission(submissionId),\n    () => SynapseClient.getSubmissionById(submissionId, accessToken),\n    options,\n  )\n}\n\nexport function useSearchAccessSubmissionsInfinite(\n  params: SubmissionSearchRequest,\n  options?: UseInfiniteQueryOptions<\n    SubmissionSearchResponse,\n    SynapseClientError\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n\n  return useInfiniteQuery<SubmissionSearchResponse, SynapseClientError>(\n    dataAccessSubmissionQueryKeys.search(params),\n    async context => {\n      return await SynapseClient.searchAccessSubmission(\n        {\n          ...params,\n          nextPageToken: context.pageParam,\n        },\n        accessToken,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useUpdateDataAccessSubmissionState(\n  options?: UseMutationOptions<\n    Submission,\n    SynapseClientError,\n    SubmissionStateChangeRequest\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<\n    Submission,\n    SynapseClientError,\n    SubmissionStateChangeRequest\n  >(\n    (request: SubmissionStateChangeRequest): Promise<Submission> =>\n      SynapseClient.updateSubmissionStatus(request, accessToken),\n    {\n      ...options,\n      onSuccess: async (updatedSubmission, variables, ctx) => {\n        // Invalidate all searches, since updating the status will affect filtered search results\n        queryClient.invalidateQueries(dataAccessSubmissionQueryKeys.search())\n        // Update the query data for the updated submission\n        queryClient.setQueryData(\n          dataAccessSubmissionQueryKeys.submission(variables.submissionId),\n          updatedSubmission,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedSubmission, variables, ctx)\n        }\n      },\n    },\n  )\n}\n","import { SortDirection } from './AccessApproval'\nimport { AccessType, SubmissionState } from './AccessRequirement'\n\nexport enum SubmissionReviewerFilterType {\n  ALL = 'ALL',\n  ACT_ONLY = 'ACT_ONLY',\n  DELEGATED_ONLY = 'DELEGATED_ONLY',\n}\n\nexport enum SubmissionSortField {\n  MODIFIED_ON = 'MODIFIED_ON',\n  CREATED_ON = 'CREATED_ON',\n}\n\nexport interface SubmissionSearchSort {\n  field: SubmissionSortField\n  direction: SortDirection\n}\n\nexport interface AccessorChange {\n  userId: string\n  type: AccessType\n}\n\nexport interface SubmissionSearchRequest {\n  accessorId?: string\n  accessRequirementId?: string\n  submissionState?: SubmissionState\n  reviewerId?: string\n  reviewerFilterType?: SubmissionReviewerFilterType\n  sort?: SubmissionSearchSort[]\n  nextPageToken?: string\n}\n\nexport interface SubmissionSearchResult {\n  id: string\n  createdOn: string\n  modifiedOn: string\n  accessRequirementId: string\n  accessRequirementVersion: string\n  accessRequirementName: string\n  accessRequirementReviewerIds: string[]\n  submitterId: string\n  accessorChanges: AccessorChange[]\n  state: SubmissionState\n}\n\nexport interface SubmissionSearchResponse {\n  results: SubmissionSearchResult[]\n  nextPageToken?: string\n}\n"],"names":["SynapseClient.getSubmissionById","SynapseClient.searchAccessSubmission","SynapseClient.updateSubmissionStatus"],"mappings":"+FAmBA,KAAM,GAAgC,CACpC,WAAY,AAAC,GAAwB,CAAC,uBAAwB,CAAE,EAChE,OAAQ,AAAC,GACP,EAAS,CAAC,yBAA0B,CAAM,EAAI,CAAC,wBAAwB,CAC3E,EAEA,WACE,EACA,EACA,CACM,KAAA,CAAE,eAAgB,IAEjB,MAAA,GACL,EAA8B,WAAW,CAAY,EACrD,IAAMA,EAAgC,EAAc,CAAW,EAC/D,CACF,CACF,CAEO,WACL,EACA,EAIA,CACM,KAAA,CAAE,eAAgB,IAExB,MAAO,GACL,EAA8B,OAAO,CAAM,EAC3C,KAAM,IACG,KAAMC,GACX,CACE,GAAG,EACH,cAAe,EAAQ,WAEzB,CACF,EAEF,CACE,GAAG,EACH,iBAAkB,GAAQ,EAAK,aAAA,CAEnC,CACF,CAEO,WACL,EAKA,CACA,KAAM,GAAc,IACd,CAAE,eAAgB,IAExB,MAAO,GAKL,AAAC,GACCC,EAAqC,EAAS,CAAW,EAC3D,CACE,GAAG,EACH,UAAW,MAAO,EAAmB,EAAW,IAAQ,CAE1C,EAAA,kBAAkB,EAA8B,OAAQ,CAAA,EAEpE,EAAY,aACV,EAA8B,WAAW,EAAU,YAAY,EAC/D,CACF,EAEI,WAAS,WACX,KAAM,GAAQ,UAAU,EAAmB,EAAW,CAAG,CAE7D,CAAA,CAEJ,CACF,CC1FY,GAAA,IAAA,GACI,GAAA,YAAA,cACD,EAAA,WAAA,aAFH,IAAA,GAAA,CAAA,CAAA"}