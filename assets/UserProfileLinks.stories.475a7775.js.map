{"version":3,"file":"UserProfileLinks.stories.475a7775.js","sources":["../../src/lib/utils/hooks/SynapseAPI/user/useGetUserChallenges.ts","../../src/lib/utils/hooks/SynapseAPI/user/useGetUserProjects.ts","../../src/lib/utils/hooks/SynapseAPI/user/useGetUserTeams.ts","../../src/lib/containers/user_profile_links/UserChallenges.tsx","../../src/lib/containers/user_profile_links/UserProjects.tsx","../../src/lib/containers/user_profile_links/UserTeams.tsx","../../src/lib/containers/user_profile_links/UserProfileLinks.tsx"],"sourcesContent":["import { useInfiniteQuery, UseInfiniteQueryOptions } from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { ChallengeWithProjectHeaderPagedResults } from '../../../synapseTypes/ChallengePagedResults'\n\nexport function useGetUserChallengesInfinite(\n  userId: string,\n  options?: UseInfiniteQueryOptions<\n    ChallengeWithProjectHeaderPagedResults,\n    SynapseClientError,\n    ChallengeWithProjectHeaderPagedResults\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n\n  return useInfiniteQuery<\n    ChallengeWithProjectHeaderPagedResults,\n    SynapseClientError\n  >(\n    ['getuserchallenges', userId],\n    async context => {\n      const challenges = await SynapseClient.getUserChallenges(\n        accessToken,\n        userId,\n        context.pageParam, // pass the context.pageParam for the new offset\n        10, // limit\n      )\n      // also look up the challenge project names (if there are challenges)\n      if (challenges.results.length > 0) {\n        const challengeProjectIds = Array.from(\n          challenges.results,\n          challenge => challenge.projectId,\n        )\n        const challengeProjects = await SynapseClient.getEntityHeadersByIds(\n          challengeProjectIds,\n        )\n        const challengeWithProjectHeaderPagedResults: ChallengeWithProjectHeaderPagedResults =\n          {\n            results: Array.from(challenges.results, (challenge, index) => {\n              return {\n                challenge,\n                projectHeader: challengeProjects.results[index],\n              }\n            }),\n            totalNumberOfResults: challenges.totalNumberOfResults,\n          }\n        return challengeWithProjectHeaderPagedResults\n      }\n      return {\n        results: [],\n        totalNumberOfResults: challenges.totalNumberOfResults,\n      }\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        if (lastPage.results.length > 0)\n          return pages.length * 10 //set the new offset to (page * limit)\n        else return undefined\n      },\n    },\n  )\n}\n","import { useInfiniteQuery, UseInfiniteQueryOptions } from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { ProjectHeaderList } from '../../../synapseTypes'\nimport { GetProjectsParameters } from '../../../synapseTypes/GetProjectsParams'\n\nexport function useGetUserProjectsInfinite(\n  userId: string,\n  projectParams: GetProjectsParameters,\n  options?: UseInfiniteQueryOptions<\n    ProjectHeaderList,\n    SynapseClientError,\n    ProjectHeaderList\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n\n  return useInfiniteQuery<ProjectHeaderList, SynapseClientError>(\n    ['getuserprojects', userId, projectParams],\n    async context => {\n      return SynapseClient.getUserProjects(\n        userId,\n        { ...projectParams, nextPageToken: context.pageParam },\n        accessToken,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n","import { useInfiniteQuery, UseInfiniteQueryOptions } from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { PaginatedResults } from '../../../synapseTypes'\nimport { Team } from '../../../synapseTypes/Team'\n\nexport function useGetUserTeamsInfinite(\n  userId: string,\n  options?: UseInfiniteQueryOptions<\n    PaginatedResults<Team>,\n    SynapseClientError,\n    PaginatedResults<Team>\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n\n  return useInfiniteQuery<PaginatedResults<Team>, SynapseClientError>(\n    ['getuserteams', userId],\n    async context => {\n      return SynapseClient.getUserTeamList(\n        accessToken,\n        userId,\n        context.pageParam, // pass the context.pageParam for the new offset\n        10, // limit\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        if (lastPage.results.length > 0)\n          return pages.length * 10 //set the new offset to (page * limit)\n        else return undefined\n      },\n    },\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { useInView } from 'react-intersection-observer'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { useGetUserChallengesInfinite } from '../../utils/hooks/SynapseAPI/user/useGetUserChallenges'\nimport { ChallengeWithProjectHeader } from '../../utils/synapseTypes/ChallengePagedResults'\nimport { SkeletonTable } from '../../assets/skeletons/SkeletonTable'\n\nexport type UserChallengesProps = {\n  userId: string\n}\n\nexport default function UserChallenges({ userId }: UserChallengesProps) {\n  const handleError = useErrorHandler()\n  // Load the next page when this ref comes into view.\n  const { ref, inView } = useInView()\n  const {\n    data,\n    status,\n    isFetching,\n    isLoading,\n    hasNextPage,\n    fetchNextPage,\n    isError,\n    error: newError,\n  } = useGetUserChallengesInfinite(userId)\n\n  useEffect(() => {\n    if (isError && newError) {\n      handleError(newError)\n    }\n  }, [isError, newError, handleError])\n\n  useEffect(() => {\n    if (\n      status === 'success' &&\n      !isFetching &&\n      hasNextPage &&\n      fetchNextPage &&\n      inView\n    ) {\n      fetchNextPage()\n    }\n  }, [status, isFetching, hasNextPage, fetchNextPage, inView])\n\n  const allRows = data?.pages.flatMap(page => page.results) ?? []\n\n  return (\n    <>\n      {allRows.length > 0 && (\n        <>\n          {allRows.map((item: ChallengeWithProjectHeader) => {\n            if (item && item.challenge && item.projectHeader) {\n              // another option may be to use an EntityLink\n              return (\n                <p key={`user-challenge-list-item-${item.challenge.projectId}`}>\n                  <a\n                    target=\"_self\"\n                    rel=\"noopener noreferrer\"\n                    href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${item.challenge.projectId}/challenge`}\n                  >\n                    {item.projectHeader.name}\n                  </a>\n                </p>\n              )\n            } else return false\n          })}\n          {/* To trigger loading the next page */}\n          <div ref={ref} />\n        </>\n      )}\n      {!isFetching && allRows.length == 0 && <div>Empty</div>}\n      {isLoading && <SkeletonTable numRows={5} numCols={1} />}\n    </>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { useInView } from 'react-intersection-observer'\nimport { ProjectHeader } from '../../utils/synapseTypes'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { useGetUserProjectsInfinite } from '../../utils/hooks/SynapseAPI/user/useGetUserProjects'\nimport { GetProjectsParameters } from '../../utils/synapseTypes/GetProjectsParams'\nimport { SkeletonTable } from '../../assets/skeletons/SkeletonTable'\n\nexport type UserProjectsProps = {\n  userId: string\n}\n\nexport default function UserProjects({ userId }: UserProjectsProps) {\n  const handleError = useErrorHandler()\n  // Load the next page when this ref comes into view.\n  const { ref, inView } = useInView()\n  const getProjectsParameters: GetProjectsParameters = {}\n  const {\n    data,\n    status,\n    isFetching,\n    isLoading,\n    hasNextPage,\n    fetchNextPage,\n    isError,\n    error: newError,\n  } = useGetUserProjectsInfinite(userId, getProjectsParameters)\n\n  useEffect(() => {\n    if (isError && newError) {\n      handleError(newError)\n    }\n  }, [isError, newError, handleError])\n\n  useEffect(() => {\n    if (\n      status === 'success' &&\n      !isFetching &&\n      hasNextPage &&\n      fetchNextPage &&\n      inView\n    ) {\n      fetchNextPage()\n    }\n  }, [status, isFetching, hasNextPage, fetchNextPage, inView])\n\n  const allRows = data?.pages.flatMap(page => page.results) ?? []\n\n  return (\n    <>\n      {allRows.length > 0 && (\n        <>\n          {allRows.map((item: ProjectHeader) => {\n            if (item) {\n              // another option would be to use an EntityLink\n              return (\n                <p key={`user-project-list-item-${item.id}`}>\n                  <a\n                    target=\"_self\"\n                    rel=\"noopener noreferrer\"\n                    href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${item.id}`}\n                  >\n                    {item.name}\n                  </a>\n                </p>\n              )\n            } else return false\n          })}\n          {/* To trigger loading the next page */}\n          <div ref={ref} />\n        </>\n      )}\n      {!isFetching && allRows.length == 0 && <div>Empty</div>}\n      {isLoading && <SkeletonTable numRows={5} numCols={1} />}\n    </>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { useInView } from 'react-intersection-observer'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { useGetUserTeamsInfinite } from '../../utils/hooks/SynapseAPI/user/useGetUserTeams'\nimport { Team } from '../../utils/synapseTypes/Team'\nimport { SkeletonTable } from '../../assets/skeletons/SkeletonTable'\n\nexport type UserTeamsProps = {\n  userId: string\n}\n\nexport default function UserTeams({ userId }: UserTeamsProps) {\n  const handleError = useErrorHandler()\n  // Load the next page when this ref comes into view.\n  const { ref, inView } = useInView()\n  const {\n    data,\n    status,\n    isFetching,\n    isLoading,\n    hasNextPage,\n    fetchNextPage,\n    isError,\n    error: newError,\n  } = useGetUserTeamsInfinite(userId)\n\n  useEffect(() => {\n    if (isError && newError) {\n      handleError(newError)\n    }\n  }, [isError, newError, handleError])\n\n  useEffect(() => {\n    if (\n      status === 'success' &&\n      !isFetching &&\n      hasNextPage &&\n      fetchNextPage &&\n      inView\n    ) {\n      fetchNextPage()\n    }\n  }, [status, isFetching, hasNextPage, fetchNextPage, inView])\n\n  const allRows = data?.pages.flatMap(page => page.results) ?? []\n\n  return (\n    <>\n      {allRows.length > 0 && (\n        <>\n          {allRows.map((item: Team) => {\n            if (item) {\n              // another option would be to use an EntityLink\n              return (\n                <p key={`user-team-list-item-${item.id}`}>\n                  <a\n                    target=\"_self\"\n                    rel=\"noopener noreferrer\"\n                    href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Team:${item.id}`}\n                  >\n                    {item.name}\n                  </a>\n                </p>\n              )\n            } else return false\n          })}\n          {/* To trigger loading the next page */}\n          <div ref={ref} />\n        </>\n      )}\n      {!isFetching && allRows.length == 0 && <div>Empty</div>}\n      {isLoading && <SkeletonTable numRows={5} numCols={1} />}\n    </>\n  )\n}\n","import Skeleton from '@material-ui/lab/Skeleton'\nimport React, { useState } from 'react'\nimport { useGetUserProfile } from '../../utils/hooks/SynapseAPI/user/useUserBundle'\nimport Typography from '../../utils/typography/Typography'\nimport { SynapseErrorBoundary } from '../ErrorBanner'\nimport IconSvg, { Icon } from '../IconSvg'\nimport UserChallenges from './UserChallenges'\nimport UserProjects from './UserProjects'\nimport UserTeams from './UserTeams'\n\nexport enum UserProfileLinksTabs {\n  PROJECTS = 'Projects',\n  TEAMS = 'Teams',\n  CHALLENGES = 'Challenges',\n}\n\ntype UserProfileLinksProps = {\n  userId: string\n}\n\nfunction UserProfileLinks({ userId }: UserProfileLinksProps) {\n  const [currentTab, setCurrentTab] = useState<UserProfileLinksTabs>(\n    UserProfileLinksTabs.PROJECTS,\n  )\n  const { data: userProfile } = useGetUserProfile(userId)\n\n  function getIconName(currentTab: UserProfileLinksTabs): Icon {\n    switch (currentTab) {\n      case UserProfileLinksTabs.PROJECTS:\n        return 'dashboard'\n      case UserProfileLinksTabs.TEAMS:\n        return 'peopleTwoTone'\n      case UserProfileLinksTabs.CHALLENGES:\n        return 'challengesTwoTone'\n    }\n  }\n  return (\n    <div className=\"UserProfileLinks\">\n      <Typography variant=\"headline2\" className=\"title\">\n        {userProfile && <>{userProfile?.userName}&apos;s Items</>}\n        {!userProfile && <Skeleton width=\"75%\" />}\n      </Typography>\n      <div className=\"Tabs\">\n        {Object.keys(UserProfileLinksTabs).map((keyName: string) => {\n          return (\n            <div\n              className=\"Tab\"\n              role=\"tab\"\n              key={keyName}\n              onClick={e => {\n                e.stopPropagation()\n                setCurrentTab(UserProfileLinksTabs[keyName])\n              }}\n              aria-selected={UserProfileLinksTabs[keyName] === currentTab}\n            >\n              <Typography variant=\"buttonLink\">\n                <IconSvg\n                  options={{ icon: getIconName(UserProfileLinksTabs[keyName]) }}\n                />{' '}\n                {UserProfileLinksTabs[keyName]}\n              </Typography>\n            </div>\n          )\n        })}\n      </div>\n      <div className=\"TabContent\">\n        <SynapseErrorBoundary>\n          {currentTab === UserProfileLinksTabs.PROJECTS && (\n            <>\n              <UserProjects userId={userId} />\n            </>\n          )}\n          {currentTab === UserProfileLinksTabs.TEAMS && (\n            <>\n              <UserTeams userId={userId} />\n            </>\n          )}\n          {currentTab === UserProfileLinksTabs.CHALLENGES && (\n            <>\n              <UserChallenges userId={userId} />\n            </>\n          )}\n        </SynapseErrorBoundary>\n      </div>\n    </div>\n  )\n}\n\nexport default UserProfileLinks\n"],"names":["SynapseClient.getUserChallenges","SynapseClient.getEntityHeadersByIds","SynapseClient.getUserProjects","SynapseClient.getUserTeamList","useEffect","userId","ref","inView","data","status","isFetching","isLoading","hasNextPage","fetchNextPage","isError","newError","handleError","_jsxs","_Fragment","_jsx","projectId","name","id","PROJECTS","TEAMS","CHALLENGES","UserProfileLinksTabs","userProfile","currentTab","e","setCurrentTab"],"mappings":"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"}