{"version":3,"file":"Resources.stories.0dbf3d91.js","sources":["../../src/lib/containers/home_page/resources/Resources.Desktop.tsx","../../src/lib/containers/home_page/resources/Resources.Mobile.tsx","../../src/lib/containers/home_page/resources/Resources.tsx"],"sourcesContent":["import { Data } from './Resources'\nimport React, { useState } from 'react'\nimport MarkdownSynapse from '../../MarkdownSynapse'\n\nexport type ResourcesDesktopProps = {\n  data: Data\n}\n\nexport default function ResourcesDesktop({ data }: ResourcesDesktopProps) {\n  const [index, setIndex] = useState(0)\n  return (\n    <div className=\"control-container\">\n      <div className=\"button-container\">\n        {data?.map((el, curIndex) => {\n          return (\n            <button\n              className={index === curIndex ? 'isSelected' : ''}\n              onClick={() => setIndex(curIndex)}\n              key={el.name}\n            >\n              {el.name}\n            </button>\n          )\n        })}\n        {/* \n            This button keeps the border line in the button container running from top to bottom,\n            it doesn't have any functionality.\n          */}\n        <button className=\"gap-fill\" />\n      </div>\n      <div className=\"content-container\">\n        {data?.map((el, curIndex) => {\n          const { ownerId, wikiId } = el\n          return (\n            <span key={ownerId} className={index === curIndex ? '' : 'hide'}>\n              <MarkdownSynapse ownerId={ownerId} wikiId={wikiId} />\n            </span>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Data } from './Resources'\nimport MarkdownSynapse from '../../../containers/MarkdownSynapse'\nimport ExpandableContent from '../ExpandableContent'\n\nexport type ResourcesMobileProps = {\n  data: Data\n}\n\nexport default function ResourcesMobile({ data }: ResourcesMobileProps) {\n  return (\n    <div className=\"Resources_Mobile\">\n      {data.map(({ name, ownerId, wikiId }) => {\n        let title = <> {name} </>\n        let markdown = <MarkdownSynapse ownerId={ownerId} wikiId={wikiId} />\n        return <ExpandableContent title={title} content={markdown} />\n      })}\n    </div>\n  )\n}\n","import React from 'react'\nimport { QueryBundleRequest } from '../../../utils/synapseTypes'\nimport { SynapseConstants } from '../../../utils'\nimport { ErrorBanner } from '../../ErrorBanner'\nimport useGetQueryResultBundle from '../../../utils/hooks/SynapseAPI/entity/useGetQueryResultBundle'\nimport ResourcesDesktop from './Resources.Desktop'\nimport ResourcesMobile from './Resources.Mobile'\nimport useShowDesktop from '../../../utils/hooks/useShowDesktop'\nimport { getFieldIndex } from '../../../utils/functions/queryUtils'\n\nexport type ResourcesProps = {\n  entityId: string\n}\n\nenum ExpectedColumns {\n  NAME = 'Name',\n  WIKI = 'Wiki',\n}\n\nexport type Data = {\n  name: string\n  ownerId: string\n  wikiId: string\n}[]\n\nexport const Resources: React.FC<ResourcesProps> = (props: ResourcesProps) => {\n  const { entityId } = props\n  const showDesktop = useShowDesktop()\n\n  const queryBundleRequest: QueryBundleRequest = {\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    entityId,\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n      SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n    query: {\n      sql: `SELECT Name, Wiki FROM ${entityId} ORDER BY ItemOrder`,\n    },\n  }\n  const { data: queryResultBundle, error } =\n    useGetQueryResultBundle(queryBundleRequest)\n\n  const nameIndex = getFieldIndex(ExpectedColumns.NAME, queryResultBundle)\n  const wikiIndex = getFieldIndex(ExpectedColumns.WIKI, queryResultBundle)\n  const data: Data =\n    queryResultBundle?.queryResult?.queryResults.rows.map(el => {\n      const values = el.values\n      const name = values[nameIndex]\n      const wikiValue = values[wikiIndex] ?? ''\n      const split = wikiValue.split('/')\n      const ownerId = split[0]\n      const wikiId = split[2]\n      return {\n        name,\n        ownerId,\n        wikiId,\n      }\n    }) ?? []\n  return (\n    <div className=\"Resources\">\n      <ErrorBanner error={error} />\n      {showDesktop ? (\n        <ResourcesDesktop data={data} />\n      ) : (\n        <ResourcesMobile data={data} />\n      )}\n    </div>\n  )\n}\n\nexport default Resources\n"],"names":["data","_jsxs","_jsx","name","ownerId","wikiId","_Fragment","markdown","entityId","BUNDLE_MASK_QUERY_RESULTS","queryResultBundle","error"],"mappings":"utDACA,KAAA,GAAA,OAAA,MAAA,SAOA,WAAA,CAAyC,QAAEA,CACzC,KAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EACA,MAAAC,GAAA,MAAA,CACE,UAAA,oBAAe,SAAA,CAAAA,EAAA,MAAA,CACb,UAAA,mBAAe,SAAA,CAAA,iBAAA,IAAA,CAAA,EAAA,IAEXC,EAAA,SAAA,CACE,UAAA,IAAA,EAAA,aAAA,GACiD,QAAA,IAAA,EAAA,CAAA,EACxB,SAAA,EAAA,IAGnBC,EAAAA,EAAAA,IAAAA,GALND,EAAA,SAAA,CAaJ,UAAA,UAAkB,CAAA,CAAA,CAhBpB,CAAA,EAAAA,EAAA,MAAA,CAkBA,UAAA,oBAAe,SAAA,iBAAA,IAAA,CAAA,EAAA,IAAA,CAEX,KAAA,CAAM,UAAEE,UAASC,EACjB,MAAAH,GAAA,OAAA,CACE,UAAA,IAAA,EAAA,GAAA,OAAyD,SAAAA,EAAA,EAAA,CACvD,UAAiB,QAAkB,CAAA,CAAnC,EAAA,CAAA,CADF,EAHH,CAAA,CAAA,CApBL,CAAA,CA+BH,weCjCD,WAAA,CAAwC,QAAEF,CACxC,MAAAE,GAAA,MAAA,CACE,UAAA,mBAAe,SAAA,EAAA,IAAA,CAAA,CACF,OAAEC,UAAMC,YAGjBF,EAAA,EAAA,CAAO,MAFPD,EAAAK,EAAA,CAAY,SAAA,CAAA,IAAA,EAAA,GAAA,CAAA,CAAA,EAEc,QAD1BJ,EAAA,EAAA,CAAe,UAAiB,QAAkB,CAAA,CACDK,CAAAA,CAAjD,CAHD,CAAA,CAON,ieCMM,KAAA,GAAA,AAAA,GAAA,SACL,KAAA,CAAM,YAAEC,EACR,EAAA,IAEA,EAAA,CAA+C,aAAA,0DAC/B,WACdA,SAAAA,EAAAA,EAGmBC,MAAAA,CACZ,IAAA,0BAAA,sBAC0BD,CAD1B,EAIT,CAAM,KAAA,EAAQE,SAAmBC,EAAAA,CAAAA,EAGjC,EAAA,EAAA,OAAA,CAAA,EACA,EAAA,EAAA,OAAA,CAAA,EACA,EAAA,uBAAA,cAAA,cAAA,aAAA,KAAA,IAAA,AAAA,GAAA,OAEI,KAAA,GAAA,EAAA,OACA,EAAA,EAAA,GAEA,EAAA,AADA,MAAA,KAAA,OAAA,IACA,MAAA,GAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,MAAA,CAAO,OACLR,UACAC,QACAC,CAHK,KARX,OAQW,CAAA,EAMX,MAAAJ,GAAA,MAAA,CACE,UAAA,YAAe,SAAA,CAAAC,EAAA,EAAA,CACb,OAAa,CAAA,EAAA,EAAAA,EAAA,EAAA,CAEX,MAAkB,CAAA,EAAAA,EAAA,EAAA,CAElB,MAAiB,CAAA,CAAA,CALrB,CAAA,CASH,EAED,GAAA,GAAA;;;;;;;;;;;;;;;;;"}