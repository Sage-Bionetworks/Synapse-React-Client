const S=/^10.\d{4,9}\/[-._;()\/:a-z0-9]+$/i,u=/^(syn\d+)(?:\.(\d+))?$/;function l(e){const n=u.exec(e);return n&&{targetId:n[1],targetVersionNumber:n[2]?parseInt(n[2]):void 0}}const R=window.SQLParser.lexer,p=window.SQLParser.parser,x=/group by/im,A=e=>x.test(e),O=3,y=(e,n,t)=>{let s=t;t.match(u)&&(s=t.substring(O));const i=t.split(",").map(r=>`'${r}'`).join(",");switch(n){case"LIKE":return[["LITERAL",e,"1"],["OPERATOR",n,"1"],["STRING",`%${s}%`,"1"]];case"HAS":return[["LITERAL",e,"1"],["OPERATOR",n,"1"],["PARAMETER",`(${i})`,"1"]];default:return[["LITERAL",e,"1"],["OPERATOR",n,"1"],["STRING",t,"1"]]}},T=e=>{const n=e.findIndex(s=>s[0]==="WHERE");if(n!==-1)return n;let t=e.findIndex(s=>s[0]==="GROUP");return t!==-1||(t=e.findIndex(s=>s[0]==="HAVING"),t!==-1)||(t=e.findIndex(s=>s[0]==="ORDER"),t!==-1)||(t=e.findIndex(s=>s[0]==="EOF")),t},h=(e,n,t="LIKE")=>{if(!n)return e;const s=d=>d.startsWith("QueryWrapper"),i=Object.keys(n);if(i.length===0||i.every(s))return e;const r=R.tokenize(e),c=r.findIndex(d=>d[0]==="WHERE"),o=T(r),I=o+1;c===-1?r.splice(o,0,["WHERE","WHERE","1"]):r.splice(I,0,["CONDITIONAL","AND","1"]);const E=Object.keys(n).length;return Object.keys(n).forEach((d,f)=>{const a=y(d,t,n[d]);f<E-1&&a.unshift(["CONDITIONAL","AND","1"]),r.splice(I,0,...a)}),L(r)},L=e=>{e.forEach(r=>{r[0]==="DBLSTRING"&&(r[0]="LITERAL")});const n=e.findIndex(r=>r[0]==="DOT");if(n!==-1){const r=e[n-1][1],c=e[n+1][1],o=`${r}.${c}`;e.splice(n,2),e[n-1]=["LITERAL",o]}const t=p.parse(e).toString(),s=e[e.findIndex(r=>r[0]==="FROM")+1][1],i=`\`${s}\``;return t.replace(i,s)},m=e=>{const n=e.match(/(from)\s+(syn)\d+/gi);return n&&n[0]?n[0].substr(5).trim():""},g=e=>{const t=/from\s+(syn\d+)(?:\.(\d+))?/i.exec(e);return t?{entityId:t[1],versionNumber:t[2]?parseInt(t[2]):void 0}:null},N=(e,n)=>{const t=[],s=n.map(r=>r.values),i=e.map(r=>r.name);return s.forEach((r,c)=>{t[c]={},r.forEach((o,I)=>{t[c][i[I]]=o})}),t};export{S as D,u as S,m as a,g as b,h as c,L as f,A as i,l as p,N as r};
