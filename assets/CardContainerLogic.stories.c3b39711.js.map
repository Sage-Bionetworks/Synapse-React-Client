{"version":3,"file":"CardContainerLogic.stories.c3b39711.js","sources":["../../src/lib/containers/CardContainerLogic.tsx"],"sourcesContent":["import * as React from 'react'\nimport { SynapseConstants } from '../utils'\nimport {\n  insertConditionsFromSearchParams,\n  KeyValue,\n  parseEntityIdFromSqlStatement,\n  SQLOperator,\n} from '../utils/functions/sqlFunctions'\nimport { QueryBundleRequest } from '../utils/synapseTypes/'\nimport CardContainer from './CardContainer'\nimport { ErrorBanner } from './ErrorBanner'\nimport { GenericCardSchema, IconOptions } from './GenericCard'\nimport { IconSvgOptions } from './IconSvg'\nimport { QueryVisualizationWrapper } from './QueryVisualizationWrapper'\nimport { QueryContextConsumer } from './QueryContext'\nimport { InfiniteQueryWrapper } from './InfiniteQueryWrapper'\n\n/**\n *  Used when a column value should link to an external URL defined by a value in another column.\n *  Currently only works in SynapseTable (not cards!)\n */\nexport interface ColumnSpecifiedLink {\n  isMarkdown: false\n  /* The column which should have the displayed value */\n  matchColumnName: string\n  /* The column which has the link. If the link is empty, the value will be displayed without a link. */\n  linkColumnName: string\n  // If set, also show a tooltip\n  tooltipText?: string\n}\n\nexport interface CardLink {\n  baseURL: string\n  // the key that will go into the url\n  URLColumnName: string\n  // the column name who's value will be used\n  matchColumnName: string\n  isMarkdown: false\n  // the value that will go into the url link should be surrounded with parenthesis, making the search\n  // param study=(ROSMAP) instead of study=ROSMAP\n  wrapValueWithParens?: boolean\n  // If set and a value exists in this column for the row, just use this value for the href\n  overrideLinkURLColumnName?: string\n  // If set, also show a tooltip\n  tooltipText?: string\n}\n\nexport type MarkdownLink = {\n  isMarkdown: true\n  // the columns whos value will be used for the markdown\n  matchColumnName: string\n  // If set, also show a tooltip\n  tooltipText?: string\n}\n\nexport type CTACardLink = {\n  // link text\n  text: string\n  // column name to use for href\n  link: string\n}\n\nexport type DescriptionConfig = {\n  isMarkdown?: boolean\n  showFullDescriptionByDefault?: boolean\n}\n\n// Specify the indices in the values [] that should be rendered specially\nexport type LabelLinkConfig = (MarkdownLink | CardLink | ColumnSpecifiedLink)[]\n\nexport type ColumnIconConfigs = {\n  columns: {\n    [index: string]: {\n      [index: string]: IconSvgOptions\n    }\n  }\n}\n\nexport type CommonCardProps = {\n  genericCardSchema?: GenericCardSchema\n  secondaryLabelLimit?: number\n  titleLinkConfig?: CardLink\n  ctaLinkConfig?: CTACardLink\n  labelLinkConfig?: LabelLinkConfig\n  descriptionConfig?: DescriptionConfig\n  rgbIndex?: number\n  columnIconOptions?: ColumnIconConfigs\n}\nexport type CardConfiguration = {\n  type: string\n  hasInternalLink?: boolean\n  iconOptions?: IconOptions\n} & CommonCardProps\n\nexport type CardContainerLogicProps = {\n  limit?: number\n  title?: string\n  unitDescription?: string\n  sqlOperator?: SQLOperator\n  searchParams?: KeyValue\n  facetAliases?: Record<string, string>\n  rgbIndex?: number\n  isHeader?: boolean\n  isAlignToLeftNav?: boolean\n  sql: string\n} & CardConfiguration\n\n/**\n * Class wraps around CardContainer and serves as a standalone logic container for rendering cards.\n */\nexport const CardContainerLogic = (props: CardContainerLogicProps) => {\n  const sql = insertConditionsFromSearchParams(\n    props.sql,\n    props.searchParams,\n    props.sqlOperator,\n  )\n  const initQueryRequest: QueryBundleRequest = {\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    entityId: parseEntityIdFromSqlStatement(sql),\n    query: {\n      sql: sql,\n      limit: props.limit,\n    },\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_RESULTS |\n      SynapseConstants.BUNDLE_MASK_QUERY_COUNT |\n      SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n      SynapseConstants.BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE |\n      SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n      SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n      SynapseConstants.BUNDLE_MASK_SUM_FILES_SIZE_BYTES |\n      SynapseConstants.BUNDLE_MASK_LAST_UPDATED_ON,\n  }\n\n  return (\n    <InfiniteQueryWrapper {...props} initQueryRequest={initQueryRequest}>\n      <QueryVisualizationWrapper\n        rgbIndex={props.rgbIndex}\n        unitDescription={props.unitDescription}\n        facetAliases={props.facetAliases}\n      >\n        <CardContainer {...props} />\n        <QueryContextConsumer>\n          {queryContext => <ErrorBanner error={queryContext?.error} />}\n        </QueryContextConsumer>\n      </QueryVisualizationWrapper>\n    </InfiniteQueryWrapper>\n  )\n}\n\nexport default CardContainerLogic\n"],"names":["sql","limit","SynapseConstants.BUNDLE_MASK_QUERY_RESULTS","SynapseConstants.BUNDLE_MASK_QUERY_COUNT","SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS","SynapseConstants.BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE","SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS","SynapseConstants.BUNDLE_MASK_QUERY_FACETS","SynapseConstants.BUNDLE_MASK_SUM_FILES_SIZE_BYTES","SynapseConstants.BUNDLE_MASK_LAST_UPDATED_ON","BUNDLE_MASK_LAST_UPDATED_ON","_jsx","props","_jsxs","rgbIndex","unitDescription","facetAliases","error"],"mappings":"44GA8GO,KAAA,GAAA,AAAA,GAAA,CACL,KAAA,GAAA,EAAA,EAAA,IAAA,EAAA,aAAA,EAAA,WAAA,EAKA,EAAA,CAA6C,aAAA,0DAC7B,SAAA,EAAA,CAAA,EACyB,MAAA,CAChC,MACLA,MAAAA,EAAAA,KACaC,EAFR,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAYYC,EAGrB,MAAAC,GAAA,EAAA,CACE,GAAA,EAA0BC,mBAAO,SAAAC,EAAA,EAAA,CAC/B,SAAA,EAAA,SACkBC,gBAAAA,EAAAA,gBACOC,aAAAA,EAAAA,aACHC,SAAAA,CAAAA,EAAAA,EAAAA,CAEDJ,GAAAA,CAAAA,CAAAA,EAAAA,EAAAA,EAAAA,CACnB,SAAA,AAAA,GAAAD,EAAA,EAAA,CACmB,MAAA,iBAAA,KAAkCM,CAAAA,CAAlC,CAAA,CAAA,CAPrB,CAAA,CAAA,CAAA,CAYL,EAED,GAAA,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}