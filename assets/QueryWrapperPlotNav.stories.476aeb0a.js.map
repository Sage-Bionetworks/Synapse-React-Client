{"version":3,"file":"QueryWrapperPlotNav.stories.476aeb0a.js","sources":["../../src/lib/utils/functions/testDownloadSpeed.ts","../../src/lib/containers/download_list/DownloadDetails.tsx","../../src/lib/containers/download_list/DownloadConfirmation.tsx","../../src/lib/containers/query_wrapper_plot_nav/FilterAndView.tsx","../../src/lib/containers/query_wrapper_plot_nav/QueryFilterToggleButton.tsx","../../src/lib/containers/query_wrapper_plot_nav/QueryWrapperPlotNav.tsx"],"sourcesContent":["import { getEntity, getFileHandleContent, getFiles } from '../SynapseClient'\nimport { FileEntity } from '../synapseTypes/'\nimport { Entity } from '../synapseTypes/'\nimport { BatchFileResult } from '../synapseTypes/'\nimport { FileHandle } from '../synapseTypes/'\nimport { BatchFileRequest } from '../synapseTypes/'\nimport {\n  FileHandleAssociation,\n  FileHandleAssociateType,\n} from '../synapseTypes/'\n\nconst ESTIMATED_CORS_TIME_MS: number = 200\nconst ESTIMATED_DOWNLOAD_SPEED_EXPIRE_TIME_KEY: string =\n  'ESTIMATED_DOWNLOAD_SPEED_EXPIRE_TIME'\nconst ESTIMATED_DOWNLOAD_SPEED_KEY: string = 'ESTIMATED_DOWNLOAD_SPEED'\nconst TEST_FILE_ENTITY_ID: string = 'syn12600511'\n/**\n * Return the estimated download speed (bytes/second).  Result is cached.\n * Result is crude estimate since it's a single test file (small sample, only ~2MB), but is a valid test (since it's a Synapse file on s3).\n * The intent is to let the user know if the package download will take many hours to download.\n * @param accessToken\n */\nexport const testDownloadSpeed = (accessToken: string): Promise<number> => {\n  return new Promise((resolve, reject) => {\n    // check cache\n    const cachedSpeedExpireTime = localStorage.getItem(\n      ESTIMATED_DOWNLOAD_SPEED_EXPIRE_TIME_KEY,\n    )\n    const cachedSpeed = localStorage.getItem(ESTIMATED_DOWNLOAD_SPEED_KEY)\n    if (cachedSpeedExpireTime && cachedSpeed) {\n      // is this value expired?\n      const now: number = new Date().getTime()\n      if (now < Number(cachedSpeedExpireTime)) {\n        resolve(Number(cachedSpeed))\n        return\n      }\n    }\n\n    /**\n     * 1.  Get the test File Entity\n     * 2.  Get the file handle and presigned URL associated to the latest version of the test File Entity\n     * 3.  Start the timer and fetch the file content using that presigned URL\n     */\n    getEntity(accessToken, TEST_FILE_ENTITY_ID)\n      .then((entity: Entity) => {\n        const fileEntity: FileEntity = entity as FileEntity\n        const fileHandleAssociationList: FileHandleAssociation[] = [\n          {\n            associateObjectId: fileEntity.id!,\n            associateObjectType: FileHandleAssociateType.FileEntity,\n            fileHandleId: fileEntity.dataFileHandleId,\n          },\n        ]\n        const request: BatchFileRequest = {\n          includeFileHandles: true,\n          includePreSignedURLs: true,\n          includePreviewPreSignedURLs: false,\n          requestedFiles: fileHandleAssociationList,\n        }\n        getFiles(request, accessToken).then((data: BatchFileResult) => {\n          const presignedUrl: string = data.requestedFiles[0].preSignedURL!\n          // we know this file exists\n          const fileHandle: FileHandle = data.requestedFiles[0].fileHandle!\n          // start test!\n          const startMs = new Date().getTime()\n          return getFileHandleContent(fileHandle, presignedUrl).then(() => {\n            // console.log(`Transferred ${fileHandle.contentSize/1000000} MB in ${((new Date().getTime() - startMs - ESTIMATED_CORS_TIME_MS)/1000)} seconds`)\n            // bytes/second\n            const result =\n              fileHandle.contentSize /\n              ((new Date().getTime() - startMs - ESTIMATED_CORS_TIME_MS) / 1000)\n            // save result in cache (for 5 minutes)\n            const now: number = new Date().getTime()\n            localStorage.setItem(\n              ESTIMATED_DOWNLOAD_SPEED_EXPIRE_TIME_KEY,\n              (now + 1000 * 60 * 5).toString(),\n            )\n            localStorage.setItem(\n              ESTIMATED_DOWNLOAD_SPEED_KEY,\n              result.toString(),\n            )\n            resolve(result)\n          })\n        })\n      })\n      .catch(err => reject(err))\n  })\n}\n","import React, { useState, useEffect } from 'react'\nimport { testDownloadSpeed } from '../../utils/functions/testDownloadSpeed'\nimport { calculateFriendlyFileSize } from '../../utils/functions/calculateFriendlyFileSize'\nimport ReactTooltip from 'react-tooltip'\nimport moment from 'moment'\nimport { TOOLTIP_DELAY_SHOW } from '../table/SynapseTableConstants'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { SkeletonInlineBlock } from '../../assets/skeletons/SkeletonInlineBlock'\nimport IconSvg from '../IconSvg'\n\nexport type DownloadDetailsProps = {\n  numFiles: number\n  numBytes?: number\n}\n\ntype State = {\n  isLoading: boolean\n  downloadSpeed: number\n}\n\n/**\n * Displays download information including number of files, size of download, and time to download.\n * Prefer to use {@link download_list_v2/DownloadDetails} instead, particularly when you have information about file packaging in/eligibility\n * @param props\n * @returns\n */\nexport default function DownloadDetails(props: DownloadDetailsProps) {\n  const { numFiles, numBytes } = props\n  const { accessToken } = useSynapseContext()\n\n  const [state, setState] = useState<State>({\n    isLoading: !!numBytes, // figure out the estimated download time iff we were given a byte count\n    downloadSpeed: 0,\n  })\n  const { isLoading, downloadSpeed } = state\n\n  useEffect(() => {\n    if (accessToken) {\n      testDownloadSpeed(accessToken).then(speed => {\n        setState({\n          isLoading: false,\n          downloadSpeed: speed,\n        })\n      })\n    }\n  }, [accessToken])\n\n  const timeEstimateInSeconds =\n    isLoading || downloadSpeed === 0 || !numBytes ? 0 : numBytes / downloadSpeed\n  const isTimeEstimateLoading = timeEstimateInSeconds === 0\n  const friendlyTime = isTimeEstimateLoading\n    ? ''\n    : moment.duration(timeEstimateInSeconds, 'seconds').humanize()\n  const numBytesTooltipId = 'num_bytes_id'\n  const friendlyTimeTooltipId = 'friendly_time_id'\n\n  const isZeroFiles = numFiles === 0\n  const fileCountIconClass = isZeroFiles\n    ? 'SRC-inactive'\n    : 'SRC-primary-text-color'\n\n  const timeEstimateIconClass = isTimeEstimateLoading\n    ? 'SRC-inactive'\n    : 'SRC-primary-text-color'\n  return (\n    <span className=\"download-details-container\">\n      <span>\n        <span className={fileCountIconClass}>\n          <IconSvg options={{ icon: 'file' }} />\n        </span>\n        {isZeroFiles ? (\n          <SkeletonInlineBlock width={50} />\n        ) : (\n          <> {numFiles}&nbsp;files </>\n        )}\n      </span>\n      {numBytes && (\n        <span\n          data-for={numBytesTooltipId}\n          data-tip=\"This is the total size of all files. Zipped package(s) will likely be smaller.\"\n          data-testid=\"numBytesUI\"\n        >\n          <ReactTooltip\n            delayShow={TOOLTIP_DELAY_SHOW}\n            place=\"top\"\n            type=\"dark\"\n            effect=\"solid\"\n            id={numBytesTooltipId}\n          />\n          <span className={timeEstimateIconClass}>\n            <IconSvg options={{ icon: 'database' }} />\n          </span>\n          {isTimeEstimateLoading ? (\n            <SkeletonInlineBlock width={50} />\n          ) : (\n            calculateFriendlyFileSize(numBytes)\n          )}\n        </span>\n      )}\n      {numBytes && (\n        <span\n          data-for={friendlyTimeTooltipId}\n          data-tip=\"This is an estimate of how long package download will take.\"\n          data-testid=\"downloadTimeEstimateUI\"\n        >\n          <ReactTooltip\n            delayShow={TOOLTIP_DELAY_SHOW}\n            place=\"top\"\n            type=\"dark\"\n            effect=\"solid\"\n            id={friendlyTimeTooltipId}\n          />\n          <span className={timeEstimateIconClass}>\n            <IconSvg options={{ icon: 'clock' }} />\n          </span>\n          {isLoading && numFiles > 0 ? (\n            <SkeletonInlineBlock width={50} />\n          ) : (\n            friendlyTime\n          )}\n        </span>\n      )}\n    </span>\n  )\n}\n","import React, { useCallback, useState } from 'react'\nimport { Alert } from 'react-bootstrap'\nimport useDeepCompareEffect from 'use-deep-compare-effect'\nimport { SynapseClient, SynapseConstants } from '../../utils'\nimport { useGetDownloadListStatistics } from '../../utils/hooks/SynapseAPI/useGetDownloadListStatistics'\nimport { useGetEntityChildren } from '../../utils/hooks/SynapseAPI/entity/useGetEntityChildren'\nimport useGetQueryResultBundle from '../../utils/hooks/SynapseAPI/entity/useGetQueryResultBundle'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { EntityType, QueryBundleRequest } from '../../utils/synapseTypes/'\nimport { AddToDownloadListRequest } from '../../utils/synapseTypes/DownloadListV2/AddToDownloadListRequest'\nimport { FilesStatisticsResponse } from '../../utils/synapseTypes/DownloadListV2/QueryResponseDetails'\nimport { TopLevelControlsState } from '../QueryVisualizationWrapper'\nimport {\n  QUERY_FILTERS_COLLAPSED_CSS,\n  QUERY_FILTERS_EXPANDED_CSS,\n} from '../QueryWrapper'\nimport SignInButton from '../SignInButton'\nimport { displayToast } from '../ToastMessage'\nimport DownloadDetails from './DownloadDetails'\n\nenum StatusEnum {\n  LOADING_INFO,\n  PROCESSING,\n  INFO,\n  INFO_ITEMS_IN_LIST,\n  SIGNED_OUT,\n}\n\nexport type DownloadConfirmationProps = {\n  fnClose?: () => void\n  getLastQueryRequest?: () => QueryBundleRequest\n  folderId?: string\n  topLevelControlsState?: TopLevelControlsState\n  setTopLevelControlsState?: React.Dispatch<\n    React.SetStateAction<TopLevelControlsState>\n  >\n  downloadCartPageUrl?: string\n}\n\n// add files to download list\nasync function addToDownload(\n  token: string,\n  closeConfirmationFn: () => void,\n  queryBundleRequest?: QueryBundleRequest,\n  folderId?: string,\n  goToDownloadListFn?: () => void,\n): Promise<[StatusEnum, string]> {\n  try {\n    const req: AddToDownloadListRequest = {\n      query: queryBundleRequest?.query,\n      concreteType:\n        'org.sagebionetworks.repo.model.download.AddToDownloadListRequest',\n      parentId: folderId,\n    }\n    await SynapseClient.addFilesToDownloadListV2(req, token)\n    displayToast(\n      'File(s) were successfully added to your Download List.',\n      'success',\n      {\n        primaryButtonConfig: {\n          text: 'View Download List',\n          onClick: goToDownloadListFn,\n        },\n      },\n    )\n    closeConfirmationFn()\n    return [StatusEnum.LOADING_INFO, '']\n  } catch (error) {\n    displayToast('danger', undefined, error.reason)\n    closeConfirmationFn()\n    return [StatusEnum.LOADING_INFO, '']\n  }\n}\n\ntype UiStateDictionary = {\n  [key: string]: {\n    className: string\n    infoText: string | JSX.Element\n    closeText: string\n  }\n}\n\n// css classes, text, and close button text associated with different stages\nconst StatusConstruct: UiStateDictionary = {\n  [StatusEnum.INFO]: {\n    className: 'alert-info',\n    infoText: 'Would you like to add all files to the download list?',\n    closeText: 'Cancel',\n  },\n  [StatusEnum.INFO_ITEMS_IN_LIST]: {\n    className: 'alert-info',\n    infoText: (\n      <>\n        Note: Files that you add will be mixed in with the files already in your\n        download list.\n        <br />\n        If you don’t want to mix these files, clear your download list before\n        continuing.\n      </>\n    ),\n    closeText: 'Cancel',\n  },\n  [StatusEnum.PROCESSING]: {\n    className: 'alert-info',\n    infoText: 'Adding Files To List',\n    closeText: 'Cancel',\n  },\n\n  [StatusEnum.LOADING_INFO]: {\n    className: 'alert-info',\n    infoText: 'Calculating File Size',\n    closeText: 'Cancel',\n  },\n  [StatusEnum.SIGNED_OUT]: {\n    className: 'alert-danger',\n    closeText: 'Close',\n    infoText: (\n      <>\n        Please <SignInButton style={{ color: '#337ab7' }} /> to add files to\n        your download list.\n      </>\n    ),\n  },\n}\n\nconst DownloadConfirmationContent = (props: {\n  status: StatusEnum\n  fileCount: number\n  fileSize?: number\n}): JSX.Element => {\n  switch (props.status) {\n    case StatusEnum.LOADING_INFO:\n    case StatusEnum.PROCESSING:\n      return (\n        <div>\n          <span className={'spinner white'} />\n          <span className={'spinner__text'}>\n            {StatusConstruct[props.status].infoText}\n          </span>\n        </div>\n      )\n\n    case StatusEnum.SIGNED_OUT:\n      return <>{StatusConstruct[props.status].infoText}</>\n    case StatusEnum.INFO:\n    case StatusEnum.INFO_ITEMS_IN_LIST:\n      return (\n        <>\n          <DownloadDetails\n            numFiles={props.fileCount}\n            numBytes={props.fileSize}\n          ></DownloadDetails>\n          <span className=\"download-confirmation-infoText\">\n            {StatusConstruct[props.status].infoText}\n          </span>\n        </>\n      )\n\n    default:\n      return <></>\n  }\n}\n\n//============= DownloadConfirmation component =============\n\nexport const DownloadConfirmation: React.FunctionComponent<\n  DownloadConfirmationProps\n> = ({\n  getLastQueryRequest,\n  folderId,\n  fnClose,\n  setTopLevelControlsState,\n  topLevelControlsState,\n  downloadCartPageUrl = '/DownloadCart',\n}) => {\n  const { accessToken } = useSynapseContext()\n  const { showDownloadConfirmation = true } = topLevelControlsState ?? {}\n  const [status, setStatus] = useState<StatusEnum>(\n    accessToken ? StatusEnum.LOADING_INFO : StatusEnum.SIGNED_OUT,\n  )\n\n  const [fileCount, setFileCount] = useState(0)\n  const [fileSize, setFileSize] = useState<number>()\n\n  const { data: downloadListStatistics, refetch } =\n    useGetDownloadListStatistics()\n\n  const lastQueryRequest = getLastQueryRequest!()\n  // is not defined (configured for a container)\n  const [showDownloadList, setShowDownloadList] = useState(false)\n  const updateStats = useCallback(\n    (\n      count?: number,\n      bytes?: number,\n      downloadListStatistics?: FilesStatisticsResponse,\n    ) => {\n      if (accessToken && downloadListStatistics) {\n        const hasFilesInDownloadList =\n          downloadListStatistics.totalNumberOfFiles > 0\n\n        const fileCount = count ?? 0\n        setStatus(\n          hasFilesInDownloadList\n            ? StatusEnum.INFO_ITEMS_IN_LIST\n            : StatusEnum.INFO,\n        )\n        setFileCount(fileCount)\n        setFileSize(bytes)\n      }\n    },\n    [accessToken],\n  )\n\n  const { data: entityChildrenData, isSuccess } = useGetEntityChildren({\n    parentId: folderId,\n    includeSumFileSizes: true,\n    includeTotalChildCount: true,\n    includeTypes: [EntityType.FILE],\n  })\n  useDeepCompareEffect(() => {\n    if (isSuccess && entityChildrenData && downloadListStatistics) {\n      updateStats(\n        entityChildrenData.totalChildCount,\n        entityChildrenData.sumFileSizesBytes,\n        downloadListStatistics,\n      )\n    }\n  }, [\n    updateStats,\n    folderId,\n    isSuccess,\n    entityChildrenData,\n    downloadListStatistics,\n  ])\n\n  const partMask =\n    SynapseConstants.BUNDLE_MASK_QUERY_COUNT |\n    SynapseConstants.BUNDLE_MASK_SUM_FILES_SIZE_BYTES\n\n  const queryBundleRequestSizeInformation: QueryBundleRequest = {\n    ...lastQueryRequest,\n    partMask,\n  }\n\n  const { data: queryResultBundle } = useGetQueryResultBundle(\n    queryBundleRequestSizeInformation,\n  )\n\n  useDeepCompareEffect(() => {\n    if (queryResultBundle && downloadListStatistics) {\n      const isGreaterThanReportedValue =\n        queryResultBundle.sumFileSizes?.greaterThan\n      updateStats(\n        queryResultBundle.queryCount,\n        isGreaterThanReportedValue\n          ? undefined\n          : queryResultBundle.sumFileSizes?.sumFileSizesBytes,\n        downloadListStatistics,\n      )\n    }\n  }, [updateStats, lastQueryRequest, queryResultBundle, downloadListStatistics])\n\n  const onCancel = fnClose\n    ? () => fnClose()\n    : () => {\n        if (setTopLevelControlsState) {\n          setTopLevelControlsState(topLevelControlsState => ({\n            ...topLevelControlsState,\n            showDownloadConfirmation: false,\n          }))\n        }\n      }\n\n  const triggerAddToDownload = async () => {\n    if (!accessToken) {\n      setStatus(StatusEnum.SIGNED_OUT)\n    } else {\n      setStatus(StatusEnum.PROCESSING)\n      const goToDownloadListFn = () => setShowDownloadList(true)\n      const result = await addToDownload(\n        accessToken,\n        onCancel,\n        lastQueryRequest,\n        folderId,\n        goToDownloadListFn,\n      )\n      const newStatus = result[0]\n      setStatus(newStatus)\n      refetch()\n    }\n  }\n\n  if (showDownloadList) {\n    // go to the Download Cart Page\n    if (downloadCartPageUrl) window.location.href = downloadCartPageUrl\n    else\n      console.error(\n        'Missing the Download Cart Page URL in the component configuration.',\n      )\n  }\n  const showFacetFilter = topLevelControlsState?.showFacetFilter\n  return (\n    <>\n      <Alert\n        dismissible={false}\n        show={true}\n        variant={'info'}\n        transition={false}\n        className={`download-confirmation ${\n          StatusConstruct[status].className\n        } ${showDownloadConfirmation ? '' : 'hidden'}\n          ${\n            showFacetFilter\n              ? QUERY_FILTERS_EXPANDED_CSS\n              : QUERY_FILTERS_COLLAPSED_CSS\n          }\n        `}\n      >\n        <DownloadConfirmationContent\n          status={status}\n          fileCount={fileCount}\n          fileSize={fileSize}\n        />\n        <div className=\"download-confirmation-action\">\n          {status !== StatusEnum.PROCESSING && (\n            <button className=\"btn btn-link\" onClick={onCancel}>\n              {StatusConstruct[status].closeText}\n            </button>\n          )}\n\n          {(status === StatusEnum.INFO ||\n            status === StatusEnum.INFO_ITEMS_IN_LIST) && (\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={triggerAddToDownload}\n            >\n              Add\n            </button>\n          )}\n        </div>\n      </Alert>\n    </>\n  )\n}\n","import * as React from 'react'\nimport {\n  QUERY_FILTERS_COLLAPSED_CSS,\n  QUERY_FILTERS_EXPANDED_CSS,\n} from '../QueryWrapper'\nimport CardContainer from '../CardContainer'\nimport SynapseTable, { SynapseTableProps } from '../table/SynapseTable'\nimport { CardConfiguration } from '../CardContainerLogic'\nimport { useQueryContext } from '../QueryContext'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { useQueryVisualizationContext } from '../QueryVisualizationWrapper'\nimport LastUpdatedOn from './LastUpdatedOn'\n\nexport type OwnProps = {\n  tableConfiguration:\n    | Omit<\n        SynapseTableProps,\n        'synapseContext' | 'queryContext' | 'queryVisualizationContext'\n      >\n    | undefined\n  cardConfiguration: CardConfiguration | undefined\n  hideDownload?: boolean\n}\n\nconst FilterAndView = (props: OwnProps) => {\n  const { tableConfiguration, cardConfiguration, hideDownload } = props\n  const synapseContext = useSynapseContext()\n  const queryContext = useQueryContext()\n  const queryVisualizationContext = useQueryVisualizationContext()\n  return (\n    <div\n      className={`FilterAndView ${\n        queryVisualizationContext.topLevelControlsState.showFacetFilter\n          ? QUERY_FILTERS_EXPANDED_CSS\n          : QUERY_FILTERS_COLLAPSED_CSS\n      }`}\n    >\n      {tableConfiguration ? (\n        <SynapseTable\n          {...tableConfiguration}\n          synapseContext={synapseContext}\n          queryContext={queryContext}\n          queryVisualizationContext={queryVisualizationContext}\n          hideDownload={hideDownload}\n        />\n      ) : (\n        <></>\n      )}\n      {cardConfiguration ? <CardContainer {...cardConfiguration} /> : <></>}\n      <LastUpdatedOn />\n    </div>\n  )\n}\n\nexport default FilterAndView\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport IconSvg, { IconSvgOptions } from '../IconSvg'\nimport { useQueryVisualizationContext } from '../QueryVisualizationWrapper'\nimport {\n  QUERY_FILTERS_COLLAPSED_CSS,\n  QUERY_FILTERS_EXPANDED_CSS,\n} from '../QueryWrapper'\n\nconst QueryFilterToggleButton = () => {\n  const {\n    topLevelControlsState: { showFacetFilter },\n    setTopLevelControlsState,\n  } = useQueryVisualizationContext()\n\n  const toggleFilterShowingState = () => {\n    setTopLevelControlsState(state => ({\n      ...state,\n      showFacetFilter: !state.showFacetFilter,\n    }))\n  }\n  const iconOptions: IconSvgOptions = {\n    icon: showFacetFilter ? 'arrowBack' : 'arrowForward',\n    color: 'inherit',\n  }\n  return (\n    <div\n      className={`QueryFilterToggleButton bootstrap-4-backport ${\n        showFacetFilter\n          ? QUERY_FILTERS_EXPANDED_CSS\n          : QUERY_FILTERS_COLLAPSED_CSS\n      }`}\n    >\n      <Button\n        variant=\"outline-primary\"\n        onClick={toggleFilterShowingState}\n        type=\"button\"\n        size=\"lg\"\n      >\n        <IconSvg options={iconOptions}></IconSvg>\n      </Button>\n    </div>\n  )\n}\n\nexport default QueryFilterToggleButton\n","import * as React from 'react'\nimport { SynapseConstants } from '../../utils/'\nimport { isTableEntity } from '../../utils/functions/EntityTypeUtils'\nimport {\n  insertConditionsFromSearchParams,\n  parseEntityIdFromSqlStatement,\n  SQLOperator,\n} from '../../utils/functions/sqlFunctions'\nimport { useGetEntity } from '../../utils/hooks/SynapseAPI/entity/useEntity'\nimport { DEFAULT_PAGE_SIZE } from '../../utils/SynapseConstants'\nimport { Query, QueryBundleRequest } from '../../utils/synapseTypes'\nimport { CardConfiguration } from '../CardContainerLogic'\nimport { DownloadConfirmation } from '../download_list'\nimport FullTextSearch from '../FullTextSearch'\nimport ModalDownload from '../ModalDownload'\nimport {\n  QueryVisualizationContextConsumer,\n  QueryVisualizationWrapper,\n} from '../QueryVisualizationWrapper'\nimport { QueryWrapper as PaginatedQueryWrapper } from '../QueryWrapper'\nimport { InfiniteQueryWrapper } from '../InfiniteQueryWrapper'\nimport { QueryContextConsumer } from '../QueryContext'\nimport { QueryWrapperErrorBanner } from '../QueryWrapperErrorBanner'\nimport SearchV2, { SearchV2Props } from '../SearchV2'\nimport SqlEditor from '../SqlEditor'\nimport { SynapseTableProps } from '../table/SynapseTable'\nimport TopLevelControls, {\n  TopLevelControlsProps,\n} from '../table/TopLevelControls'\nimport FacetNav, { FacetNavProps } from '../widgets/facet-nav/FacetNav'\nimport { QueryFilter } from '../widgets/query-filter/QueryFilter'\nimport FilterAndView from './FilterAndView'\nimport QueryFilterToggleButton from './QueryFilterToggleButton'\n\nconst QUERY_FILTERS_EXPANDED_CSS = 'isShowingFacetFilters'\nconst QUERY_FILTERS_COLLAPSED_CSS = 'isHidingFacetFilters'\n\ntype OwnProps = {\n  sql: string\n  limit?: number\n  shouldDeepLink?: boolean\n  /** If onQueryChange is set, the callback will be invoked when the Query changes */\n  onQueryChange?: (newQueryJson: string) => void\n  /** If onQueryResultBundleChange is set, the callback will be invoked when the QueryResultBundle changes */\n  onQueryResultBundleChange?: (newQueryResultBundleJson: string) => void\n  /** If initQueryJson is set, it will be the Query used in the initial QueryBundleRequest */\n  initQueryJson?: string\n  tableConfiguration?: Omit<\n    SynapseTableProps,\n    'synapseContext' | 'queryContext' | 'queryVisualizationContext'\n  >\n  cardConfiguration?: CardConfiguration\n  searchConfiguration?: Omit<\n    SearchV2Props,\n    'queryContext' | 'queryVisualizationContext'\n  >\n  rgbIndex?: number\n  facetsToPlot?: string[]\n  facetsToFilter?: string[]\n  visibleColumnCount?: number\n  facetAliases?: Record<string, string>\n  hideDownload?: boolean\n  hideQueryCount?: boolean\n  hideSqlEditorControl?: boolean\n  defaultColumn?: string\n  defaultShowFacetVisualization?: boolean\n  defaultShowSearchBox?: boolean\n  downloadCartPageUrl?: string\n  showLastUpdatedOn?: boolean\n} & Omit<TopLevelControlsProps, 'entityId'>\n\ntype SearchParams = {\n  searchParams?: {\n    facetValue: string\n  }\n}\ntype Operator = {\n  sqlOperator?: SQLOperator\n}\n\nexport type QueryWrapperPlotNavProps = SearchParams &\n  FacetNavProps &\n  Operator &\n  OwnProps\n\nconst QueryWrapperPlotNav: React.FunctionComponent<QueryWrapperPlotNavProps> = (\n  props: QueryWrapperPlotNavProps,\n) => {\n  const [showExportMetadata, setShowExportMetadata] = React.useState(false)\n  const {\n    searchParams,\n    sql,\n    sqlOperator,\n    tableConfiguration,\n    name,\n    cardConfiguration,\n    facetsToPlot,\n    facetsToFilter,\n    hideDownload,\n    hideQueryCount,\n    hideSqlEditorControl,\n    searchConfiguration,\n    limit = DEFAULT_PAGE_SIZE,\n    downloadCartPageUrl,\n    initQueryJson,\n    showLastUpdatedOn,\n  } = props\n  const sqlUsed = insertConditionsFromSearchParams(\n    sql,\n    searchParams,\n    sqlOperator,\n  )\n\n  // use initQuery if set, otherwise use sql\n  const query: Query = initQueryJson\n    ? (JSON.parse(initQueryJson) as Query)\n    : {\n        sql: sqlUsed,\n        limit: limit,\n        offset: 0,\n      }\n  const entityId = parseEntityIdFromSqlStatement(query.sql)\n  const { data: entity } = useGetEntity(entityId)\n  const isFullTextSearchEnabled =\n    entity && isTableEntity(entity) && entity.isSearchEnabled\n  const initQueryRequest: QueryBundleRequest = {\n    entityId,\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_RESULTS |\n      SynapseConstants.BUNDLE_MASK_QUERY_COUNT |\n      SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n      SynapseConstants.BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE |\n      SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n      SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n      SynapseConstants.BUNDLE_MASK_SUM_FILES_SIZE_BYTES |\n      SynapseConstants.BUNDLE_MASK_LAST_UPDATED_ON,\n    query,\n  }\n  const QueryWrapper = !!tableConfiguration\n    ? PaginatedQueryWrapper\n    : InfiniteQueryWrapper\n\n  return (\n    <div className=\"QueryWrapperPlotNav\">\n      <QueryWrapper {...props} initQueryRequest={initQueryRequest}>\n        <QueryVisualizationWrapper\n          unitDescription={'Results'}\n          rgbIndex={props.rgbIndex}\n          facetAliases={props.facetAliases}\n          visibleColumnCount={props.visibleColumnCount}\n          defaultShowFacetVisualization={props.defaultShowFacetVisualization}\n          defaultShowSearchBar={\n            props.defaultShowSearchBox || isFullTextSearchEnabled\n          }\n          showLastUpdatedOn={showLastUpdatedOn}\n        >\n          <QueryContextConsumer>\n            {queryContext => {\n              if (queryContext === undefined) {\n                throw new Error(\n                  'No queryContext found when using QueryContextConsumer',\n                )\n              }\n\n              const isFaceted = queryContext?.isFacetsAvailable\n\n              return (\n                <QueryVisualizationContextConsumer>\n                  {queryVisualizationContext => {\n                    if (queryVisualizationContext === undefined) {\n                      throw new Error(\n                        'No queryVisualizationContext found when using QueryVisualizationContextConsumer',\n                      )\n                    }\n\n                    const showFacetFilter =\n                      queryVisualizationContext?.topLevelControlsState\n                        .showFacetFilter ||\n                      queryVisualizationContext?.topLevelControlsState\n                        .showFacetFilter === undefined\n\n                    return (\n                      <>\n                        <div\n                          className={`ErrorBannerWrapper ${\n                            showFacetFilter\n                              ? QUERY_FILTERS_EXPANDED_CSS\n                              : QUERY_FILTERS_COLLAPSED_CSS\n                          }`}\n                        >\n                          <QueryWrapperErrorBanner />\n                        </div>\n                        {isFullTextSearchEnabled ? (\n                          <FullTextSearch\n                            helpUrl={searchConfiguration?.fullTextSearchHelpURL}\n                          />\n                        ) : (\n                          <SearchV2\n                            {...searchConfiguration}\n                            queryContext={queryContext}\n                            queryVisualizationContext={\n                              queryVisualizationContext\n                            }\n                          />\n                        )}\n                        <SqlEditor />\n                        <DownloadConfirmation\n                          getLastQueryRequest={queryContext.getLastQueryRequest}\n                          topLevelControlsState={\n                            queryVisualizationContext.topLevelControlsState\n                          }\n                          setTopLevelControlsState={\n                            queryVisualizationContext.setTopLevelControlsState\n                          }\n                          downloadCartPageUrl={downloadCartPageUrl}\n                        />\n                        <TopLevelControls\n                          showColumnSelection={tableConfiguration !== undefined}\n                          name={name}\n                          hideDownload={hideDownload}\n                          hideQueryCount={hideQueryCount}\n                          hideFacetFilterControl={!isFaceted}\n                          hideVisualizationsControl={!isFaceted}\n                          hideSqlEditorControl={hideSqlEditorControl}\n                        />\n                        {isFaceted && (\n                          <>\n                            <QueryFilter facetsToFilter={facetsToFilter} />\n                            <QueryFilterToggleButton />\n                          </>\n                        )}\n                        <FacetNav\n                          facetsToPlot={facetsToPlot}\n                          showNotch={false}\n                        />\n                        <FilterAndView\n                          tableConfiguration={tableConfiguration}\n                          hideDownload={hideDownload}\n                          cardConfiguration={cardConfiguration}\n                        />\n                        {showExportMetadata && (\n                          <ModalDownload\n                            getLastQueryRequest={\n                              queryContext.getLastQueryRequest\n                            }\n                            onClose={() => setShowExportMetadata(false)}\n                          />\n                        )}\n                      </>\n                    )\n                  }}\n                </QueryVisualizationContextConsumer>\n              )\n            }}\n          </QueryContextConsumer>\n        </QueryVisualizationWrapper>\n      </QueryWrapper>\n    </div>\n  )\n}\n\nexport default QueryWrapperPlotNav\n"],"names":["useState","numFiles","numBytes","accessToken","isLoading","downloadSpeed","useEffect","testDownloadSpeed","setState","speed","moment","_jsxs","_jsx","fileCountIconClass","_Fragment","numBytesTooltipId","TOOLTIP_DELAY_SHOW","timeEstimateIconClass","friendlyTimeTooltipId","query","folderId","SynapseClient.addFilesToDownloadListV2","displayToast","goToDownloadListFn","closeConfirmationFn","status","StatusEnum","infoText","fileCount","fileSize","getLastQueryRequest","fnClose","setTopLevelControlsState","topLevelControlsState","downloadListStatistics","refetch","setStatus","setFileCount","setFileSize","entityChildrenData","isSuccess","useDeepCompareEffect","updateStats","SynapseConstants.BUNDLE_MASK_QUERY_COUNT","SynapseConstants.BUNDLE_MASK_SUM_FILES_SIZE_BYTES","lastQueryRequest","partMask","queryResultBundle","window","console","QUERY_FILTERS_EXPANDED_CSS","QUERY_FILTERS_COLLAPSED_CSS","onCancel","closeText","triggerAddToDownload","tableConfiguration","cardConfiguration","hideDownload","QueryFilterToggleButton","showFacetFilter","useQueryVisualizationContext","toggleFilterShowingState","state","iconOptions","icon","color","searchParams","sql","sqlOperator","name","facetsToPlot","facetsToFilter","hideQueryCount","hideSqlEditorControl","searchConfiguration","DEFAULT_PAGE_SIZE","downloadCartPageUrl","initQueryJson","showLastUpdatedOn","sqlUsed","limit","entity","entityId","SynapseConstants.BUNDLE_MASK_QUERY_RESULTS","SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS","SynapseConstants.BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE","SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS","SynapseConstants.BUNDLE_MASK_QUERY_FACETS","SynapseConstants.BUNDLE_MASK_LAST_UPDATED_ON","BUNDLE_MASK_LAST_UPDATED_ON","PaginatedQueryWrapper","props","rgbIndex","facetAliases","visibleColumnCount","defaultShowFacetVisualization","isFullTextSearchEnabled","fullTextSearchHelpURL","undefined","isFaceted"],"mappings":"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"}