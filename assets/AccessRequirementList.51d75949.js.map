{"version":3,"file":"AccessRequirementList.51d75949.js","sources":["../../src/lib/utils/synapseTypes/AccessRequirement/AccessorChange.ts","../../src/lib/utils/synapseTypes/RestrictionInformation.ts","../../src/lib/utils/hooks/usePrevious.ts","../../src/lib/utils/hooks/useCompare.ts","../../src/lib/containers/access_requirement_list/AccessApprovalCheckMark.tsx","../../src/lib/containers/access_requirement_list/AcceptedRequirements.tsx","../../src/lib/containers/access_requirement_list/ACTAccessRequirement.tsx","../../src/lib/containers/access_requirement_list/managedACTAccess/CancelRequestDataAccess.tsx","../../src/lib/containers/access_requirement_list/managedACTAccess/RequestDataAccess.tsx","../../src/lib/containers/access_requirement_list/managedACTAccess/ManagedACTAccessRequirement.tsx","../../src/lib/containers/access_requirement_list/managedACTAccess/RequestDataAccessStep1.tsx","../../src/lib/containers/DirectDownloadButton.tsx","../../src/lib/containers/access_requirement_list/managedACTAccess/RequestDataAccessStep2.tsx","../../src/lib/containers/access_requirement_list/managedACTAccess/RequestDataAccessSuccess.tsx","../../src/lib/containers/access_requirement_list/SelfSignAccessRequirement.tsx","../../src/lib/containers/access_requirement_list/TermsOfUseAccessRequirement.tsx","../../src/lib/containers/access_requirement_list/AccessRequirementList.tsx"],"sourcesContent":["/**\n * The type of access change for this user. Users can gain access, renew access, or have access revoked.\n * http://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/dataaccess/AccessType.html\n */\n\nexport enum AccessType {\n  GAIN_ACCESS = 'GAIN_ACCESS',\n  RENEW_ACCESS = 'RENEW_ACCESS',\n  REVOKE_ACCESS = 'REVOKE_ACCESS',\n}\n\n/**\n * Request for a single user change access to a resource.\n * http://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/dataaccess/AccessorChange.html\n */\n\nexport type AccessorChange = {\n  userId: string\n  type: AccessType\n}\n","// see https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/RestrictableObjectType.html\nexport enum RestrictableObjectType {\n  ENTITY = 'ENTITY',\n  EVALUATION = 'EVALUATION',\n  TEAM = 'TEAM',\n}\n\n// see https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/RestrictionInformationRequest.html\nexport type RestrictionInformationRequest = {\n  restrictableObjectType: RestrictableObjectType\n  objectId: string\n}\n\n// see https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/RestrictionLevel.html\nexport enum RestrictionLevel {\n  OPEN = 'OPEN',\n  RESTRICTED_BY_TERMS_OF_USE = 'RESTRICTED_BY_TERMS_OF_USE',\n  CONTROLLED_BY_ACT = 'CONTROLLED_BY_ACT',\n}\n\n// see https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/RestrictionInformationResponse.html\nexport type RestrictionInformationResponse = {\n  restrictionLevel: RestrictionLevel\n  hasUnmetAccessRequirement: boolean\n}\n","import { useEffect, useRef } from 'react'\n\nconst usePrevious = <T>(value: T): T | undefined => {\n  const ref = useRef<T>()\n  useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\n\nexport default usePrevious\n","import usePrevious from './usePrevious'\n\nconst useCompare = <T extends string | number | boolean | undefined>(\n  val: T,\n) => {\n  const prevVal = usePrevious<T>(val)\n  return prevVal !== val\n}\n\nexport default useCompare\n","import React from 'react'\nimport { CheckTwoTone, LockTwoTone } from '@material-ui/icons'\n\nexport type CheckMarkProps = {\n  isCompleted: boolean | undefined\n}\nexport default function AccessApprovalCheckMark({\n  isCompleted,\n}: CheckMarkProps) {\n  return (\n    <div\n      data-testid={`AccessApprovalCheckMark-${isCompleted}`}\n      className={`check-mark-container ${isCompleted ? 'green' : 'orange'}`}\n    >\n      {isCompleted ? <CheckTwoTone /> : <LockTwoTone />}\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { useState, useEffect } from 'react'\nimport MarkdownSynapse from '../MarkdownSynapse'\nimport {\n  WikiPageKey,\n  AccessRequirementStatus,\n  AccessRequirement,\n  UserProfile,\n  TermsOfUseAccessRequirement,\n  SelfSignAccessRequirement,\n  ManagedACTAccessRequirement,\n  AccessApproval,\n  ApprovalState,\n  ACTAccessRequirement,\n} from '../../utils/synapseTypes/'\nimport { SynapseClient } from '../../utils'\nimport AccessApprovalCheckMark from './AccessApprovalCheckMark'\nimport { SUPPORTED_ACCESS_REQUIREMENTS } from './AccessRequirementList'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\n\nexport type AcceptedRequirementsProps = {\n  user: UserProfile | undefined\n  wikiPage: WikiPageKey | undefined\n  entityId: string\n  accessRequirement:\n    | AccessRequirement\n    | TermsOfUseAccessRequirement\n    | SelfSignAccessRequirement\n    | ManagedACTAccessRequirement\n  accessRequirementStatus: AccessRequirementStatus | undefined\n  showButton?: boolean\n  onHide?: Function\n}\n\nexport default function AcceptedRequirements({\n  user,\n  wikiPage,\n  accessRequirement,\n  accessRequirementStatus,\n  showButton = true,\n  entityId,\n  onHide,\n}: AcceptedRequirementsProps) {\n  const { accessToken } = useSynapseContext()\n  const [isHide, setIsHide] = useState<boolean>(true)\n  const propsIsApproved = accessRequirementStatus?.isApproved\n  const [isApproved, setIsApproved] = useState<boolean | undefined>(\n    propsIsApproved,\n  )\n\n  let acceptButtonText = ''\n  if (\n    accessRequirement.concreteType ===\n      SUPPORTED_ACCESS_REQUIREMENTS.ManagedACTAccessRequirement ||\n    accessRequirement.concreteType ===\n      SUPPORTED_ACCESS_REQUIREMENTS.ACTAccessRequirement\n  ) {\n    if (\n      window.location.hostname === 'www.synapse.org' ||\n      window.location.hostname === 'staging.synapse.org'\n    ) {\n      acceptButtonText = 'Request access'\n    } else {\n      acceptButtonText = 'Request access via Synapse.org'\n    }\n  } else {\n    acceptButtonText = 'I Accept Terms of Use'\n  }\n\n  useEffect(() => {\n    setIsApproved(propsIsApproved)\n  }, [propsIsApproved])\n\n  const gotoSynapseAccessRequirementPage = () => {\n    window.open(\n      `${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!AccessRequirement:AR_ID=${accessRequirement.id}&TYPE=ENTITY&ID=${entityId}`,\n    )\n  }\n  const onAcceptClicked = () => {\n    if (\n      accessRequirement.concreteType ===\n        SUPPORTED_ACCESS_REQUIREMENTS.ManagedACTAccessRequirement ||\n      accessRequirement.concreteType ===\n        SUPPORTED_ACCESS_REQUIREMENTS.ACTAccessRequirement\n    ) {\n      gotoSynapseAccessRequirementPage()\n      // PORTALS-1483: and close the dialog.\n      onHide?.()\n    } else {\n      if (!isApproved) {\n        const accessApprovalRequest: AccessApproval = {\n          requirementId: accessRequirement?.id!,\n          submitterId: user?.ownerId!,\n          accessorId: user?.ownerId!,\n          state: ApprovalState.APPROVED,\n        }\n\n        SynapseClient.postAccessApproval(accessToken, accessApprovalRequest)\n          .then(_ => {\n            setIsApproved(true)\n          })\n          .catch(err => console.error('Error on post access approval: ', err))\n      }\n    }\n  }\n\n  const termsOfUse = (accessRequirement as TermsOfUseAccessRequirement)\n    .termsOfUse\n\n  const actContactInfo = (accessRequirement as ACTAccessRequirement)\n    .actContactInfo\n\n  const isTermsOfUse =\n    accessRequirement.concreteType ===\n    SUPPORTED_ACCESS_REQUIREMENTS.TermsOfUseAccessRequirement\n  const isActContactInfo =\n    accessRequirement.concreteType ===\n    SUPPORTED_ACCESS_REQUIREMENTS.ACTAccessRequirement\n\n  const isActOrTermsOfUse =\n    (isTermsOfUse && termsOfUse) || (isActContactInfo && actContactInfo)\n\n  let markdown = <></>\n\n  if (wikiPage) {\n    markdown = (\n      <div className=\"AcceptRequirementsMarkdown\">\n        <MarkdownSynapse\n          wikiId={wikiPage?.wikiPageId}\n          ownerId={wikiPage?.ownerObjectId}\n          objectType={wikiPage?.ownerObjectType}\n        />\n      </div>\n    )\n  } else if (isActOrTermsOfUse) {\n    markdown = (\n      <MarkdownSynapse markdown={isTermsOfUse ? termsOfUse : actContactInfo} />\n    )\n  }\n\n  const isManagedActAr =\n    accessRequirement.concreteType ===\n    SUPPORTED_ACCESS_REQUIREMENTS.ManagedACTAccessRequirement\n  const approvedText = isManagedActAr\n    ? 'Your data access request has been approved.'\n    : 'You have accepted the terms of use.'\n  return (\n    <>\n      <div data-testid=\"AcceptedRequirements\" className=\"requirement-container\">\n        <AccessApprovalCheckMark isCompleted={isApproved} />\n        <div className=\"terms-of-use-content\">\n          {isApproved ? (\n            <div>\n              <p>\n                {approvedText}\n                {isManagedActAr && (\n                  <a\n                    className=\"update-request-button\"\n                    onClick={() => {\n                      gotoSynapseAccessRequirementPage()\n                    }}\n                  >\n                    Update Request\n                  </a>\n                )}\n                <a\n                  className=\"view-terms-button\"\n                  onClick={() => {\n                    setIsHide(!isHide)\n                  }}\n                >\n                  View Terms\n                </a>\n              </p>\n              <div className={`view-terms ${isHide ? 'hidden' : 'show'}`}>\n                {markdown}\n              </div>\n            </div>\n          ) : (\n            markdown\n          )}\n          {accessToken && showButton && (\n            <div\n              className={`button-container ${isApproved ? `hide` : `default`}`}\n            >\n              <div className=\"accept-button-container\">\n                <button className=\"accept-button\" onClick={onAcceptClicked}>\n                  {acceptButtonText}\n                </button>\n              </div>\n\n              <div className=\"not-accept-button-container\">\n                <button\n                  className=\"not-accpet-button\"\n                  onClick={() => onHide?.()}\n                >\n                  I do not accept\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { ACTAccessRequirement, WikiPageKey } from '../../utils/synapseTypes'\nimport { SynapseClient } from '../../utils'\nimport AcceptedRequirements from './AcceptedRequirements'\nimport { AccessRequirementProps } from './AccessRequirementProps'\nimport { useSynapseContext } from '../../utils/SynapseContext'\n\nexport default function ACTAccessRequirementComponent({\n  accessRequirement,\n  user,\n  onHide,\n  accessRequirementStatus,\n  entityId,\n}: AccessRequirementProps<ACTAccessRequirement>) {\n  const { accessToken } = useSynapseContext()\n  const [wikiPage, setWikiPage] = useState<WikiPageKey>()\n\n  useEffect(() => {\n    const getACTAccessData = async () => {\n      try {\n        const wikipageRequirement =\n          await SynapseClient.getWikiPageKeyForAccessRequirement(\n            accessToken,\n            accessRequirement.id,\n          )\n        setWikiPage(wikipageRequirement)\n      } catch (err) {\n        console.error('Error on get ACTAccessRequirement', err)\n      }\n    }\n\n    getACTAccessData()\n  }, [accessToken, accessRequirement])\n\n  return (\n    <AcceptedRequirements\n      accessRequirement={accessRequirement}\n      accessRequirementStatus={accessRequirementStatus}\n      user={user}\n      wikiPage={wikiPage}\n      onHide={onHide}\n      entityId={entityId}\n    />\n  )\n}\n","import * as React from 'react'\nimport { RequestInterface } from '../../../utils/synapseTypes'\nimport * as ReactBootstrap from 'react-bootstrap'\nimport { Alert, Button } from 'react-bootstrap'\nimport { useState } from 'react'\nimport { updateDataAccessRequest } from '../../../utils/SynapseClient'\nimport { AlertProps } from './RequestDataAccessStep2'\nimport { useSynapseContext } from '../../../utils/SynapseContext'\n\nexport type CancelRequestDataAccessProps = {\n  formSubmitRequestObject: RequestInterface | undefined\n  onHide: () => void\n}\n\nconst CancelRequestDataAccess: React.FC<\n  CancelRequestDataAccessProps\n> = props => {\n  const { accessToken } = useSynapseContext()\n  const { formSubmitRequestObject, onHide } = props\n  const [alert, setAlert] = useState<AlertProps | undefined>()\n  const [showCloseBtn, setShowCloseBtn] = useState<boolean>(false)\n\n  const handleSave = async () => {\n    if (formSubmitRequestObject) {\n      try {\n        const resp = await updateDataAccessRequest(\n          formSubmitRequestObject,\n          accessToken!,\n        )\n        if (resp) {\n          // save success, close dialog\n          onHide?.()\n        } else {\n          setAlert({\n            key: 'danger',\n            message:\n              'Sorry, there is an error in submitting your request. Please close this dialog and try again later.',\n          })\n          setShowCloseBtn(true)\n        }\n      } catch (e) {\n        console.log('CancelRequestDataAccess: Error updating form', e)\n        setAlert({\n          key: 'danger',\n          message: `Sorry, there is an error in submitting your request. ${\n            e.reason || ''\n          }. Please close this dialog and try again later`,\n        })\n        setShowCloseBtn(true)\n      }\n    }\n  }\n\n  return (\n    <>\n      <ReactBootstrap.Modal.Header closeButton={true}>\n        <ReactBootstrap.Modal.Title className=\"AccessRequirementList__title\">\n          Save Changes\n        </ReactBootstrap.Modal.Title>\n      </ReactBootstrap.Modal.Header>\n\n      <ReactBootstrap.Modal.Body>\n        <p>Would you like to save your recent changes?</p>\n        {\n          /* Alert message */\n          alert && <Alert variant={alert.key}>{alert.message}</Alert>\n        }\n      </ReactBootstrap.Modal.Body>\n\n      <ReactBootstrap.Modal.Footer>\n        {!showCloseBtn && (\n          <>\n            <Button variant=\"link\" onClick={() => onHide?.()}>\n              Cancel\n            </Button>\n            <Button variant=\"primary\" onClick={() => handleSave()}>\n              Save changes\n            </Button>\n          </>\n        )}\n        {showCloseBtn && (\n          <Button variant=\"primary\" onClick={() => onHide?.()}>\n            Close\n          </Button>\n        )}\n      </ReactBootstrap.Modal.Footer>\n    </>\n  )\n}\n\nexport default CancelRequestDataAccess\n","/**\n * Copied from src/lib/containers/access_requirement_list/AcceptedRequirements.tsx\n */\n\nimport * as React from 'react'\nimport { useEffect, useState } from 'react'\nimport MarkdownSynapse from '../../MarkdownSynapse'\nimport {\n  AccessApproval,\n  AccessRequirement,\n  ACTAccessRequirement,\n  ACTSubmissionStatus,\n  ApprovalState,\n  ManagedACTAccessRequirement,\n  SelfSignAccessRequirement,\n  SubmissionState,\n  TermsOfUseAccessRequirement,\n  UserProfile,\n  WikiPageKey,\n} from '../../../utils/synapseTypes/'\nimport { SynapseClient } from '../../../utils'\nimport AccessApprovalCheckMark from '../AccessApprovalCheckMark'\nimport { SUPPORTED_ACCESS_REQUIREMENTS } from '../AccessRequirementList'\nimport { ManagedACTAccessRequirementStatus } from '../../../utils/synapseTypes/AccessRequirement/ManagedACTAccessRequirementStatus'\nimport { cancelDataAccessRequest } from '../../../utils/SynapseClient'\nimport { AlertProps } from './RequestDataAccessStep2'\nimport { Alert } from 'react-bootstrap'\nimport { useSynapseContext } from '../../../utils/SynapseContext'\n\nexport type RequestDataAccessProps = {\n  user: UserProfile | undefined\n  wikiPage: WikiPageKey | undefined\n  entityId: string\n  accessRequirement:\n    | AccessRequirement\n    | TermsOfUseAccessRequirement\n    | SelfSignAccessRequirement\n    | ManagedACTAccessRequirement\n  accessRequirementStatus?: ManagedACTAccessRequirementStatus\n  showButton?: boolean\n  onHide?: Function\n  requestDataStepCallback?: Function\n}\n\nconst RequestDataAccess: React.FC<RequestDataAccessProps> = props => {\n  const {\n    user,\n    wikiPage,\n    accessRequirementStatus,\n    accessRequirement,\n    showButton = true,\n    onHide,\n    requestDataStepCallback,\n  } = props\n  const { accessToken } = useSynapseContext()\n  const [isHide, setIsHide] = useState<boolean>(true)\n  const propsIsApproved = accessRequirementStatus?.isApproved\n  const [isApproved, setIsApproved] = useState<boolean | undefined>(\n    propsIsApproved,\n  )\n  const [submissionState, setSubmissionState] = useState<SubmissionState>()\n  const [alert, setAlert] = useState<AlertProps | undefined>()\n  const [isSubmissionCanceled, setIsSubmissionCanceled] =\n    useState<boolean>(false)\n\n  useEffect(() => {\n    setIsApproved(propsIsApproved)\n    if (accessRequirementStatus?.currentSubmissionStatus) {\n      setSubmissionState(accessRequirementStatus.currentSubmissionStatus.state)\n      showSubmissionStatusAlert(accessRequirementStatus.currentSubmissionStatus)\n    }\n  }, [propsIsApproved])\n\n  const showRequestAccess = () => {\n    requestDataStepCallback?.({\n      managedACTAccessRequirement: accessRequirement,\n      step: 1,\n    })\n  }\n\n  const onAcceptClicked = async () => {\n    if (\n      accessRequirement.concreteType ===\n      SUPPORTED_ACCESS_REQUIREMENTS.ManagedACTAccessRequirement\n    ) {\n      if (accessToken) {\n        // !isSubmissionCanceled: if the submission has already been canceled, don't cancel again\n        if (\n          submissionState === SubmissionState.SUBMITTED &&\n          !isSubmissionCanceled\n        ) {\n          const errAlert = {\n            key: 'danger',\n            message: (\n              <>\n                <strong>Error canceling your data access request.</strong>\n                <br />\n                Please try again later.\n              </>\n            ),\n          }\n          try {\n            const resp: ACTSubmissionStatus | any =\n              await cancelDataAccessRequest(\n                accessRequirementStatus?.currentSubmissionStatus!.submissionId!,\n                accessToken!,\n              )\n            if (resp.state === SubmissionState.CANCELLED) {\n              // successfully cancelled\n              setAlert({\n                key: 'success',\n                message: (\n                  <strong>Your data access request has been canceled.</strong>\n                ),\n              })\n              setIsSubmissionCanceled(true)\n            } else {\n              setAlert(errAlert)\n            }\n          } catch (e) {\n            console.log(\n              'RequestDataAccess: error canceling data access request:',\n              e,\n            )\n            setAlert(errAlert)\n          }\n        } else {\n          showRequestAccess()\n        }\n      } else {\n        requestDataStepCallback?.({\n          managedACTAccessRequirement: accessRequirement,\n          step: 4,\n        })\n      }\n    } else {\n      if (!isApproved) {\n        const accessApprovalRequest: AccessApproval = {\n          requirementId: accessRequirement?.id!,\n          submitterId: user?.ownerId!,\n          accessorId: user?.ownerId!,\n          state: ApprovalState.APPROVED,\n        }\n\n        SynapseClient.postAccessApproval(accessToken, accessApprovalRequest)\n          .then(_ => {\n            setIsApproved(true)\n          })\n          .catch(err => console.error('Error on post access approval: ', err))\n      }\n    }\n  }\n\n  const getAcceptButtonText = () => {\n    if (\n      accessRequirement.concreteType ===\n        SUPPORTED_ACCESS_REQUIREMENTS.ManagedACTAccessRequirement ||\n      accessRequirement.concreteType ===\n        SUPPORTED_ACCESS_REQUIREMENTS.ACTAccessRequirement\n    ) {\n      if (submissionState) {\n        let btnActionText\n        switch (submissionState) {\n          case SubmissionState.SUBMITTED:\n            btnActionText = isSubmissionCanceled\n              ? 'Update Request'\n              : `Cancel Request`\n            break\n          case SubmissionState.APPROVED:\n          case SubmissionState.REJECTED:\n          case SubmissionState.CANCELLED:\n            btnActionText = 'Update Request'\n        }\n        return btnActionText\n      } else {\n        return 'Request access'\n      }\n    } else {\n      return 'I Accept Terms of Use'\n    }\n  }\n\n  const showSubmissionStatusAlert = (submissionStatus: ACTSubmissionStatus) => {\n    switch (submissionStatus.state) {\n      case SubmissionState.SUBMITTED:\n        setAlert({\n          key: 'primary',\n          message: <strong>You have submitted a data access request.</strong>,\n        })\n        break\n      case SubmissionState.APPROVED:\n        setAlert({\n          key: 'success',\n          message: <strong>Your data access request has been approved.</strong>,\n        })\n        break\n      case SubmissionState.REJECTED:\n        setAlert({\n          key: 'danger',\n          message: (\n            <>\n              <strong>Your data access request has been rejected.</strong>\n              <br />\n              {submissionStatus.rejectedReason || ''}\n            </>\n          ),\n        })\n        break\n    }\n    return <></>\n  }\n\n  const termsOfUse = (accessRequirement as TermsOfUseAccessRequirement)\n    .termsOfUse\n\n  const actContactInfo = (accessRequirement as ACTAccessRequirement)\n    .actContactInfo\n\n  const isTermsOfUse =\n    accessRequirement.concreteType ===\n    SUPPORTED_ACCESS_REQUIREMENTS.TermsOfUseAccessRequirement\n  const isActContactInfo =\n    accessRequirement.concreteType ===\n    SUPPORTED_ACCESS_REQUIREMENTS.ACTAccessRequirement\n\n  const isActOrTermsOfUse =\n    (isTermsOfUse && termsOfUse) || (isActContactInfo && actContactInfo)\n\n  let markdown = <></>\n\n  if (wikiPage) {\n    markdown = (\n      <div className=\"AcceptRequirementsMarkdown\">\n        {wikiPage && (\n          <MarkdownSynapse // remove React mount/unmount error\n            wikiId={wikiPage?.wikiPageId}\n            ownerId={wikiPage?.ownerObjectId}\n            objectType={wikiPage?.ownerObjectType}\n          />\n        )}\n        {\n          /* Alert message */\n          alert && (\n            <Alert\n              className={'access-requirement-list-alert'}\n              variant={alert.key}\n            >\n              {alert.message}\n            </Alert>\n          )\n        }\n      </div>\n    )\n  } else if (isActOrTermsOfUse) {\n    markdown = (\n      <MarkdownSynapse markdown={isTermsOfUse ? termsOfUse : actContactInfo} />\n    )\n  }\n\n  const isManagedActAr =\n    accessRequirement.concreteType ===\n    SUPPORTED_ACCESS_REQUIREMENTS.ManagedACTAccessRequirement\n  const approvedText = isManagedActAr\n    ? 'Your data access request has been approved.'\n    : 'You have accepted the terms of use.'\n  return (\n    <>\n      <div data-testid=\"RequestDataAccess\" className=\"requirement-container\">\n        <AccessApprovalCheckMark isCompleted={isApproved} />\n        <div className=\"terms-of-use-content\">\n          {isApproved ? (\n            <div>\n              <p>{approvedText}</p>\n              <p style={{ marginBottom: '0' }}>\n                {isManagedActAr && (\n                  <button\n                    className=\"update-request-button\"\n                    onClick={() => {\n                      showRequestAccess()\n                    }}\n                    style={{\n                      paddingLeft: '0',\n                      marginRight: '2rem',\n                    }}\n                  >\n                    {getAcceptButtonText()}\n                  </button>\n                )}\n                <a\n                  onClick={() => {\n                    setIsHide(!isHide)\n                  }}\n                >\n                  View Terms\n                </a>\n              </p>\n              <div className={`view-terms ${isHide ? 'hidden' : 'show'}`}>\n                {markdown}\n              </div>\n            </div>\n          ) : (\n            markdown\n          )}\n          {showButton && ( // This will show when the access is not approved\n            <div\n              className={`button-container ${isApproved ? `hide` : `default`}`}\n            >\n              <div className=\"accept-button-container\">\n                <button className=\"accept-button\" onClick={onAcceptClicked}>\n                  {getAcceptButtonText()}\n                </button>\n              </div>\n\n              <div className=\"not-accept-button-container\">\n                <button\n                  className=\"not-accpet-button\"\n                  onClick={() => onHide?.()}\n                >\n                  I do not accept\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default RequestDataAccess\n","import React, { useEffect, useState } from 'react'\nimport {\n  ManagedACTAccessRequirement,\n  UserProfile,\n  WikiPageKey,\n} from '../../../utils/synapseTypes'\nimport { SynapseClient } from '../../../utils'\nimport RequestDataAccess from './RequestDataAccess'\nimport { ManagedACTAccessRequirementStatus } from '../../../utils/synapseTypes/AccessRequirement/ManagedACTAccessRequirementStatus'\nimport { useSynapseContext } from '../../../utils/SynapseContext'\nimport { requestDataStepCallbackProps } from '../AccessRequirementList'\n\nexport type ManagedACTAccessRequirementComponentProps = {\n  entityId: string\n  user: UserProfile | undefined\n  accessRequirement: ManagedACTAccessRequirement\n  accessRequirementStatus: ManagedACTAccessRequirementStatus\n  onHide?: () => void\n  requestDataStepCallback?: (props: requestDataStepCallbackProps) => void\n}\n\nconst ManagedACTAccessRequirementComponent: React.FC<\n  ManagedACTAccessRequirementComponentProps\n> = props => {\n  const {\n    entityId,\n    user,\n    accessRequirement,\n    accessRequirementStatus,\n    onHide,\n    requestDataStepCallback,\n  } = props\n  const { accessToken } = useSynapseContext()\n  const [wikiPage, setWikiPage] = useState<WikiPageKey>()\n\n  useEffect(() => {\n    const getManagedACTAccessData = async () => {\n      try {\n        const wikipageRequirement =\n          await SynapseClient.getWikiPageKeyForAccessRequirement(\n            accessToken,\n            accessRequirement.id,\n          )\n        setWikiPage(wikipageRequirement)\n      } catch (err) {\n        console.error('Error on get ManagedACTAccessRequirement', err)\n      }\n    }\n\n    getManagedACTAccessData()\n  }, [accessToken, accessRequirement])\n\n  return (\n    <RequestDataAccess\n      accessRequirement={accessRequirement}\n      accessRequirementStatus={accessRequirementStatus}\n      entityId={entityId}\n      user={user}\n      wikiPage={wikiPage}\n      onHide={onHide}\n      requestDataStepCallback={requestDataStepCallback}\n    />\n  )\n}\n\nexport default ManagedACTAccessRequirementComponent\n","import * as React from 'react'\nimport { Alert, Button, Form } from 'react-bootstrap'\nimport * as ReactBootstrap from 'react-bootstrap'\nimport { useEffect, useRef, useState } from 'react'\nimport {\n  updateResearchProject,\n  getResearchProject,\n} from '../../../utils/SynapseClient'\nimport { ResearchProject } from '../../../utils/synapseTypes/ResearchProject'\nimport { ManagedACTAccessRequirement } from '../../../utils/synapseTypes'\nimport { AlertProps } from './RequestDataAccessStep2'\nimport { useSynapseContext } from '../../../utils/SynapseContext'\nimport { requestDataStepCallbackProps } from '../AccessRequirementList'\n\nexport type RequestDataAccessStep1Props = {\n  requestDataStepCallback?: (props: requestDataStepCallbackProps) => void\n  managedACTAccessRequirement: ManagedACTAccessRequirement\n  onHide: () => void\n}\n\nconst RequestDataAccessStep1: React.FC<RequestDataAccessStep1Props> = props => {\n  const { requestDataStepCallback, managedACTAccessRequirement, onHide } = props\n  const { accessToken } = useSynapseContext()\n  const [projectLead, setProjectLead] = useState<string>('')\n  const [institution, setInstitution] = useState<string>('')\n  const [intendedDataUseStatement, setIntendedDataUseStatement] =\n    useState<string>('')\n  const [alert, setAlert] = useState<AlertProps | undefined>()\n  const researchProjectRef = useRef({})\n  let mounted = true\n\n  useEffect(() => {\n    if (mounted) {\n      setAlert(undefined)\n      retrieveExistingResearchProject()\n    }\n    return () => {\n      mounted = false\n    }\n  }, [accessToken])\n\n  const retrieveExistingResearchProject = async () => {\n    try {\n      const researchProject = await getResearchProject(\n        String(managedACTAccessRequirement.id),\n        accessToken!,\n      )\n      if (researchProject.id) {\n        researchProjectRef.current = researchProject\n        setProjectLead(researchProject.projectLead)\n        setInstitution(researchProject.institution)\n        setIntendedDataUseStatement(researchProject.intendedDataUseStatement)\n      }\n    } catch (e) {\n      console.log(\n        'RequestDataAccessStep1: Error getting research project data: ',\n        e,\n      )\n    }\n  }\n\n  const getErrorMessage = (reason: string = '') => {\n    return (\n      <>\n        <strong>Unable to update research project data.</strong>\n        <br />\n        {reason}\n      </>\n    )\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLElement>) => {\n    e.preventDefault()\n    const requestObj: ResearchProject = Object.assign(\n      {},\n      researchProjectRef.current,\n      {\n        accessRequirementId: String(managedACTAccessRequirement.id),\n        institution: institution,\n        projectLead: projectLead,\n        intendedDataUseStatement: intendedDataUseStatement,\n      },\n    )\n\n    try {\n      updateResearchProject(requestObj, accessToken!)\n        .then(researchProject => {\n          requestDataStepCallback?.({\n            managedACTAccessRequirement,\n            step: 2,\n            researchProjectId: researchProject.id,\n          })\n        })\n        .catch(e => {\n          console.log(\n            'RequestDataAccessStep1: Error updating research project data: ',\n            e,\n          )\n          setAlert({\n            key: 'danger',\n            message: getErrorMessage(e.reason),\n          })\n        })\n    } catch (e) {\n      console.log(\n        'RequestDataAccessStep1: Error updating research project data: ',\n        e,\n      )\n      setAlert({\n        key: 'danger',\n        message: getErrorMessage(e.reason),\n      })\n    }\n  }\n\n  return (\n    <>\n      <Form className={'access-request-form1'} onSubmit={handleSubmit}>\n        <ReactBootstrap.Modal.Header closeButton={true}>\n          <ReactBootstrap.Modal.Title className=\"AccessRequirementList__title\">\n            Request Access\n          </ReactBootstrap.Modal.Title>\n        </ReactBootstrap.Modal.Header>\n        <ReactBootstrap.Modal.Body>\n          <p>Please tell us about your project.</p>\n          <Form.Group>\n            <Form.Label htmlFor={'project-lead'}>Project Lead</Form.Label>\n            <Form.Control\n              id={'project-lead'}\n              type=\"text\"\n              value={projectLead}\n              required\n              onChange={e => setProjectLead(e.target.value)}\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor={'institution'}>Institution</Form.Label>\n            <Form.Control\n              id={'institution'}\n              type=\"text\"\n              value={institution}\n              required\n              onChange={e => setInstitution(e.target.value)}\n            />\n          </Form.Group>\n          {managedACTAccessRequirement.isIDURequired && (\n            <Form.Group>\n              <Form.Label htmlFor={'data-use'}>\n                Intended Data Use Statement -\n                {managedACTAccessRequirement.isIDUPublic && (\n                  <i id={'idu-visible'}>this will be visible to the public</i>\n                )}\n              </Form.Label>\n              <Form.Control\n                id={'data-use'}\n                as=\"textarea\"\n                value={intendedDataUseStatement}\n                rows={10}\n                required\n                onChange={e => setIntendedDataUseStatement(e.target.value)}\n              />\n            </Form.Group>\n          )}\n          {\n            /* Alert message */\n            alert && <Alert variant={alert.key}>{alert.message}</Alert>\n          }\n        </ReactBootstrap.Modal.Body>\n        <ReactBootstrap.Modal.Footer>\n          <Button variant=\"link\" onClick={() => onHide?.()}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" type=\"submit\">\n            Save changes\n          </Button>\n        </ReactBootstrap.Modal.Footer>\n      </Form>\n    </>\n  )\n}\n\nexport default RequestDataAccessStep1\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport { BatchFileRequest, FileHandleAssociation } from '../utils/synapseTypes'\nimport { getFiles } from '../utils/SynapseClient'\nimport { useSynapseContext } from '../utils/SynapseContext'\n\nexport type DirectFileDownloadButtonProps = {\n  id?: string\n  fileHandleAssociation: FileHandleAssociation\n  fileName: string | undefined\n  className?: string\n  variant?: string // This allows you to change the look of the button (see react bootstrap doc)\n}\n\nconst DirectDownloadButton: React.FC<DirectFileDownloadButtonProps> = props => {\n  const { id, fileHandleAssociation, className, variant, fileName } = props\n  const { accessToken } = useSynapseContext()\n\n  const getDownloadLink = async () => {\n    if (!fileHandleAssociation.fileHandleId || !accessToken) return\n\n    const batchFileRequest: BatchFileRequest = {\n      requestedFiles: [fileHandleAssociation],\n      includePreSignedURLs: true,\n      includeFileHandles: false,\n      includePreviewPreSignedURLs: false,\n    }\n    try {\n      const file = await getFiles(batchFileRequest, accessToken)\n      const preSignedURL = file.requestedFiles[0].preSignedURL\n      if (!preSignedURL) {\n        console.log('Fail to get file download link')\n      } else {\n        window.open(preSignedURL)\n      }\n    } catch (e) {\n      console.log('Fail to get file download link', e)\n    }\n  }\n\n  return (\n    <>\n      <Button\n        id={id}\n        variant={variant}\n        className={className}\n        onClick={e => getDownloadLink()}\n      >\n        {fileName}\n      </Button>\n    </>\n  )\n}\n\nexport default DirectDownloadButton\n","import * as React from 'react'\nimport { useEffect, useState } from 'react'\nimport * as ReactBootstrap from 'react-bootstrap'\nimport { Alert, Button, Form } from 'react-bootstrap'\nimport {\n  getDataAccessRequestForUpdate,\n  getFiles,\n  getUserProfileById,\n  submitDataAccessRequest,\n  updateDataAccessRequest,\n} from '../../../utils/SynapseClient'\nimport {\n  AccessorChange,\n  AccessType,\n  ACTSubmissionStatus,\n  BatchFileRequest,\n  CreateSubmissionRequest,\n  FileHandleAssociateType,\n  FileUploadComplete,\n  ManagedACTAccessRequirement,\n  RequestInterface,\n  RestrictableObjectType,\n  SubmissionState,\n  TYPE_FILTER,\n  UploadCallbackResp,\n  UserGroupHeader,\n  UserProfile,\n} from '../../../utils/synapseTypes'\nimport DirectDownloadButton from '../../DirectDownloadButton'\nimport FileUpload from '../../FileUpload'\nimport UserSearchBox from '../../UserSearchBox'\nimport { UserCardSmall } from '../../UserCardSmall'\nimport IconSvg from '../../IconSvg'\nimport { useSynapseContext } from '../../../utils/SynapseContext'\nimport { RenewalInterface } from '../../../utils/synapseTypes/AccessRequirement/RenewalInterface'\nimport { RadioGroup } from '../../widgets/RadioGroup'\nimport { requestDataStepCallbackProps } from '../AccessRequirementList'\n\nexport type RequestDataAccessStep2Props = {\n  managedACTAccessRequirement: ManagedACTAccessRequirement\n  entityId: string\n  requestDataStepCallback: (props: requestDataStepCallbackProps) => void\n  user: UserProfile\n  researchProjectId: string\n  onHide: () => void\n}\n\nexport type DataAccessDoc = {\n  fileName?: string\n  associateObjectId?: string\n  associateObjectType?: string\n  fileHandleId: string\n}\n\nexport type DataAccessDocs =\n  | {\n      DUCTemplate: DataAccessDoc | undefined\n      DUC: DataAccessDoc | undefined\n      IRB: DataAccessDoc | undefined\n      attachments: DataAccessDoc[] | undefined\n    }\n  | undefined\n\nexport type AlertProps = {\n  key: string\n  message: string | JSX.Element\n}\n\ntype requestedFileTypesMap = {\n  [key: string]: string[]\n}\n\ntype Accessor = {\n  profile: UserProfile\n  accessType: AccessType\n}\n\nconst RequestDataAccessStep2: React.FC<RequestDataAccessStep2Props> = props => {\n  const {\n    requestDataStepCallback,\n    managedACTAccessRequirement,\n    entityId,\n    user,\n    researchProjectId,\n  } = props\n  const { accessToken } = useSynapseContext()\n  const [DUCTemplate, setDUCTemplate] = useState<DataAccessDoc>()\n  const [DUC, setDUC] = useState<DataAccessDoc>()\n  const [IRB, setIRB] = useState<DataAccessDoc>()\n  const [attachments, setAttachments] = useState<DataAccessDoc[]>([])\n  const [formSubmitRequestObject, setFormSubmitRequestObject] = useState<\n    RequestInterface | RenewalInterface\n  >()\n  const [alert, setAlert] = useState<AlertProps | undefined>()\n  const [isRenewal, setIsRenewal] = useState<boolean>(false)\n  const [accessors, setAccessors] = useState<Accessor[]>([])\n\n  const requestedFileTypes: requestedFileTypesMap = {}\n  const batchFileRequest: BatchFileRequest = {\n    requestedFiles: [],\n    includeFileHandles: true,\n    includePreSignedURLs: false,\n    includePreviewPreSignedURLs: false,\n  }\n\n  let mounted = true\n\n  useEffect(() => {\n    if (mounted) {\n      setAlert(undefined)\n      setFormData()\n    }\n    return () => {\n      mounted = false\n    }\n  }, [accessToken, researchProjectId])\n\n  const setFormData = async () => {\n    const dataAccessRequestData = await getDataAccessRequestForUpdate(\n      String(managedACTAccessRequirement.id),\n      accessToken!,\n    )\n\n    // SWC-5765: Filter out duplicate accessors that are in an existing Access Requirement data access request\n    if (dataAccessRequestData.accessorChanges) {\n      const seen = new Set()\n      dataAccessRequestData.accessorChanges =\n        dataAccessRequestData.accessorChanges.filter(accessorChange => {\n          return seen.has(accessorChange.userId)\n            ? false\n            : seen.add(accessorChange.userId)\n        })\n    }\n\n    // renewal case\n    if (\n      dataAccessRequestData.concreteType ===\n      'org.sagebionetworks.repo.model.dataaccess.Renewal'\n    ) {\n      setIsRenewal(true)\n    }\n\n    // initialize form submission request object\n    dataAccessRequestData.researchProjectId = researchProjectId\n    setFormSubmitRequestObject(dataAccessRequestData)\n    // get assessors' user profiles data for display and save them in the state variables\n    getAccessorsData(dataAccessRequestData)\n    // get data access required docs data to display file names\n    getFilesData(dataAccessRequestData)\n  }\n\n  const getAccessorsData = (dataAccessRequestData: RequestInterface) => {\n    const accessorChanges = dataAccessRequestData.accessorChanges\n    const ids: string[] = []\n\n    if (!accessorChanges || !accessorChanges.length) {\n      ids.push(user.ownerId)\n      // Add current user to submission request object\n      setFormSubmitRequestObject(prevState => {\n        return Object.assign({}, prevState, {\n          accessorChanges: [\n            {\n              userId: user.ownerId,\n              type: AccessType.GAIN_ACCESS,\n            },\n          ],\n        })\n      })\n    } else {\n      accessorChanges.forEach(item => {\n        ids.push(item.userId)\n      })\n    }\n\n    const promises = ids.map(userId => {\n      return getUserProfileById(accessToken, userId)\n    })\n    Promise.all(promises).then(profiles => {\n      const profileAndAccessType: Accessor[] = profiles.map((item, i) => {\n        const accessType =\n          accessorChanges && accessorChanges[i]?.type\n            ? accessorChanges[i].type\n            : AccessType.GAIN_ACCESS\n        return {\n          profile: item,\n          accessType: accessType,\n        }\n      })\n      setAccessors(profileAndAccessType)\n    })\n  }\n\n  const getFilesData = (dataAccessRequestData: RequestInterface) => {\n    // Create the request objects for required documents and save them in the state variables\n    if (\n      managedACTAccessRequirement.isDUCRequired &&\n      managedACTAccessRequirement.ducTemplateFileHandleId\n    ) {\n      const requestObj = {\n        associateObjectId: String(managedACTAccessRequirement.id),\n        associateObjectType:\n          FileHandleAssociateType.AccessRequirementAttachment,\n        fileHandleId: managedACTAccessRequirement!.ducTemplateFileHandleId,\n      }\n      batchFileRequest.requestedFiles.push(requestObj)\n      if (\n        !requestedFileTypes[managedACTAccessRequirement.ducTemplateFileHandleId]\n      ) {\n        requestedFileTypes[\n          managedACTAccessRequirement.ducTemplateFileHandleId\n        ] = []\n      }\n      requestedFileTypes[\n        managedACTAccessRequirement.ducTemplateFileHandleId\n      ].push('DUCTemplate')\n      setDUCTemplate(requestObj)\n    }\n\n    if (\n      managedACTAccessRequirement.isDUCRequired &&\n      dataAccessRequestData.ducFileHandleId\n    ) {\n      const requestObj = {\n        associateObjectId: dataAccessRequestData!.id,\n        associateObjectType:\n          FileHandleAssociateType.DataAccessRequestAttachment,\n        fileHandleId: dataAccessRequestData!.ducFileHandleId,\n      }\n      batchFileRequest.requestedFiles.push(requestObj)\n      if (!requestedFileTypes[dataAccessRequestData.ducFileHandleId]) {\n        requestedFileTypes[dataAccessRequestData.ducFileHandleId] = []\n      }\n      requestedFileTypes[dataAccessRequestData!.ducFileHandleId].push('DUC')\n      setDUC(requestObj)\n    }\n\n    if (\n      managedACTAccessRequirement.isIRBApprovalRequired &&\n      dataAccessRequestData.irbFileHandleId\n    ) {\n      const requestObj = {\n        associateObjectId: dataAccessRequestData!.id,\n        associateObjectType:\n          FileHandleAssociateType.DataAccessRequestAttachment,\n        fileHandleId: dataAccessRequestData!.irbFileHandleId,\n      }\n      batchFileRequest.requestedFiles.push(requestObj)\n      if (!requestedFileTypes[dataAccessRequestData.irbFileHandleId]) {\n        requestedFileTypes[dataAccessRequestData.irbFileHandleId] = []\n      }\n      requestedFileTypes[dataAccessRequestData!.irbFileHandleId].push('IRB')\n      setIRB(requestObj)\n    }\n\n    if (\n      dataAccessRequestData.attachments &&\n      dataAccessRequestData.attachments.length\n    ) {\n      dataAccessRequestData.attachments.forEach(id => {\n        batchFileRequest.requestedFiles.push({\n          associateObjectId: dataAccessRequestData!.id,\n          associateObjectType:\n            FileHandleAssociateType.DataAccessRequestAttachment,\n          fileHandleId: id,\n        })\n        if (!requestedFileTypes[id]) {\n          requestedFileTypes[id] = []\n        }\n        requestedFileTypes[id].push('attachments')\n      })\n    }\n\n    // Fetch the required doc file names and save them in the state variables\n    if (batchFileRequest.requestedFiles.length) {\n      getFiles(batchFileRequest, accessToken).then(resp => {\n        resp.requestedFiles.forEach(file => {\n          const fileName = file.fileHandle!.fileName\n          const fileTypes: string[] = requestedFileTypes[file.fileHandleId]\n\n          fileTypes.forEach((type: string) => {\n            switch (type) {\n              case 'DUCTemplate':\n                setDUCTemplate(prevState => {\n                  return Object.assign({}, prevState, { fileName: fileName })\n                })\n                requestedFileTypes[file.fileHandleId].splice(\n                  fileTypes.indexOf('DUCTemplate'),\n                  1,\n                )\n                break\n              case 'DUC':\n                setDUC(prevState => {\n                  return Object.assign({}, prevState, { fileName: fileName })\n                })\n                requestedFileTypes[file.fileHandleId].splice(\n                  fileTypes.indexOf('DUC'),\n                  1,\n                )\n                break\n              case 'IRB':\n                setIRB(prevState => {\n                  return Object.assign({}, prevState, { fileName: fileName })\n                })\n                requestedFileTypes[file.fileHandleId].splice(\n                  fileTypes.indexOf('IRB'),\n                  1,\n                )\n                break\n              case 'attachments':\n                setAttachments(prev => [\n                  ...prev,\n                  {\n                    fileName: fileName,\n                    associateObjectId: dataAccessRequestData!.id,\n                    associateObjectType:\n                      FileHandleAssociateType.DataAccessRequestAttachment,\n                    fileHandleId: file.fileHandleId,\n                  },\n                ])\n                requestedFileTypes[file.fileHandleId].splice(\n                  fileTypes.indexOf('attachments'),\n                  1,\n                )\n                break\n              default:\n            }\n          })\n        })\n      }) // end getFiles\n    }\n  }\n\n  const handleSubmit = async () => {\n    if (formSubmitRequestObject) {\n      try {\n        const resp = await updateDataAccessRequest(\n          formSubmitRequestObject,\n          accessToken!,\n        )\n        if (resp && resp.etag) {\n          // save success\n          const requestObject: CreateSubmissionRequest = {\n            requestId: resp.id,\n            requestEtag: resp.etag,\n            subjectId: entityId,\n            subjectType: RestrictableObjectType.ENTITY,\n          }\n\n          // Update save etag\n          setFormSubmitRequestObject(prevState => {\n            return Object.assign({}, prevState, {\n              etag: resp.etag,\n            })\n          })\n\n          // and submit\n          const submission_resp: ACTSubmissionStatus =\n            await submitDataAccessRequest(requestObject, accessToken!)\n          const alertMsg = getSubmissionMsg(submission_resp)\n          if (submission_resp.state === SubmissionState.REJECTED) {\n            setAlert({\n              key: 'danger',\n              message: alertMsg,\n            })\n          } else {\n            // Navigate to the submission success dialog\n            requestDataStepCallback?.({\n              step: 5,\n            })\n          }\n        } else {\n          setAlert({\n            key: 'danger',\n            message: getErrorMessage(),\n          })\n        }\n      } catch (e) {\n        console.log('RequestDataAccessStep2: Error updating form', e)\n        setAlert({\n          key: 'danger',\n          message: getErrorMessage(e.reason),\n        })\n      }\n    }\n  }\n\n  const getErrorMessage = (reason: string = '') => {\n    return (\n      <>\n        <strong>Sorry, there is an error in submitting your request.</strong>\n        <br />\n        {reason}\n      </>\n    )\n  }\n\n  const getSubmissionMsg = (submission_resp: ACTSubmissionStatus) => {\n    const msgStart = 'The information has been '\n    switch (submission_resp.state) {\n      case SubmissionState.SUBMITTED:\n        return <strong>{msgStart} submitted.</strong>\n      case SubmissionState.APPROVED:\n        return <strong>{msgStart} approved.</strong>\n      case SubmissionState.CANCELLED:\n        return <strong>{msgStart} canceled.</strong>\n      case SubmissionState.REJECTED:\n        return (\n          <>\n            <strong>{msgStart} rejected.</strong>{' '}\n            {submission_resp.rejectedReason}. Please close this dialog and try\n            again later.\n          </>\n        )\n      default:\n        return <></>\n    }\n  }\n\n  const onClearAccessor = (pid: string) => {\n    // Update the view\n    const filtered: Accessor[] = accessors.filter(\n      item => item.profile.ownerId !== pid,\n    )\n    setAccessors(filtered)\n\n    // Update form submission request object\n    const newAccessorChanges: AccessorChange[] = filtered.map(item => {\n      return {\n        userId: item.profile.ownerId,\n        type: item.accessType,\n      }\n    })\n    setFormSubmitRequestObject(prevState => {\n      return Object.assign({}, prevState, {\n        accessorChanges: newAccessorChanges,\n      })\n    })\n  }\n\n  const onClearAttachment = (fid: string) => {\n    // Update the view\n    const filtered: DataAccessDoc[] = attachments.filter(\n      item => item.fileHandleId !== fid,\n    )\n    setAttachments(filtered)\n\n    // Update form submission request object\n    const newAttachments: string[] = filtered.map(item => item.fileHandleId)\n    setFormSubmitRequestObject(prevState => {\n      return Object.assign({}, prevState, {\n        attachments: newAttachments,\n      })\n    })\n  }\n\n  const uploadCallback = (data: UploadCallbackResp) => {\n    if (data.resp && data.success) {\n      const uploadResponse: FileUploadComplete = data.resp\n      if (data.context === 'attachments') {\n        const docs = formSubmitRequestObject?.attachments\n          ? formSubmitRequestObject?.attachments\n          : []\n        docs?.push(uploadResponse.fileHandleId)\n        setFormSubmitRequestObject(prevState => {\n          return Object.assign({}, prevState, { attachments: docs })\n        })\n        // Update the view\n        setAttachments(prev => [\n          ...prev,\n          {\n            fileName: uploadResponse.fileName,\n            fileHandleId: uploadResponse.fileHandleId,\n          },\n        ])\n      } else {\n        setFormSubmitRequestObject(prevState => {\n          return Object.assign({}, prevState, {\n            [data.context]: uploadResponse.fileHandleId,\n          })\n        })\n        // Update the view\n        if (data.context === 'ducFileHandleId') {\n          setDUC(prevState => {\n            return Object.assign({}, prevState, {\n              fileName: uploadResponse.fileName,\n              fileHandleId: uploadResponse.fileHandleId,\n            })\n          })\n        }\n        if (data.context === 'irbFileHandleId') {\n          setIRB(prevState => {\n            return Object.assign({}, prevState, {\n              fileName: uploadResponse.fileName,\n              fileHandleId: uploadResponse.fileHandleId,\n            })\n          })\n        }\n      }\n    } else if (!data.success && data.error) {\n      // show the error\n      console.log(\n        'RequestDataAccessStep2: Error uploading the file',\n        data.error,\n      )\n      setAlert({\n        key: 'danger',\n        message: getErrorMessage(data.error.reason),\n      })\n    }\n  }\n\n  // User search input event handler\n  const onSelectUserCallback = (selected: UserGroupHeader) => {\n    const currentAccessorIds = accessors.map(\n      accessor => accessor.profile.ownerId,\n    )\n\n    // if user is not already in the accessor list (prevent duplicates in accessor list)\n    if (!currentAccessorIds.includes(selected.ownerId)) {\n      setAccessors(prev => [\n        ...prev,\n        {\n          profile: {\n            ownerId: selected.ownerId,\n            firstName: selected.firstName ?? '',\n            lastName: selected.lastName ?? '',\n            userName: selected.userName,\n          },\n          accessType: AccessType.GAIN_ACCESS,\n        },\n      ])\n\n      const selectedAccessor: AccessorChange = {\n        userId: selected.ownerId,\n        type: AccessType.GAIN_ACCESS,\n      }\n      const accessorsArr = formSubmitRequestObject?.accessorChanges || []\n      accessorsArr.push(selectedAccessor)\n      setFormSubmitRequestObject(prevState => {\n        return Object.assign({}, prevState, {\n          accessorChanges: accessorsArr,\n        })\n      })\n    }\n  }\n\n  const handleTextAreaInputChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement>,\n    id: string,\n  ) => {\n    const value = e.target.value\n    switch (id) {\n      case 'publications':\n        setFormSubmitRequestObject(prevState => {\n          return Object.assign({}, prevState, {\n            publication: value,\n          })\n        })\n        break\n      case 'summaryOfUse':\n        setFormSubmitRequestObject(prevState => {\n          return Object.assign({}, prevState, {\n            summaryOfUse: value,\n          })\n        })\n        break\n      default:\n    }\n  }\n\n  // For renewal only\n  const onAccessorRadioBtnChange = (accessType: AccessType, userId: string) => {\n    // Make the radio button appears selected when clicked.\n    const copy = [...accessors]\n    const index = copy.findIndex(item => item.profile.ownerId === userId)\n    copy[index].accessType = accessType\n    setAccessors(copy)\n\n    // Update formSubmitRequestObject\n    const formCopy = formSubmitRequestObject?.accessorChanges || []\n    const index2 = formCopy.findIndex(item => item.userId === userId)\n    formCopy[index2].type = accessType\n    setFormSubmitRequestObject(prevState => {\n      return Object.assign({}, prevState, {\n        accessorChanges: formCopy,\n      })\n    })\n  }\n\n  const getAccessorRequirementHelpText = () => {\n    let link: string = ''\n    let msg: string = ''\n\n    if (managedACTAccessRequirement.isCertifiedUserRequired) {\n      link =\n        'https://help.synapse.org/docs/User-Types.2007072795.html#UserAccountTiers-CertifiedUsers'\n      msg = 'All data requesters must be a certified user.'\n    }\n    if (managedACTAccessRequirement.isValidatedProfileRequired) {\n      link =\n        'https://help.synapse.org/docs/User-Types.2007072795.html#UserAccountTiers-ValidatedUsers'\n      msg = 'All data requesters must have a validated user profile.'\n    }\n    return link && msg ? (\n      <>\n        {msg}\n        <a href={link} target={'_blank'} rel={'noreferrer'}>\n          <IconSvg\n            options={{\n              icon: 'info',\n            }}\n          />\n        </a>\n      </>\n    ) : (\n      <></>\n    )\n  }\n\n  return (\n    <>\n      <Form\n        className={'access-request-form2'}\n        onSubmit={e => e.preventDefault()}\n      >\n        <ReactBootstrap.Modal.Header closeButton={true}>\n          <ReactBootstrap.Modal.Title className=\"AccessRequirementList__title\">\n            Request Access\n          </ReactBootstrap.Modal.Title>\n        </ReactBootstrap.Modal.Header>\n        <ReactBootstrap.Modal.Body>\n          <p>\n            Please provide the information below to submit the request for\n            access.\n          </p>\n          <Form.Group>\n            <Form.Label htmlFor={'requesters'} style={{ margin: '0' }}>\n              Data Requesters\n            </Form.Label>\n            <br />\n            <span className={'requester-label'}>\n              {managedACTAccessRequirement.isDUCRequired && (\n                <>\n                  This list should match those listed on your DUC.\n                  <br />\n                </>\n              )}\n              {getAccessorRequirementHelpText()}\n            </span>\n            <UserSearchBox\n              id={'requesters'}\n              typeFilter={TYPE_FILTER.USERS_ONLY}\n              onSelectCallback={onSelectUserCallback}\n              filterUserIds={accessors.map(user => user.profile.ownerId)}\n            />\n          </Form.Group>\n\n          {/* Accessors List */}\n          <Form.Group style={{ marginBottom: '4rem' }}>\n            {accessors.map((accessor, i) => {\n              return (\n                <div className={'list-items'} key={`accessor-${i}`}>\n                  <UserCardSmall\n                    userProfile={accessor.profile}\n                    showAccountLevelIcon={true}\n                    disableLink={true}\n                    showFullName={true}\n                  />\n                  {\n                    // only display delete button if the user profile is other users and has not access before\n                    user.ownerId !== accessor.profile.ownerId &&\n                      accessor.accessType === AccessType.GAIN_ACCESS && (\n                        <Button\n                          className={'clear-x'}\n                          variant={'link'}\n                          onClick={() =>\n                            onClearAccessor(accessor.profile.ownerId)\n                          }\n                        >\n                          <IconSvg options={{ icon: 'clear' }} />\n                        </Button>\n                      )\n                  }\n                  {\n                    // Renewal/Revoke data access, only display if isRenewal is true\n                    isRenewal && accessor.accessType !== AccessType.GAIN_ACCESS && (\n                      <>\n                        <RadioGroup\n                          id={`accessor-renewal-${accessor.profile.ownerId}`}\n                          value={accessor.accessType}\n                          options={[\n                            {\n                              label: 'Renew',\n                              value: AccessType.RENEW_ACCESS,\n                            },\n                            {\n                              label: 'Revoke',\n                              value: AccessType.REVOKE_ACCESS,\n                            },\n                          ]}\n                          onChange={(value: string) =>\n                            onAccessorRadioBtnChange(\n                              value as AccessType,\n                              accessor.profile.ownerId,\n                            )\n                          }\n                        ></RadioGroup>\n                      </>\n                    )\n                  }\n                </div>\n              )\n            })}\n          </Form.Group>\n\n          {/* DUC */}\n          {managedACTAccessRequirement?.isDUCRequired && (\n            <>\n              <Form.Group>\n                <Form.Label htmlFor={'duc-temp'} className={'SRC-noMargin'}>\n                  DUC template\n                </Form.Label>\n                <br />\n                {DUCTemplate && (\n                  <div>\n                    <DirectDownloadButton\n                      fileHandleAssociation={{\n                        associateObjectId: DUCTemplate?.associateObjectId!,\n                        associateObjectType:\n                          DUCTemplate.associateObjectType as FileHandleAssociateType,\n                        fileHandleId: DUCTemplate.fileHandleId,\n                      }}\n                      fileName={DUCTemplate.fileName}\n                      id={'duc-temp'}\n                      variant={'link'}\n                      className={'SRC-noPadding'}\n                    />\n                  </div>\n                )}\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label htmlFor={'duc'} className={'SRC-noMargin'}>\n                  Upload DUC\n                </Form.Label>\n                <br />\n                {DUC && (\n                  <div>\n                    <DirectDownloadButton\n                      fileHandleAssociation={{\n                        associateObjectId: DUC.associateObjectId!,\n                        associateObjectType:\n                          DUC.associateObjectType as FileHandleAssociateType,\n                        fileHandleId: DUC.fileHandleId,\n                      }}\n                      fileName={DUC?.fileName}\n                      id={'duc-download'}\n                      variant={'link'}\n                      className={'SRC-noPadding'}\n                    />\n                  </div>\n                )}\n                <FileUpload\n                  id={'duc-browse'}\n                  variant={'light-primary-base'}\n                  uploadCallback={uploadCallback}\n                  context={'ducFileHandleId'}\n                />\n              </Form.Group>\n            </>\n          )}\n\n          {/* IRB */}\n          {managedACTAccessRequirement?.isIRBApprovalRequired && (\n            <Form.Group>\n              <Form.Label htmlFor={'irb'} className={'SRC-noMargin'}>\n                Upload IRB approval\n              </Form.Label>\n              <br />\n              {IRB && (\n                <div>\n                  <DirectDownloadButton\n                    fileHandleAssociation={{\n                      associateObjectId: IRB.associateObjectId!,\n                      associateObjectType:\n                        IRB.associateObjectType as FileHandleAssociateType,\n                      fileHandleId: IRB.fileHandleId,\n                    }}\n                    fileName={IRB?.fileName}\n                    id={'irb-download'}\n                    variant={'link'}\n                    className={'SRC-noPadding'}\n                  />\n                </div>\n              )}\n              <FileUpload\n                id={'irb-browse'}\n                variant={'light-primary-base'}\n                uploadCallback={uploadCallback}\n                context={'irbFileHandleId'}\n              />\n            </Form.Group>\n          )}\n\n          {\n            /* Attachments */\n            managedACTAccessRequirement?.areOtherAttachmentsRequired && (\n              <Form.Group>\n                <Form.Label className={'SRC-noMargin'}>\n                  Upload other required documents\n                </Form.Label>\n                <br />\n                {attachments.map((attachment: DataAccessDoc, i: number) => {\n                  return (\n                    <div className={'list-items'} key={`file-attachment-${i}`}>\n                      <DirectDownloadButton\n                        fileHandleAssociation={{\n                          associateObjectId: attachment.associateObjectId!,\n                          associateObjectType:\n                            attachment.associateObjectType as FileHandleAssociateType,\n                          fileHandleId: attachment.fileHandleId,\n                        }}\n                        fileName={attachment?.fileName}\n                        variant={'link'}\n                        className={'SRC-noPadding attachment-download'}\n                      />\n                      <Button\n                        className={'clear-x'}\n                        variant={'link'}\n                        onClick={() =>\n                          onClearAttachment(attachment.fileHandleId)\n                        }\n                      >\n                        <IconSvg options={{ icon: 'clear' }} />\n                      </Button>\n                    </div>\n                  )\n                })}\n                <FileUpload\n                  id={'attachment-browse'}\n                  variant={'light-primary-base'}\n                  uploadCallback={uploadCallback}\n                  context={'attachments'}\n                />\n              </Form.Group>\n            )\n          }\n\n          {\n            // Publications & Summary of Use\n            isRenewal && (\n              <>\n                <Form.Group>\n                  <Form.Label\n                    htmlFor={'publications'}\n                    className={'SRC-noMargin'}\n                  >\n                    Publication(s)\n                  </Form.Label>\n                  <Form.Control\n                    id={'publications'}\n                    as=\"textarea\"\n                    rows={3}\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                      handleTextAreaInputChange(e, 'publications')\n                    }\n                  />\n                </Form.Group>\n                <Form.Group>\n                  <Form.Label\n                    htmlFor={'summaryOfUse'}\n                    className={'SRC-noMargin'}\n                  >\n                    Summary of use\n                  </Form.Label>\n                  <Form.Control\n                    id={'summaryOfUse'}\n                    as=\"textarea\"\n                    rows={3}\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                      handleTextAreaInputChange(e, 'summaryOfUse')\n                    }\n                  />\n                </Form.Group>\n              </>\n            )\n          }\n\n          {\n            /* Alert message */\n            alert && <Alert variant={alert.key}>{alert.message}</Alert>\n          }\n        </ReactBootstrap.Modal.Body>\n        <ReactBootstrap.Modal.Footer>\n          {\n            <>\n              <Button\n                variant=\"link\"\n                onClick={() =>\n                  requestDataStepCallback?.({\n                    step: 3,\n                    formSubmitRequestObject: formSubmitRequestObject,\n                  })\n                }\n              >\n                Cancel\n              </Button>\n              <Button variant=\"primary\" onClick={() => handleSubmit()}>\n                Submit\n              </Button>\n            </>\n          }\n        </ReactBootstrap.Modal.Footer>\n      </Form>\n    </>\n  )\n}\n\nexport default RequestDataAccessStep2\n","import * as React from 'react'\nimport * as ReactBootstrap from 'react-bootstrap'\nimport { Button } from 'react-bootstrap'\n\nexport type RequestDataAccessSuccessProps = {\n  onHide: () => void\n}\n\nconst RequestDataAccessSuccess: React.FC<\n  RequestDataAccessSuccessProps\n> = props => {\n  const { onHide } = props\n  return (\n    <>\n      <ReactBootstrap.Modal.Header closeButton={true}>\n        <ReactBootstrap.Modal.Title className=\"AccessRequirementList__title\">\n          Your Data Access Request Has Been Submitted!\n        </ReactBootstrap.Modal.Title>\n      </ReactBootstrap.Modal.Header>\n      <ReactBootstrap.Modal.Body>\n        <p style={{ margin: '2rem 0' }}>\n          Your data access request been submitted and is currently being\n          reviewed. Please allow for up to 2 weeks for your request to be\n          reviewed and approved.\n        </p>\n      </ReactBootstrap.Modal.Body>\n      <ReactBootstrap.Modal.Footer>\n        <Button variant=\"primary\" onClick={() => onHide?.()}>\n          Finish\n        </Button>\n      </ReactBootstrap.Modal.Footer>\n    </>\n  )\n}\n\nexport default RequestDataAccessSuccess\n","import * as React from 'react'\nimport { useEffect, useState } from 'react'\nimport {\n  SelfSignAccessRequirement,\n  WikiPageKey,\n  UserBundle,\n} from '../../utils/synapseTypes'\nimport { SynapseClient, SynapseConstants } from '../../utils'\nimport AccessApprovalCheckMark from './AccessApprovalCheckMark'\nimport AcceptedRequirements from './AcceptedRequirements'\nimport { AccessRequirementProps } from './AccessRequirementProps'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\n\nexport default function SelfSignAccessRequirementComponent({\n  accessRequirement,\n  user,\n  onHide,\n  accessRequirementStatus,\n  entityId,\n}: AccessRequirementProps<SelfSignAccessRequirement>) {\n  const { accessToken } = useSynapseContext()\n  const [wikiPage, setWikiPage] = useState<WikiPageKey | undefined>(undefined)\n  const [userBundle, setUserBundle] = useState<UserBundle | undefined>(\n    undefined,\n  )\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n\n  useEffect(() => {\n    const getSelfSignAccessData = async () => {\n      try {\n        setIsLoading(true)\n        const wikiPageRequirment =\n          await SynapseClient.getWikiPageKeyForAccessRequirement(\n            accessToken,\n            accessRequirement.id,\n          )\n\n        setWikiPage(wikiPageRequirment)\n\n        const certificationOrVerification =\n          SynapseConstants.USER_BUNDLE_MASK_IS_CERTIFIED |\n          SynapseConstants.USER_BUNDLE_MASK_IS_VERIFIED\n\n        if (user?.ownerId) {\n          const bundle = await SynapseClient.getUserBundle(\n            user.ownerId,\n            certificationOrVerification,\n            accessToken,\n          )\n          setUserBundle(bundle)\n        }\n      } catch (err) {\n        console.error('Error on get Self Sign Access Requirement: ', err)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    getSelfSignAccessData()\n  }, [accessRequirement, accessToken, user])\n\n  return (\n    <>\n      {accessRequirement.isCertifiedUserRequired && (\n        <div className=\"requirement-container\">\n          <AccessApprovalCheckMark isCompleted={userBundle?.isCertified} />\n          <div>\n            <p className=\"self-sign-access-title bold-text\">\n              You must first become a\n              <a\n                className=\"self-sign-access-certified bold-text\"\n                href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Quiz:`}\n              >\n                &nbsp;certified user\n              </a>\n            </p>\n            {isLoading && <span className=\"spinner\" />}\n\n            <p\n              className={`self-sign-access-certified-success-text ${\n                userBundle?.isCertified ? 'show' : 'hidden'\n              }`}\n            >\n              You are a certified user\n            </p>\n          </div>\n        </div>\n      )}\n      {accessRequirement.isValidatedProfileRequired && (\n        <div className=\"requirement-container\">\n          <AccessApprovalCheckMark isCompleted={userBundle?.isVerified} />\n          <div>\n            <p className=\"self-sign-access-title bold-text\">\n              You must first apply to have your\n              <a\n                className=\"self-sign-access-validated bold-text\"\n                href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Profile:v/settings`}\n              >\n                &nbsp;user profile validated\n              </a>\n            </p>\n            {isLoading && <span className=\"spinner\" />}\n\n            <p\n              className={`self-sign-access-verified-success-text ${\n                userBundle?.isVerified ? 'show' : 'hidden'\n              }`}\n            >\n              You have applied to have user profile valiadation successfully\n            </p>\n          </div>\n        </div>\n      )}\n      <AcceptedRequirements\n        user={user}\n        wikiPage={wikiPage}\n        accessRequirement={accessRequirement}\n        accessRequirementStatus={accessRequirementStatus}\n        onHide={onHide}\n        entityId={entityId}\n      />\n    </>\n  )\n}\n","import * as React from 'react'\nimport { useEffect, useState } from 'react'\nimport {\n  WikiPageKey,\n  TermsOfUseAccessRequirement,\n} from '../../utils/synapseTypes'\nimport { SynapseClient } from '../../utils'\nimport AcceptedRequirements from './AcceptedRequirements'\nimport { AccessRequirementProps } from './AccessRequirementProps'\nimport { useSynapseContext } from '../../utils/SynapseContext'\n\nexport default function TermsOfUseAccessRequirementComponent({\n  accessRequirement,\n  user,\n  onHide,\n  accessRequirementStatus,\n  entityId,\n}: AccessRequirementProps<TermsOfUseAccessRequirement>) {\n  const { accessToken } = useSynapseContext()\n  const [wikiPage, setWikiPage] = useState<WikiPageKey | undefined>(undefined)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n\n  useEffect(() => {\n    const getTermsOfUseData = async () => {\n      setIsLoading(true)\n\n      try {\n        const wikiPageRequirement =\n          await SynapseClient.getWikiPageKeyForAccessRequirement(\n            accessToken,\n            accessRequirement.id,\n          )\n        setWikiPage(wikiPageRequirement)\n      } catch (err) {\n        console.error('Error on prepare terms of use ', err)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    getTermsOfUseData()\n  }, [accessToken, accessRequirement])\n\n  return (\n    <>\n      {isLoading && <span className=\"spinner\" />}\n      <AcceptedRequirements\n        user={user}\n        wikiPage={wikiPage}\n        accessRequirement={accessRequirement}\n        accessRequirementStatus={accessRequirementStatus}\n        onHide={onHide}\n        entityId={entityId}\n      />\n    </>\n  )\n}\n","import { sortBy } from 'lodash-es'\nimport React, { useEffect, useState } from 'react'\nimport * as ReactBootstrap from 'react-bootstrap'\nimport { SynapseClient, SynapseConstants } from '../../utils/'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { useGetCurrentUserProfile } from '../../utils/hooks/SynapseAPI/user/useUserBundle'\nimport useCompare from '../../utils/hooks/useCompare'\nimport useGetInfoFromIds, {\n  UseGetInfoFromIdsProps,\n} from '../../utils/hooks/useGetInfoFromIds'\nimport { getAllAccessRequirements } from '../../utils/SynapseClient'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport {\n  AccessRequirementStatus,\n  ACTAccessRequirement,\n  EntityHeader,\n  ManagedACTAccessRequirement,\n  RequestInterface,\n  SelfSignAccessRequirement,\n  TermsOfUseAccessRequirement,\n} from '../../utils/synapseTypes'\nimport { AccessRequirement } from '../../utils/synapseTypes/AccessRequirement/AccessRequirement'\nimport { ManagedACTAccessRequirementStatus } from '../../utils/synapseTypes/AccessRequirement/ManagedACTAccessRequirementStatus'\nimport IconSvg from '../IconSvg'\nimport Login from '../Login'\nimport AccessApprovalCheckMark from './AccessApprovalCheckMark'\nimport ACTAccessRequirementComponent from './ACTAccessRequirement'\nimport CancelRequestDataAccess from './managedACTAccess/CancelRequestDataAccess'\nimport ManagedACTAccessRequirementComponentNew from './managedACTAccess/ManagedACTAccessRequirement'\nimport RequestDataAccessStep1 from './managedACTAccess/RequestDataAccessStep1'\nimport RequestDataAccessStep2 from './managedACTAccess/RequestDataAccessStep2'\nimport RequestDataAccessSuccess from './managedACTAccess/RequestDataAccessSuccess'\nimport SelfSignAccessRequirementComponent from './SelfSignAccessRequirement'\nimport TermsOfUseAccessRequirementComponent from './TermsOfUseAccessRequirement'\n\ntype AccessRequirementAndStatus = {\n  accessRequirement: AccessRequirement\n  accessRequirementStatus: AccessRequirementStatus\n}\n\nexport type AccessRequirementListProps = {\n  entityId: string // will show this entity info\n  accessRequirementFromProps?: Array<AccessRequirement>\n  onHide?: () => void\n  renderAsModal?: boolean\n  numberOfFilesAffected?: number // if provided, will show this instead of the entity information\n}\n\nexport type requestDataStepCallbackProps = {\n  managedACTAccessRequirement?: ManagedACTAccessRequirement\n  step: number\n  researchProjectId?: string\n  formSubmitRequestObject?: RequestInterface\n}\n\nexport enum SUPPORTED_ACCESS_REQUIREMENTS {\n  SelfSignAccessRequirement = 'org.sagebionetworks.repo.model.SelfSignAccessRequirement',\n  TermsOfUseAccessRequirement = 'org.sagebionetworks.repo.model.TermsOfUseAccessRequirement',\n  ManagedACTAccessRequirement = 'org.sagebionetworks.repo.model.ManagedACTAccessRequirement',\n  ACTAccessRequirement = 'org.sagebionetworks.repo.model.ACTAccessRequirement',\n}\n\nexport const checkHasUnsportedRequirement = (\n  accessRequirements: Array<AccessRequirement>,\n): boolean => {\n  return accessRequirements.filter(isARUnsupported).length > 0\n}\n\nconst isARUnsupported = (accessRequirement: AccessRequirement) => {\n  switch (accessRequirement.concreteType) {\n    case SUPPORTED_ACCESS_REQUIREMENTS.ACTAccessRequirement:\n    case SUPPORTED_ACCESS_REQUIREMENTS.ManagedACTAccessRequirement:\n    case SUPPORTED_ACCESS_REQUIREMENTS.TermsOfUseAccessRequirement:\n    case SUPPORTED_ACCESS_REQUIREMENTS.SelfSignAccessRequirement:\n      return false\n    default:\n      return true\n  }\n}\n\nexport const sortAccessRequirementByCompletion = async (\n  accessToken: string | undefined,\n  requirements: Array<AccessRequirement>,\n): Promise<Array<AccessRequirementAndStatus>> => {\n  const statuses = requirements.map(req => {\n    return SynapseClient.getAccessRequirementStatus(accessToken, req.id)\n  })\n  const accessRequirementStatuses = await Promise.all(statuses)\n\n  const requirementsAndStatuses = requirements.map(req => {\n    return {\n      accessRequirement: req,\n      accessRequirementStatus: accessRequirementStatuses.find(\n        el => Number(el.accessRequirementId) === req.id,\n      )!,\n    }\n  })\n\n  const sortedRequirementsAndStatuses = sortBy(\n    requirementsAndStatuses,\n    reqAndStatus => {\n      // if its true then it should come first, which means that it should be higher in the list\n      // which is sorted ascendingly\n      return -1 * Number(reqAndStatus.accessRequirementStatus.isApproved)\n    },\n  )\n\n  return sortedRequirementsAndStatuses\n}\n\nexport default function AccessRequirementList({\n  entityId,\n  onHide,\n  accessRequirementFromProps,\n  renderAsModal,\n  numberOfFilesAffected,\n}: AccessRequirementListProps) {\n  const { accessToken } = useSynapseContext()\n\n  const [accessRequirements, setAccessRequirements] = useState<\n    Array<AccessRequirementAndStatus> | undefined\n  >(undefined)\n\n  const [requestDataStep, setRequestDataStep] = useState<number>()\n  const [managedACTAccessRequirement, setManagedACTAccessRequirement] =\n    useState<ManagedACTAccessRequirement>()\n  const [researchProjectId, setresearchProjectId] = useState<string>('')\n  const [formSubmitRequestObject, setFormSubmitRequestObject] =\n    useState<RequestInterface>()\n\n  const entityHeaderProps: UseGetInfoFromIdsProps = {\n    ids: [entityId],\n    type: 'ENTITY_HEADER',\n  }\n\n  const hasTokenChanged = useCompare(accessToken)\n  const shouldUpdateData = hasTokenChanged || !accessRequirements\n\n  const entityInformation = useGetInfoFromIds<EntityHeader>(entityHeaderProps)\n\n  const { data: user } = useGetCurrentUserProfile()\n\n  useEffect(() => {\n    let isCancelled = false\n\n    const getAccessRequirements = async () => {\n      try {\n        if (!shouldUpdateData) {\n          return\n        }\n        if (!accessRequirementFromProps) {\n          const requirements = await getAllAccessRequirements(\n            accessToken,\n            entityId,\n          )\n          const sortedAccessRequirements =\n            await sortAccessRequirementByCompletion(accessToken, requirements)\n          if (!isCancelled) {\n            setAccessRequirements(sortedAccessRequirements)\n          }\n        } else {\n          const sortedAccessRequirements =\n            await sortAccessRequirementByCompletion(\n              accessToken,\n              accessRequirementFromProps,\n            )\n          if (!isCancelled) {\n            setAccessRequirements(sortedAccessRequirements)\n          }\n        }\n\n        // we use a functional update below https://reactjs.org/docs/hooks-reference.html#functional-updates\n        // because we want react hooks to update without a dependency on accessRequirements\n      } catch (err) {\n        console.error('Error on get access requirements: ', err)\n      }\n    }\n\n    getAccessRequirements()\n\n    return () => {\n      isCancelled = true\n    }\n  }, [accessToken, entityId, accessRequirementFromProps, shouldUpdateData])\n\n  // Using Boolean(value) converts undefined,null, 0,'',false -> false\n  // one alternative to using Boolean(value) is the double bang operator !!value,\n  // but doesn't ready well\n  const isSignedIn: boolean = Boolean(accessToken)\n\n  /**\n   * Returns rendering for the access requirement.\n   *\n   * Only supports SelfSignAccessRequirement and TermsOfUseAccessRequirement\n   *\n   * @param {AccessRequirement} accessRequirement accessRequirement being rendered\n   */\n  const renderAccessRequirement = (\n    accessRequirement: AccessRequirement,\n    accessRequirementStatus: AccessRequirementStatus,\n  ) => {\n    switch (accessRequirement.concreteType) {\n      case SUPPORTED_ACCESS_REQUIREMENTS.SelfSignAccessRequirement:\n        return (\n          <SelfSignAccessRequirementComponent\n            accessRequirement={accessRequirement as SelfSignAccessRequirement}\n            accessRequirementStatus={accessRequirementStatus}\n            user={user}\n            onHide={onHide}\n            entityId={entityId}\n          />\n        )\n      case SUPPORTED_ACCESS_REQUIREMENTS.TermsOfUseAccessRequirement:\n        return (\n          <TermsOfUseAccessRequirementComponent\n            accessRequirement={accessRequirement as TermsOfUseAccessRequirement}\n            accessRequirementStatus={accessRequirementStatus}\n            user={user}\n            onHide={onHide}\n            entityId={entityId}\n          />\n        )\n      case SUPPORTED_ACCESS_REQUIREMENTS.ManagedACTAccessRequirement:\n        return (\n          <ManagedACTAccessRequirementComponentNew\n            accessRequirement={accessRequirement as ManagedACTAccessRequirement}\n            accessRequirementStatus={\n              accessRequirementStatus as ManagedACTAccessRequirementStatus\n            }\n            user={user}\n            onHide={onHide}\n            entityId={entityId}\n            requestDataStepCallback={requestDataStepCallback}\n          />\n        )\n      case SUPPORTED_ACCESS_REQUIREMENTS.ACTAccessRequirement:\n        return (\n          <ACTAccessRequirementComponent\n            accessRequirement={accessRequirement as ACTAccessRequirement}\n            accessRequirementStatus={accessRequirementStatus}\n            user={user}\n            onHide={onHide}\n            entityId={entityId}\n          />\n        )\n      // case not supported yet\n      default:\n        return undefined\n    }\n  }\n\n  const requestDataStepCallback = (props: requestDataStepCallbackProps) => {\n    const {\n      managedACTAccessRequirement,\n      step,\n      researchProjectId,\n      formSubmitRequestObject,\n    } = props\n    if (managedACTAccessRequirement) {\n      // required for step 1, 2 form\n      setManagedACTAccessRequirement(managedACTAccessRequirement)\n    }\n    if (researchProjectId) {\n      setresearchProjectId(researchProjectId)\n    }\n    if (formSubmitRequestObject) {\n      setFormSubmitRequestObject(formSubmitRequestObject)\n    }\n    setRequestDataStep(step)\n  }\n\n  const content = (\n    <>\n      <ReactBootstrap.Modal.Header closeButton={true}>\n        <ReactBootstrap.Modal.Title className=\"AccessRequirementList__title\">\n          Data Access Request\n        </ReactBootstrap.Modal.Title>\n      </ReactBootstrap.Modal.Header>\n      <ReactBootstrap.Modal.Body>\n        <div>\n          <h4 className=\"AccessRequirementList__instruction AccessRequirementList__access\">\n            Access For:\n          </h4>\n          <span className=\"AccessRequirementList__file-icon-container\">\n            <IconSvg options={{ icon: 'file', size: '30px' }} />\n          </span>\n          &nbsp;\n          {numberOfFilesAffected && (\n            <span>{numberOfFilesAffected} File(s)</span>\n          )}\n          {!numberOfFilesAffected && (\n            <a\n              className=\"AccessRequirementList__register-text-link\"\n              href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${entityId}`}\n            >\n              {entityInformation[0]?.name}\n            </a>\n          )}\n          <h4\n            className=\"AccessRequirementList__instruction\"\n            style={{ marginTop: '3rem' }}\n          >\n            What do I need to do?\n          </h4>\n          <div className=\"requirement-container\">\n            <AccessApprovalCheckMark isCompleted={isSignedIn} />\n            <div>\n              {!isSignedIn && (\n                <>\n                  <p className=\"AccessRequirementList__signin\">\n                    <a\n                      className={`${SynapseConstants.SRC_SIGN_IN_CLASS} SRC-boldText `}\n                    >\n                      Sign in&nbsp;\n                    </a>\n                    with a Sage Platform (Synapse) user account.\n                  </p>\n                  <p>\n                    If you do not have a Sage Account, you can\n                    <a\n                      className=\"register-text-link bold-text\"\n                      href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!RegisterAccount:0`}\n                    >\n                      &nbsp;Register for free.\n                    </a>\n                  </p>\n                </>\n              )}\n              {isSignedIn && (\n                <p>\n                  You have signed in with the Sage Platform (Synapse) user\n                  account <b>{user?.userName}@synapse.org</b>\n                </p>\n              )}\n            </div>\n          </div>\n          {accessRequirements?.map(\n            ({ accessRequirement, accessRequirementStatus }) => {\n              return (\n                <React.Fragment key={accessRequirement.id}>\n                  {renderAccessRequirement(\n                    accessRequirement,\n                    accessRequirementStatus,\n                  )}\n                </React.Fragment>\n              )\n            },\n          )}\n        </div>\n      </ReactBootstrap.Modal.Body>\n    </>\n  )\n\n  let renderContent = content\n  if (renderAsModal) {\n    switch (requestDataStep) {\n      case 1:\n        renderContent = (\n          <RequestDataAccessStep1\n            managedACTAccessRequirement={managedACTAccessRequirement!}\n            requestDataStepCallback={requestDataStepCallback}\n            onHide={() => onHide?.()}\n          />\n        )\n        break\n      case 2:\n        renderContent = (\n          <RequestDataAccessStep2\n            user={user!}\n            researchProjectId={researchProjectId}\n            managedACTAccessRequirement={managedACTAccessRequirement!}\n            entityId={entityId} // for form submission after save\n            requestDataStepCallback={requestDataStepCallback}\n            onHide={() => onHide?.()}\n          />\n        )\n        break\n      case 3:\n        renderContent = (\n          <CancelRequestDataAccess\n            formSubmitRequestObject={formSubmitRequestObject}\n            onHide={() => onHide?.()} // for closing dialogs\n          />\n        )\n        break\n      case 4:\n        renderContent = (\n          <>\n            <ReactBootstrap.Modal.Header closeButton={false}>\n              <ReactBootstrap.Modal.Title className=\"AccessRequirementList__title\">\n                Please Log In\n              </ReactBootstrap.Modal.Title>\n            </ReactBootstrap.Modal.Header>\n            <ReactBootstrap.Modal.Body\n              className={'AccessRequirementList login-modal '}\n            >\n              <Login\n                sessionCallback={() => {\n                  window.location.reload()\n                }}\n              />\n            </ReactBootstrap.Modal.Body>\n          </>\n        )\n        break\n      case 5:\n        renderContent = <RequestDataAccessSuccess onHide={() => onHide?.()} />\n        break\n      default:\n        renderContent = content\n    }\n    return (\n      <ReactBootstrap.Modal\n        className={\n          !requestDataStep\n            ? 'bootstrap-4-backport AccessRequirementList'\n            : 'bootstrap-4-backport AccessRequirementList modal-auto-height'\n        }\n        onHide={() => onHide?.()}\n        show={true}\n        animation={false}\n        centered={true}\n        scrollable={true}\n        size=\"lg\"\n      >\n        {renderContent}\n      </ReactBootstrap.Modal>\n    )\n  }\n  return <div className=\"AccessRequirementList\">{renderContent}</div>\n}\n"],"names":["useEffect","useRef","isCompleted","_jsx","useState","user","wikiPage","accessRequirement","accessRequirementStatus","entityId","onHide","accessToken","acceptButtonText","setIsApproved","window","gotoSynapseAccessRequirementPage","id","ownerId","APPROVED","SynapseClient","_Fragment","markdown","wikiPageId","ownerObjectId","ownerObjectType","actContactInfo","_jsxs","isApproved","setIsHide","onAcceptClicked","getACTAccessData","SynapseClient.getWikiPageKeyForAccessRequirement","setWikiPage","console","formSubmitRequestObject","setAlert","setShowCloseBtn","ReactBootstrap.Modal","key","message","requestDataStepCallback","setSubmissionState","showSubmissionStatusAlert","setIsSubmissionCanceled","showRequestAccess","submissionState","btnActionText","REJECTED","state","approvedText","getManagedACTAccessData","managedACTAccessRequirement","retrieveExistingResearchProject","mounted","researchProjectRef","setProjectLead","setInstitution","setIntendedDataUseStatement","e","institution","projectLead","intendedDataUseStatement","updateResearchProject","handleSubmit","fileHandleAssociation","className","variant","fileName","researchProjectId","setFormData","dataAccessRequestData","setIsRenewal","setFormSubmitRequestObject","getAccessorsData","getFilesData","ids","GAIN_ACCESS","accessorChanges","Promise","item","accessType","setAccessors","AccessRequirementAttachment","ducTemplateFileHandleId","batchFileRequest","requestedFileTypes","setDUCTemplate","DataAccessRequestAttachment","ducFileHandleId","setDUC","irbFileHandleId","setIRB","getFiles","resp","fileTypes","type","setAttachments","fileHandleId","etag","ENTITY","alertMsg","newAccessorChanges","newAttachments","docs","userName","accessorsArr","value","copy","formCopy","link","msg","USERS_ONLY","onSelectUserCallback","profile","RENEW_ACCESS","REVOKE_ACCESS","associateObjectId","associateObjectType","getSelfSignAccessData","setIsLoading","SynapseConstants.USER_BUNDLE_MASK_IS_CERTIFIED","SynapseConstants.USER_BUNDLE_MASK_IS_VERIFIED","SynapseClient.getUserBundle","setUserBundle","isCertified","PORTAL","isVerified","getTermsOfUseData","SelfSignAccessRequirement","TermsOfUseAccessRequirement","ManagedACTAccessRequirement","ACTAccessRequirement","SUPPORTED_ACCESS_REQUIREMENTS","concreteType","SynapseClient.getAccessRequirementStatus","req","accessRequirementFromProps","renderAsModal","numberOfFilesAffected","getAccessRequirements","setAccessRequirements","isCancelled","ManagedACTAccessRequirementComponentNew","undefined","step","setManagedACTAccessRequirement","setresearchProjectId","setRequestDataStep","name","isSignedIn","SynapseConstants.SRC_SIGN_IN_CLASS","SRC_SIGN_IN_CLASS","requestDataStep","renderContent"],"mappings":"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"}