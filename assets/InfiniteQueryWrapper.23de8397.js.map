{"version":3,"file":"InfiniteQueryWrapper.23de8397.js","sources":["../../src/lib/containers/row_renderers/Dataset.tsx","../../src/lib/containers/row_renderers/Funder.tsx","../../src/lib/utils/functions/getFriendlyPreciseDuration.ts","../../src/lib/containers/row_renderers/ObservationCard.tsx","../../src/lib/containers/CardContainer.tsx","../../src/lib/containers/InfiniteQueryWrapper.tsx"],"sourcesContent":["import * as React from 'react'\nimport { DATASET } from '../../utils/SynapseConstants'\nimport { calculateFriendlyFileSize } from '../../utils/functions/calculateFriendlyFileSize'\nimport * as Utils from './utils'\nimport { getValueOrMultiValue } from '../GenericCard'\nimport { SelectColumn, ColumnModel } from '../../utils/synapseTypes'\nimport { Button } from 'react-bootstrap'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\n\nexport type DatasetProps = {\n  data?: any\n  schema?: any\n  secondaryLabelLimit?: number\n  selectColumns?: SelectColumn[]\n  columnModels?: ColumnModel[]\n}\n\nclass Dataset extends React.Component<DatasetProps, {}> {\n  constructor(props: DatasetProps) {\n    super(props)\n    this.handleLinkClick = this.handleLinkClick.bind(this)\n  }\n\n  public handleLinkClick =\n    (link: string) => (event: React.MouseEvent<HTMLButtonElement>) => {\n      event.preventDefault()\n      window.open(\n        `${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${link}`,\n        '_blank',\n      )\n    }\n\n  public render() {\n    const { data, schema, selectColumns, columnModels } = this.props\n    const datasetName = data[schema.datasetName]\n    const summary = data[schema.summary]\n    const tumorType = getValueOrMultiValue({\n      columnName: 'tumorType',\n      value: data[schema.tumorType],\n      selectColumns,\n      columnModels,\n    }).str\n    const diseaseFocus = getValueOrMultiValue({\n      columnName: 'diseaseFocus',\n      value: data[schema.diseaseFocus],\n      selectColumns,\n      columnModels,\n    }).str\n    const id = data[schema.id]\n    const fundingAgency = data[schema.fundingAgency]\n    const fileCount = data[schema.fileCount]\n    const fileSize = calculateFriendlyFileSize(data[schema.fileSize])\n    const values = [\n      [\n        'FUNDER',\n        getValueOrMultiValue({\n          columnName: 'fundingAgency',\n          value: fundingAgency,\n          selectColumns,\n          columnModels,\n        }).str,\n      ],\n      ['SIZE', fileSize],\n      ['FILES', fileCount],\n    ]\n    return (\n      <div className=\"SRC-portalCard SRC-typeDataset  \">\n        <div className=\"SRC-cardThumbnail\">\n          <Utils.Icon type={DATASET} />\n          <div>{fileSize}</div>\n        </div>\n        <div className=\"SRC-cardContent SRC-dataset\">\n          <div className=\"SRC-type\">Dataset </div>\n          <div>\n            <h3>\n              <a\n                target=\"_self\"\n                href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${id}`}\n              >\n                {datasetName}\n              </a>\n            </h3>\n          </div>\n          <div className=\"SRC-description-dataset\">\n            <p className=\"SRC-description-text\">{summary}</p>\n            <div className=\"SRC-cardAction bootstrap-4-backport\">\n              <Button\n                className=\"pill SRC-datasetButton\"\n                onClick={this.handleLinkClick(id)}\n                variant=\"secondary\"\n              >\n                Download Dataset\n              </Button>\n            </div>\n          </div>\n          <div className=\"SRC-cardAnnotations\">\n            <Utils.ChipContainer chips={[tumorType, diseaseFocus]} />\n          </div>\n        </div>\n        <Utils.CardFooter\n          isHeader={false}\n          secondaryLabelLimit={this.props.secondaryLabelLimit}\n          values={values}\n        />\n      </div>\n    )\n  }\n}\nexport default Dataset\n","import * as React from 'react'\nimport { Button } from 'react-bootstrap'\n\nexport type FunderProps = {\n  data?: any\n  schema?: any\n}\n\nexport default class Funder extends React.Component<FunderProps, {}> {\n  constructor(props: FunderProps) {\n    super(props)\n    this.handleLinkClick = this.handleLinkClick.bind(this)\n  }\n  public handleLinkClick =\n    (link: string) => (event: React.MouseEvent<HTMLButtonElement>) => {\n      event.preventDefault()\n      window.open(link, '_blank')\n    }\n  public render() {\n    const { data, schema } = this.props\n    const organizationName = data[schema.organizationName]\n    const organizationPath = data[schema.organizationPath]\n    const summary = data[schema.summary]\n    const website = data[schema.website]\n    const logoHref: string = data[schema.logo]\n    // remove leading http(s):// and trailing /\n    let websiteDisplayName = website.replace('https://', '')\n    websiteDisplayName = websiteDisplayName.replace('http://', '')\n    if (websiteDisplayName.charAt(websiteDisplayName.length - 1) === '/') {\n      websiteDisplayName = websiteDisplayName.substring(\n        0,\n        websiteDisplayName.length - 1,\n      )\n    }\n    const isOnOrgPath = window.location.hash.substring(1) === organizationPath\n    const style: any = {}\n    let showOrgLink\n    if (!isOnOrgPath) {\n      showOrgLink = (\n        <div className=\"SRC-marginAuto SRC-cardAction bootstrap-4-backport\">\n          <Button\n            className=\"pill-xl\"\n            href={organizationPath}\n            variant=\"secondary\"\n          >\n            View Funded Research\n          </Button>\n        </div>\n      )\n    } else {\n      style.paddingBottom = '42px'\n    }\n    return (\n      <div className=\"SRC-portalCard SRC-typeFunder \" style={style}>\n        <div className=\"SRC-cardContent\">\n          <div className=\"SRC-type\">Organization</div>\n          {logoHref && (\n            <div className=\"SRC-cardThumbnail\">\n              <img alt=\"funder logo\" className=\"SRC-logo\" src={logoHref} />\n            </div>\n          )}\n          <div>\n            <h3>\n              {isOnOrgPath && organizationName}\n              {!isOnOrgPath && (\n                <a href={organizationPath}>{organizationName}</a>\n              )}\n            </h3>\n          </div>\n          <div className=\"SRC-website\">\n            <a rel=\"noopener noreferrer\" target=\"_blank\" href={website}>\n              {websiteDisplayName}\n            </a>\n          </div>\n          <div className=\"SRC-description\">{summary}</div>\n        </div>\n        {showOrgLink}\n      </div>\n    )\n  }\n}\n","import moment, { DurationInputArg1, DurationInputArg2 } from 'moment'\n\nconst getPart = (n: number, unitDescriptor: string) => {\n  if (n > 0) {\n    return `${n} ${unitDescriptor}${n > 1 ? 's' : ''} `\n  }\n  return ''\n}\n\n/**\n * Return a \"humanized\" version of the given time, where the time given is in timeUnits.\n * moment.humanize() precision is unsatisfactory for our purposes.\n */\nexport const getFriendlyPreciseDuration = (\n  time: DurationInputArg1,\n  timeUnits: DurationInputArg2,\n): string => {\n  const duration = moment.duration(time, timeUnits)\n  const years = duration.years()\n  const months = duration.months() % 12\n  const days = duration.days() % 31\n  const hours = duration.hours() % 24\n  const minutes = duration.minutes() % 60\n  const seconds = duration.seconds() % 60\n  return `${getPart(years, 'year')}${getPart(months, 'month')}${getPart(\n    days,\n    'day',\n  )}${getPart(hours, 'hour')}${getPart(minutes, 'minute')}${getPart(\n    seconds,\n    'second',\n  )}`.trim()\n}\n","import * as React from 'react'\nimport UserCard from '../UserCard'\nimport IconSvg from '../IconSvg'\nimport { ShowMore } from './utils'\nimport { getFriendlyPreciseDuration } from '../../utils/functions/getFriendlyPreciseDuration'\nimport { unitOfTime } from 'moment'\nimport { Skeleton } from '@material-ui/lab'\nimport { SkeletonTable } from '../../assets/skeletons/SkeletonTable'\n\ntype ObservationCardSchema = {\n  submitterName: string\n  submitterUserId: string\n  time: string\n  timeUnits: unitOfTime.Base\n  text: string\n  tag: string\n}\n\nexport type ObservationCardProps = {\n  schema: ObservationCardSchema\n  data: Record<ObservationCardSchema[keyof ObservationCardSchema], string>\n}\n\n/**\n * Specialized Observation Card, initially implemented for the NF portal.\n * Expects the following columns: submitterName, submitterUserId, time, timeUnits, text, and tag.\n */\nexport const ObservationCard: React.FunctionComponent<ObservationCardProps> = ({\n  data,\n  schema,\n}: ObservationCardProps) => {\n  const submitterName = data[schema.submitterName]\n  const submitterUserId = data[schema.submitterUserId]\n  const time = data[schema.time]\n  const timeUnits = data[schema.timeUnits] as unitOfTime.Base\n  const text = data[schema.text]\n  const tag = data[schema.tag]\n  return (\n    <div className=\"SRC-portalCard ObservationCard\">\n      <div className=\"ObservationCard__submitter\">\n        {!submitterUserId && <div>{submitterName}</div>}\n        {submitterUserId && (\n          <UserCard size={'SMALL USER CARD'} ownerId={submitterUserId} />\n        )}\n      </div>\n      {time && (\n        <div className=\"ObservationCard__time\">\n          <IconSvg\n            options={{\n              icon: 'time',\n            }}\n          />\n          <span>{getFriendlyPreciseDuration(time, timeUnits)}</span>\n        </div>\n      )}\n      <div className=\"ObservationCard__text\">\n        <ShowMore summary={text} />\n      </div>\n      <div className=\"ObservationCard__tags\">\n        {tag && <span className=\"SRC-tag\">{tag}</span>}\n      </div>\n    </div>\n  )\n}\n\nexport const LoadingObservationCard: React.FunctionComponent = () => {\n  return (\n    <div className=\"SRC-portalCard ObservationCard\">\n      <div className=\"ObservationCard__submitter\">\n        <span>\n          <Skeleton width=\"100px\" />\n        </span>\n      </div>\n      <div className=\"ObservationCard__time\">\n        <IconSvg\n          options={{\n            icon: 'time',\n          }}\n        />\n      </div>\n      <div className=\"ObservationCard__text\">\n        <SkeletonTable numCols={1} numRows={4} />\n      </div>\n      <div className=\"ObservationCard__tags\">\n        <Skeleton width=\"80px\" />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport useGetInfoFromIds from '../utils/hooks/useGetInfoFromIds'\nimport {\n  DATASET,\n  FUNDER,\n  GENERIC_CARD,\n  MEDIUM_USER_CARD,\n  OBSERVATION_CARD,\n} from '../utils/SynapseConstants'\nimport { EntityHeader, Row, ColumnType } from '../utils/synapseTypes/'\nimport { CardConfiguration } from './CardContainerLogic'\nimport GenericCard from './GenericCard'\nimport loadingScreen from './LoadingScreen'\nimport { useInfiniteQueryContext } from './QueryContext'\nimport { Dataset, Funder } from './row_renderers'\nimport {\n  LoadingObservationCard,\n  ObservationCard,\n} from './row_renderers/ObservationCard'\nimport NoContentAvailable from './table/NoContentAvailable'\nimport SearchResultsNotFound from './table/SearchResultsNotFound'\nimport TotalQueryResults from './TotalQueryResults'\nimport UserCardList from './UserCardList'\n\nexport type CardContainerProps = {\n  isHeader?: boolean\n  isAlignToLeftNav?: boolean\n  title?: string\n  facetAliases?: Record<string, string>\n  isLoading?: boolean\n  unitDescription?: string\n} & CardConfiguration\n\nexport const CardContainer = (props: CardContainerProps) => {\n  const {\n    isHeader = false,\n    unitDescription,\n    type,\n    isLoading,\n    secondaryLabelLimit = 3,\n    title,\n    ...rest\n  } = props\n  const infiniteQueryContext = useInfiniteQueryContext()\n  const { data, getLastQueryRequest, appendNextPageToResults, hasNextPage } =\n    infiniteQueryContext\n\n  const queryRequest = getLastQueryRequest()\n  const renderCard = (props: any, type: string) => {\n    switch (type) {\n      case DATASET:\n        return <Dataset {...props} />\n      case FUNDER:\n        return <Funder {...props} />\n      case GENERIC_CARD:\n        return <GenericCard {...props} queryContext={infiniteQueryContext} />\n      case OBSERVATION_CARD:\n        return <ObservationCard {...props} />\n      default:\n        return <div key={props.key} /> // this should never happen\n    }\n  }\n\n  const ids = data?.queryResult!.queryResults.tableId\n    ? [data?.queryResult.queryResults.tableId]\n    : []\n  const tableEntityConcreteType = useGetInfoFromIds<EntityHeader>({\n    ids,\n    type: 'ENTITY_HEADER',\n  })\n  // the cards only show the loading screen on initial load, this occurs when data is undefined\n  if (!data) {\n    return (\n      <div>\n        {isLoading && type === OBSERVATION_CARD && <LoadingObservationCard />}\n        {isLoading && type !== OBSERVATION_CARD && loadingScreen}\n      </div>\n    )\n  } else if (data && data.queryResult!.queryResults.rows.length === 0) {\n    // data was retrieved from the backend but there is none to show.\n    if (queryRequest.query.additionalFilters) {\n      return <SearchResultsNotFound />\n    }\n    // else show \"no results\" UI (see PORTALS-1497)\n    return <NoContentAvailable />\n  }\n  const schema = {}\n  data.queryResult!.queryResults.headers.forEach((element, index) => {\n    schema[element.name] = index\n  })\n  const showViewMoreButton = hasNextPage && (\n    <div className=\"SRC-viewMore bootstrap-4-backport\">\n      <Button\n        variant=\"secondary\"\n        className=\"pill-xl\"\n        onClick={() => {\n          appendNextPageToResults()\n        }}\n      >\n        View More\n      </Button>\n    </div>\n  )\n  let cards\n  if (type === MEDIUM_USER_CARD) {\n    // Hard coding ownerId as a column name containing the user profile ownerId\n    // for each row, grab the column with the ownerId\n    const userIdColumnIndex = data.queryResult!.queryResults.headers.findIndex(\n      el => el.columnType === ColumnType.USERID,\n    )\n    if (userIdColumnIndex === -1) {\n      throw Error(\n        'Type MEDIUM_USER_CARD specified but no columnType USERID found',\n      )\n    }\n    const listIds = data.queryResult!.queryResults.rows.map(\n      el => el.values[userIdColumnIndex],\n    )\n    cards = <UserCardList data={data} list={listIds} size={MEDIUM_USER_CARD} />\n  } else {\n    // render the cards\n    const cardsData = data.queryResult!.queryResults.rows\n    cards = cardsData.length ? (\n      cardsData.map((rowData: Row) => {\n        const key = JSON.stringify(rowData.values)\n        const propsForCard = {\n          key,\n          type,\n          schema,\n          isHeader,\n          secondaryLabelLimit,\n          data: rowData.values,\n          selectColumns: data.selectColumns,\n          columnModels: data.columnModels,\n          tableEntityConcreteType:\n            tableEntityConcreteType[0] && tableEntityConcreteType[0].type,\n          tableId: data?.queryResult!.queryResults.tableId,\n          ...rest,\n        }\n        return renderCard(propsForCard, type)\n      })\n    ) : (\n      <></>\n    )\n  }\n\n  return (\n    <div role=\"list\">\n      {title && <h2 className=\"SRC-card-overview-title\">{title}</h2>}\n      {!title && unitDescription && (\n        <TotalQueryResults frontText={'Displaying'} />\n      )}\n      {/* ReactCSSTransitionGroup adds css fade in property for cards that come into view */}\n      {cards}\n      {showViewMoreButton}\n    </div>\n  )\n}\n\nexport default CardContainer\n","import { cloneDeep } from 'lodash-es'\nimport * as React from 'react'\nimport { useEffect, useMemo, useState } from 'react'\nimport useDeepCompareEffect from 'use-deep-compare-effect'\nimport * as DeepLinkingUtils from '../utils/functions/deepLinkingUtils'\nimport { isFacetAvailable } from '../utils/functions/queryUtils'\nimport { parseEntityIdAndVersionFromSqlStatement } from '../utils/functions/sqlFunctions'\nimport { useGetEntity } from '../utils/hooks/SynapseAPI/entity/useEntity'\nimport { useInfiniteQueryResultBundle } from '../utils/hooks/SynapseAPI/entity/useGetQueryResultBundle'\nimport {\n  AsynchronousJobStatus,\n  QueryBundleRequest,\n  QueryResultBundle,\n  Table,\n} from '../utils/synapseTypes'\nimport {\n  InfiniteQueryContextType,\n  LockedFacet,\n  QueryContextProvider,\n} from './QueryContext'\n\nexport const QUERY_FILTERS_EXPANDED_CSS: string = 'isShowingFacetFilters'\nexport const QUERY_FILTERS_COLLAPSED_CSS: string = 'isHidingFacetFilters'\n\nexport type InfiniteQueryWrapperProps = {\n  children: React.ReactNode | React.ReactNode[]\n  initQueryRequest: QueryBundleRequest\n  componentIndex?: number //used for deep linking\n  shouldDeepLink?: boolean\n  onQueryChange?: (newQueryJson: string) => void\n  onQueryResultBundleChange?: (newQueryResultBundleJson: string) => void\n  lockedFacet?: LockedFacet\n}\n\nexport type SearchQuery = {\n  columnName: string\n  searchText: string\n}\n\n/**\n * Component that manages the state of a Synapse table query. Data can be accessed via QueryContext using\n * either `useQueryContext` or `QueryContextConsumer`.\n */\nexport function InfiniteQueryWrapper(props: InfiniteQueryWrapperProps) {\n  const { initQueryRequest, onQueryChange, onQueryResultBundleChange } = props\n  const [lastQueryRequest, setLastQueryRequest] =\n    useState<QueryBundleRequest>(initQueryRequest)\n  const [currentAsyncStatus, setCurrentAsyncStatus] = useState<\n    AsynchronousJobStatus<QueryBundleRequest, QueryResultBundle> | undefined\n  >(undefined)\n  const {\n    data: infiniteData,\n    hasNextPage,\n    fetchPreviousPage,\n    fetchNextPage,\n    isFetchingNextPage,\n    isLoading: queryIsLoading,\n    error,\n    isPreviousData: newQueryIsFetching,\n    remove,\n  } = useInfiniteQueryResultBundle(\n    lastQueryRequest,\n    {\n      // We use `keepPreviousData` because we don't want to clear out the current data when the query is modified via the UI\n      keepPreviousData: true,\n    },\n    setCurrentAsyncStatus,\n  )\n\n  // Indicate if we're fetching data for the first time (queryIsLoading) or if we're fetching data for a brand new query (newQueryIsFetching)\n  const isLoadingNewBundle = queryIsLoading || newQueryIsFetching\n\n  const { entityId, versionNumber } = parseEntityIdAndVersionFromSqlStatement(\n    lastQueryRequest.query.sql,\n  )!\n\n  const { data: entity } = useGetEntity<Table>(entityId, versionNumber)\n\n  const [currentPage, setCurrentPage] = useState<number | 'ALL'>(0)\n\n  async function appendNextPageToResults(): Promise<void> {\n    if (!hasNextPage) {\n      throw new Error(\n        'Called appendNextPageToResults when there is no next page',\n      )\n    }\n    await fetchNextPage()\n    setCurrentPage('ALL')\n  }\n\n  async function goToNextPage(): Promise<void> {\n    if (!hasNextPage) {\n      throw new Error('Called goToNextPage when there is no next page')\n    }\n    if (currentPage === 'ALL') {\n      throw new Error('Cannot go to next page when all pages are displayed')\n    }\n    await fetchNextPage()\n    setCurrentPage(currentPage + 1)\n  }\n\n  const hasPreviousPage = currentPage !== 'ALL' && currentPage > 0\n\n  async function goToPreviousPage(): Promise<void> {\n    if (currentPage === 'ALL') {\n      throw new Error('Cannot go to previous page when all pages are displayed')\n    }\n    if (!hasPreviousPage) {\n      throw new Error('Called goToNextPage when there is no next page')\n    }\n\n    await fetchPreviousPage()\n    setCurrentPage(currentPage - 1)\n  }\n\n  const data: QueryResultBundle | undefined = useMemo(() => {\n    if (\n      infiniteData == null ||\n      infiniteData.pages.length === 0 ||\n      infiniteData.pages[0].responseBody == null\n    ) {\n      return undefined\n    }\n\n    if (currentPage === 'ALL') {\n      // Modify the first page so the result is the concatenation of all of the fetched rows.\n      return {\n        ...infiniteData?.pages[0].responseBody,\n        queryResult: {\n          ...infiniteData?.pages[0].responseBody?.queryResult,\n          queryResults: {\n            ...infiniteData?.pages[0].responseBody?.queryResult?.queryResults,\n            rows:\n              infiniteData.pages.flatMap(\n                page => page.responseBody!.queryResult?.queryResults.rows,\n              ) ?? [],\n          },\n        },\n      } as QueryResultBundle\n    }\n\n    return infiniteData?.pages[currentPage].responseBody\n  }, [currentPage, infiniteData])\n\n  useDeepCompareEffect(() => {\n    if (onQueryChange) {\n      onQueryChange(JSON.stringify(lastQueryRequest.query))\n    }\n  }, [onQueryChange, lastQueryRequest.query])\n\n  useEffect(() => {\n    if (data && onQueryResultBundleChange) {\n      onQueryResultBundleChange(JSON.stringify(data))\n    }\n  }, [data, onQueryResultBundleChange])\n\n  const componentIndex = props.componentIndex ?? 0\n\n  const isFacetsAvailable = data\n    ? isFacetAvailable(data.facets, data.selectColumns)\n    : true\n\n  /**\n   * Inspect the URL to see if we have a particular query request that we must show.\n   */\n  useEffect(() => {\n    const query = DeepLinkingUtils.getQueryRequestFromLink(\n      'QueryWrapper',\n      componentIndex,\n    )\n    if (query) {\n      setLastQueryRequest(query)\n    }\n  }, [])\n\n  /**\n   * Pass down a deep clone (so no side affects on the child's part) of the\n   * last query request made\n   *\n   * @returns\n   * @memberof QueryWrapper\n   */\n  const getLastQueryRequest = React.useCallback(() => {\n    return cloneDeep(lastQueryRequest)\n  }, [lastQueryRequest])\n\n  /**\n   * Pass down a deep clone (so no side affects on the child's part) of the\n   * first query request made\n   *\n   * @returns\n   * @memberof QueryWrapper\n   */\n  function getInitQueryRequest(): QueryBundleRequest {\n    return cloneDeep(props.initQueryRequest)\n  }\n\n  /**\n   * Execute the given query request, updating all of the data in the QueryContext to match the new query\n   * @param {*} queryRequest Query request as specified by\n   *                         https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   */\n  function executeQueryRequest(queryRequest: QueryBundleRequest) {\n    const clonedQueryRequest = cloneDeep(queryRequest)\n\n    setLastQueryRequest(clonedQueryRequest)\n    setCurrentPage(0)\n\n    if (clonedQueryRequest.query) {\n      const clonedQueryRequestJson = JSON.stringify(clonedQueryRequest.query)\n      const stringifiedQuery = encodeURIComponent(clonedQueryRequestJson)\n      if (props.shouldDeepLink) {\n        if (props.onQueryChange) {\n          props.onQueryChange(clonedQueryRequestJson)\n        } else {\n          DeepLinkingUtils.updateUrlWithNewSearchParam(\n            'QueryWrapper',\n            componentIndex,\n            stringifiedQuery,\n          )\n        }\n      }\n    }\n    /**\n     * TODO: We remove the cached data because it can interfere with user controls, such as the QueryFilter.\n     * For example, if you filter on a facet with value [\"a\"], then value [\"a\", \"b\"], then value [\"a\"] again,\n     * we'll have a cache hit on the last query, so we won't get a loading state, but the controls haven't been updated\n     * to handle cache hits. Forcing a cache miss here fixes this, but ideally the controls should handle this case.\n     */\n    remove()\n    // end TODO\n  }\n\n  /**\n   * remove a particular facet name (e.g. study) and its all possible values based on the parameter specified in the url\n   * this is to remove the facet from the charts, search and filter.\n   * @return data: QueryResultBundle\n   */\n  const dataWithLockedFacetRemoved = useMemo(() => {\n    const lockedFacet = props.lockedFacet?.facet\n    if (lockedFacet && data) {\n      // for details page, return data without the \"locked\" facet\n      const dataCopy: QueryResultBundle = cloneDeep(data)\n      const facets = dataCopy.facets?.filter(\n        item => item.columnName.toLowerCase() !== lockedFacet.toLowerCase(),\n      )\n      dataCopy.facets = facets\n      return dataCopy\n    } else {\n      // for other pages, just return the data\n      return data\n    }\n  }, [data, props.lockedFacet?.facet])\n\n  const context: InfiniteQueryContextType = {\n    data: dataWithLockedFacetRemoved,\n    isLoadingNewPage: isFetchingNextPage,\n    hasNextPage: !!hasNextPage,\n    hasPreviousPage: !!hasPreviousPage,\n    isLoadingNewBundle: isLoadingNewBundle,\n    getLastQueryRequest,\n    getInitQueryRequest,\n    error: error,\n    entity,\n    executeQueryRequest,\n    isFacetsAvailable,\n    asyncJobStatus: currentAsyncStatus,\n    appendNextPageToResults: appendNextPageToResults,\n    goToNextPage,\n    goToPreviousPage,\n  }\n  /**\n   * Render the children without any formatting\n   */\n  const { children } = props\n  const loadingCursorClass =\n    isLoadingNewBundle || isFetchingNextPage ? 'SRC-logo-cursor' : ''\n  return (\n    <QueryContextProvider queryContext={context}>\n      <div\n        className={`SRC-wrapper ${loadingCursorClass} ${\n          isFacetsAvailable ? 'has-facets' : ''\n        }`}\n      >\n        {children}\n      </div>\n    </QueryContextProvider>\n  )\n}\n"],"names":["React","event","window","data","schema","selectColumns","columnModels","tumorType","diseaseFocus","fundingAgency","_jsxs","_jsx","Utils.Icon","DATASET","fileSize","id","datasetName","summary","Utils.ChipContainer","Utils.CardFooter","secondaryLabelLimit","websiteDisplayName","style","showOrgLink","organizationPath","logoHref","organizationName","website","moment","submitterName","submitterUserId","text","tag","unitDescription","type","isLoading","title","rest","getLastQueryRequest","appendNextPageToResults","hasNextPage","props","infiniteQueryContext","ids","index","cards","listIds","MEDIUM_USER_CARD","key","isHeader","values","tableId","_Fragment","initQueryRequest","onQueryChange","onQueryResultBundleChange","infiniteData","fetchPreviousPage","fetchNextPage","isFetchingNextPage","queryIsLoading","error","newQueryIsFetching","remove","entityId","versionNumber","entity","setCurrentPage","responseBody","queryResult","queryResults","useDeepCompareEffect","useEffect","DeepLinkingUtils.getQueryRequestFromLink","setLastQueryRequest","DeepLinkingUtils","dataCopy","dataWithLockedFacetRemoved","hasPreviousPage","isLoadingNewBundle","getInitQueryRequest","executeQueryRequest","isFacetsAvailable","currentAsyncStatus","goToNextPage","goToPreviousPage","children","context"],"mappings":"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"}