{"version":3,"file":"useFavorites.610bd85e.js","sources":["../../src/lib/utils/hooks/SynapseAPI/useFavorites.ts"],"sourcesContent":["import {\n  UseInfiniteQueryOptions,\n  useQuery,\n  UseQueryOptions,\n  useInfiniteQuery,\n} from 'react-query'\nimport { SynapseClient } from '../..'\nimport { SynapseClientError } from '../../SynapseClientError'\nimport { useSynapseContext } from '../../SynapseContext'\nimport { EntityHeader, PaginatedResults } from '../../synapseTypes'\n\nexport function useGetFavorites(\n  options?: UseQueryOptions<\n    PaginatedResults<EntityHeader>,\n    SynapseClientError,\n    PaginatedResults<EntityHeader>\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<PaginatedResults<EntityHeader>, SynapseClientError>(\n    ['favorites'],\n    () => SynapseClient.getUserFavorites(accessToken),\n    options,\n  )\n}\n\nexport function useGetFavoritesInfinite(\n  options?: UseInfiniteQueryOptions<\n    PaginatedResults<EntityHeader>,\n    SynapseClientError\n  >,\n) {\n  const LIMIT = 10\n\n  const { accessToken } = useSynapseContext()\n\n  return useInfiniteQuery<PaginatedResults<EntityHeader>, SynapseClientError>(\n    ['favorites', 'infinite'],\n    async context => {\n      return SynapseClient.getUserFavorites(\n        accessToken,\n        context.pageParam, // pass the context.pageParam for the new offset\n        LIMIT,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        if (lastPage.results.length > 0) return pages.length * LIMIT\n        //set the new offset to (page * limit)\n        else return undefined\n      },\n    },\n  )\n}\n"],"names":["SynapseClient.getUserFavorites"],"mappings":"8IAWO,WACL,EAKA,CACM,KAAA,CAAE,eAAgB,IACjB,MAAA,GACL,CAAC,WAAW,EACZ,IAAMA,EAA+B,CAAW,EAChD,CACF,CACF,CAEO,WACL,EAIA,CAGM,KAAA,CAAE,eAAgB,IAExB,MAAO,GACL,CAAC,YAAa,UAAU,EACxB,KAAM,IACGA,EACL,EACA,EAAQ,UACR,EACF,EAEF,CACE,GAAG,EACH,iBAAkB,CAAC,EAAU,IAAU,CACjC,GAAA,EAAS,QAAQ,OAAS,EAAG,MAAO,GAAM,OAAS,EAGzD,CAAA,CAEJ,CACF"}