{"version":3,"file":"AccessTokenPage.stories.b8798910.js","sources":["../../src/lib/utils/hooks/SynapseAPI/user/usePersonalAccessToken.ts","../../src/lib/utils/synapseTypes/AccessToken/ScopeDescriptions.ts","../../src/lib/containers/personal_access_token/AccessTokenCard.tsx","../../src/lib/containers/personal_access_token/CreateAccessTokenModal.tsx","../../src/lib/containers/personal_access_token/AccessTokenPage.tsx"],"sourcesContent":["import {\n  UseInfiniteQueryOptions,\n  useInfiniteQuery,\n  QueryFunctionContext,\n  QueryKey,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { AccessTokenRecordList } from '../../../synapseTypes/AccessToken/AccessTokenRecord'\n\nexport function useGetPersonalAccessTokensInfinite(\n  options?: UseInfiniteQueryOptions<AccessTokenRecordList, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n\n  return useInfiniteQuery<AccessTokenRecordList, SynapseClientError>(\n    ['getPersonalAccessTokens'],\n    async (context: QueryFunctionContext<QueryKey, string | undefined>) => {\n      return await SynapseClient.getPersonalAccessTokenRecords(\n        accessToken,\n        context.pageParam,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n","export const scopeDescriptions = {\n  openid: {\n    displayName: 'OpenID',\n    description: 'Access to your Synapse identity and certain user information',\n  },\n  view: {\n    displayName: 'View',\n    description: 'Permission to view the content which you can view',\n  },\n  modify: {\n    displayName: 'Modify',\n    description:\n      'Permission to modify the content which you can modify (create, change, delete)',\n  },\n  download: {\n    displayName: 'Download',\n    description: 'Permission to download the content which you can download',\n  },\n  authorize: {\n    displayName: 'Authorize',\n    description:\n      'Permission to authorize others to access the resources you control',\n  },\n  offline_access: {\n    displayName: 'Offline Access',\n    description:\n      'Permission to access the resources authorized here when you are not logged in, until you explicitly revoke access',\n  },\n}\n","import moment from 'moment'\nimport React, { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { SynapseClient } from '../../utils/'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { AccessTokenRecord } from '../../utils/synapseTypes/AccessToken/AccessTokenRecord'\nimport { scopeDescriptions } from '../../utils/synapseTypes/AccessToken/ScopeDescriptions'\nimport Tooltip from '../../utils/tooltip/Tooltip'\nimport IconSvg from '../IconSvg'\nimport WarningModal from '../synapse_form_wrapper/WarningModal'\n\nexport type AccessTokenCardProps = {\n  /** Record referring to an access token, not a token itself */\n  accessToken: AccessTokenRecord\n  onDelete: (...args: any[]) => void\n}\n\nexport const AccessTokenCard: React.FunctionComponent<AccessTokenCardProps> = ({\n  accessToken,\n  onDelete,\n}: AccessTokenCardProps) => {\n  const { accessToken: authToken } = useSynapseContext()\n  const [showModal, setShowModal] = useState(false)\n  const handleError = useErrorHandler()\n\n  const isExpired = accessToken.state === 'EXPIRED'\n\n  return (\n    <div\n      className={\n        'cardContainer PersonalAccessTokenCard' +\n        (isExpired ? ' bg-warning' : '')\n      }\n    >\n      <WarningModal\n        title={'Confirm Deletion'}\n        modalBody={\n          <>\n            <p>\n              If you delete this token, any applications using it will stop\n              working. This action cannot be undone.\n            </p>\n            <p className=\"SRC-boldText\">\n              Are you sure you want to delete this token?\n            </p>\n          </>\n        }\n        confirmButtonText={'Delete Token'}\n        onCancel={() => setShowModal(false)}\n        onConfirm={(id: string) => {\n          SynapseClient.deletePersonalAccessToken(id, authToken)\n            .then(() => {\n              onDelete()\n              setShowModal(false)\n            })\n            .catch(error => {\n              handleError(error)\n            })\n        }}\n        confirmButtonVariant=\"danger\"\n        show={showModal}\n        onConfirmCallbackArgs={[accessToken.id, authToken]}\n      ></WarningModal>\n\n      <div className=\"SRC-cardContent\">\n        <div className=\"SRC-eqHeightRow SRC-userCardName\">\n          <span className={'SRC-blackText'}>{accessToken.name}</span>\n          {isExpired && (\n            <Tooltip\n              title=\"This token has expired. It no longer works and can only be deleted.\"\n              enterNextDelay={100}\n            >\n              <span aria-hidden=\"true\">\n                <IconSvg options={{ icon: 'warning' }} />\n              </span>\n            </Tooltip>\n          )}\n        </div>\n\n        <div className=\"SRC-eqHeightRow\">\n          <span>Permissions: </span>\n          {accessToken.scopes.map(scope => {\n            return (\n              <span\n                className=\"PersonalAccessTokenCard__ScopeName SRC-primary-text-color SRC-primary-color-hover SRC-hand-cursor SRC-inlineFlex\"\n                data-tip={scopeDescriptions[scope].description}\n                key={scope}\n              >\n                {scopeDescriptions[scope].displayName}\n              </span>\n            )\n          })}\n        </div>\n        <div className=\"SRC-eqHeightRow\">\n          <span>Last used {moment(accessToken.lastUsed).fromNow()}</span>\n          <span className={'SRC-deemphasized-text'}>{' | '}</span>\n          <span>Created {moment(accessToken.createdOn).fromNow()}</span>\n        </div>\n      </div>\n      {/* Delete button */}\n      <div className=\"PersonalAccessTokenCard__DeleteButton\">\n        <Button\n          variant=\"default\"\n          aria-label=\"delete\"\n          onClick={() => {\n            if (isExpired) {\n              // token no longer works, no need for warning/confirmation\n              SynapseClient.deletePersonalAccessToken(accessToken.id, authToken)\n                .then(() => {\n                  onDelete()\n                })\n                .catch(error => {\n                  handleError(error)\n                })\n            } else {\n              setShowModal(true)\n            }\n          }}\n        >\n          <IconSvg options={{ icon: 'delete' }} aria-hidden=\"true\" />\n        </Button>\n      </div>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport {\n  Button,\n  Form,\n  FormControl,\n  FormLabel,\n  Modal,\n  ModalBody,\n} from 'react-bootstrap'\nimport { SynapseClient } from '../../utils'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { AccessTokenGenerationRequest } from '../../utils/synapseTypes/AccessToken/AccessTokenGenerationRequest'\nimport { scopeDescriptions } from '../../utils/synapseTypes/AccessToken/ScopeDescriptions'\nimport { CopyToClipboardInput } from '../CopyToClipboardInput'\nimport { ErrorBanner } from '../ErrorBanner'\nimport loadingScreen from '../LoadingScreen'\nimport { Checkbox } from '../widgets/Checkbox'\n\nconst INVALID_INPUT_MSG =\n  'You must provide a token name and at least one permission.'\n\nexport type CreateAccessTokenModalProps = {\n  onClose: (...args: any[]) => void\n  onCreate: (...args: any[]) => void\n}\n\nexport const CreateAccessTokenModal: React.FunctionComponent<\n  CreateAccessTokenModalProps\n> = ({ onClose, onCreate }: CreateAccessTokenModalProps) => {\n  const { accessToken } = useSynapseContext()\n  const [tokenName, setTokenName] = React.useState('')\n  const [viewAccess, setViewAccess] = React.useState(true)\n  const [downloadAccess, setDownloadAccess] = React.useState(false)\n  const [modifyAccess, setModifyAccess] = React.useState(false)\n\n  const [isLoading, setIsLoading] = React.useState(false)\n\n  const [showCreatedToken, setShowCreatedToken] = React.useState(false)\n  const [createdToken, setCreatedToken] = React.useState('')\n\n  const [errorMessage, setErrorMessage] = React.useState('')\n  const [showErrorMessage, setShowErrorMessage] = React.useState(false)\n\n  const handleTokenNameChange = (event: React.ChangeEvent) => {\n    setTokenName((event.target as HTMLInputElement).value)\n  }\n\n  const validateInput = (tokenName: string, access: boolean[]): boolean => {\n    return !!tokenName && access.some(x => x)\n  }\n\n  const onSubmit = async (\n    clickEvent: React.MouseEvent<HTMLElement, MouseEvent>,\n  ): Promise<void> => {\n    clickEvent.preventDefault()\n    if (validateInput(tokenName, [viewAccess, downloadAccess, modifyAccess])) {\n      try {\n        const request: AccessTokenGenerationRequest = {\n          scope: [],\n          name: tokenName,\n        }\n        if (viewAccess) request.scope.push('view')\n        if (downloadAccess) request.scope.push('download')\n        if (modifyAccess) request.scope.push('modify')\n\n        setIsLoading(true)\n\n        const response = await SynapseClient.createPersonalAccessToken(\n          request,\n          accessToken,\n        )\n\n        setIsLoading(false)\n        setCreatedToken(response.token)\n        setShowCreatedToken(true)\n        onCreate()\n      } catch (err) {\n        setIsLoading(false)\n        setErrorMessage(err.reason)\n        setShowErrorMessage(true)\n      }\n    } else {\n      setErrorMessage(INVALID_INPUT_MSG)\n      setShowErrorMessage(true)\n    }\n  }\n\n  return (\n    <Modal\n      className={'bootstrap-4-backport AccessTokenModal'}\n      animation={false}\n      show={true}\n      onHide={onClose}\n      backdrop=\"static\"\n    >\n      <Form>\n        <Modal.Header closeButton>\n          <Modal.Title>Create New Personal Access Token</Modal.Title>\n        </Modal.Header>\n        <ModalBody>\n          {isLoading ? (\n            loadingScreen\n          ) : showCreatedToken ? (\n            <>\n              <span className=\"SRC-boldText\">\n                This token will not be able to be retrieved again.\n              </span>{' '}\n              <span>\n                If needed, generate a new personal access token, and delete this\n                one.\n              </span>\n              <div className=\"AccessTokenModal__CopyToClipboardContainer\">\n                <CopyToClipboardInput\n                  value={createdToken}\n                  inputWidth={'350px'}\n                />\n              </div>\n              <p>\n                This token grants access to your account functions and should be\n                treated like a password.\n              </p>\n            </>\n          ) : (\n            <div className=\"SRC-marginFive\">\n              <div className=\"SRC-marginBottomTen\">\n                <FormLabel className=\"SRC-boldText\">Token Name</FormLabel>\n                <FormControl\n                  autoFocus\n                  className=\"AccessTokenModal__TokenNameInput\"\n                  value={tokenName}\n                  onChange={handleTokenNameChange}\n                  type=\"text\"\n                  placeholder=\"e.g. Synapse command line access on my laptop\"\n                ></FormControl>\n              </div>\n              <div className=\"SRC-marginBottomTop\">\n                <FormLabel className=\"SRC-boldText\">\n                  Token Permissions\n                </FormLabel>\n                <Checkbox\n                  label={scopeDescriptions.view.displayName}\n                  checked={viewAccess}\n                  onChange={() => setViewAccess(!viewAccess)}\n                >\n                  <div className=\"AccessTokenModal__ScopeDescription\">\n                    {scopeDescriptions.view.description}. Required to use\n                    Synapse programmatic clients.\n                  </div>\n                </Checkbox>\n                <Checkbox\n                  label={scopeDescriptions.download.displayName}\n                  checked={downloadAccess}\n                  onChange={() => setDownloadAccess(!downloadAccess)}\n                >\n                  <div className=\"AccessTokenModal__ScopeDescription\">\n                    {scopeDescriptions.download.description}\n                  </div>\n                </Checkbox>\n                <Checkbox\n                  label={scopeDescriptions.modify.displayName}\n                  checked={modifyAccess}\n                  onChange={() => setModifyAccess(!modifyAccess)}\n                >\n                  <div className=\"AccessTokenModal__ScopeDescription\">\n                    {scopeDescriptions.modify.description}\n                  </div>\n                </Checkbox>\n              </div>\n              <div className=\"SRC-center-text\">\n                {showErrorMessage && (\n                  <ErrorBanner error={errorMessage}></ErrorBanner>\n                )}\n              </div>\n            </div>\n          )}\n        </ModalBody>\n        <Modal.Footer>\n          {showCreatedToken ? (\n            <Button variant=\"outline\" onClick={onClose}>\n              Close\n            </Button>\n          ) : (\n            <>\n              <Button variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" variant=\"sds-primary\" onClick={onSubmit}>\n                Create Token\n              </Button>\n            </>\n          )}\n        </Modal.Footer>\n      </Form>\n    </Modal>\n  )\n}\n","import React, { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useGetPersonalAccessTokensInfinite } from '../../utils/hooks/SynapseAPI/user/usePersonalAccessToken'\nimport { ErrorBanner, SynapseErrorBoundary } from '../ErrorBanner'\nimport loadingScreen from '../LoadingScreen'\nimport { AccessTokenCard } from './AccessTokenCard'\nimport { CreateAccessTokenModal } from './CreateAccessTokenModal'\n\nexport type AccessTokenPageProps = {\n  title: string\n  body: string | JSX.Element\n}\n\nexport const AccessTokenPage: React.FunctionComponent<AccessTokenPageProps> = ({\n  title,\n  body,\n}: AccessTokenPageProps) => {\n  const [showCreateTokenModal, setShowCreateTokenModal] = useState(false)\n\n  const {\n    data: infiniteData,\n    isLoading,\n    error,\n    refetch,\n    fetchNextPage,\n    hasNextPage,\n  } = useGetPersonalAccessTokensInfinite()\n\n  // We rerender the list whenever a token is created or deleted to ensure we are up-to-date\n  const rerenderList = () => {\n    refetch()\n  }\n\n  const tokenRecords = infiniteData?.pages.flatMap(page => page.results) ?? []\n\n  return (\n    <div className=\"PersonalAccessTokenPage bootstrap-4-backport\">\n      <div className=\"PersonalAccessTokenPage__Header\">\n        <div className=\"PersonalAccessTokenPage__Header__CopyText\">\n          <h1>{title}</h1>\n          {body}\n        </div>\n        <div className=\"PersonalAccessTokenPage__Header__CreateButton\">\n          <Button\n            variant=\"sds-primary\"\n            onClick={() => setShowCreateTokenModal(true)}\n          >\n            Create New Token\n          </Button>\n        </div>\n      </div>\n      <SynapseErrorBoundary>\n        {showCreateTokenModal && (\n          <CreateAccessTokenModal\n            onClose={() => setShowCreateTokenModal(false)}\n            onCreate={rerenderList}\n          ></CreateAccessTokenModal>\n        )}\n\n        <div>\n          {!isLoading && tokenRecords.length === 0 && (\n            <div className=\"PersonalAccessTokenPage__NoTokensMessage SRC-text-title\">\n              You currently have no personal access tokens.\n            </div>\n          )}\n          <div className=\"PersonalAccessTokenPage__CardList\">\n            {tokenRecords.map(accessToken => {\n              return (\n                <AccessTokenCard\n                  key={accessToken.id}\n                  accessToken={accessToken}\n                  onDelete={rerenderList}\n                />\n              )\n            })}\n            {isLoading && loadingScreen}\n            {!isLoading && hasNextPage && !error && (\n              <div className=\"PersonalAccessTokenPage__CardList__LoadMore\">\n                <Button\n                  className=\"PersonalAccessTokenPage__CardList__LoadMore__Button\"\n                  variant=\"sds-primary\"\n                  onClick={() => {\n                    fetchNextPage()\n                  }}\n                >\n                  Load More\n                </Button>\n              </div>\n            )}\n          </div>\n          {error && <ErrorBanner error={error}></ErrorBanner>}\n        </div>\n      </SynapseErrorBoundary>\n    </div>\n  )\n}\n"],"names":["SynapseClient.getPersonalAccessTokenRecords","useState","accessToken","onDelete","authToken","_jsxs","_jsx","_Fragment","SynapseClient","setShowModal","handleError","showModal","name","description","displayName","moment","onClose","onCreate","setTokenName","clickEvent","tokenName","request","setIsLoading","SynapseClient.createPersonalAccessToken","setCreatedToken","setShowCreatedToken","setErrorMessage","setShowErrorMessage","createdToken","handleTokenNameChange","viewAccess","downloadAccess","modifyAccess","errorMessage","onSubmit","title","body","infiniteData","isLoading","error","refetch","fetchNextPage","hasNextPage","rerenderList"],"mappings":"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"}