{"version":3,"file":"ExternalFileHandleInterface.d59389e5.js","sources":["../../src/lib/utils/synapseTypes/ExternalFileHandleInterface.ts"],"sourcesContent":["import { FileHandle } from './FileHandle'\nimport assert from 'assert'\n\nexport enum ExternalFileHandleConcreteTypeEnum {\n  ProxyFileHandle = 'org.sagebionetworks.repo.model.file.ProxyFileHandle',\n  ExternalObjectStoreFileHandle = 'org.sagebionetworks.repo.model.file.ExternalObjectStoreFileHandle',\n  ExternalFileHandle = 'org.sagebionetworks.repo.model.file.ExternalFileHandle',\n}\n\n/*\nhttps://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/file/ExternalObjectStoreFileHandle.html\nRepresents a file stored in an S3 Bucket to which Synapse cannot access. \nTogether with ExternalObjectStorageLocationSetting, this object provides the information the client requires to access the S3 file.\n\n*/\nexport type ExternalObjectStoreFileHandle = ExternalFileHandleInterface & {\n  /** This is used to indicate the implementation of this interface */\n  concreteType: ExternalFileHandleConcreteTypeEnum.ExternalObjectStoreFileHandle\n  /** The bucket to use. Do NOT set this value when creating a ExternalObjectStoreFileHandle since it will be it will be overwritten with the value defined in the ExternalObjectStorageLocationSetting it references. */\n  readonly bucket: string\n}\n\nexport function assertIsExternalFileHandle(\n  x?: FileHandle,\n): asserts x is ExternalFileHandle {\n  if (\n    x?.concreteType !== ExternalFileHandleConcreteTypeEnum.ExternalFileHandle\n  ) {\n    throw new assert.AssertionError({\n      message: ` ExternalFileHandle expected but found ${x}`,\n    })\n  }\n}\n\n/*\n  https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/file/ExternalFileHandle.html\n  An ExternalFileHandle represents a file that is not stored in Synapse. Instead, ExternalFileHandles reside somewhere accessible via a URL. Synapse will attempt to generate a preview for any external URL that can be publicly read.\n*/\nexport type ExternalFileHandle = ExternalFileHandleInterface & {\n  concreteType: ExternalFileHandleConcreteTypeEnum.ExternalFileHandle // This is used to indicate the implementation of this interface. For example, an S3FileHandle should be set to: org.sagebionetworks.repo.model.file.S3FileHandle\n  externalURL: string //\tThe external URL of this file.\n}\n\n/*\n https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/file/ProxyFileHandle.html\n Reference to a file that accessible via a proxy server. Each ProxyFileHandle must reference a ProxyStorageLocationSettings that defines how the files are accessed.\n*/\nexport type ProxyFileHandle = ExternalFileHandleInterface & {\n  concreteType: ExternalFileHandleConcreteTypeEnum.ProxyFileHandle // This is used to indicate the implementation of this interface. For example, an S3FileHandle should be set to: org.sagebionetworks.repo.model.file.S3FileHandle\n  filePath: string //\tSTRING\tThe relative path of this file within the proxy.\n}\n\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#typeof-type-guards\nexport function implementsExternalFileHandleInterface(\n  x: ExternalFileHandleInterface,\n): x is ExternalFileHandleInterface {\n  return Object.values<string>(ExternalFileHandleConcreteTypeEnum).includes(\n    x.concreteType,\n  )\n}\n\n/* \n  Defines FileHandles for files that are stored externally and can not be controlled by Synapse. \n  All file access authentication and download/upload/delete operations are delegated the client.\n\n  Note - while the interface is empty this keeps parity between the backend and frontend types.\n*/\nexport interface ExternalFileHandleInterface extends FileHandle {}\n"],"names":[],"mappings":"6BAGY,GAAA,IAAA,GACQ,GAAA,gBAAA,sDACc,EAAA,8BAAA,oEACX,EAAA,mBAAA,yDAHX,IAAA,GAAA,CAAA,CAAA,EAkDL,WACL,EACkC,CAClC,MAAO,QAAO,OAAe,CAAkC,EAAE,SAC/D,EAAE,YACJ,CACF"}