{"version":3,"file":"ForumSearch.stories.cc49bc94.js","sources":["../../src/lib/containers/DiscussionSearchResult.tsx","../../src/lib/containers/ForumSearch.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  getReply,\n  getReplyMessageUrl,\n  getThreadMessageUrl,\n  getThread,\n  getUserProfileById,\n} from '../utils/SynapseClient'\nimport { useSynapseContext } from '../utils/SynapseContext'\nimport { UserProfile } from '../utils/synapseTypes'\nimport {\n  DiscussionReplyBundle,\n  DiscussionThreadBundle,\n} from '../utils/synapseTypes/DiscussionBundle'\nimport moment from 'moment'\nimport Typography from '../utils/typography/Typography'\nimport { Col, Row } from 'react-bootstrap'\nimport UserCard from './UserCard'\nimport { SMALL_USER_CARD } from '../utils/SynapseConstants'\nimport IconSvg from './IconSvg'\nimport { Skeleton } from '@material-ui/lab'\nimport { SkeletonTable } from '../assets/skeletons/SkeletonTable'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../utils/functions/getEndpoint'\n\nexport const getMessage = async (url: string): Promise<any> => {\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'authorization',\n      'Content-Type': 'text/plain; charset=utf-8',\n    },\n  })\n  return response.text()\n}\n\nexport type DiscussionSearchResultProps = {\n  threadId: string\n  replyId?: string\n}\n\nconst DiscussionSearchResult = (props: DiscussionSearchResultProps) => {\n  const { threadId, replyId } = props\n  const { accessToken } = useSynapseContext()\n  const [threadBundle, setThreadBundle] = useState<DiscussionThreadBundle>()\n  const [messageUrl, setMessageUrl] = useState<string>('')\n  const [replyBundle, setReplyBundle] = useState<DiscussionReplyBundle>()\n  const [replyAuthor, setReplyAuthor] = useState<UserProfile>()\n  const [isLoading, setIsLoading] = useState(false)\n\n  const getThreadOrReply = async () => {\n    let newMessageUrl\n    const thread = await getThread(threadId, accessToken)\n    setIsLoading(true)\n    if (replyId) {\n      const reply = await getReply(replyId, accessToken)\n      newMessageUrl = await getReplyMessageUrl(reply.messageKey, accessToken)\n      setReplyAuthor(await getUserProfileById(accessToken, reply.createdBy))\n      setReplyBundle(reply)\n    } else {\n      setReplyAuthor(await getUserProfileById(accessToken, thread.createdBy))\n      newMessageUrl = await getThreadMessageUrl(thread.messageKey, accessToken)\n    }\n    setMessageUrl(await getMessage(newMessageUrl.messageUrl))\n    setThreadBundle(thread)\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n    getThreadOrReply()\n  }, [])\n\n  const getUrl = (threadId: string, projectId: string, replyId?: string) => {\n    let url = `${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${projectId}/discussion/threadId=${threadId}`\n    if (replyId) {\n      url += `&replyId=${replyId}`\n    }\n    return url\n  }\n\n  return (\n    <div className=\"search-result-container\">\n      <Row>\n        <Col xs={1}>\n          {isLoading ? (\n            <Skeleton variant=\"circle\" width=\"40px\" height=\"40px\" />\n          ) : replyId ? (\n            <IconSvg options={{ icon: 'replyTwoTone' }} />\n          ) : (\n            <IconSvg options={{ icon: 'chatTwoTone' }} />\n          )}\n        </Col>\n        <Col xs={11}>\n          {isLoading ? (\n            <SkeletonTable numCols={1} numRows={4} />\n          ) : (\n            <>\n              <Typography variant=\"headline3\">\n                <a\n                  className=\"link\"\n                  href={getUrl(\n                    threadBundle?.id!,\n                    threadBundle?.projectId!,\n                    replyBundle?.id,\n                  )}\n                >\n                  {threadBundle?.title}\n                </a>\n              </Typography>\n              <div className=\"truncated\">\n                <Typography variant=\"body1\">{messageUrl}</Typography>\n              </div>\n              <div className=\"search-result-footer\">\n                {replyId ? 'Reply' : 'Thread'} by{' '}\n                {\n                  <UserCard\n                    size={SMALL_USER_CARD}\n                    ownerId={replyAuthor?.ownerId!}\n                  />\n                }{' '}\n                {moment(replyBundle?.createdOn).format('l LT')}\n              </div>\n            </>\n          )}\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default DiscussionSearchResult\n","import React, { useEffect, useState } from 'react'\nimport { forumSearch, getEntity } from '../utils/SynapseClient'\nimport {\n  DiscussionSearchResponse,\n  Match,\n} from '../utils/synapseTypes/DiscussionSearch'\nimport { useSynapseContext } from '../utils/SynapseContext'\nimport DiscussionReply from './DiscussionSearchResult'\nimport { Entity } from '../utils/synapseTypes'\nimport Typography from '../utils/typography/Typography'\nimport NoSearchResults from '../assets/icons/NoSearchResults'\nimport { Button } from 'react-bootstrap'\nimport IconSvg from './IconSvg'\nimport { displayToast } from './ToastMessage'\n\nexport type ForumSearchProps = {\n  forumId: string\n  projectId?: string\n  onSearchResultsVisible?: (visible: boolean) => void\n}\n\nconst ForumSearch = (props: ForumSearchProps) => {\n  const { onSearchResultsVisible } = props\n  const { accessToken } = useSynapseContext()\n  const [searchInput, setSearchInput] = useState<string>('')\n  const [searchResult, setSearchResult] = useState<DiscussionSearchResponse>()\n  const [matchList, setMatchList] = useState<Match[]>()\n  const [entity, setEntity] = useState<Entity | undefined>()\n  const [noSearchResult, setNoSearchResult] = useState(false)\n\n  const onSearch = async () => {\n    if (onSearchResultsVisible) {\n      onSearchResultsVisible(true)\n    }\n    try {\n      setSearchResult(undefined)\n      setNoSearchResult(false)\n      const searchResponse = await forumSearch(\n        {\n          searchString: searchInput,\n          nextPageToken: undefined,\n        },\n        props.forumId,\n        accessToken,\n      )\n      if (searchResponse.matches.length == 0) {\n        setNoSearchResult(true)\n      }\n      setSearchResult(searchResponse)\n      setMatchList(searchResponse.matches)\n    } catch (err: any) {\n      displayToast(err.reason as string, 'danger')\n    }\n  }\n\n  const onResetSearch = () => {\n    if (onSearchResultsVisible) {\n      onSearchResultsVisible(false)\n    }\n    setSearchInput('')\n    setSearchResult(undefined)\n    setNoSearchResult(false)\n    setMatchList(undefined)\n  }\n\n  useEffect(() => {\n    const fetchEntity = async () => {\n      if (props.projectId) {\n        const entity = await getEntity(accessToken, props.projectId)\n        setEntity(entity)\n      }\n    }\n    fetchEntity()\n  }, [accessToken, props.projectId])\n\n  const NoSearchResultComponent = () => {\n    return (\n      <div className=\"text-center\">\n        {NoSearchResults}\n        <Typography variant=\"body1\">No results with this query</Typography>\n        <Typography variant=\"body2\">\n          Search the full text of posts, replies, and titles\n        </Typography>\n      </div>\n    )\n  }\n\n  const onLoadMore = async () => {\n    const searchResponse = await forumSearch(\n      {\n        searchString: searchInput,\n        nextPageToken: searchResult?.nextPageToken,\n      },\n      props.forumId,\n      accessToken,\n    )\n    setSearchResult(searchResponse)\n    if (matchList) {\n      setMatchList([...matchList, ...searchResponse.matches])\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport ForumSearch\">\n      <div>\n        <span className=\"SearchIcon\">\n          <IconSvg options={{ icon: 'search' }} />\n        </span>\n        <input\n          role=\"textbox\"\n          type=\"search\"\n          className={`SearchBar  ${searchResult ? 'SearchBarResult' : ''}`}\n          placeholder=\"Search discussions\"\n          value={searchInput}\n          onChange={event => {\n            setSearchInput(event.target.value)\n          }}\n          onKeyDown={(event: any) => {\n            if (event.key === 'Enter') {\n              onSearch()\n            }\n          }}\n        />\n        {searchInput && (\n          <button\n            className=\"ClearSearchIcon\"\n            onClick={() => {\n              onResetSearch()\n            }}\n          >\n            <IconSvg options={{ icon: 'clear' }} />\n          </button>\n        )}\n      </div>\n      {noSearchResult && (\n        <>\n          {props.projectId && (\n            <Typography variant=\"body2\" className=\"NoResultsText\">\n              No results for '{searchInput}' in {entity?.name}\n            </Typography>\n          )}\n          <NoSearchResultComponent />\n        </>\n      )}\n      {matchList && (\n        <>\n          {props.projectId && !noSearchResult && (\n            <Typography variant=\"body2\" className=\"ResultsText\">\n              Results for '{searchInput}' in {entity?.name}\n            </Typography>\n          )}\n          {matchList.map(match => (\n            <div key={`${match.forumId}-${match.threadId}-${match.replyId}`}>\n              <DiscussionReply\n                threadId={match.threadId}\n                replyId={match.replyId}\n              />\n            </div>\n          ))}\n        </>\n      )}\n      {searchResult?.nextPageToken && (\n        <div className=\"text-center\">\n          <Button variant=\"primary\" onClick={onLoadMore}>\n            Load more\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default ForumSearch\n"],"names":["useState","threadId","replyId","accessToken","setIsLoading","newMessageUrl","setReplyAuthor","setReplyBundle","setMessageUrl","setThreadBundle","useEffect","getThreadOrReply","_jsx","_jsxs","_Fragment","url","title","messageUrl","SMALL_USER_CARD","ownerId","onSearchResultsVisible","setSearchResult","setNoSearchResult","searchInput","undefined","setMatchList","displayToast","setSearchInput","fetchEntity","setEntity","NoSearchResults","nextPageToken","onSearch","onResetSearch","DiscussionReply","onLoadMore"],"mappings":"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"}