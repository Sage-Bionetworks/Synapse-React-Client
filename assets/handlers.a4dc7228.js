import{a as d}from"./index.1d65f2f1.js";import{E as V,w as z,x as B,y as Q,z as X,A as j,B as x,C as ee,D as te,U as se,F,G as ne,H as oe,I as re,J as ie,K as ae,P as de,N as ce,L as me,M as le,O as ye,R as ue}from"./index.5da0c2fe.js";import{g as A,B as O,M as pe}from"./getEndpoint.f1f195f5.js";import{m as fe,a as Ie,A as h,M as c,b as p,c as u,d as w,e as k,f as b,g as H,h as Ee,i as ge,j as be,k as Se}from"./mockAccessRequirements.a53793fc.js";import{R as Te}from"./RestrictionInformation.edfbac5a.js";import{U as ve}from"./UploadDestination.dcbd5975.js";const S=u.id,De=u.name,E="syn123",T="My mock file entity",ke="45745485",l={id:E,parentId:S,dataFileHandleId:w,name:T,concreteType:"org.sagebionetworks.repo.model.FileEntity",createdBy:c.toString(),modifiedBy:k.toString(),etag:"00000000-0000-0000-0000-000000000000",versionNumber:3,versionLabel:"a label for version 3",isLatestVersion:!0,createdOn:"2021-03-02T15:05:34.973Z",modifiedOn:"2021-03-05T11:31:24.521Z"},Ne=[{id:E,modifiedBy:c.toString(),versionNumber:1,versionLabel:"a label for version 1",versionComment:"a comment",contentSize:"100",contentMd5:"d836adae5632872014783b05cd2f76d7",modifiedByPrincipalId:c.toString(),modifiedOn:"2021-03-02T15:05:34.973Z",isLatestVersion:!1},{id:E,modifiedBy:c.toString(),versionNumber:3,versionLabel:"a label for version 3",versionComment:"a comment about version 3",contentSize:"100",contentMd5:"bc91a4a16ccb21944fcee55275dc4574",modifiedByPrincipalId:c.toString(),modifiedOn:"2021-03-05T11:31:24.521Z",isLatestVersion:!0}],_e={3:{id:E,parentId:S,dataFileHandleId:w,name:T,concreteType:"org.sagebionetworks.repo.model.FileEntity",createdBy:c.toString(),modifiedBy:c.toString(),etag:"00000000-0000-0000-0000-000000000000",versionNumber:3,versionLabel:"a label for version 3",isLatestVersion:!0},1:{id:E,parentId:S,dataFileHandleId:w,name:T,concreteType:"org.sagebionetworks.repo.model.FileEntity",createdBy:c.toString(),modifiedBy:c.toString(),etag:"00000000-0000-0000-0000-000000000000",versionNumber:1,versionLabel:"a label for version 1",isLatestVersion:!1}},K={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:De,id:S,type:"org.sagebionetworks.repo.model.Project"},{name:T,id:E,type:"org.sagebionetworks.repo.model.FileEntity"}]},he={entity:l,entityType:V.FILE,fileHandles:[fe,Ie],annotations:{id:E,etag:"00000000-0000-0000-0000-000000000000",annotations:{myStringKey:{type:h.STRING,value:["myValue"]},myIntegerKey:{type:h.LONG,value:[4325435345213,4321]},myFloatKey:{type:h.LONG,value:[1.5,17/13]}}},rootWikiId:ke,fileName:l.name,benefactorAcl:{id:S,creationDate:"2020-11-18T20:05:06.540Z",etag:"f143bbfd-ba09-4a42-b1e9-f9368777ad9b",resourceAccess:[{principalId:c,accessType:[p.DELETE,p.CHANGE_SETTINGS,p.MODERATE,p.CHANGE_PERMISSIONS,p.UPDATE,p.READ,p.DOWNLOAD,p.CREATE]},{principalId:273948,accessType:[p.READ]},{principalId:273949,accessType:[p.READ]}]},permissions:{canView:!0,canEdit:!0,canMove:!0,canAddChild:!0,canCertifiedUserEdit:!0,canCertifiedUserAddChild:!0,isCertifiedUser:!0,canChangePermissions:!0,canChangeSettings:!0,canDelete:!0,canDownload:!0,canUpload:!0,canEnableInheritance:!0,ownerPrincipalId:3350396,canPublicRead:!0,canModerate:!0,isCertificationRequired:!0,isEntityOpenData:!1},threadCount:5,path:K,restrictionInformation:{restrictionLevel:Te.OPEN,hasUnmetAccessRequirement:!1}},Ce={id:l.id,name:l.name,etag:l.etag,createdOn:l.createdOn,modifiedOn:l.modifiedOn,createdBy:l.createdBy,modifiedBy:l.modifiedBy,parentId:"syn4489",concreteType:"org.sagebionetworks.repo.model.Project",myStringKey:"myValue",myIntegerKey:[4325435345213,4321],myFloatKey:[1.5,17/13]},$e={id:l.id,name:l.name,type:l.concreteType,versionNumber:3,versionLabel:"a label for version 3",benefactorId:123,createdOn:l.createdOn,modifiedOn:l.modifiedOn,createdBy:c.toString(),modifiedBy:k.toString(),isLatestVersion:!0},N={id:E,name:T,entity:l,bundle:he,json:Ce,versions:_e,versionInfo:Ne,entityHeader:$e,path:K},g="syn234",_="A Mocked Dataset",D={id:g,parentId:u.id,name:_,concreteType:"org.sagebionetworks.repo.model.table.Dataset",createdBy:c.toString(),modifiedBy:k.toString(),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",versionNumber:3,versionLabel:"in progress",versionComment:"in progress",isLatestVersion:!0,etag:"00000000-0000-0000-0000-000000000000",items:[],columnIds:[],isSearchEnabled:!1},we={id:g,type:"org.sagebionetworks.repo.model.table.Dataset",name:_,benefactorId:parseInt(u.id),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",createdBy:c.toString(),modifiedBy:c.toString(),versionNumber:3,versionLabel:"in progress",isLatestVersion:!0},G={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:u.name,id:u.id,type:"org.sagebionetworks.repo.model.Project"},{name:_,id:g,type:"org.sagebionetworks.repo.model.FileEntity"}]},Ae={1:{...D,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1},2:{...D,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1}},Oe=[{id:g,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1,modifiedBy:c.toString(),modifiedByPrincipalId:c.toString(),modifiedOn:"2022-03-22T18:50:22.336Z"},{id:g,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1,modifiedBy:c.toString(),modifiedByPrincipalId:c.toString(),modifiedOn:"2022-03-22T18:47:34.797Z"}],Le={entity:D,entityType:V.DATASET,path:G,permissions:{canView:!0,canEdit:!0,canMove:!0,canAddChild:!0,canCertifiedUserEdit:!0,canCertifiedUserAddChild:!0,isCertifiedUser:!0,canChangePermissions:!0,canChangeSettings:!0,canDelete:!0,canDownload:!0,canUpload:!0,canEnableInheritance:!0,ownerPrincipalId:3350396,canPublicRead:!0,canModerate:!0,isCertificationRequired:!0,isEntityOpenData:!1}},Z={id:g,name:_,entity:D,entityHeader:we,path:G,bundle:Le,versions:Ae,versionInfo:Oe},L="syn654651",M="A Mocked Dataset Collection",Me={id:L,parentId:u.id,name:M,concreteType:"org.sagebionetworks.repo.model.table.DatasetCollection",createdBy:c.toString(),modifiedBy:c.toString(),etag:"00000000-0000-0000-0000-000000000000",items:[{entityId:Z.id,versionNumber:1}],columnIds:[]},Pe={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:u.name,id:u.id,type:"org.sagebionetworks.repo.model.Project"},{name:M,id:L,type:"org.sagebionetworks.repo.model.FileEntity"}]},Re={id:L,name:M,entity:Me,path:Pe},P="syn345",Y="my table name",W=u.id,I={id:P,versionNumber:1,versionLabel:"in progress",versionComment:"in progress",parentId:W,name:Y,concreteType:"org.sagebionetworks.repo.model.table.TableEntity",createdBy:c.toString(),createdOn:"2022-02-03T12:44:35.457Z",modifiedOn:"2022-05-14T17:10:36.915Z",modifiedBy:k.toString(),etag:"00000000-0000-0000-0000-000000000000",columnIds:[],isSearchEnabled:!0,isLatestVersion:!0},Be={name:I.name,id:P,type:"org.sagebionetworks.repo.model.table.TableEntity",versionNumber:I.versionNumber,versionLabel:I.versionLabel,benefactorId:W,createdOn:I.createdOn,modifiedOn:I.modifiedOn,createdBy:I.createdBy,modifiedBy:I.modifiedBy,isLatestVersion:I.isLatestVersion},je={id:P,name:Y,entity:I,entityHeader:Be},f=[N,u,Z,Re,je],Fe=u.id,C=u.entity;N.name;const He=N.entityHeader,Ue="syn1234",Ve="A $@*#$% terribly named Project",$={id:Ue,parentId:Fe,name:"my folder name",concreteType:"org.sagebionetworks.repo.model.Folder"},Ke={id:$.id,name:$.name,type:$.concreteType,versionNumber:1,versionLabel:"Version label",benefactorId:1234,createdOn:"",modifiedOn:"",createdBy:"",modifiedBy:""},Ge={totalNumberOfResults:2,results:[He,Ke]};C.id,C.name,C.modifiedOn,c;var q=(i=>(i.entity="entity",i))(q||{}),J=(i=>(i.entity="entity",i))(J||{});const U=N.entity,R={jsonSchemaVersionInfo:{organizationId:"1",organizationName:"org.sagebionetworks",schemaId:"1",schemaName:"Mock Schema",versionId:"555",$id:"org.sagebionetworks-MockSchema",jsonSHA256Hex:"5f2cd73c0fe25b30cbee2f213b6d633951f1873ca1911f494d4654f702a69e95",createdOn:"2021-04-01T08:00:00.000Z",createdBy:"1"},objectId:3333,objectType:q.entity,createdOn:"2021-04-01T08:00:00.000Z",createdBy:"1"};U.id,J.entity,U.etag,`${R.jsonSchemaVersionInfo.$id}`;`${R.jsonSchemaVersionInfo.$id}`;const Ze=i=>[d.rest.post(`${i}${z}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a matching mock entity for this request : ${JSON.stringify(n.body)}`};if(n.body){const t=n.body,a=f.find(m=>m.name===t.name);a?(r=a.entity,s=200):t.name===Ve&&(r.reason="Invalid project name",s=403)}return o(e.status(s),e.json(r))}),d.rest.get(`${i}${B(":entityId")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a mock entity with ID ${n.params.entityId}`};const t=f.find(a=>a.id===n.params.entityId);return t&&(r=t.entity,s=200),o(e.status(s),e.json(r))}),d.rest.get(`${i}${Q(":entityId")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find mock entity versions for ID ${n.params.entityId}`};const t=f.find(a=>a.id===n.params.entityId);return t&&t.versionInfo&&(r={results:t.versionInfo},s=200),o(e.status(s),e.json(r))}),d.rest.get(`${i}${X(":entityId",":versionNumber")}`,async(n,o,e)=>{let s=404;const r=n.params.entityId,t=n.params.versionNumber.toString(),a=parseInt(t);let m={reason:`Mock Service worker could not find a mock versioned entity with ID ${r}.${t}`};const y=f.find(v=>v.id===n.params.entityId);return y&&y.versions&&y.versions[a]&&(m=y.versions[a],s=200),o(e.status(s),e.json(m))}),d.rest.post(`${i}${j(":entityId")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=f.find(a=>a.id===n.params.entityId);return t&&(r=t.bundle,s=200),o(e.status(s),e.json(r))}),d.rest.post(`${i}${j(":entityId",":versionNumber")}`,async(n,o,e)=>{const s=n.params.entityId,r=parseInt(n.params.versionNumber);let t=404,a={reason:`Mock Service worker could not find a mock entity bundle with ID ${s}`};const m=f.find(y=>y.id===s);if(m){const y=m.bundle;m.versions&&m.versions[r]?a={...y,entity:m.versions[r]}:a=y,t=200}return o(e.status(t),e.json(a))}),d.rest.get(`${i}${x(":entityId")}`,async(n,o,e)=>o(e.status(200),e.json(R))),d.rest.get(`${i}${ee(":entityId")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=f.find(a=>a.id===n.params.entityId);return t&&(r=t.json,s=200),o(e.status(s),e.json(r))}),d.rest.post(`${i}${te}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=n.body,a=f.filter(m=>t.references.find(y=>y.targetId===m.id)).map(m=>m.entityHeader);return a&&(r={results:a},s=200),o(e.status(s),e.json(r))}),d.rest.get(`${i}${B(":entityId")}/path`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a mock entity path using ID ${n.params.entityId}`};const t=f.find(a=>n.params.entityId===a.id);return t&&t.path&&(r=t.path,s=200),o(e.status(s),e.json(r))}),d.rest.get(`${A(O.REPO_ENDPOINT)}/file/v1/entity/:id/uploadDestination`,async(n,o,e)=>{const s={banner:"",storageLocationId:1,uploadType:ve.S3,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"};return o(e.status(200),e.json(s))})],Ye=i=>[d.rest.get(`${i}${se(":id")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a user profile with ID ${n.params.id}`};const t=b.find(a=>a.id.toString()===n.params.id);return t&&t.userProfile&&(r=t.userProfile,s=200),o(e.status(s),e.json(r))}),d.rest.get(`${i}${F}`,async(n,o,e)=>{const s=Ee,r=200;return o(e.status(r),e.json(s))}),d.rest.get(`${A(O.REPO_ENDPOINT)}${ne}`,async(n,o,e)=>{const s=H;return o(e.status(200),e.json(s))}),d.rest.get(`${i}${oe(":id")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a user bundle with ID ${n.params.id}`};const t=b.find(a=>a.id.toString()===n.params.id);return t&&t.userBundle&&(r=t.userBundle,s=200),o(e.status(s),e.json(r))}),d.rest.get(`${i}${re}`,async(n,o,e)=>o(e.status(200),e.json(Ge))),d.rest.get(`${i}${ie}`,async(n,o,e)=>{const s=n.url.searchParams.get("ids").split(","),r={children:b.filter(t=>s.includes(t.id.toString())).map(t=>t.userGroupHeader)};return o(e.status(200),e.json(r))}),d.rest.post(`${i}${F}`,async(n,o,e)=>{const s=(await n.json()).list,r={list:b.filter(t=>s.includes(t.id.toString())).map(t=>t.userProfile).filter(t=>t!=null)};return o(e.status(200),e.json(r))}),d.rest.get(`${i}${ae}`,async(n,o,e)=>{const s=n.url.searchParams.get("prefix"),r={children:b.filter(t=>{var a,m,y,v;return t.userGroupHeader.userName.toLowerCase().startsWith((a=s.toLowerCase())!=null?a:"")||(t.userGroupHeader.firstName||"").toLowerCase().startsWith((m=s.toLowerCase())!=null?m:"")||(t.userGroupHeader.displayName||"").toLowerCase().startsWith((y=s.toLowerCase())!=null?y:"")||(t.userGroupHeader.lastName||"").toLowerCase().startsWith((v=s.toLowerCase())!=null?v:"")}).map(t=>t.userGroupHeader)};return o(e.status(200),e.json(r))}),d.rest.get(`${i}${de(":userId")}`,async(n,o,e)=>o(e.status(404),e.json({reason:"user has no profile image"}))),d.rest.get(`${i}${ce}`,async(n,o,e)=>{var s;return o(e.status(200),e.json({email:(s=H.userProfile)==null?void 0:s.email}))})],We=i=>[d.rest.get(`${i}${me(":id")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find an access requirement with ID ${n.params.id}`};const t=ge.find(a=>a.id.toString()===n.params.id);return t&&(r=t,s=200),o(e.status(s),e.json(r))}),d.rest.get(`${pe}${le(":id")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find an access requirement wiki page key with AR ID ${n.params.id}`};const t=be.find(a=>(a.ownerObjectType===ye.ACCESS_REQUIREMENT&&a.ownerObjectId.toString())===n.params.id);return t&&(r=t,s=200),o(e.status(s),e.json(r))})],qe=i=>[d.rest.get(`${i}${ue(":arId",":wikiId")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a wiki page with ID ${n.params.wikiId}`};const t=Se.find(a=>a.id===n.params.wikiId);return t&&(r=t,s=200),o(e.status(s),e.json(r))})],Je=i=>[d.rest.options("*",async(n,o,e)=>o(e.status(200))),d.rest.get(`${i}/auth/v1/authenticatedOn`,async(n,o,e)=>o(e.status(200),e.json({authenticatedOn:new Date().toISOString()}))),...Ze(i),...Ye(i),...qe(i),...We(i)];Je(A(O.REPO_ENDPOINT));export{Je as g,N as m};
