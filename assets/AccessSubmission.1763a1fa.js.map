{"version":3,"file":"AccessSubmission.1763a1fa.js","sources":["../../src/lib/utils/hooks/SynapseAPI/dataaccess/useSearchAccessSubmissionsInfinite.ts","../../src/lib/utils/synapseTypes/AccessSubmission.ts"],"sourcesContent":["import { useInfiniteQuery, UseInfiniteQueryOptions } from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport {\n  SubmissionSearchRequest,\n  SubmissionSearchResponse,\n} from '../../../synapseTypes/AccessSubmission'\n\nexport function useSearchAccessSubmissionsInfinite(\n  params: SubmissionSearchRequest,\n  options?: UseInfiniteQueryOptions<\n    SubmissionSearchResponse,\n    SynapseClientError\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n\n  return useInfiniteQuery<SubmissionSearchResponse, SynapseClientError>(\n    ['accessSubmissionSearch', params],\n    async context => {\n      return await SynapseClient.searchAccessSubmission(\n        {\n          ...params,\n          nextPageToken: context.pageParam,\n        },\n        accessToken,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n","import { SortDirection } from './AccessApproval'\nimport { AccessType, SubmissionState } from './AccessRequirement'\n\nexport enum SubmissionReviewerFilterType {\n  ALL = 'ALL',\n  ACT_ONLY = 'ACT_ONLY',\n  DELEGATED_ONLY = 'DELEGATED_ONLY',\n}\n\nexport enum SubmissionSortField {\n  MODIFIED_ON = 'MODIFIED_ON',\n  CREATED_ON = 'CREATED_ON',\n}\n\nexport interface SubmissionSearchSort {\n  field: SubmissionSortField\n  direction: SortDirection\n}\n\nexport interface AccessorChange {\n  userId: string\n  type: AccessType\n}\n\nexport interface SubmissionSearchRequest {\n  accessorId?: string\n  accessRequirementId?: string\n  submissionState?: SubmissionState\n  reviewerId?: string\n  reviewerFilterType?: SubmissionReviewerFilterType\n  sort?: SubmissionSearchSort[]\n  nextPageToken?: string\n}\n\nexport interface SubmissionSearchResult {\n  id: string\n  createdOn: string\n  modifiedOn: string\n  accessRequirementId: string\n  accessRequirementVersion: string\n  accessRequirementName: string\n  accessRequirementReviewerIds: string[]\n  submitterId: string\n  accessorChanges: AccessorChange[]\n  state: SubmissionState\n}\n\nexport interface SubmissionSearchResponse {\n  results: SubmissionSearchResult[]\n  nextPageToken?: string\n}\n"],"names":["SynapseClient.searchAccessSubmission"],"mappings":"4IASO,WACL,EACA,EAIA,CACM,KAAA,CAAE,eAAgB,IAExB,MAAO,GACL,CAAC,yBAA0B,CAAM,EACjC,KAAM,IACG,KAAMA,GACX,CACE,GAAG,EACH,cAAe,EAAQ,WAEzB,CACF,EAEF,CACE,GAAG,EACH,iBAAkB,GAAQ,EAAK,aAAA,CAEnC,CACF,CCzBY,GAAA,IAAA,GACI,GAAA,YAAA,cACD,EAAA,WAAA,aAFH,IAAA,GAAA,CAAA,CAAA"}