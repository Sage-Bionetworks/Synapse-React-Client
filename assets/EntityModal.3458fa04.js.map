{"version":3,"file":"EntityModal.3458fa04.js","sources":["../../src/lib/containers/FluidModal.tsx","../../src/lib/containers/entity/metadata/AnnotationsTable.tsx","../../src/lib/utils/synapseTypes/CloudProviderFileHandle.ts","../../src/lib/utils/functions/FileHandleUtils.ts","../../src/lib/containers/entity/metadata/MetadataTable.tsx","../../src/lib/containers/entity/metadata/EntityModal.tsx"],"sourcesContent":["import { Skeleton } from '@material-ui/lab'\nimport React from 'react'\nimport { Button, Modal } from 'react-bootstrap'\nimport { ButtonVariant } from 'react-bootstrap/esm/types'\nimport Tooltip from '../utils/tooltip/Tooltip'\nimport Typography from '../utils/typography/Typography'\nimport { HelpPopover, HelpPopoverProps } from './HelpPopover'\n\ntype ModalAction = {\n  skeleton?: boolean\n  variant?: ButtonVariant\n  copy?: React.ReactNode\n  onClick?: () => void\n  disabled?: boolean\n  [key: string]: any\n}\n\nexport type FluidModalProps = {\n  className?: string\n  show: boolean\n  children: JSX.Element\n  title: string | JSX.Element\n  titlePopoverProps?: HelpPopoverProps\n  onClose: () => void\n  primaryAction?: ModalAction\n  secondaryActions?: ModalAction[]\n}\n\nfunction ModalActionButton(props: ModalAction) {\n  const { copy, skeleton, ...rest } = props\n\n  if (props.skeleton) {\n    return <Skeleton variant=\"rect\" width={150} />\n  }\n  return (\n    <Tooltip\n      title={rest['data-tip'] ?? ''}\n      placement=\"top\"\n      enterNextDelay={300}\n    >\n      <Button {...rest}>{copy}</Button>\n    </Tooltip>\n  )\n}\n\n/**\n * Full-screen modal that scales with screen size. Fits requirements defined in SWC-5801\n * @param props\n * @returns\n */\nexport const FluidModal = (props: FluidModalProps) => {\n  // TODO: Info button\n  return (\n    <Modal\n      className={`FluidModal bootstrap-4-backport ${props.className ?? ''}`}\n      backdrop=\"static\"\n      animation={false}\n      show={props.show}\n      onHide={props.onClose}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <Typography variant={'headline1'}>\n            {props.title}\n            {props.titlePopoverProps && (\n              <HelpPopover\n                {...{\n                  placement: 'right',\n                  ...props.titlePopoverProps,\n                  className:\n                    'SRC-margin-left-5 ' +\n                    (props.titlePopoverProps?.className ?? ''),\n                }}\n              />\n            )}\n          </Typography>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{props.children}</Modal.Body>\n      <Modal.Footer>\n        {props.secondaryActions &&\n          props.secondaryActions.reverse().map((action, index) => {\n            return (\n              <ModalActionButton\n                key={index}\n                {...{\n                  variant: 'outline',\n                  ...action,\n                }}\n              />\n            )\n          })}\n        {props.primaryAction && (\n          <ModalActionButton\n            {...{\n              variant: 'sds-primary',\n              ...props.primaryAction,\n            }}\n          />\n        )}\n      </Modal.Footer>\n    </Modal>\n  )\n}\n","import React from 'react'\nimport { isEmpty } from 'lodash-es'\nimport {\n  convertToEntityType,\n  entityTypeToFriendlyName,\n} from '../../../utils/functions/EntityTypeUtils'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport { useGetSchemaBinding } from '../../../utils/hooks/SynapseAPI/entity/useEntityBoundSchema'\nimport { useSynapseContext } from '../../../utils/SynapseContext'\nimport { useGetJson } from '../../../utils/hooks/SynapseAPI/entity/useEntity'\nimport { SkeletonTable } from '../../../assets/skeletons/SkeletonTable'\n\nexport type AnnotationsTableProps = {\n  readonly entityId: string\n  readonly versionNumber?: number\n}\n\nexport const AnnotationsTable: React.FC<AnnotationsTableProps> = ({\n  entityId,\n}) => {\n  /**\n   * Currently, schema/validation features are only shown in experimental mode.\n   */\n  const { isInExperimentalMode } = useSynapseContext()\n\n  // TODO: Support versioned annotations, see PLFM-7290\n  const { entityMetadata, annotations, isLoading } = useGetJson(entityId)\n\n  const { data: boundSchema } = useGetSchemaBinding(entityId, {\n    enabled: isInExperimentalMode,\n  })\n\n  return isLoading ? (\n    <SkeletonTable numRows={3} numCols={2} />\n  ) : (\n    <>\n      {entityMetadata && annotations && isEmpty(annotations) ? (\n        <div className=\"placeholder\">\n          This{' '}\n          {entityTypeToFriendlyName(\n            convertToEntityType(entityMetadata.concreteType),\n          )}{' '}\n          has no annotations.\n        </div>\n      ) : null}\n      <table className=\"AnnotationsTable\">\n        <tbody>\n          {annotations &&\n            Object.keys(annotations).map((key: string) => {\n              return (\n                <tr key={key} className=\"AnnotationsTable__Row\">\n                  <td className=\"AnnotationsTable__Row__Key\">{key}</td>\n                  <td className=\"AnnotationsTable__Row__Value\">\n                    {Array.isArray(annotations[key])\n                      ? (\n                          annotations[key] as string[] | number[] | boolean[]\n                        ).join(', ')\n                      : annotations[key]!.toString()}\n                  </td>\n                </tr>\n              )\n            })}\n          {boundSchema && isInExperimentalMode ? (\n            <tr className=\"AnnotationsTable__Row\">\n              <td className=\"AnnotationsTable__Row__Key Schema\">\n                Validation Schema\n              </td>\n              <td className=\"AnnotationsTable__Row__Value\">\n                <a\n                  href={`${getEndpoint(\n                    BackendDestinationEnum.REPO_ENDPOINT,\n                  )}repo/v1/schema/type/registered/${\n                    boundSchema.jsonSchemaVersionInfo.$id\n                  }`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {boundSchema.jsonSchemaVersionInfo.schemaName}\n                </a>\n              </td>\n            </tr>\n          ) : null}\n        </tbody>\n      </table>\n    </>\n  )\n}\n","import { FileHandle } from './FileHandle'\n\n/*\n  https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/file/CloudProviderFileHandleInterface.html\n  Defines the common fields of FileHandles that are uploaded to cloud providers such as AWS S3 and Google Cloud Storage.\n */\nexport enum CloudProviderFileHandleConcreteTypeEnum {\n  S3FileHandle = 'org.sagebionetworks.repo.model.file.S3FileHandle',\n  GoogleCloudFileHandle = 'org.sagebionetworks.repo.model.file.GoogleCloudFileHandle',\n}\n\ninterface CloudProviderFileHandleInterface extends FileHandle {\n  readonly bucketName: string\n  readonly key: string\n  readonly previewId?: string\n  readonly isPreview: boolean\n}\n\n/*\n  https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/file/S3FileHandle.html\n  An S3FileHandle represents a file stored in AWS S3.\n */\nexport interface S3FileHandle extends CloudProviderFileHandleInterface {\n  readonly concreteType: CloudProviderFileHandleConcreteTypeEnum.S3FileHandle\n}\n\nexport interface GoogleCloudFileHandle\n  extends CloudProviderFileHandleInterface {\n  readonly concreteType: CloudProviderFileHandleConcreteTypeEnum.GoogleCloudFileHandle\n}\n","import {\n  ExternalFileHandle,\n  ExternalFileHandleConcreteTypeEnum,\n  ExternalObjectStoreFileHandle,\n  FileHandle,\n  ProxyFileHandle,\n} from '../synapseTypes'\nimport {\n  CloudProviderFileHandleConcreteTypeEnum,\n  GoogleCloudFileHandle,\n  S3FileHandle,\n} from '../synapseTypes/CloudProviderFileHandle'\n\n/**\n * Gets the friendly name of a bucket/storage location using the file handle.\n *\n * @param fileHandle\n * @returns\n */\nexport function getLocationName(fileHandle: FileHandle) {\n  switch (fileHandle.concreteType) {\n    case ExternalFileHandleConcreteTypeEnum.ProxyFileHandle:\n      return (fileHandle as ProxyFileHandle).filePath\n    case ExternalFileHandleConcreteTypeEnum.ExternalObjectStoreFileHandle:\n      return (fileHandle as ExternalObjectStoreFileHandle).bucket\n    case ExternalFileHandleConcreteTypeEnum.ExternalFileHandle:\n      return (fileHandle as ExternalFileHandle).externalURL\n    case CloudProviderFileHandleConcreteTypeEnum.S3FileHandle:\n      if ((fileHandle as S3FileHandle).storageLocationId === 1) {\n        return 'Synapse Storage'\n      } else {\n        return `s3://${(fileHandle as S3FileHandle).bucketName}`\n      }\n    case CloudProviderFileHandleConcreteTypeEnum.GoogleCloudFileHandle:\n      return `gs://${(fileHandle as GoogleCloudFileHandle).bucketName}`\n    default:\n      throw new Error(\n        `Couldn't determine location name for file handle: ${JSON.stringify(\n          fileHandle,\n        )}`,\n      )\n  }\n}\n","import moment from 'moment'\nimport React, { useEffect, useState } from 'react'\nimport { formatDate } from '../../../utils/functions/DateFormatter'\nimport {\n  entityTypeToFriendlyName,\n  getVersionDisplay,\n  isVersionableEntity,\n} from '../../../utils/functions/EntityTypeUtils'\nimport { getLocationName } from '../../../utils/functions/FileHandleUtils'\nimport useGetEntityBundle from '../../../utils/hooks/SynapseAPI/entity/useEntityBundle'\nimport { EntityType, FileEntity } from '../../../utils/synapseTypes'\nimport UserCard from '../../UserCard'\n\nexport type MetadataTableProps = {\n  readonly entityId: string\n  readonly versionNumber?: number\n}\n\nexport const MetadataTable = ({\n  entityId,\n  versionNumber,\n}: MetadataTableProps) => {\n  const { data: entityBundle } = useGetEntityBundle(\n    entityId,\n    undefined,\n    versionNumber,\n  )\n\n  const isVersionable =\n    entityBundle && isVersionableEntity(entityBundle.entity!)\n\n  const [fileLocationName, setFileLocationName] = useState<string>()\n\n  useEffect(() => {\n    if (entityBundle?.entityType === EntityType.FILE) {\n      const dataFileHandle = entityBundle.fileHandles?.filter(\n        fh => fh.id === (entityBundle.entity as FileEntity).dataFileHandleId,\n      )[0]\n\n      if (dataFileHandle) {\n        setFileLocationName(getLocationName(dataFileHandle))\n      }\n    }\n  }, [entityBundle])\n\n  return entityBundle ? (\n    <table className=\"MetadataTable\">\n      <tbody>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Name</td>\n          <td className=\"MetadataTable__Row__Value\">\n            {entityBundle.entity?.name}\n          </td>\n        </tr>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Type</td>\n          <td className=\"MetadataTable__Row__Value\">\n            {entityTypeToFriendlyName(entityBundle.entityType!)}\n          </td>\n        </tr>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Synapse ID</td>\n          <td className=\"MetadataTable__Row__Value\">\n            {entityBundle.entity?.id}\n          </td>\n        </tr>\n        {isVersionable && (\n          <tr className=\"MetadataTable__Row\">\n            <td className=\"MetadataTable__Row__Key\">Version</td>\n            <td className=\"MetadataTable__Row__Value\">\n              {getVersionDisplay(entityBundle.entity!)}\n            </td>\n          </tr>\n        )}\n        {fileLocationName && (\n          <tr className=\"MetadataTable__Row\">\n            <td className=\"MetadataTable__Row__Key\">Storage</td>\n            <td className=\"MetadataTable__Row__Value\">{fileLocationName}</td>\n          </tr>\n        )}\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\"> Last Modified By</td>\n          <td className=\"MetadataTable__Row__Value\">\n            <UserCard\n              size=\"SMALL USER CARD\"\n              ownerId={entityBundle.entity?.modifiedBy}\n            />{' '}\n            at {formatDate(moment(entityBundle.entity?.modifiedOn))}\n          </td>\n        </tr>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Created By</td>\n          <td className=\"MetadataTable__Row__Value\">\n            <UserCard\n              size=\"SMALL USER CARD\"\n              ownerId={entityBundle.entity?.createdBy}\n            />{' '}\n            at {formatDate(moment(entityBundle.entity?.createdOn))}\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  ) : null\n}\n","import Skeleton from '@material-ui/lab/Skeleton'\nimport Form from '@rjsf/core'\nimport React, { useRef, useState } from 'react'\nimport { Modal } from 'react-bootstrap'\nimport {\n  entityTypeToFriendlyName,\n  isVersionableEntityType,\n} from '../../../utils/functions/EntityTypeUtils'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport useGetEntityBundle from '../../../utils/hooks/SynapseAPI/entity/useEntityBundle'\nimport { VersionableEntity } from '../../../utils/synapseTypes'\nimport { SynapseErrorBoundary } from '../../ErrorBanner'\nimport { FluidModal } from '../../FluidModal'\nimport { displayToast } from '../../ToastMessage'\nimport { SchemaDrivenAnnotationEditor } from '../annotations/SchemaDrivenAnnotationEditor'\nimport { AnnotationsTable } from './AnnotationsTable'\nimport { MetadataTable } from './MetadataTable'\n\nexport enum EntityModalTabs {\n  METADATA = 'METADATA', // non-annotation metadata about the entity\n  ANNOTATIONS = 'ANNOTATIONS', // annotation and schema information\n  // TODO: Access -- we haven't yet built a viewer/editor for ACLs in SRC -- consider a redesign before building\n  // ACCESS = 'ACCESS', // ACLs (and maybe ARs?)\n  // TODO: Previews - we would need preview renderers that accomplish feature parity with SWC\n  // PREVIEW = 'PREVIEW' // should only show this tab if a preview exists\n}\n\nexport type EntityModalProps = {\n  readonly show: boolean\n  readonly entityId: string\n  readonly versionNumber?: number\n  readonly onClose: () => void\n  readonly initialTab?: EntityModalTabs\n  readonly showTabs?: boolean\n}\n\nexport const EntityModal: React.FC<EntityModalProps> = ({\n  entityId,\n  versionNumber,\n  show,\n  onClose,\n  initialTab = EntityModalTabs.METADATA,\n  showTabs = true,\n}: EntityModalProps) => {\n  const annotationEditorFormRef = useRef<Form<Record<string, unknown>>>(null)\n\n  const [currentTab, setCurrentTab] = useState<EntityModalTabs>(initialTab)\n  const [isInEditMode, setIsInEditMode] = useState(false)\n  const [hasClickedCancel, setHasClickedCancel] = useState(false)\n\n  const { data: entityBundle } = useGetEntityBundle(\n    entityId,\n    undefined,\n    versionNumber,\n  )\n\n  const canEdit = entityBundle && entityBundle.permissions?.canEdit\n\n  const isVersionable =\n    entityBundle && isVersionableEntityType(entityBundle.entityType!)\n\n  const isLatestVersion =\n    isVersionable && (entityBundle.entity as VersionableEntity).isLatestVersion!\n\n  let primaryAction\n  let secondaryActions\n\n  if (!entityBundle) {\n    primaryAction = { skeleton: true }\n    secondaryActions = undefined\n  } else {\n    if (!window.location.href.includes(entityId)) {\n      primaryAction = {\n        skeleton: false,\n        copy: `Open ${entityTypeToFriendlyName(entityBundle.entityType!)}`,\n        onClick: () =>\n          window.open(\n            `${getEndpoint(\n              BackendDestinationEnum.PORTAL_ENDPOINT,\n            )}#!Synapse:${entityId}`,\n            '_blank',\n            'noopener',\n          ),\n      }\n    }\n  }\n\n  if (currentTab === EntityModalTabs.ANNOTATIONS) {\n    if (isInEditMode) {\n      primaryAction = {\n        copy: `Save Annotations`,\n        onClick: () => {\n          annotationEditorFormRef.current?.submit()\n        },\n      }\n      secondaryActions = [\n        {\n          copy: hasClickedCancel\n            ? 'Are you sure? Unsaved changes will be lost'\n            : 'Cancel',\n          onClick: () => {\n            if (hasClickedCancel) {\n              setIsInEditMode(false)\n            }\n            setHasClickedCancel(!hasClickedCancel)\n          },\n        },\n      ]\n    } else if (canEdit) {\n      secondaryActions = [\n        {\n          copy: 'Edit',\n          disabled: isVersionable && !isLatestVersion,\n          'data-for': 'entityModalTooltip',\n          'data-tip':\n            isVersionable && !isLatestVersion\n              ? 'Annotations can only be edited on the latest version'\n              : undefined,\n          onClick: () => {\n            setIsInEditMode(true)\n          },\n        },\n      ]\n    }\n  }\n\n  return (\n    <>\n      <FluidModal\n        className={`EntityMetadata ${isInEditMode ? 'isInEditMode' : ''}`}\n        title={\n          entityBundle ? (\n            <Modal.Title>{entityBundle.entity!.name}</Modal.Title>\n          ) : (\n            <Skeleton width={'40%'} />\n          )\n        }\n        show={show}\n        onClose={onClose}\n        primaryAction={primaryAction}\n        secondaryActions={secondaryActions}\n      >\n        <>\n          {showTabs && !isInEditMode ? (\n            <div className=\"Tabs\">\n              {Object.keys(EntityModalTabs).map((tabName: string) => {\n                return (\n                  <div\n                    className=\"Tab\"\n                    role=\"tab\"\n                    key={tabName}\n                    onClick={e => {\n                      e.stopPropagation()\n                      setCurrentTab(EntityModalTabs[tabName])\n                    }}\n                    aria-selected={tabName === currentTab}\n                  >\n                    {tabName}\n                  </div>\n                )\n              })}\n            </div>\n          ) : null}\n          <div\n            style={\n              currentTab === EntityModalTabs.ANNOTATIONS\n                ? {}\n                : { display: 'none' }\n            }\n          >\n            {isInEditMode ? (\n              <SynapseErrorBoundary>\n                <SchemaDrivenAnnotationEditor\n                  entityId={entityId}\n                  formRef={annotationEditorFormRef}\n                  onSuccess={() => {\n                    displayToast('Annotations successfully updated.', 'success')\n                    setIsInEditMode(false)\n                  }}\n                  onCancel={() => setIsInEditMode(false)}\n                />\n              </SynapseErrorBoundary>\n            ) : (\n              <AnnotationsTable\n                entityId={entityId}\n                versionNumber={versionNumber}\n              />\n            )}\n          </div>\n          <div\n            style={\n              currentTab === EntityModalTabs.METADATA ? {} : { display: 'none' }\n            }\n          >\n            <MetadataTable entityId={entityId} versionNumber={versionNumber} />\n          </div>\n        </>\n      </FluidModal>\n    </>\n  )\n}\n"],"names":["copy","skeleton","rest","_jsx","_jsxs","show","onClose","titlePopoverProps","children","action","primaryAction","entityId","isInExperimentalMode","entityMetadata","annotations","isLoading","boundSchema","_Fragment","key","$id","schemaName","versionNumber","entityBundle","useState","useEffect","setFileLocationName","name","id","fileLocationName","modifiedBy","createdBy","METADATA","ANNOTATIONS","EntityModalTabs","secondaryActions","annotationEditorFormRef","setIsInEditMode","setHasClickedCancel","isLatestVersion","undefined","e","setCurrentTab","currentTab","tabName","displayToast"],"mappings":"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"}