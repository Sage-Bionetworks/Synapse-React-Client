{"version":3,"file":"ElementWithTooltip.a5d950af.js","sources":["../../src/lib/containers/widgets/ElementWithTooltip.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport { TOOLTIP_DELAY_SHOW } from '../table/SynapseTableConstants'\nimport { Dropdown } from 'react-bootstrap'\nimport { Icon } from '../row_renderers/utils'\nimport IconSvg, { IconSvgOptions } from '../IconSvg'\nimport Tooltip from '../../utils/tooltip/Tooltip'\n\ntype CustomImageProps = {\n  svgImg: React.ComponentElement<any, any>\n  altText: string\n}\n\nexport type TooltipVisualProps = {\n  delayShow: number\n  place: 'top' | 'right' | 'bottom' | 'left'\n  type: 'dark' | 'success' | 'warning' | 'error' | 'info' | 'light'\n  effect: 'float' | 'solid'\n  border?: boolean\n}\n\n/*****************************************\n *  The control needs to either have a child element or needs to have an image supplied\n *  If the child element is supplied the control renders the child applying additional properties\n *  If the image is supplied the control renders a clickable image\n *  If there are no children and callback Fn is not supplied it is assumed to be a a dropdown trigger\n */\n\ntype ElementWithTooltipProps = {\n  image?: IconSvgOptions | CustomImageProps\n  imageColor?: string\n  idForToolTip: string\n  tooltipText: string\n  callbackFn?: () => void\n  className?: string\n  tooltipVisualProps?: TooltipVisualProps\n  darkTheme?: boolean\n  size?: string\n  icon?: string\n}\n\nfunction getTooltipTriggerContents(\n  image: IconSvgOptions | CustomImageProps,\n  imageColor: string | undefined,\n  size: IconSvgOptions['size'] | undefined,\n): JSX.Element {\n  if ('svgImg' in image) {\n    return image.svgImg\n  } else {\n    return <IconSvg options={{ size, color: imageColor, ...image }} />\n  }\n}\n\nexport const ElementWithTooltip: FunctionComponent<ElementWithTooltipProps> = ({\n  image,\n  idForToolTip,\n  callbackFn,\n  tooltipText,\n  className = '',\n  imageColor,\n  tooltipVisualProps = { place: 'top' },\n  children,\n  darkTheme,\n  size,\n  icon,\n}) => {\n  const { place } = tooltipVisualProps\n  const iconComponent = icon ? <Icon type={icon}></Icon> : undefined\n  const tooltipTriggerContents = iconComponent\n    ? iconComponent\n    : image\n    ? getTooltipTriggerContents(image, imageColor, size)\n    : children || <></>\n\n  //if there is no callbackFn - assume it's a toggle\n\n  let tooltipTrigger: JSX.Element\n  if (!children) {\n    tooltipTrigger = callbackFn ? (\n      <button\n        tabIndex={0}\n        id={idForToolTip}\n        data-for={idForToolTip}\n        data-tip={tooltipText}\n        className={`ElementWithTooltip SRC-hand-cursor SRC-primary-background-color-hover ${className} ${\n          darkTheme ? 'dark-theme' : ''\n        } `}\n        onKeyPress={() => callbackFn()}\n        onClick={() => callbackFn()}\n        aria-label={tooltipText}\n      >\n        {tooltipTriggerContents}\n      </button>\n    ) : (\n      <Dropdown.Toggle\n        className={`ElementWithTooltip SRC-hand-cursor SRC-primary-background-color-hover ${className} ${\n          darkTheme ? 'dark-theme' : ''\n        } `}\n        variant={'light'}\n        aria-label={tooltipText}\n      >\n        {tooltipTriggerContents}\n      </Dropdown.Toggle>\n    )\n  } else {\n    const outerChild = children as JSX.Element\n    tooltipTrigger = React.cloneElement(outerChild, {\n      className: `${outerChild.props.className} SRC-hand-cursor`,\n      id: idForToolTip,\n      'data-for': idForToolTip,\n      'data-tip': tooltipText,\n    })\n  }\n\n  return (\n    <Tooltip\n      title={tooltipText}\n      enterNextDelay={TOOLTIP_DELAY_SHOW}\n      placement={place}\n      data-testid=\"ElementTooltip\"\n    >\n      {tooltipTrigger}\n    </Tooltip>\n  )\n}\n"],"names":["_jsx","size","imageColor","image","idForToolTip","callbackFn","tooltipText","children","darkTheme","icon","place","_Fragment","tooltipTrigger","tooltipTriggerContents","className","TOOLTIP_DELAY_SHOW"],"mappings":"oRAAA,KAAA,GAAA,OAAA,MAwCA,WAAA,EAAA,EAAA,EAAA,CAKE,MAAA,UAAA,GACE,EAAA,OAEAA,EAAA,EAAA,CAAO,QAAA,CAAkB,OAAEC,MAAAA,EAAaC,GAAAA,CAAeC,CAA9B,CAAA,CAE5B,CAEM,KAAA,GAAA,CAAA,CAAwE,QAC7EA,eACAC,aACAC,cACAC,YAAAA,GACY,aACZJ,qBAAAA,CACqB,MAAA,KAAS,EAAT,WACrBK,YACAC,OACAP,UACAQ,CAEA,KAAA,CAAM,SAAEC,EACR,EAAA,EAAAV,EAAA,EAAA,CAA6B,KAAA,CAAYS,CAAAA,EAAAA,OACzC,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAAT,EAAAW,EAAA,CAAA,CAAA,GAQA,GAAA,GACA,GAAA,CAAA,EACEC,EAAAA,EAAAA,EAAAA,SAAAA,CACE,SAAA,EACY,GAAA,EACNR,WAAAA,EACMA,WAAAA,EACAE,UAAAA,yEAAAA,KAAAA,EAAAA,aAAAA,MAEmB,WAAA,IAAA,EAAA,EAN/B,QAAA,IAAA,EAAA,EAAA,aAAA,EAUcA,SAAAA,CAEXO,CAAAA,EAAAA,EAAAA,EAAAA,OAAAA,CAGH,UAAA,yEAAA,KAAA,EAAA,aAAA,MAE+B,QAAA,QAEpB,aAAA,EACGP,SAAAA,CAEXO,CAAAA,MAvBL,CA2BA,KAAA,GAAA,EACAD,EAAAA,EAAAA,aAAAA,EAAAA,CAAgD,UAAA,GAAA,EAAA,MAAA,4BACfE,GAAAA,EAC3BV,WAAAA,EACQA,WAAAA,CACAE,CAAAA,CAJG,CAQnB,MAAAN,GAAA,EAAA,CACE,MAAA,EACSM,eAAAA,EACSS,UAAAA,EACLL,cAAAA,iBACC,SAAA,CAEXE,CAAAA,CAGN"}