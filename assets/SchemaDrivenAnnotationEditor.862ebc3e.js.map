{"version":3,"file":"SchemaDrivenAnnotationEditor.862ebc3e.js","sources":["../../node_modules/@material-ui/icons/esm/Add.js","../../node_modules/@material-ui/icons/esm/HelpOutline.js","../../src/lib/utils/hooks/SynapseAPI/entity/useEntityBoundSchema.ts","../../src/lib/utils/hooks/SynapseAPI/entity/useSchema.ts","../../src/lib/assets/icons/AddToList.tsx","../../src/lib/containers/entity/annotations/FieldDescriptionTable.tsx","../../src/lib/containers/entity/annotations/CustomArrayFieldTemplate.tsx","../../src/lib/containers/entity/annotations/AdditionalPropertiesSchemaField.tsx","../../src/lib/containers/entity/annotations/AnnotationEditorUtils.ts","../../src/lib/containers/entity/annotations/CustomAdditionalPropertiesFieldTemplate.tsx","../../src/lib/containers/entity/annotations/CustomBooleanWidget.tsx","../../src/lib/containers/entity/annotations/CustomDateTimeWidget.tsx","../../src/lib/containers/entity/annotations/CustomDefaultTemplate.tsx","../../src/lib/containers/entity/annotations/CustomObjectFieldTemplate.tsx","../../node_modules/react-select/creatable/dist/react-select.esm.js","../../src/lib/containers/entity/annotations/CustomSelectWidget.tsx","../../src/lib/containers/entity/annotations/CustomTextWidget.tsx","../../src/lib/containers/entity/annotations/SchemaDrivenAnnotationEditor.tsx"],"sourcesContent":["import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z\"\n}), 'HelpOutline');","import { UseQueryOptions, useQuery } from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { JsonSchemaObjectBinding } from '../../../synapseTypes/Schema/JsonSchemaObjectBinding'\nimport { ValidationResults } from '../../../synapseTypes/Schema/ValidationResults'\nimport { entityQueryKeys } from './queryKeys'\n\nexport function useGetSchemaBinding(\n  entityId: string,\n  options?: UseQueryOptions<JsonSchemaObjectBinding | null, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<JsonSchemaObjectBinding | null, SynapseClientError>(\n    entityQueryKeys.boundJSONSchema(entityId),\n    () => SynapseClient.getSchemaBinding(entityId, accessToken),\n    options,\n  )\n}\n\nexport function useGetValidationResults(\n  entityId: string,\n  options?: UseQueryOptions<ValidationResults, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n\n  return useQuery<ValidationResults, SynapseClientError>(\n    entityQueryKeys.schemaValidationResults(entityId),\n    () => SynapseClient.getSchemaValidationResults(entityId, accessToken),\n    options,\n  )\n}\n","/*\n * Hooks for accessing services related to JSON Schemas in the Synapse REST API\n */\n\nimport { JSONSchema7 } from 'json-schema'\nimport { useQuery, UseQueryOptions } from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\n\nexport function useGetSchema(\n  schema$id: string,\n  options?: UseQueryOptions<JSONSchema7, SynapseClientError>,\n) {\n  return useQuery<JSONSchema7, SynapseClientError>(\n    ['schema', schema$id],\n    async () => {\n      const response = await SynapseClient.getValidationSchema(schema$id)\n      return response.validationSchema\n    },\n    options,\n  )\n}\n","import React from 'react'\n\nconst AddToList = (props: React.SVGProps<SVGSVGElement>) => {\n  return (\n    <svg\n      {...props}\n      className={`SRC-add-to-list-icon ${props.className ?? ''}`}\n      style={{\n        ...props.style,\n      }}\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M14 10H2V12H14V10ZM14 6H2V8H14V6ZM18 14V10H16V14H12V16H16V20H18V16H22V14H18ZM2 16H10V14H2V16Z\"\n        fill=\"#515359\"\n      />\n    </svg>\n  )\n}\n\nexport default AddToList\n","import { Collapse } from '@material-ui/core'\nimport React from 'react'\n\nexport type FieldDescriptionTableProps = {\n  type: string\n  required: boolean\n  description: React.ReactNode\n  show: boolean\n}\n\nexport default function FieldDescriptionTable(\n  props: FieldDescriptionTableProps,\n) {\n  const { description, required, type, show } = props\n\n  return (\n    <Collapse className=\"field-description\" in={show}>\n      <table className=\"FieldDescriptionTable\">\n        <tbody>\n          {description && (\n            <tr>\n              <th>Description</th>\n              <td>{description}</td>\n            </tr>\n          )}\n          <tr>\n            <th>Type</th>\n            <td>{type}</td>\n          </tr>\n          <tr>\n            <th>Required</th>\n            <td>{required ? 'Yes' : 'No'}</td>\n          </tr>\n        </tbody>\n      </table>\n    </Collapse>\n  )\n}\n","import { Add, Close, HelpOutline } from '@material-ui/icons'\nimport { ArrayFieldTemplateProps, utils } from '@sage-bionetworks/rjsf-core'\nimport React, { useEffect, useState } from 'react'\nimport { Button, FormGroup, FormLabel } from 'react-bootstrap'\nimport FieldDescriptionTable from './FieldDescriptionTable'\n\n/**\n * Custom field template for array properties in a react-jsonschema-form component.\n * Used just to apply custom styling.\n */\nexport function CustomArrayFieldTemplate<T>(props: ArrayFieldTemplateProps<T>) {\n  const { DescriptionField } = props\n\n  const isAdditionalProperty = props.schema[utils.ADDITIONAL_PROPERTY_FLAG]\n\n  useEffect(() => {\n    if (props.items.length === 0) {\n      props.onAddClick()\n    }\n  }, [props])\n\n  const [showDetails, setShowDetails] = useState(false)\n\n  return (\n    <FormGroup className={props.className}>\n      <div className=\"LabelContainer\">\n        <FormLabel>\n          {props.title}\n          {props.required && <span className=\"required\">*</span>}\n        </FormLabel>\n        {!isAdditionalProperty && (\n          <button\n            aria-label=\"More Info\"\n            aria-expanded={showDetails}\n            onClick={e => {\n              e.preventDefault()\n              setShowDetails(!showDetails)\n            }}\n          >\n            <HelpOutline className=\"HelpButton SRC-primary-text-color\" />\n          </button>\n        )}\n      </div>\n      {props.items && (\n        <>\n          {props.items.map((element, index) => (\n            <div key={element.key} className=\"array-item\">\n              {element.children}\n              {(isAdditionalProperty || props.items.length > 1) && (\n                <Button\n                  aria-label={`Remove ${props.title}[${index}]`}\n                  variant=\"transparent-primary-500\"\n                  className=\"RemoveButton\"\n                  disabled={props.disabled}\n                  onClick={element.onDropIndexClick(element.index)}\n                >\n                  <Close />\n                </Button>\n              )}\n              {props.canAdd && index === props.items.length - 1 && (\n                <Button\n                  aria-label={`Add new ${props.title}`}\n                  variant=\"primary-500\"\n                  className=\"AddButton\"\n                  onClick={props.onAddClick}\n                  type=\"button\"\n                  disabled={props.disabled}\n                >\n                  <Add />\n                </Button>\n              )}\n            </div>\n          ))}\n          {props.items.length === 0 && (\n            <div style={{ display: 'flex' }}>\n              <Button\n                variant=\"primary-500\"\n                onClick={props.onAddClick}\n                type=\"button\"\n                disabled={props.disabled}\n              >\n                Add Value\n              </Button>\n            </div>\n          )}\n        </>\n      )}\n      <FieldDescriptionTable\n        required={props.required}\n        type={props.schema.type as string}\n        description={\n          <DescriptionField\n            id={`${props.idSchema.$id}__description`}\n            description={props.schema.description ?? ''}\n          />\n        }\n        show={showDetails}\n      />\n    </FormGroup>\n  )\n}\n","import { FieldProps, utils as rjsfUtils } from '@sage-bionetworks/rjsf-core'\nimport { isEqual } from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport { FormControl, FormGroup, FormLabel } from 'react-bootstrap'\nimport { useListState } from '../../../utils/hooks/useListState'\nimport FullWidthAlert from '../../FullWidthAlert'\nimport { CustomArrayFieldTemplate } from './CustomArrayFieldTemplate'\n\n// Matches ####-##-##T##:##:##.###Z, e.g. 1970-01-01T12:00:000Z\nconst ISO_TIMESTAMP_REGEX = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z/\n\n// Types that correspond to the different input fields that the annotation editor supports\nexport enum PropertyType {\n  STRING = 'String',\n  INTEGER = 'Integer',\n  FLOAT = 'Float',\n  BOOLEAN = 'Boolean',\n  DATETIME = 'Datetime',\n}\n\n// Selection of react-jsonschema-form Widget types that we can use for the supported property fields\nexport enum AdditionalPropertyWidget {\n  TextWidget = 'TextWidget',\n  DateTimeWidget = 'DateTimeWidget',\n  CheckboxWidget = 'CheckboxWidget',\n}\n\nexport function guessPropertyType(list: Array<any>): PropertyType {\n  if (\n    list.every(\n      item => typeof item === 'number' || item === 'NaN', // \"NaN\" is technically a float value\n    )\n  ) {\n    if (list.every(item => Number.isInteger(item))) {\n      return PropertyType.INTEGER\n    } else {\n      return PropertyType.FLOAT\n    }\n  } else if (list.every(item => typeof item === 'boolean')) {\n    return PropertyType.BOOLEAN\n  } else if (\n    list.every(item => typeof item === 'string') &&\n    list.every((item: string) => !!ISO_TIMESTAMP_REGEX.exec(item))\n  ) {\n    return PropertyType.DATETIME\n  }\n  // otherwise, default type is 'string'\n  return PropertyType.STRING\n}\n\nexport function transformDataFromPropertyType(\n  list: Array<any>,\n  propertyType: PropertyType,\n) {\n  switch (propertyType) {\n    case PropertyType.INTEGER:\n      return list.map(item =>\n        Number.isNaN(Number(item)) ? undefined : Math.floor(Number(item)),\n      )\n\n    case PropertyType.FLOAT:\n      return list.map(item => {\n        const asFloat = parseFloat(item)\n        if (Number.isNaN(asFloat)) {\n          return 'NaN'\n        } else if (Number.isInteger(asFloat)) {\n          return asFloat.toFixed(1)\n        } else {\n          return asFloat\n        }\n      })\n    case PropertyType.DATETIME:\n      return list.map(item => {\n        if (typeof item === 'string' && ISO_TIMESTAMP_REGEX.exec(item)) {\n          return item\n        } else {\n          return undefined\n        }\n      })\n    case PropertyType.BOOLEAN:\n      return list.map(item => !!item)\n    case PropertyType.STRING:\n    default:\n      return list.map(item => String(item))\n  }\n}\n\nexport function getWidgetFromPropertyType(\n  propertyType: PropertyType,\n): AdditionalPropertyWidget {\n  switch (propertyType) {\n    case PropertyType.DATETIME:\n      return AdditionalPropertyWidget.DateTimeWidget\n    case PropertyType.BOOLEAN:\n      return AdditionalPropertyWidget.CheckboxWidget\n    case PropertyType.STRING:\n    case PropertyType.INTEGER:\n    case PropertyType.FLOAT:\n    default:\n      return AdditionalPropertyWidget.TextWidget\n  }\n}\n\n/**\n * react-jsonschema-form SchemaField override for \"additionalProperties\" only.\n * Modifies the data to provide full compatibility with Synapse annotations features.\n *\n * This component provides these enhancements to the SchemaField:\n * - Supports selecting a type, and changing the input widget appropriately\n * - Identifying the type on mount\n * - Treat all field values as arrays\n * - When the last array value is removed, remove the entire key from the form.\n * @param props\n * @returns\n */\nexport function AdditionalPropertiesSchemaField<T>(\n  props: FieldProps<T> & {\n    onDropPropertyClick: (key: string) => (event: any) => void\n  },\n) {\n  /**\n   * Custom annotations in Synapse are always arrays. This function converts initial data to be an array type.\n   * If the initial data is an array, return the data itself.\n   * If the intitial data is a string, returns an array of substrings separated by commas.\n   * Otherwise, wrap the data in an array.\n   */\n  function convertToArray(value: T): Array<any> {\n    if (Array.isArray(value)) {\n      return value\n    } else if (typeof value === 'string') {\n      return value.split(',').map(s => s.trim()) // split a string of comma-separated values, then trim whitespace\n    } else {\n      return [value]\n    }\n  }\n\n  const {\n    id,\n    formData,\n    onChange,\n    registry,\n    schema,\n    name,\n    onDropPropertyClick,\n    uiSchema,\n  } = props\n\n  const { list, handleListChange, handleListRemove, appendToList, setList } =\n    useListState(convertToArray(formData))\n\n  // The type determines which widget we show.\n  const [propertyType, setPropertyType] = useState(guessPropertyType(list))\n\n  // If the property type is updated, store it in a new variable where we'll show a warning if data may be lost on coersion\n  const [nextPropertyType, setNextPropertyType] = useState(propertyType)\n\n  const [widget, setWidget] = useState<AdditionalPropertyWidget>(\n    AdditionalPropertyWidget.TextWidget,\n  )\n\n  useEffect(() => {\n    // The item may not be an array when we get it, and we need to convert it right away because the order of items is not stable, and seems to depend on if the item is an array or not.\n    // Otherwise, the order of the properties will change when the user modifies the data. We may be able to fix this by modifying react-jsonschema-form to stabilize the item order.\n\n    // FIXME: This doesn't work without a delay.\n    setTimeout(() => {\n      onChange(list)\n    }, 50)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  /**\n   * This effect is invoked whenever the user attempts to change the data type of a custom annotation.\n   */\n  useEffect(() => {\n    function onNextPropertyTypeUpdate() {\n      const dataIsEmpty =\n        list.length === 0 || list.every(item => item == null || item == '')\n      const coercedList = transformDataFromPropertyType(list, nextPropertyType)\n      // if the data is empty or identical after conversion, then just update the property type\n      if (dataIsEmpty || nextPropertyType !== propertyType) {\n        if (isEqual(list, coercedList)) {\n          setPropertyType(nextPropertyType)\n        }\n      }\n    }\n\n    onNextPropertyTypeUpdate()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [nextPropertyType])\n\n  /**\n   * This effect is invoked whenever the propertyType changes.\n   */\n  useEffect(() => {\n    function coerceDataAndUpdateWidget() {\n      const coercedList = transformDataFromPropertyType(list, nextPropertyType)\n\n      // Data conversion is non-destructive or has been confirmed by the user\n      setPropertyType(nextPropertyType)\n      // When the selected type changes, switch to the appropriate widget for accepting input\n      setWidget(getWidgetFromPropertyType(nextPropertyType))\n      // Coerce the data to match the new type\n      setList(coercedList)\n    }\n\n    coerceDataAndUpdateWidget()\n    // Don't add other properties to dependency array because we don't want to automatically coerce input\n    // i.e. Only coerce data when the type changes, which should only be on mount or when the user explicitly chooses a new type.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [propertyType])\n\n  useEffect(() => {\n    onChange(list)\n  }, [onChange, list])\n\n  const Widget = rjsfUtils.getWidget(\n    schema,\n    AdditionalPropertyWidget[widget],\n    registry.widgets,\n  )\n\n  const items = list.map((item: unknown, index: number) => {\n    return {\n      children: (\n        <Widget\n          id={`${name}-${index}`}\n          aria-label={`${name}-${index}`}\n          schema={schema}\n          value={item}\n          onChange={value => {\n            handleListChange(index)(value)\n          }}\n          uiSchema={uiSchema}\n          required={props.required}\n          disabled={props.disabled}\n          readonly={props.readonly}\n          autofocus={props.autofocus}\n          placeholder={props.placeholder ?? ''}\n          options={{}}\n          formContext={props.formContext as T}\n          onFocus={props.onFocus}\n          onBlur={(id, value) => {\n            setList(transformDataFromPropertyType(list, propertyType))\n            props.onBlur(id, value)\n          }}\n          label={props.title ?? ''}\n          multiple={true}\n          rawErrors={[]}\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore - The Widget needs the registry prop even though it's not in the type signature\n          registry={registry}\n        />\n      ),\n      onDropIndexClick: () => {\n        if (list.length === 1) {\n          // If this is the only item, then remove the property from the field\n          return onDropPropertyClick(name)\n        } else {\n          // Otherwise, remove the item from the list\n          return handleListRemove(index)\n        }\n      },\n      className: props.className ?? '',\n      disabled: props.disabled,\n      hasMoveDown: false,\n      hasMoveUp: false,\n      hasRemove: false,\n      hasToolbar: false,\n      index: index,\n      onAddIndexClick: () => {\n        return () => {\n          // no-op\n        }\n      },\n      onReorderClick: () => {\n        return () => {\n          //no-op\n        }\n      },\n      readonly: props.readonly,\n      key: `${index}`,\n    }\n  })\n\n  return (\n    <>\n      <FormGroup className=\"col-xs-3\">\n        <FormLabel htmlFor={`${id}-type`}>Type</FormLabel>\n        <FormControl\n          as=\"select\"\n          role=\"listbox\"\n          disabled={props.disabled}\n          readOnly={props.readonly}\n          value={propertyType}\n          required={true}\n          id={`${id}-type`}\n          onChange={e => {\n            setNextPropertyType(e.target.value as PropertyType)\n          }}\n        >\n          {Object.keys(PropertyType).map(type => (\n            <option key={type} value={PropertyType[type] as string}>\n              {PropertyType[type]}\n            </option>\n          ))}\n        </FormControl>\n      </FormGroup>\n      <CustomArrayFieldTemplate\n        className=\"col-xs-6\"\n        onAddClick={() => appendToList(null)}\n        canAdd={true}\n        title={name}\n        schema={schema}\n        items={items}\n        registry={registry}\n        DescriptionField={() => null}\n        TitleField={() => null}\n        disabled={props.disabled}\n        idSchema={props.idSchema}\n        readonly={props.readonly}\n        required={props.required}\n        uiSchema={props.uiSchema}\n        formContext={props.formContext as unknown}\n        formData={props.formData}\n      />\n      {propertyType !== nextPropertyType && (\n        <FullWidthAlert\n          variant=\"warning\"\n          title=\"Data may be lost when converting types\"\n          description={`Are you sure you want to convert ${name} from ${propertyType} to ${nextPropertyType}? Current values may be lost on conversion.`}\n          primaryButtonConfig={{\n            text: 'Convert',\n            onClick: () => {\n              setPropertyType(nextPropertyType)\n            },\n          }}\n          secondaryButtonConfig={{\n            text: 'Cancel',\n            onClick: () => {\n              setNextPropertyType(propertyType)\n            },\n          }}\n          isGlobal={false}\n        />\n      )}\n    </>\n  )\n}\n","import { AjvError } from '@sage-bionetworks/rjsf-core'\nimport { flatMap, groupBy, isEmpty } from 'lodash-es'\nimport { entityJsonKeys } from '../../../utils/synapseTypes'\n\n/**\n * Strips null values from arrays in the provided form data. If the array is empty after\n * removing null values, the key is removed from the form data.\n *\n * This allows users to submit forms with empty array fields (SWC-5762)\n */\nexport function dropNullishArrayValues(\n  formData: Record<string, unknown>,\n): Record<string, unknown> {\n  const newFormData: Record<string, unknown> = {}\n  Object.keys(formData).forEach(key => {\n    let value = formData[key]\n    if (Array.isArray(value)) {\n      value = (value as Array<any>).filter((item: any) => item != null)\n      if (!isEmpty(value)) {\n        newFormData[key] = value\n      }\n    } else {\n      newFormData[key] = value\n    }\n  })\n  return newFormData\n}\n\n/**\n * Inspects the property of the AjvError and modifies it to be comparable to simple key strings, like entity property keys.\n * @param error\n * @returns\n */\nexport function getFriendlyPropertyName(error: AjvError) {\n  if (error.property.startsWith('[')) {\n    // Additional properties are surrounded by brackets and quotations, so let's remove them\n    return error.property.substring(2, error.property.length - 2)\n  } else if (error.property.startsWith('.')) {\n    return error.property.substring(1)\n  } else {\n    return error.property\n  }\n}\n\nexport function transformErrors(errors: AjvError[]): AjvError[] {\n  // Transform the errors in the following ways:\n  // - Simplify the set of errors when failing to select an enumeration defined with an anyOf (SWC-5724)\n  // - Show a custom error message when using a property that collides with an internal entity property (SWC-5678)\n\n  // Fixing anyOf errors\n  // Group the errors by the property that the error applies to\n  const grouped = groupBy(errors, error => error.property)\n  Object.keys(grouped).map(property => {\n    const errorGroup = grouped[property]\n\n    // First, see if it is an anyOf error\n    const hasAnyOfError = errorGroup.some(\n      e => e.message === 'should match some schema in anyOf',\n    )\n\n    // We determine if it's an anyOf *enum* error if all error messages in the property match one of these three messages:\n    const isEnumError =\n      hasAnyOfError &&\n      errorGroup.every(error => {\n        if (error.message === 'should be string') {\n          return true\n        } else if (error.message === 'should be equal to constant') {\n          return true\n        } else if (error.message === 'should match some schema in anyOf') {\n          return true\n        } else {\n          return false\n        }\n      })\n\n    // If it's an anyOf enum error, we just modify the first message and drop the rest\n    if (isEnumError && errorGroup.length > 0) {\n      errorGroup[0].message = 'should be equal to one of the allowed values'\n      grouped[property] = [errorGroup[0]]\n    }\n  })\n\n  // Ungroup the errors after potentially modifying them\n  errors = flatMap(grouped)\n\n  // Custom error message if the custom annotation key collides with an internal entity property\n  errors = errors.map(error => {\n    const propertyName = getFriendlyPropertyName(error)\n    if (entityJsonKeys.includes(propertyName)) {\n      error.message = `\"${propertyName}\" is a reserved internal key and cannot be used.`\n    }\n    return error\n  })\n\n  // Return the transformed errors.\n  return errors\n}\n","import { FieldTemplateProps } from '@sage-bionetworks/rjsf-core'\nimport React from 'react'\nimport { FormControl, FormGroup, FormLabel } from 'react-bootstrap'\n\n/**\n * FieldTemplate override for \"additionalProperties\" fields to customize the form appearance.\n *\n * Adapted from 'WrapIfAdditional' in @rsjf/core.\n * @param props\n * @returns\n */\nexport const CustomAdditionalPropertiesFieldTemplate = (\n  props: FieldTemplateProps & {\n    onKeyChange: (newKey: string) => void\n  },\n) => {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    classNames,\n    disabled,\n    onKeyChange,\n    readonly,\n  } = props\n\n  const keyLabel = `Key` // i18n ?\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>\n  }\n  return (\n    <div className={`${classNames ?? ''} container-fluid`}>\n      <div className=\"row form-additional\">\n        <div className=\"col-xs-3\">\n          <FormGroup>\n            <FormLabel id={`${id}-key-label`} htmlFor={`${id}-key`}>\n              {keyLabel}\n            </FormLabel>\n            <FormControl\n              type=\"text\"\n              disabled={disabled}\n              readOnly={readonly}\n              defaultValue={label}\n              required={required}\n              id={`${id}-key`}\n              onBlur={(event: {\n                preventDefault: () => void\n                target: { value: string }\n              }) => {\n                event.preventDefault()\n                onKeyChange(event.target.value)\n              }}\n            />\n          </FormGroup>\n        </div>\n        {displayLabel && <FormLabel id={id}>{label}</FormLabel>}\n        {displayLabel && description ? description : null}\n        {children}\n        {errors}\n        {help}\n      </div>\n    </div>\n  )\n}\n","import { Widget, WidgetProps } from '@sage-bionetworks/rjsf-core'\nimport React from 'react'\nimport { FormControl } from 'react-bootstrap'\n\n/**\n * Select widget compatible with react-jsonschema-form booleans\n */\nexport const CustomBooleanWidget: Widget = ({\n  id,\n  disabled,\n  value,\n  onChange,\n}: WidgetProps) => {\n  return (\n    <FormControl\n      id={id}\n      as=\"select\"\n      disabled={disabled}\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      value={value === undefined ? value : `${value}`}\n      onChange={event => {\n        const newValue = event.target.value\n        if (newValue === '') {\n          onChange(undefined)\n        } else if (newValue === 'true') {\n          onChange(true)\n        } else if (newValue === 'false') {\n          onChange(false)\n        }\n      }}\n    >\n      <option value=\"\"></option>\n      <option value={'true'}>true</option>\n      <option value={'false'}>false</option>\n    </FormControl>\n  )\n}\n","import { Widget, WidgetProps } from '@sage-bionetworks/rjsf-core'\nimport moment, { Moment } from 'moment'\nimport React from 'react'\nimport { CalendarWithIconFormGroup } from '../../evaluation_queues/CalendarWithIconFormGroup'\n\n/**\n * DateTime picker widget compatible with react-jsonschema-form and Synapse Datetime annotations.\n */\nexport const CustomDateTimeWidget: Widget = ({\n  disabled,\n  value,\n  onChange,\n}: WidgetProps) => {\n  return (\n    <CalendarWithIconFormGroup\n      disabled={disabled}\n      value={value ? moment(value) : ''}\n      setterCallback={(newValue: string | Moment) => {\n        if (newValue == null || typeof newValue === 'string') {\n          onChange(newValue)\n        } else {\n          onChange(newValue.toISOString())\n        }\n      }}\n    ></CalendarWithIconFormGroup>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { FormLabel } from 'react-bootstrap'\nimport { FieldTemplateProps } from '@sage-bionetworks/rjsf-core'\nimport { HelpOutline } from '@material-ui/icons'\nimport FieldDescriptionTable from './FieldDescriptionTable'\n\nexport function CustomDefaultTemplate<T>(\n  props: FieldTemplateProps<T> & {\n    onChange: (newValue: unknown) => void\n  },\n) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    hidden,\n    required,\n    displayLabel,\n    formData,\n    onChange,\n    schema,\n  } = props\n\n  let description = props.description ?? props.schema.description\n  const [showDetails, setShowDetails] = useState(false)\n\n  // The formData that we get may be an array (for example, if it was an additionalProperty, but then the key was added to the schema)\n  // If the object passes through this template, then it should no longer be an array, so we coerce it to a string.\n  useEffect(() => {\n    if (schema.type !== 'array' && Array.isArray(formData)) {\n      const newValue = formData.map(v => `${v}`).join(', ')\n      // TODO: This only works when we have a short delay\n      setTimeout(() => {\n        onChange(newValue)\n      }, 50)\n    }\n  }, [])\n\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>\n  }\n\n  return (\n    <>\n      {/* RJSF hides labels for boolean checkboxes, but since we replaced checkboxes with a custom component, we want to show them */}\n      {label && (displayLabel || schema.type === 'boolean') && (\n        <div className=\"LabelContainer\">\n          <FormLabel htmlFor={id}>\n            {label}\n            {required && <span className=\"required\">*</span>}\n          </FormLabel>\n          <button\n            aria-label=\"More Info\"\n            aria-expanded={showDetails}\n            onClick={e => {\n              e.preventDefault()\n              setShowDetails(!showDetails)\n            }}\n          >\n            <HelpOutline className=\"HelpButton SRC-primary-text-color\" />\n          </button>\n        </div>\n      )}\n      {children}\n      <FieldDescriptionTable\n        required={required}\n        type={schema.type as string}\n        description={description}\n        show={showDetails}\n      />\n      {errors}\n      {help}\n    </>\n  )\n}\n","import { ObjectFieldTemplateProps, utils } from '@sage-bionetworks/rjsf-core'\nimport React, { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useDeepCompareEffectNoCheck } from 'use-deep-compare-effect'\nimport AddToList from '../../../assets/icons/AddToList'\nimport Tooltip from '../../../utils/tooltip/Tooltip'\nimport { displayToast } from '../../ToastMessage'\n\n/**\n * Basically identical to the default object field template, with a custom button.\n *\n * See {@link node_modules/@rjsf/core/src/components/fields/ObjectField.js#DefaultObjectFieldTemplate}\n * @param props\n * @returns\n */\nexport function CustomObjectFieldTemplate(\n  props: ObjectFieldTemplateProps<Record<string, unknown>>,\n) {\n  const { TitleField, DescriptionField } = props\n\n  const [previousSchemaDefinedProperties, setPreviousSchemaDefinedProperties] =\n    useState<Set<string>>(new Set())\n\n  /**\n   * We track how the schema changes as the user enters data, causing conditional subschemas to be evaluated.\n   *\n   * If a property exists in the previous version of the schema and has user data, and then is dropped from the schema due to a data update, then\n   * we need to prompt the user whether they want to undo the change, or continue and keep/remove those fields\n   *\n   * In this component, we can identify when one or more fields with user data are dropped (the field gains the additional property flag in the schema prop).\n   * We then use a function provided by the context to report which fields were lost.\n   */\n  useDeepCompareEffectNoCheck(() => {\n    if (props.schema.properties) {\n      const propertyKeys = Object.keys(props.schema.properties)\n      // Schema-defined properties are those properties in the schema without the additional property flag.\n      const schemaDefinedProperties = new Set<string>(\n        propertyKeys.filter(key => {\n          const propertyObject = props.schema.properties![key]\n          return !propertyObject[utils.ADDITIONAL_PROPERTY_FLAG]\n        }),\n      )\n\n      if (previousSchemaDefinedProperties != null) {\n        // Compare the schema defined properties with the previous version to see if any were lost.\n\n        const lostProperties = Array.from(\n          previousSchemaDefinedProperties,\n        ).filter(\n          schemaDefinedProperty =>\n            !schemaDefinedProperties.has(schemaDefinedProperty) &&\n            props.formData[schemaDefinedProperty] != null, // if the data is null, then we don't need to worry about it; user data isn't lost\n        )\n        if (lostProperties.length > 0) {\n          // Report the converted fields in a toast message\n          displayToast(\n            `The following annotations are no longer specified by the schema and have been converted to Custom Fields: ${lostProperties.join(\n              ', ',\n            )}.`,\n            'warning',\n            {\n              title: 'Fields No Longer Specified By Schema',\n            },\n          )\n        }\n      }\n      setPreviousSchemaDefinedProperties(schemaDefinedProperties)\n    }\n  }, [props.schema.properties])\n\n  return (\n    <fieldset id={props.idSchema.$id}>\n      {(props.uiSchema['ui:title'] || props.title) && (\n        <TitleField\n          id={`${props.idSchema.$id}__title`}\n          title={props.title || (props.uiSchema['ui:title'] as string)}\n          required={props.required}\n        />\n      )}\n      {props.description && (\n        <DescriptionField\n          id={`${props.idSchema.$id}__description`}\n          description={props.description}\n        />\n      )}\n      {props.properties.map(prop => {\n        return <div key={prop.name}>{prop.content}</div>\n      })}\n      {utils.canExpand(props.schema, props.uiSchema, props.formData) && (\n        <div className=\"container-fluid\">\n          <Tooltip title=\"Add a new custom field\" placement=\"top\">\n            <Button\n              variant=\"gray\"\n              className=\"object-property-expand\"\n              onClick={props.onAddClick(props.schema)}\n              disabled={props.disabled || props.readonly}\n              aria-label={'Add Custom Field'}\n            >\n              <AddToList />\n            </Button>\n          </Tooltip>\n        </div>\n      )}\n    </fieldset>\n  )\n}\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport _toConsumableArray from '@babel/runtime/helpers/esm/toConsumableArray';\nimport _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/esm/createClass';\nimport _inherits from '@babel/runtime/helpers/esm/inherits';\nimport { a as _objectSpread2, _ as _createSuper, E as cleanValue } from '../../dist/index-4bd03571.esm.js';\nimport React, { Component } from 'react';\nimport { S as Select, g as getOptionValue, a as getOptionLabel } from '../../dist/Select-dbb12e54.esm.js';\nimport { m as manageState } from '../../dist/stateManager-845a3300.esm.js';\nimport '@emotion/react';\nimport '@babel/runtime/helpers/taggedTemplateLiteral';\nimport '@babel/runtime/helpers/objectWithoutProperties';\nimport '@babel/runtime/helpers/typeof';\nimport 'react-input-autosize';\nimport '@babel/runtime/helpers/defineProperty';\nimport 'react-dom';\nimport 'memoize-one';\n\nvar compareOption = function compareOption() {\n  var inputValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var option = arguments.length > 1 ? arguments[1] : undefined;\n  var accessors = arguments.length > 2 ? arguments[2] : undefined;\n  var candidate = String(inputValue).toLowerCase();\n  var optionValue = String(accessors.getOptionValue(option)).toLowerCase();\n  var optionLabel = String(accessors.getOptionLabel(option)).toLowerCase();\n  return optionValue === candidate || optionLabel === candidate;\n};\n\nvar builtins = {\n  formatCreateLabel: function formatCreateLabel(inputValue) {\n    return \"Create \\\"\".concat(inputValue, \"\\\"\");\n  },\n  isValidNewOption: function isValidNewOption(inputValue, selectValue, selectOptions, accessors) {\n    return !(!inputValue || selectValue.some(function (option) {\n      return compareOption(inputValue, option, accessors);\n    }) || selectOptions.some(function (option) {\n      return compareOption(inputValue, option, accessors);\n    }));\n  },\n  getNewOptionData: function getNewOptionData(inputValue, optionLabel) {\n    return {\n      label: optionLabel,\n      value: inputValue,\n      __isNew__: true\n    };\n  },\n  getOptionValue: getOptionValue,\n  getOptionLabel: getOptionLabel\n};\nvar defaultProps = _objectSpread2({\n  allowCreateWhileLoading: false,\n  createOptionPosition: 'last'\n}, builtins);\nvar makeCreatableSelect = function makeCreatableSelect(SelectComponent) {\n  var _class, _temp;\n\n  return _temp = _class = /*#__PURE__*/function (_Component) {\n    _inherits(Creatable, _Component);\n\n    var _super = _createSuper(Creatable);\n\n    function Creatable(props) {\n      var _this;\n\n      _classCallCheck(this, Creatable);\n\n      _this = _super.call(this, props);\n      _this.select = void 0;\n\n      _this.onChange = function (newValue, actionMeta) {\n        var _this$props = _this.props,\n            getNewOptionData = _this$props.getNewOptionData,\n            inputValue = _this$props.inputValue,\n            isMulti = _this$props.isMulti,\n            onChange = _this$props.onChange,\n            onCreateOption = _this$props.onCreateOption,\n            value = _this$props.value,\n            name = _this$props.name;\n\n        if (actionMeta.action !== 'select-option') {\n          return onChange(newValue, actionMeta);\n        }\n\n        var newOption = _this.state.newOption;\n        var valueArray = Array.isArray(newValue) ? newValue : [newValue];\n\n        if (valueArray[valueArray.length - 1] === newOption) {\n          if (onCreateOption) onCreateOption(inputValue);else {\n            var newOptionData = getNewOptionData(inputValue, inputValue);\n            var newActionMeta = {\n              action: 'create-option',\n              name: name,\n              option: newOptionData\n            };\n\n            if (isMulti) {\n              onChange([].concat(_toConsumableArray(cleanValue(value)), [newOptionData]), newActionMeta);\n            } else {\n              onChange(newOptionData, newActionMeta);\n            }\n          }\n          return;\n        }\n\n        onChange(newValue, actionMeta);\n      };\n\n      var options = props.options || [];\n      _this.state = {\n        newOption: undefined,\n        options: options\n      };\n      return _this;\n    }\n\n    _createClass(Creatable, [{\n      key: \"focus\",\n      value: function focus() {\n        this.select.focus();\n      }\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        this.select.blur();\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        var options = this.state.options;\n        return /*#__PURE__*/React.createElement(SelectComponent, _extends({}, this.props, {\n          ref: function ref(_ref) {\n            _this2.select = _ref;\n          },\n          options: options,\n          onChange: this.onChange\n        }));\n      }\n    }], [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(props, state) {\n        var allowCreateWhileLoading = props.allowCreateWhileLoading,\n            createOptionPosition = props.createOptionPosition,\n            formatCreateLabel = props.formatCreateLabel,\n            getNewOptionData = props.getNewOptionData,\n            inputValue = props.inputValue,\n            isLoading = props.isLoading,\n            isValidNewOption = props.isValidNewOption,\n            value = props.value,\n            getOptionValue = props.getOptionValue,\n            getOptionLabel = props.getOptionLabel;\n        var options = props.options || [];\n        var newOption = state.newOption;\n\n        if (isValidNewOption(inputValue, cleanValue(value), options, {\n          getOptionValue: getOptionValue,\n          getOptionLabel: getOptionLabel\n        })) {\n          newOption = getNewOptionData(inputValue, formatCreateLabel(inputValue));\n        } else {\n          newOption = undefined;\n        }\n\n        return {\n          newOption: newOption,\n          options: (allowCreateWhileLoading || !isLoading) && newOption ? createOptionPosition === 'first' ? [newOption].concat(_toConsumableArray(options)) : [].concat(_toConsumableArray(options), [newOption]) : options\n        };\n      }\n    }]);\n\n    return Creatable;\n  }(Component), _class.defaultProps = defaultProps, _temp;\n}; // TODO: do this in package entrypoint\n\nvar SelectCreatable = makeCreatableSelect(Select);\nvar Creatable = manageState(SelectCreatable);\n\nexport default Creatable;\nexport { defaultProps, makeCreatableSelect };\n","import { Widget, WidgetProps } from '@sage-bionetworks/rjsf-core'\nimport React from 'react'\nimport Creatable from 'react-select/creatable'\nimport {\n  components,\n  ControlProps,\n  OptionTypeBase,\n  GroupTypeBase,\n} from 'react-select'\n\n// Some types for rjsf and react-select don't seem to be accurate or useful, so we cast to this object when we're dealing with enumeration options\ntype EnumOption = { value: string; label: string }\n\n/**\n * We want to apply the 'form-control' bootstrap class to react-select's Control component, and the easiest way to do that is to make a custom version\n */\nconst Control = ({\n  children,\n  ...rest\n}: ControlProps<OptionTypeBase, boolean, GroupTypeBase<OptionTypeBase>>) => {\n  return (\n    <components.Control {...rest} className=\"form-control\">\n      {children}\n    </components.Control>\n  )\n}\n\n/**\n * react-select's value prop should be an EnumOption (see custom type defined above)\n *\n * This function finds the enum option that has the corresponding value and returns it.\n *\n * If value is nullish, this fn returns undefined. If there is no corresponding option, then a new object is returned\n * where the label and value are set to the provided value.\n */\nfunction findValueOption(\n  value: string | null | undefined,\n  options: EnumOption[],\n): EnumOption | undefined {\n  if (value == null) {\n    return undefined\n  }\n\n  const correspondingOption = options.filter(option => option.value === value)\n  if (correspondingOption.length > 0) {\n    return correspondingOption[0]\n  } else {\n    return { value: value, label: value }\n  }\n}\n\n/**\n * Select widget compatible with react-jsonschema-form enumerations\n */\nexport const CustomSelectWidget: Widget = (props: WidgetProps) => {\n  const {\n    id,\n    options,\n    value,\n    required,\n    disabled,\n    readonly,\n    multiple,\n    autofocus,\n    onChange,\n    onBlur,\n    onFocus,\n    placeholder,\n  } = props\n  const { enumOptions } = options as {\n    enumOptions: EnumOption[]\n  }\n  return (\n    <Creatable\n      className=\"react-select-container\"\n      inputId={id}\n      multiple={multiple}\n      placeholder={placeholder}\n      value={findValueOption(value, enumOptions)}\n      required={required}\n      isDisabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={onBlur && (() => onBlur(id, value?.value))}\n      options={enumOptions as EnumOption[]}\n      onFocus={onFocus && (() => onFocus(id, value?.value))}\n      onChange={option => onChange((option as EnumOption | null)?.value)}\n      isClearable={true}\n      components={{ Control }}\n      formatCreateLabel={currentInput =>\n        `Set to custom value \"${currentInput}\"`\n      }\n      styles={{\n        control: provided => ({\n          ...provided,\n          border: 'unset',\n          borderColor: 'unset',\n          boxShadow: 'unset',\n          '&:hover': {},\n        }),\n        valueContainer: provided => ({ ...provided, padding: '0px' }),\n      }}\n    />\n  )\n}\n","import { Widget, WidgetProps } from '@sage-bionetworks/rjsf-core'\nimport React from 'react'\n\n/**\n * This TextWidget is almost identical to the rjsf TextWidget, except we handle numbers like strings to prevent issues if\n * the actual annotation data is not a string.\n */\nexport const CustomTextWidget: Widget = (props: WidgetProps) => {\n  const { BaseInput } = props.registry.widgets\n\n  // options.inputType will override the input type determined via schema\n  let inputType: string | null = null\n  if (props.schema.type === 'number' || props.schema.type === 'integer') {\n    inputType = 'text'\n  }\n\n  return <BaseInput {...props} options={{ ...props.options, inputType }} />\n}\n\nexport default CustomTextWidget\n","import Form, { AjvError } from '@sage-bionetworks/rjsf-core'\nimport { JSONSchema7 } from 'json-schema'\nimport isEmpty from 'lodash-es/isEmpty'\nimport React, { useEffect, useRef } from 'react'\nimport { Alert, Button, Modal } from 'react-bootstrap'\nimport AddToList from '../../../assets/icons/AddToList'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport {\n  useGetJson,\n  useUpdateViaJson,\n} from '../../../utils/hooks/SynapseAPI/entity/useEntity'\nimport { useGetSchemaBinding } from '../../../utils/hooks/SynapseAPI/entity/useEntityBoundSchema'\nimport { useGetSchema } from '../../../utils/hooks/SynapseAPI/entity/useSchema'\nimport { SynapseClientError } from '../../../utils/SynapseClientError'\nimport { EntityJson, entityJsonKeys } from '../../../utils/synapseTypes'\nimport { SynapseSpinner } from '../../LoadingScreen'\nimport { AdditionalPropertiesSchemaField } from './AdditionalPropertiesSchemaField'\nimport {\n  dropNullishArrayValues,\n  getFriendlyPropertyName,\n  transformErrors,\n} from './AnnotationEditorUtils'\nimport { CustomAdditionalPropertiesFieldTemplate } from './CustomAdditionalPropertiesFieldTemplate'\nimport { CustomArrayFieldTemplate } from './CustomArrayFieldTemplate'\nimport { CustomBooleanWidget } from './CustomBooleanWidget'\nimport { CustomDateTimeWidget } from './CustomDateTimeWidget'\nimport { CustomDefaultTemplate } from './CustomDefaultTemplate'\nimport { CustomObjectFieldTemplate } from './CustomObjectFieldTemplate'\nimport { CustomSelectWidget } from './CustomSelectWidget'\nimport CustomTextWidget from './CustomTextWidget'\n\nexport type SchemaDrivenAnnotationEditorProps = {\n  /** The entity whose annotations should be edited with the form */\n  entityId?: string\n  /** If no entity ID is supplied, the schema to use for the form */\n  schemaId?: string\n  /** Optionally supply a ref to the form to handle submission externally with `formRef.current.submit()`. If provided, the editor will not render its own submit UI. */\n  formRef?: React.RefObject<Form<Record<string, unknown>>>\n  /** Provide live input validation. This can cause major performance degradation. */\n  liveValidate?: boolean\n  /** Invoked after a successful form submission */\n  onSuccess?: () => void\n  /** If defined and formRef is not supplied, shows a 'Cancel' button and runs this effect on click */\n  onCancel?: () => void\n}\n\n// patternProperties lets us define how to treat additionalProperties in a JSON schema by property name\n// here we can ban properties that collide with entity properties by making their schema \"not: {}\"\nconst patternPropertiesBannedKeys = entityJsonKeys.reduce((current, item) => {\n  current[`^${item}$`] = { not: {} }\n  return current\n}, {})\n\n/**\n * Renders a form for editing an entity's annotations. The component also supports supplying just a schema ID,\n * but work to support annotation flows without an entity (i.e. before creating entities) is not yet complete.\n */\nexport const SchemaDrivenAnnotationEditor = (\n  props: SchemaDrivenAnnotationEditorProps,\n) => {\n  const {\n    entityId,\n    schemaId,\n    liveValidate = false,\n    onSuccess = () => {\n      /* no-op */\n    },\n    onCancel,\n    formRef: formRefFromParent,\n  } = props\n  const formRef = useRef<Form<Record<string, unknown>>>(null)\n\n  // Annotation fields fetched and modified via the form\n  const [formData, setFormData] = React.useState<\n    Record<string, unknown> | undefined\n  >(undefined)\n\n  // Client-side validation errors\n  const [validationError, setValidationError] = React.useState<\n    AjvError[] | undefined\n  >(undefined)\n\n  // Errors from the backend response\n  const [submissionError, setSubmissionError] = React.useState<\n    SynapseClientError | undefined\n  >(undefined)\n  const [showSubmissionError, setShowSubmissionError] = React.useState(false)\n\n  const [showConfirmation, setShowConfirmation] = React.useState(false)\n\n  const { entityMetadata: entityJson, annotations } = useGetJson(entityId!, {\n    enabled: !!entityId && !formData, // once we have data, don't refetch. it would overwrite the user's entries\n    useErrorBoundary: true,\n  })\n\n  useEffect(() => {\n    if (annotations) {\n      // Put the annotations into a state variable so it can be modified by the form.\n      setFormData(annotations)\n    }\n  }, [annotations])\n\n  const { data: schema, isLoading: isLoadingBinding } = useGetSchemaBinding(\n    entityId!,\n    {\n      enabled: !!entityId,\n      refetchOnWindowFocus: false,\n      useErrorBoundary: true,\n    },\n  )\n\n  const { data: validationSchema, isLoading: isLoadingSchema } = useGetSchema(\n    schemaId ?? schema?.jsonSchemaVersionInfo.$id ?? '',\n    {\n      enabled: !!schemaId || !!schema,\n      select: schema => {\n        // Have to remove the ID because of a bug in RJSF\n        // https://github.com/rjsf-team/react-jsonschema-form/issues/2471\n        delete schema.$id\n        return schema\n      },\n      useErrorBoundary: true,\n    },\n  )\n\n  const isLoading = isLoadingBinding || isLoadingSchema\n\n  const mutation = useUpdateViaJson({\n    onSuccess: () => {\n      onSuccess()\n    },\n    onError: error => {\n      setSubmissionError(error)\n      setShowSubmissionError(true)\n    },\n  })\n\n  function submitChangedEntity() {\n    mutation.mutate({\n      ...dropNullishArrayValues(formData ?? {}),\n      ...entityJson,\n    } as EntityJson)\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport AnnotationEditor\">\n      {isLoading ? (\n        <div className=\"LoadingPlaceholder\">\n          <SynapseSpinner size={30} />\n        </div>\n      ) : (\n        <>\n          {entityJson && schema && (\n            <Alert\n              dismissible={false}\n              show={true}\n              variant=\"info\"\n              transition={false}\n            >\n              <b>{entityJson.name}</b> requires scientific annotations specified\n              by <b>{schema.jsonSchemaVersionInfo.$id}</b>\n              {'. '}\n              <b>\n                <a\n                  href={`${getEndpoint(\n                    BackendDestinationEnum.REPO_ENDPOINT,\n                  )}/repo/v1/schema/type/registered/${\n                    schema.jsonSchemaVersionInfo.$id\n                  }`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  View required schema (JSON)\n                </a>\n              </b>\n            </Alert>\n          )}\n          {entityJson && (!formData || isEmpty(formData)) && schema === null && (\n            <Alert\n              dismissible={false}\n              show={true}\n              variant=\"info\"\n              transition={false}\n            >\n              <b>{entityJson.name}</b> has no annotations. Click the{' '}\n              <AddToList /> button to annotate.\n            </Alert>\n          )}\n          <Form\n            className=\"AnnotationEditorForm\"\n            liveValidate={liveValidate}\n            noHtml5Validate={true}\n            ArrayFieldTemplate={CustomArrayFieldTemplate}\n            ObjectFieldTemplate={CustomObjectFieldTemplate}\n            FieldTemplate={CustomDefaultTemplate}\n            ref={formRefFromParent ?? formRef}\n            disabled={mutation.isLoading}\n            /* Errors are displayed by an Alert component below, so we don't show the builtin ErrorList */\n            ErrorList={() => null}\n            schema={\n              {\n                ...(validationSchema ?? {}),\n                patternProperties: {\n                  ...(validationSchema?.patternProperties ?? {}),\n                  ...patternPropertiesBannedKeys,\n                },\n                additionalProperties:\n                  validationSchema?.additionalProperties ?? true,\n              } as JSONSchema7\n            }\n            uiSchema={{\n              'ui:DuplicateKeySuffixSeparator': '_',\n              additionalProperties: {\n                'ui:field': AdditionalPropertiesSchemaField,\n                'ui:FieldTemplate': CustomAdditionalPropertiesFieldTemplate,\n              },\n            }}\n            transformErrors={transformErrors}\n            formData={formData}\n            onChange={({ formData }) => {\n              setFormData(formData)\n              setValidationError(undefined)\n            }}\n            onSubmit={({ formData, errors }) => {\n              if (errors && errors.length > 0) {\n                setValidationError(errors)\n              }\n              setShowSubmissionError(false)\n              setFormData(formData)\n              submitChangedEntity()\n            }}\n            onError={(errors: AjvError[]) => {\n              // invoked when submit is clicked and there are client-side validation errors\n              setValidationError(errors)\n              if (validationError && entityId) {\n                setShowConfirmation(true)\n              }\n            }}\n            widgets={{\n              TextWidget: CustomTextWidget,\n              DateTimeWidget: CustomDateTimeWidget,\n              SelectWidget: CustomSelectWidget,\n              CheckboxWidget: CustomBooleanWidget,\n            }}\n          >\n            {validationError && (\n              <Alert\n                className=\"ErrorList\"\n                dismissible={false}\n                show={true}\n                variant=\"danger\"\n                transition={false}\n              >\n                <b>Validation errors found:</b>\n                <ul>\n                  {validationError.map((e: AjvError, index: number) => {\n                    return (\n                      <li key={index}>\n                        <b>{`${getFriendlyPropertyName(e)}: `}</b>{' '}\n                        {`${e.message}`}\n                      </li>\n                    )\n                  })}\n                </ul>\n              </Alert>\n            )}\n\n            {submissionError && (\n              <Alert\n                dismissible={false}\n                show={showSubmissionError}\n                variant={'danger'}\n                transition={false}\n              >\n                Annotations could not be updated: {submissionError.reason}\n              </Alert>\n            )}\n            {!formRefFromParent && (\n              <>\n                <hr />\n                <div className=\"SaveButtonContainer\">\n                  <Button\n                    variant=\"primary-500\"\n                    onClick={() => {\n                      formRef.current!.submit()\n                    }}\n                  >\n                    {entityId ? 'Save' : 'Validate'}\n                  </Button>\n                  {onCancel && (\n                    <>\n                      <div className=\"Spacer\" />\n                      <Button variant=\"primary-500\" onClick={onCancel}>\n                        Cancel\n                      </Button>\n                    </>\n                  )}\n                </div>\n              </>\n            )}\n          </Form>\n          {showConfirmation && (\n            <ConfirmationModal\n              show={true}\n              onSave={() => {\n                submitChangedEntity()\n                setShowConfirmation(false)\n              }}\n              onCancel={() => {\n                setShowConfirmation(false)\n              }}\n              errors={validationError}\n            />\n          )}\n        </>\n      )}\n    </div>\n  )\n}\n\ntype ConfirmationModalProps = {\n  show: boolean\n  onCancel: () => void\n  onSave: () => void\n  errors: AjvError[] | undefined\n}\nconst ConfirmationModal: React.FC<ConfirmationModalProps> = ({\n  show,\n  onCancel,\n  onSave,\n  errors,\n}: ConfirmationModalProps) => {\n  return (\n    <Modal animation={false} show={show} onHide={onCancel} backdrop=\"static\">\n      <Modal.Header closeButton>\n        <Modal.Title>Update Annotations</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div>The following errors exist with the annotations you entered:</div>\n        <div>\n          <ul>\n            {(errors ?? []).map((e: AjvError, index: number) => (\n              <li key={index}>\n                <b>{`${getFriendlyPropertyName(e)}: `}</b> {`${e.message}`}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div>Are you sure you want to save them?</div>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"default\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <Button variant=\"primary\" onClick={onSave}>\n          Save\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}\n"],"names":["React","SynapseClient.getSchemaBinding","SynapseClient.getSchemaValidationResults","SynapseClient.getValidationSchema","_jsx","props","style","description","required","type","show","_jsxs","utils","useEffect","DescriptionField","useState","className","showDetails","e","setShowDetails","_Fragment","index","disabled","title","onAddClick","$id","STRING","INTEGER","FLOAT","BOOLEAN","DATETIME","PropertyType","TextWidget","DateTimeWidget","CheckboxWidget","AdditionalPropertyWidget","propertyType","value","id","formData","onChange","registry","schema","name","onDropPropertyClick","uiSchema","list","handleListChange","handleListRemove","appendToList","setList","setTimeout","isEqual","setPropertyType","onNextPropertyTypeUpdate","setWidget","coerceDataAndUpdateWidget","item","readonly","autofocus","formContext","onFocus","setNextPropertyType","idSchema","nextPropertyType","label","children","errors","help","hidden","displayLabel","classNames","onKeyChange","keyLabel","event","moment","TitleField","useDeepCompareEffectNoCheck","ADDITIONAL_PROPERTY_FLAG","displayToast","setPreviousSchemaDefinedProperties","content","compareOption","inputValue","arguments","length","undefined","option","accessors","candidate","String","toLowerCase","optionValue","getOptionValue","optionLabel","getOptionLabel","builtins","formatCreateLabel","concat","isValidNewOption","selectValue","selectOptions","some","getNewOptionData","__isNew__","defaultProps","_objectSpread2","allowCreateWhileLoading","createOptionPosition","makeCreatableSelect","SelectComponent","_class","_temp","_Component","_inherits","Creatable","_super","_createSuper","_this","_classCallCheck","call","select","newValue","actionMeta","_this$props","isMulti","onCreateOption","action","newOption","state","valueArray","Array","isArray","newOptionData","newActionMeta","_toConsumableArray","cleanValue","options","_createClass","key","focus","blur","_this2","_ref","isLoading","Component","SelectCreatable","Select","manageState","rest","multiple","onBlur","placeholder","enumOptions","Control","currentInput","provided","BaseInput","inputType","current","entityId","schemaId","onCancel","formRefFromParent","entityJson","annotations","setFormData","isLoadingBinding","validationSchema","isLoadingSchema","onSuccess","setSubmissionError","setShowSubmissionError","mutation","CustomArrayFieldTemplate","CustomObjectFieldTemplate","CustomDefaultTemplate","formRef","patternPropertiesBannedKeys","AdditionalPropertiesSchemaField","CustomAdditionalPropertiesFieldTemplate","setValidationError","submitChangedEntity","setShowConfirmation","CustomTextWidget","CustomDateTimeWidget","CustomSelectWidget","CustomBooleanWidget","showSubmissionError","validationError","onSave"],"mappings":"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"}