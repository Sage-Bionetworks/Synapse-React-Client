{"version":3,"file":"UserSearchBoxV2.533e4c68.js","sources":["../../src/lib/containers/UserSearchBoxV2.tsx"],"sourcesContent":["import { Skeleton } from '@material-ui/lab'\nimport * as React from 'react'\nimport { components, GroupTypeBase } from 'react-select'\nimport AsyncSelect from 'react-select/async'\nimport { SelectComponents } from 'react-select/src/components'\nimport { SynapseClient } from '../utils'\nimport useGetInfoFromIds from '../utils/hooks/useGetInfoFromIds'\nimport { UserGroupHeader } from '../utils/synapseTypes'\nimport { TYPE_FILTER } from '../utils/synapseTypes/UserGroupHeader'\nimport UserOrTeamBadge from './UserOrTeamBadge'\n\nexport type UserSearchBoxProps = {\n  /* id for the input tag */\n  inputId?: string\n  /* The initial principal ID */\n  defaultValue?: string\n  onChange?: (\n    principalId: string | null,\n    header: UserGroupHeader | null,\n  ) => void\n  typeFilter?: TYPE_FILTER\n  filterPredicate?: (item: UserGroupHeader) => boolean\n  placeholder?: string\n}\n\nconst customSelectComponents: Partial<\n  SelectComponents<\n    {\n      id: string\n      value: string\n      label: string\n      header: UserGroupHeader\n    },\n    false,\n    GroupTypeBase<{\n      id: string\n      value: string\n      label: string\n      header: UserGroupHeader\n    }>\n  >\n> = {\n  Control: props => {\n    return (\n      <components.Control\n        {...props}\n        className={`form-control ${props.className ?? ''}`}\n      />\n    )\n  },\n  SingleValue: props => {\n    const { data } = props\n    return (\n      <div {...props}>\n        <UserOrTeamBadge\n          userGroupHeader={data.header}\n          disableHref={true}\n          showFullName={true}\n        />\n      </div>\n    )\n  },\n  Option: props => {\n    const { data, selectOption } = props\n    return (\n      <div\n        {...props}\n        key={data.id}\n        onClick={() => selectOption(data)}\n        style={{ padding: '5px 10px' }}\n      >\n        <UserOrTeamBadge\n          userGroupHeader={data.header}\n          disableHref={true}\n          showFullName={true}\n        />\n      </div>\n    )\n  },\n}\n\nconst UserSearchBoxV2: React.FC<UserSearchBoxProps> = props => {\n  const {\n    inputId,\n    defaultValue = null,\n    onChange,\n    filterPredicate,\n    typeFilter,\n    placeholder,\n  } = props\n\n  const [defaultUserGroupHeader = undefined] =\n    useGetInfoFromIds<UserGroupHeader>({\n      ids: defaultValue ? [defaultValue] : [],\n      type: 'USER_PROFILE',\n    })\n\n  async function loadOptions(inputValue: string) {\n    let data: Array<UserGroupHeader> | undefined = undefined\n    // If the input wasn't an integer, or didn't match an existing AR ID, then search ARs\n    if (!data) {\n      data = (await SynapseClient.getUserGroupHeaders(inputValue, typeFilter))\n        ?.children\n    }\n\n    if (filterPredicate) {\n      data = data.filter(filterPredicate)\n    }\n\n    // Map the AR(s) to options for the select input component\n    return (\n      data?.map(item => ({\n        id: item.ownerId.toString(),\n        value: item.ownerId.toString(),\n        label: item.userName,\n        header: item,\n      })) ?? []\n    )\n  }\n\n  if (defaultValue && defaultUserGroupHeader == null) {\n    return <Skeleton width=\"100%\" />\n  }\n\n  return (\n    <AsyncSelect\n      className=\"bootstrap-4-backport\"\n      defaultValue={\n        defaultValue\n          ? {\n              id: defaultValue,\n              value: defaultValue,\n              label: defaultUserGroupHeader!.userName,\n              header: defaultUserGroupHeader!,\n            }\n          : undefined\n      }\n      defaultOptions={\n        defaultValue\n          ? [\n              {\n                id: defaultValue,\n                value: defaultValue,\n                label: defaultUserGroupHeader!.userName,\n                header: defaultUserGroupHeader!,\n              },\n            ]\n          : true\n      }\n      inputId={inputId}\n      cacheOptions\n      isClearable\n      styles={{\n        // Bootstrap's form-control class overrides the display value, manually set to flex (the default without Bootstrap)\n        control: styles => ({ ...styles, display: 'flex !important' }),\n      }}\n      components={customSelectComponents}\n      loadOptions={loadOptions}\n      onChange={option => {\n        if (onChange) {\n          onChange(option?.id ?? null, option?.header ?? null)\n        }\n      }}\n      placeholder={placeholder}\n    />\n  )\n}\n\nexport default UserSearchBoxV2\n"],"names":["_jsx","props","data","header","selectOption","id","inputId","onChange","filterPredicate","typeFilter","placeholder","userName","item","defaultValue","defaultUserGroupHeader","undefined","styles","customSelectComponents"],"mappings":"0XAyBA,EAAA,CAgBI,QAAA,AAAA,GAAA,OAEA,MAAAA,GAAA,EAAA,QAAA,MAEQC,UAAAA,gBAAAA,KAAAA,YAAAA,OAAAA,IAC0C,CAAA,CAHlD,EAMD,YAAA,AAAA,GAAA,CAEC,KAAA,CAAM,QAAEC,EACR,MAAAF,GAAA,MAAA,MACWC,SAAAA,EAAAA,EAAAA,CACP,gBAAA,EAAA,OACwBE,YAAAA,GACT,aAAA,EACC,CAAA,CAHhB,CAAA,CAFJ,EASD,OAAA,AAAA,GAAA,CAEC,KAAA,CAAM,OAAED,gBAAME,EACd,MAAA,GAAA,MAAA,MAEQH,IAAAA,EAAAA,GACMI,QAAAA,IAAAA,EAAAA,CAAAA,EACiB,MAAA,CACpB,QAAA,UAAW,CAAX,EAAAL,EAAA,EAAA,CAEP,gBAAA,EAAA,OACwBG,YAAAA,GACT,aAAA,EACC,CAAA,CAAA,CATlB,CAxBF,EAwCJ,EAAA,AAAA,GAAA,CACE,KAAA,CAAM,UACJG,eAAAA,KACe,WACfC,kBACAC,aACAC,eACAC,EAGF,CAAA,EAAA,QAAA,EAAA,CACqC,IAAA,EAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,cAE3B,CAAA,EAGV,iBAAA,EAAA,SACE,GAAA,GAEA,MAAA,IACER,GAAAA,QAAAA,GAAAA,EAAAA,CAAAA,IAAAA,cAAAA,UAIF,GACEA,GAAAA,EAAAA,OAAAA,CAAAA,GAIF,oBAAA,IAAA,AAAA,GAAA,EACqB,GAAA,EAAA,QAAA,SAAA,EAAA,MAAA,EAAA,QAAA,SAAA,EAAA,MAAA,EAAA,SAGLS,OAAAA,CACJC,MALZ,OAKYA,CAAAA,CALZ,CAUF,MAAA,IAAA,GAAA,KACEZ,EAAA,EAAA,CAAO,MAAA,MAAgB,CAAA,EAGzBA,EAAA,EAAA,CACE,UAAA,uBACY,aAAA,EAAA,CAGJ,GAAA,EACMa,MAAAA,EACGA,MAAAA,EAAAA,SACwBF,OAAAA,CACvBG,EAAAA,OAEVC,eAAAA,EAAAA,CAAAA,CAKE,GAAA,EACMF,MAAAA,EACGA,MAAAA,EAAAA,SACwBF,OAAAA,CACvBG,CAAAA,EAAAA,GAGZ,UAEN,aAAA,GAxBF,YAAA,GAAA,OAAA,CA2BU,QAAA,AAAA,GAAA,EAEc,GAAA,EAAKE,QAAAA,iBAAiB,EAAtB,EAFd,WAAA,EAIIC,cACZ,SAAA,AAAA,GAAA,SAEE,AAAA,GACEV,EAAAA,oBAAAA,KAAAA,OAAAA,KAAAA,oBAAAA,SAAAA,OAAAA,IAAAA,CACD,EACF,aACD,CAAA,CAGL,EAED,GAAA,GAAA"}