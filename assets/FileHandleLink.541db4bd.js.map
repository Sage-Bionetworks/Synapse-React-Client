{"version":3,"file":"FileHandleLink.541db4bd.js","sources":["../../src/lib/containers/widgets/FileHandleLink.tsx"],"sourcesContent":["import {\n  BatchFileRequest,\n  BatchFileResult,\n  FileHandleAssociation,\n} from '../../utils/synapseTypes'\nimport React, { useEffect, useState } from 'react'\nimport { SynapseConstants, SynapseClient } from '../../utils'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport IconSvg from '../IconSvg'\n\ntype FileHandleLinkProps = {\n  fileHandleAssociation: FileHandleAssociation\n  redirect?: boolean\n  showDownloadIcon: boolean\n  displayValue?: string\n}\nexport const FileHandleLink = (props: FileHandleLinkProps) => {\n  const {\n    fileHandleAssociation,\n    showDownloadIcon,\n    redirect = false,\n    displayValue,\n  } = props\n  const { accessToken } = useSynapseContext()\n\n  const [batchFileResult, setBatchFileResult] = useState<\n    BatchFileResult | undefined\n  >()\n\n  useEffect(() => {\n    if (displayValue === undefined) {\n      const getFiles = async () => {\n        const batchFileRequest: BatchFileRequest = {\n          requestedFiles: [fileHandleAssociation],\n          includeFileHandles: true,\n          includePreSignedURLs: false,\n          includePreviewPreSignedURLs: false,\n        }\n        setBatchFileResult(\n          await SynapseClient.getFiles(batchFileRequest, accessToken),\n        )\n      }\n      getFiles()\n    }\n  }, [accessToken, displayValue, fileHandleAssociation])\n\n  let fileName = undefined\n  if (batchFileResult) {\n    fileName = batchFileResult.requestedFiles[0].fileHandle?.fileName\n  }\n\n  return (\n    <button\n      onClick={() => {\n        if (accessToken && fileHandleAssociation) {\n          SynapseClient.getActualFileHandleByIdURL(\n            fileHandleAssociation.fileHandleId,\n            accessToken,\n            fileHandleAssociation.associateObjectType,\n            fileHandleAssociation.associateObjectId,\n            redirect,\n          )\n            .then(url => {\n              window.open(url, '_blank')\n            })\n            .catch(err => {\n              console.error('Error on retrieving file handle url ', err)\n            })\n        }\n      }}\n      className={`SRC-primary-text-color ${SynapseConstants.SRC_SIGN_IN_CLASS}`}\n      type=\"button\"\n      style={{ padding: 0 }}\n    >\n      {displayValue ?? fileName ?? fileHandleAssociation.fileHandleId}\n      {showDownloadIcon && <IconSvg options={{ icon: 'download' }} />}\n    </button>\n  )\n}\n"],"names":["fileHandleAssociation","showDownloadIcon","displayValue","accessToken","useEffect","getFiles","setBatchFileResult","fileName","_jsxs","SynapseClient","window","console","SynapseConstants.SRC_SIGN_IN_CLASS","SRC_SIGN_IN_CLASS","_jsx"],"mappings":"qMAKA,KAAA,GAAA,OAAA,MAAA,kCAWO,EAAA,AAAA,GAAA,SACL,KAAA,CAAM,wBACJA,mBACAC,WAAAA,GACW,gBACXC,EAEF,CAAM,eAAEC,EAAAA,EAER,CAAA,EAAA,GAAA,EAAA,EAIAC,EAAAA,IAAAA,CACE,AAAA,IAAA,QAYEC,AAXA,UAOEC,EAAAA,KAAAA,GANA,CAA2C,eAAA,CAAA,CAAA,EACzB,mBAAA,GACI,qBAAA,GACE,4BAAA,EACO,EAE/BA,CAAAA,CAAAA,IAKH,EAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAGH,GAAA,GACA,MAAA,IACEC,GAAAA,KAAAA,eAAAA,GAAAA,aAAAA,cAAAA,UAGFC,EAAA,SAAA,CACE,QAAA,IAAA,CAEI,AAAA,GAAA,GACEC,EAAAA,EAAAA,aAAAA,EAAAA,EAAAA,oBAAAA,EAAAA,kBAAAA,CAAAA,EAAAA,KAAAA,AAAAA,GAAAA,CAQIC,OAAAA,KAAAA,EAAAA,QAAAA,CAAA,CAAA,EAAA,MAAA,AAAA,GAAA,CAGAC,QAAAA,MAAAA,uCAAAA,CAAAA,CAAA,CAAA,CAEL,EACF,UAAA,0BAAAC,IACqDC,KAAAA,SACjD,MAAA,CACE,QAAA,CAAW,EAAX,SAAA,CAAA,aAAA,IAAA,OAAA,EAAA,aAAA,GAAAC,EAAA,EAAA,CAGc,QAAA,CAAkB,KAAA,UAAQ,CAAR,CAAA,CAAA,CAvBzC,CAAA,CA0BH"}