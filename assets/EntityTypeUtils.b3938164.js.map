{"version":3,"file":"EntityTypeUtils.b3938164.js","sources":["../../src/lib/utils/synapseTypes/Table/Dataset.ts","../../src/lib/utils/synapseTypes/Table/EntityView.ts","../../src/lib/utils/synapseTypes/Table/SubmissionView.ts","../../src/lib/utils/synapseTypes/Table/TableEntity.ts","../../src/lib/utils/synapseTypes/Table/View.ts","../../src/lib/utils/synapseTypes/Table/MaterializedView.ts","../../src/lib/utils/synapseTypes/Table/Table.ts","../../src/lib/utils/synapseTypes/EntityType.ts","../../src/lib/utils/functions/EntityTypeUtils.ts"],"sourcesContent":["import { View } from './View'\n\n// http://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/EntityRef.html\nexport interface EntityRef {\n  entityId: string\n  versionNumber: number\n}\n\n/**\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/EntityRefCollectionView.html\n */\nexport interface EntityRefCollectionView extends View {\n  items?: EntityRef[] // items is undefined on new collections\n}\n\nexport const DATASET_CONCRETE_TYPE_VALUE =\n  'org.sagebionetworks.repo.model.table.Dataset'\nexport type DATASET_CONCRETE_TYPE = typeof DATASET_CONCRETE_TYPE_VALUE\nexport interface Dataset extends EntityRefCollectionView {\n  concreteType: DATASET_CONCRETE_TYPE\n}\n\nexport const DATASET_COLLECTION_CONCRETE_TYPE_VALUE =\n  'org.sagebionetworks.repo.model.table.DatasetCollection'\nexport type DATASET_COLLECTION_CONCRETE_TYPE =\n  typeof DATASET_COLLECTION_CONCRETE_TYPE_VALUE\nexport interface DatasetCollection extends EntityRefCollectionView {\n  concreteType: DATASET_COLLECTION_CONCRETE_TYPE\n}\n","import { View } from './View'\n\nexport const ENTITY_VIEW_TYPE_MASK_FILE = 0x01\nexport const ENTITY_VIEW_TYPE_MASK_PROJECT = 0x02\nexport const ENTITY_VIEW_TYPE_MASK_TABLE = 0x04\nexport const ENTITY_VIEW_TYPE_MASK_FOLDER = 0x08\nexport const ENTITY_VIEW_TYPE_MASK_VIEW = 0x10\nexport const ENTITY_VIEW_TYPE_MASK_DOCKER = 0x20\nexport const ENTITY_VIEW_TYPE_MASK_SUBMISSIONVIEW = 0x40\nexport const ENTITY_VIEW_TYPE_MASK_DATASET = 0x80\n\nexport const ENTITY_VIEW_CONCRETE_TYPE_VALUE =\n  'org.sagebionetworks.repo.model.table.EntityView'\nexport type ENTITY_VIEW_CONCRETE_TYPE = typeof ENTITY_VIEW_CONCRETE_TYPE_VALUE\n\nexport interface EntityView extends View {\n  concreteType: ENTITY_VIEW_CONCRETE_TYPE\n  /** The list of container ids that define the scope of this view. */\n  scopeIds: string[]\n  /** Bit mask representing the types to include in the view. The following are the possible types (type=): File=0x01, Project=0x02, Table=0x04, Folder=0x08, View=0x10, Docker=0x20. */\n  viewTypeMask: number\n}\n","import { View } from './View'\n\nexport const SUBMISSION_VIEW_CONCRETE_TYPE_VALUE =\n  'org.sagebionetworks.repo.model.table.SubmissionView'\nexport type SUBMISSION_VIEW_CONCRETE_TYPE =\n  typeof SUBMISSION_VIEW_CONCRETE_TYPE_VALUE\n\n/**\n * A view of evaluation submissions whose scope is defined by the evaluation ids the submissions are part of. The user must have READ_PRIVATE_SUBMISSION access on each of the evaluations in the scope.\n *\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/SubmissionView.html\n */\nexport interface SubmissionView extends View {\n  concreteType: SUBMISSION_VIEW_CONCRETE_TYPE\n  /** The list of container ids that define the scope of this view. */\n  scopeIds: string[]\n}\n","import { Table } from './Table'\n\nexport const TABLE_ENTITY_CONCRETE_TYPE_VALUE =\n  'org.sagebionetworks.repo.model.table.TableEntity'\nexport type TABLE_ENTITY_CONCRETE_TYPE = typeof TABLE_ENTITY_CONCRETE_TYPE_VALUE\n\n// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/TableEntity.html\nexport interface TableEntity extends Table {\n  concreteType: TABLE_ENTITY_CONCRETE_TYPE\n  isSearchEnabled: boolean\n}\n","import {\n  DATASET_CONCRETE_TYPE_VALUE,\n  DATASET_COLLECTION_CONCRETE_TYPE_VALUE,\n  ENTITY_VIEW_CONCRETE_TYPE_VALUE,\n  SUBMISSION_VIEW_CONCRETE_TYPE_VALUE,\n} from '.'\nimport { Table } from './Table'\n\nexport const VIEW_CONCRETE_TYPE_VALUES = [\n  ENTITY_VIEW_CONCRETE_TYPE_VALUE,\n  SUBMISSION_VIEW_CONCRETE_TYPE_VALUE,\n  DATASET_CONCRETE_TYPE_VALUE,\n  DATASET_COLLECTION_CONCRETE_TYPE_VALUE,\n] as const\n\nexport type VIEW_CONCRETE_TYPE = typeof VIEW_CONCRETE_TYPE_VALUES[number]\n\n// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/View.html\n\n// The View interface only exists in\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface View extends Table {\n  concreteType: VIEW_CONCRETE_TYPE\n}\n","import { Table } from './Table'\n\nexport const MATERIALIZED_VIEW_CONCRETE_TYPE_VALUE =\n  'org.sagebionetworks.repo.model.table.MaterializedView'\nexport type MATERIALIZED_VIEW_CONCRETE_TYPE =\n  typeof MATERIALIZED_VIEW_CONCRETE_TYPE_VALUE\n\nexport interface MaterializedView extends Table {\n  concreteType: MATERIALIZED_VIEW_CONCRETE_TYPE\n  definingSQL: string\n}\n","import { VIEW_CONCRETE_TYPE_VALUES } from '.'\nimport { VersionableEntity } from '../Entity/Entity'\nimport { MATERIALIZED_VIEW_CONCRETE_TYPE_VALUE } from './MaterializedView'\nimport { TABLE_ENTITY_CONCRETE_TYPE_VALUE } from './TableEntity'\n\nexport const TABLE_CONCRETE_TYPE_VALUES = [\n  TABLE_ENTITY_CONCRETE_TYPE_VALUE,\n  ...VIEW_CONCRETE_TYPE_VALUES,\n  MATERIALIZED_VIEW_CONCRETE_TYPE_VALUE,\n] as const\n\nexport type TABLE_CONCRETE_TYPE = typeof TABLE_CONCRETE_TYPE_VALUES[number]\n\n// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Table.html\nexport interface Table extends VersionableEntity {\n  columnIds: string[]\n  concreteType: TABLE_CONCRETE_TYPE\n}\n","// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/EntityType.html\nexport enum EntityType {\n  PROJECT = 'project',\n  FOLDER = 'folder',\n  FILE = 'file',\n  TABLE = 'table',\n  LINK = 'link',\n  ENTITY_VIEW = 'entityview',\n  DOCKER_REPO = 'dockerrepo',\n  SUBMISSION_VIEW = 'submissionview',\n  DATASET = 'dataset',\n  DATASET_COLLECTION = 'datasetcollection',\n  MATERIALIZED_VIEW = 'materializedview',\n}\n","import {\n  Entity,\n  EntityHeader,\n  EntityType,\n  EntityView,\n  ENTITY_CONCRETE_TYPE,\n  ENTITY_VIEW_TYPE_MASK_FILE,\n  ProjectHeader,\n  Dataset,\n  Table,\n  TableEntity,\n  SubmissionView,\n  VersionableEntity,\n  VIEW_CONCRETE_TYPE_VALUES,\n  View,\n  TABLE_CONCRETE_TYPE_VALUES,\n  SUBMISSION_VIEW_CONCRETE_TYPE_VALUE,\n  DATASET_CONCRETE_TYPE_VALUE,\n  ENTITY_VIEW_CONCRETE_TYPE_VALUE,\n  DatasetCollection,\n  DATASET_COLLECTION_CONCRETE_TYPE_VALUE,\n} from '../synapseTypes'\nimport { Hit } from '../synapseTypes/Search'\nimport {\n  MaterializedView,\n  MATERIALIZED_VIEW_CONCRETE_TYPE_VALUE,\n} from '../synapseTypes/Table/MaterializedView'\nimport { TABLE_ENTITY_CONCRETE_TYPE_VALUE } from '../synapseTypes/Table/TableEntity'\nimport { isTypeViaConcreteTypeFactory } from './TypeUtils'\n\nexport function getEntityTypeFromHeader(\n  header:\n    | Pick<EntityHeader, 'name' | 'id' | 'type'>\n    | EntityHeader\n    | ProjectHeader\n    | Hit,\n) {\n  // Hit has the `node_type` field which is what we already want.\n  if ((header as Hit).node_type) {\n    return (header as Hit).node_type\n  }\n  // ProjectHeader doesn't have the `type` field, so we can just check that to determine if it's a ProjectHeader\n  return (header as EntityHeader).type === undefined\n    ? EntityType.PROJECT\n    : convertToEntityType((header as EntityHeader).type)\n}\n\nexport function isContainerType(type: EntityType): boolean {\n  switch (type) {\n    case EntityType.PROJECT:\n    case EntityType.FOLDER:\n      return true\n    case EntityType.LINK:\n    case EntityType.DOCKER_REPO:\n    case EntityType.FILE:\n    case EntityType.TABLE:\n    case EntityType.SUBMISSION_VIEW:\n    case EntityType.ENTITY_VIEW:\n    case EntityType.DATASET:\n    case EntityType.DATASET_COLLECTION:\n    case EntityType.MATERIALIZED_VIEW:\n      return false\n    default:\n      throw new Error(`Unknown entity type: ${type}`)\n  }\n}\n\nexport function entityTypeToFriendlyName(entityType: EntityType): string {\n  switch (entityType) {\n    case EntityType.PROJECT:\n      return 'Project'\n    case EntityType.FOLDER:\n      return 'Folder'\n    case EntityType.FILE:\n      return 'File'\n    case EntityType.TABLE:\n      return 'Table'\n    case EntityType.LINK:\n      return 'Link'\n    case EntityType.ENTITY_VIEW:\n      return 'View'\n    case EntityType.DOCKER_REPO:\n      return 'Docker Repository'\n    case EntityType.SUBMISSION_VIEW:\n      return 'Submission View'\n    case EntityType.DATASET:\n      return 'Dataset'\n    case EntityType.DATASET_COLLECTION:\n      return 'Dataset Collection'\n    case EntityType.MATERIALIZED_VIEW:\n      return 'Materialized View'\n    default:\n      console.warn('Entity type could not be mapped to name:', entityType)\n      return ''\n  }\n}\n\nexport function convertToEntityType(\n  typeString: string | ENTITY_CONCRETE_TYPE | EntityType,\n): EntityType {\n  switch (typeString) {\n    case EntityType.PROJECT:\n    case 'org.sagebionetworks.repo.model.Project':\n      return EntityType.PROJECT\n    case EntityType.FOLDER:\n    case 'org.sagebionetworks.repo.model.Folder':\n      return EntityType.FOLDER\n    case EntityType.FILE:\n    case 'org.sagebionetworks.repo.model.FileEntity':\n      return EntityType.FILE\n    case EntityType.LINK:\n    case 'org.sagebionetworks.repo.model.Link':\n      return EntityType.LINK\n    case EntityType.DOCKER_REPO:\n    case 'org.sagebionetworks.repo.model.docker.DockerRepository':\n      return EntityType.DOCKER_REPO\n    case EntityType.TABLE:\n    case 'org.sagebionetworks.repo.model.table.TableEntity':\n      return EntityType.TABLE\n    case EntityType.SUBMISSION_VIEW:\n    case 'org.sagebionetworks.repo.model.table.SubmissionView':\n      return EntityType.SUBMISSION_VIEW\n    case EntityType.ENTITY_VIEW:\n    case 'org.sagebionetworks.repo.model.table.EntityView':\n      return EntityType.ENTITY_VIEW\n    case EntityType.DATASET:\n    case 'org.sagebionetworks.repo.model.table.Dataset':\n      return EntityType.DATASET\n    case EntityType.DATASET_COLLECTION:\n    case 'org.sagebionetworks.repo.model.table.DatasetCollection':\n      return EntityType.DATASET_COLLECTION\n    case EntityType.MATERIALIZED_VIEW:\n    case 'org.sagebionetworks.repo.model.table.MaterializedView':\n      return EntityType.MATERIALIZED_VIEW\n    default:\n      throw new Error(`Unknown entity type: ${typeString}`)\n  }\n}\n\n/**\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/VersionableEntity.html\n * @param type\n * @returns\n */\nexport function isVersionableEntityType(type: EntityType): boolean {\n  switch (type) {\n    case EntityType.PROJECT:\n    case EntityType.FOLDER:\n    case EntityType.LINK:\n    case EntityType.DOCKER_REPO:\n    case EntityType.MATERIALIZED_VIEW: // MaterializedView implements VersionableEntity, but versions aren't supported.\n      return false\n    case EntityType.FILE:\n    case EntityType.TABLE:\n    case EntityType.SUBMISSION_VIEW:\n    case EntityType.ENTITY_VIEW:\n    case EntityType.DATASET:\n    case EntityType.DATASET_COLLECTION:\n      return true\n    default:\n      throw new Error(`Unknown entity type: ${type}`)\n  }\n}\n\nexport const isTable = isTypeViaConcreteTypeFactory<Table, Entity>(\n  ...TABLE_CONCRETE_TYPE_VALUES,\n)\n\nexport const isView = isTypeViaConcreteTypeFactory<View, Entity>(\n  ...VIEW_CONCRETE_TYPE_VALUES,\n)\n\nexport const isTableEntity = isTypeViaConcreteTypeFactory<TableEntity, Entity>(\n  TABLE_ENTITY_CONCRETE_TYPE_VALUE,\n)\n\nexport const isSubmissionView = isTypeViaConcreteTypeFactory<\n  SubmissionView,\n  Entity\n>(SUBMISSION_VIEW_CONCRETE_TYPE_VALUE)\n\nexport const isMaterializedView = isTypeViaConcreteTypeFactory<\n  MaterializedView,\n  Entity\n>(MATERIALIZED_VIEW_CONCRETE_TYPE_VALUE)\n\nexport const isDataset = isTypeViaConcreteTypeFactory<Dataset, Entity>(\n  DATASET_CONCRETE_TYPE_VALUE,\n)\nexport const isDatasetCollection = isTypeViaConcreteTypeFactory<\n  DatasetCollection,\n  Entity\n>(DATASET_COLLECTION_CONCRETE_TYPE_VALUE)\n\nexport const isEntityView = isTypeViaConcreteTypeFactory<EntityView, Entity>(\n  ENTITY_VIEW_CONCRETE_TYPE_VALUE,\n)\n\n/**\n * @param entityView\n * @returns true iff the viewTypeMask allows files to appear in the view\n */\nexport function hasFilesInView(entityView: EntityView) {\n  return (entityView.viewTypeMask & ENTITY_VIEW_TYPE_MASK_FILE) != 0\n}\n\n/**\n * @param entityView\n * @returns true iff the viewTypeMask allows only files to appear in the view\n */\nexport function isFileView(entityView: EntityView) {\n  return entityView.viewTypeMask === ENTITY_VIEW_TYPE_MASK_FILE\n}\n\nexport function isVersionableEntity(\n  entity: Entity,\n): entity is VersionableEntity {\n  return isVersionableEntityType(convertToEntityType(entity.concreteType))\n}\n\nexport function getVersionDisplay(entity: Entity): string {\n  if (!isVersionableEntity(entity)) {\n    console.warn(\"Entity isn't versionable:\", entity)\n    return ''\n  }\n\n  if (entity.isLatestVersion) {\n    if (!isTable(entity)) {\n      // e.g. Files. Always show the version number\n      return `${entity.versionNumber!.toString()} (Current)`\n    } else if (isDataset(entity)) {\n      return 'Draft'\n    } else {\n      return 'Current'\n    }\n  } else {\n    return entity.versionNumber!.toString()\n  }\n}\n"],"names":[],"mappings":"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"}