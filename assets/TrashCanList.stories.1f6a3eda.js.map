{"version":3,"file":"TrashCanList.stories.1f6a3eda.js","sources":["../../src/lib/utils/hooks/SynapseAPI/trash/useTrashCan.ts","../../src/lib/containers/trash/TrashCanList.tsx"],"sourcesContent":["import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { PaginatedResults, TrashedEntity } from '../../../synapseTypes'\n\nexport function useGetItemsInTrashCanInfinite(\n  options?: UseInfiniteQueryOptions<\n    PaginatedResults<TrashedEntity>,\n    SynapseClientError\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n\n  return useInfiniteQuery<PaginatedResults<TrashedEntity>, SynapseClientError>(\n    ['trashcan', 'list', accessToken],\n    context => {\n      return SynapseClient.getItemsInTrashCan(accessToken, context.pageParam)\n    },\n    {\n      ...options,\n      getNextPageParam: (page, pages) => {\n        const numberOfFetchedResults = pages.flatMap(\n          page => page.results,\n        ).length\n        if (page.totalNumberOfResults! > numberOfFetchedResults) {\n          return numberOfFetchedResults\n        } else {\n          return undefined\n        }\n      },\n    },\n  )\n}\n\nexport function useRestoreEntities(\n  options?: UseMutationOptions<\n    PromiseSettledResult<void>[],\n    SynapseClientError,\n    string | Set<string>\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<\n    PromiseSettledResult<void>[],\n    SynapseClientError,\n    string | Set<string>\n  >(\n    (ids: string | Set<string>) => {\n      if (typeof ids === 'string') {\n        ids = new Set([ids])\n      }\n      const promises = Array.from(ids).map(id => {\n        return SynapseClient.restoreFromTrashCan(id, accessToken)\n      })\n      return Promise.allSettled(promises)\n    },\n    {\n      ...options,\n      onSuccess: async (_, ids, ctx) => {\n        await queryClient.invalidateQueries(['trashcan'])\n        if (options?.onSuccess) {\n          await options.onSuccess(_, ids, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function usePurgeEntities(\n  options?: UseMutationOptions<\n    PromiseSettledResult<void>[],\n    SynapseClientError,\n    string | Set<string>\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<\n    PromiseSettledResult<void>[],\n    SynapseClientError,\n    string | Set<string>\n  >(\n    (ids: string | Set<string>) => {\n      if (typeof ids === 'string') {\n        ids = new Set([ids])\n      }\n      const promises = Array.from(ids).map(id => {\n        return SynapseClient.purgeFromTrashCan(id, accessToken)\n      })\n      return Promise.allSettled(promises)\n    },\n    {\n      ...options,\n      onSuccess: async (_, ids, ctx) => {\n        await queryClient.invalidateQueries(['trashcan'])\n        if (options?.onSuccess) {\n          await options.onSuccess(_, ids, ctx)\n        }\n      },\n    },\n  )\n}\n","import moment from 'moment'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Alert, Button, Table } from 'react-bootstrap'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport { useGetEntity } from '../../utils/hooks/SynapseAPI'\nimport {\n  useGetItemsInTrashCanInfinite,\n  usePurgeEntities,\n  useRestoreEntities,\n} from '../../utils/hooks/SynapseAPI/trash/useTrashCan'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { TrashedEntity } from '../../utils/synapseTypes'\nimport Typography from '../../utils/typography/Typography'\nimport { EntityLink } from '../EntityLink'\nimport { BlockingLoader, SynapseSpinner } from '../LoadingScreen'\nimport WarningModal from '../synapse_form_wrapper/WarningModal'\nimport { Checkbox } from '../widgets/Checkbox'\n\ntype TrashCanListItemProps = {\n  item: TrashedEntity\n  isSelected: boolean\n  setIsSelected: (isSelected: boolean) => void\n  onRestore: () => void\n}\n\nfunction TrashCanListItem(props: TrashCanListItemProps) {\n  const { item, isSelected, setIsSelected, onRestore } = props\n  const { data: parentEntity } = useGetEntity(item.originalParentId)\n  return (\n    <tr>\n      <td>\n        <Checkbox\n          label={`Select ${item.entityId}`}\n          hideLabel={true}\n          checked={isSelected}\n          onChange={setIsSelected}\n        />\n      </td>\n      <td>{item.entityId}</td>\n      <td>{item.entityName}</td>\n      {/* <td>TypePlaceholder</td> */}\n      <td>\n        <>\n          {parentEntity && <EntityLink entity={parentEntity} />} (\n          {item.originalParentId})\n        </>\n      </td>\n      <td>{formatDate(moment(item.deletedOn))}</td>\n      <td>\n        <Button size=\"sm\" variant=\"outline\" onClick={onRestore}>\n          Restore\n        </Button>\n      </td>\n    </tr>\n  )\n}\n\n/**\n * Convert an array of Promise results to an array of errors\n */\nfunction toSynapseClientErrorList(\n  results: PromiseSettledResult<void>[],\n): SynapseClientError[] {\n  return results\n    .filter(\n      (result): result is PromiseRejectedResult => result.status === 'rejected',\n    )\n    .map(result => result.reason as SynapseClientError)\n}\n\nexport function TrashCanList() {\n  const isMounted = useRef(true)\n  const [selected, setSelected] = useState<Set<string>>(new Set())\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false)\n  const [errors, setErrors] = useState<SynapseClientError[]>([])\n\n  useEffect(() => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  })\n\n  /**\n   * When a mutation operation settles, update the list of errors and clear the selected set\n   */\n  function onMutateSettled(\n    results?: PromiseSettledResult<void>[],\n    error?: SynapseClientError | null,\n  ) {\n    if (isMounted.current) {\n      if (results) {\n        setErrors(toSynapseClientErrorList(results))\n      } else if (error) {\n        setErrors([error])\n      }\n      setSelected(new Set())\n    }\n  }\n\n  const { mutate: restore, isLoading: isLoadingRestore } = useRestoreEntities({\n    onSettled: onMutateSettled,\n  })\n  const { mutate: purge, isLoading: isLoadingPurge } = usePurgeEntities({\n    onSettled: onMutateSettled,\n  })\n\n  const isMutating = isLoadingRestore || isLoadingPurge\n\n  const { data, isLoading, hasNextPage, fetchNextPage, isFetchingNextPage } =\n    useGetItemsInTrashCanInfinite({\n      useErrorBoundary: true,\n    })\n\n  const items = data?.pages.flatMap(page => page.results) ?? []\n\n  const isAllSelected = selected.size === items.length\n\n  const onSelectAll = () => {\n    if (isAllSelected) {\n      setSelected(new Set())\n    } else {\n      setSelected(new Set(items.map(item => item.entityId)))\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport\">\n      <BlockingLoader\n        show={isMutating}\n        headlineText={isLoadingPurge ? 'Deleting...' : 'Restoring...'}\n      />\n      <Typography variant=\"body1\">\n        The trash can contains items that were recently deleted. You can recover\n        deleted items in the trash can by clicking &quot;Restore&quot;. Items\n        will remain in the trash can for 30 days before being automatically\n        purged.\n      </Typography>\n      <WarningModal\n        title=\"Delete selected items from your Trash?\"\n        modalBody={\n          <Typography variant=\"body1\">\n            You can&apos;t undo this action.\n          </Typography>\n        }\n        confirmButtonText=\"Delete\"\n        confirmButtonVariant=\"danger\"\n        onConfirm={() => {\n          purge(selected)\n          setShowDeleteConfirmation(false)\n        }}\n        onCancel={() => {\n          setShowDeleteConfirmation(false)\n        }}\n        show={showDeleteConfirmation}\n      />\n      {isLoading && <SynapseSpinner />}\n      {!isLoading && items.length === 0 && (\n        <Typography variant=\"body1\">Trash Can is currently empty.</Typography>\n      )}\n      {!isLoading && items.length > 0 && (\n        <>\n          <Table striped borderless bordered={false}>\n            <thead>\n              <tr>\n                <th>\n                  <Checkbox\n                    label=\"Select All\"\n                    hideLabel={true}\n                    checked={isAllSelected}\n                    onChange={onSelectAll}\n                  />\n                </th>\n                <th>ID</th>\n                <th>Name</th>\n                {/* <th>TypePlaceholder</th> */}\n                <th>Location</th>\n                <th>Deleted On</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {items.map(item => (\n                <TrashCanListItem\n                  key={item.entityId}\n                  item={item}\n                  isSelected={selected.has(item.entityId)}\n                  setIsSelected={isSelected => {\n                    setSelected(selected => {\n                      if (isSelected) {\n                        selected.add(item.entityId)\n                      } else {\n                        selected.delete(item.entityId)\n                      }\n                      return new Set(selected)\n                    })\n                  }}\n                  onRestore={() => {\n                    restore(item.entityId)\n                    selected.delete(item.entityId)\n                  }}\n                />\n              ))}\n            </tbody>\n          </Table>\n          {errors.length > 0 && (\n            <Alert\n              dismissible={false}\n              show={true}\n              variant={'danger'}\n              transition={false}\n            >\n              The following errors were encountered:\n              <ul>\n                {errors.map(error => (\n                  <li key={error.message}>{error.message}</li>\n                ))}\n              </ul>\n            </Alert>\n          )}\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'flex-end',\n              gap: '10px',\n            }}\n          >\n            {hasNextPage && (\n              <Button\n                variant=\"sds-primary\"\n                disabled={isFetchingNextPage}\n                onClick={() => {\n                  fetchNextPage()\n                }}\n              >\n                Load More\n              </Button>\n            )}\n            <div style={{ margin: 'auto' }} />\n            <Button\n              variant=\"danger\"\n              disabled={selected.size === 0}\n              onClick={() => {\n                setShowDeleteConfirmation(true)\n              }}\n            >\n              Delete Selected\n            </Button>\n            <Button\n              variant=\"outline\"\n              disabled={selected.size === 0}\n              onClick={() => {\n                restore(selected)\n              }}\n            >\n              Restore Selected\n            </Button>\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n"],"names":["SynapseClient.getItemsInTrashCan","SynapseClient.restoreFromTrashCan","SynapseClient.purgeFromTrashCan","props","item","isSelected","setIsSelected","onRestore","data","parentEntity","useGetEntity","originalParentId","_jsx","entityId","entityName","_Fragment","formatDate","moment","deletedOn","results","filter","result","status","map","reason","isMounted","useRef","selected","setSelected","useState","Set","showDeleteConfirmation","setShowDeleteConfirmation","errors","setErrors","useEffect","current","error","toSynapseClientErrorList","mutate","restore","isLoading","isLoadingRestore","useRestoreEntities","onSettled","onMutateSettled","purge","isLoadingPurge","usePurgeEntities","isMutating","hasNextPage","fetchNextPage","isFetchingNextPage","useGetItemsInTrashCanInfinite","useErrorBoundary","items","pages","flatMap","page","isAllSelected","size","length","onSelectAll","_jsxs","has","add","delete","message","display","justifyContent","gap","margin"],"mappings":"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"}