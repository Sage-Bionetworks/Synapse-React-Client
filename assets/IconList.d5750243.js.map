{"version":3,"file":"IconList.d5750243.js","sources":["../../src/lib/containers/IconList.tsx"],"sourcesContent":["import React from 'react'\nimport IconSvg, { IconSvgOptions } from './IconSvg'\n\nexport type IconListProps = {\n  iconConfigs: {\n    [index: string]: IconSvgOptions // if the icon option has the \"label\" set, it will show tooltip in IconSvg\n  }\n  iconNames: string[]\n  useTheme?: boolean\n  useBackground?: boolean\n}\n\nconst IconList: React.FunctionComponent<IconListProps> = props => {\n  const { iconConfigs, iconNames, useTheme, useBackground } = props\n  let noMatch: boolean = false\n  const css = useTheme ? 'icon-list themed' : 'icon-list'\n  const componentCss = useBackground ? `${css} bg-circle` : css\n\n  const buildIconList = () => {\n    const unique = Array.from(new Set(iconNames))\n    return unique.map((el: any) => {\n      const iconConfig = iconConfigs[el]\n      // if this data type value doesn't have a matching icon, we use the \"other\" icon\n      if (!iconConfig) {\n        noMatch = true\n        return\n      } else {\n        return <IconSvg key={el} options={iconConfig} />\n      }\n    })\n  }\n\n  return (\n    <span className={componentCss}>\n      {buildIconList()}\n      {noMatch && iconConfigs['other'] ? (\n        <IconSvg options={iconConfigs['other']} />\n      ) : (\n        <></>\n      )}\n    </span>\n  )\n}\n\nexport default IconList\n"],"names":["iconConfigs","iconNames","useTheme","useBackground","_jsxs","componentCss","_jsx","iconConfig","noMatch","_Fragment"],"mappings":"sGAYA,KAAA,GAAA,AAAA,GAAA,CACE,KAAA,CAAM,cAAEA,YAAaC,WAAWC,iBAAUC,EAC1C,GAAA,GAAA,GACA,KAAA,GAAA,EAAA,mBAAA,YACA,EAAA,EAAA,GAAA,cAAA,EAgBA,MAAAC,GAAA,OAAA,CACE,UAAA,EAAiBC,SAAAA,CAAAA,AAfnB,KAEE,AADA,MAAA,KAAA,GAAA,KAAA,CAAA,CAAA,EACA,IAAA,AAAA,GAAA,CACE,KAAA,GAAA,EAAA,GAEA,GAAA,EAIE,MAAAC,GAAA,EAAA,CAAO,QAAA,CAA2BC,EAAAA,CAAAA,EAHlCC,EAAAA,EAID,CAAA,GAKcH,EAAAA,GAAAA,EAAAA,MAAAA,EAAAA,EAAAA,CAGb,QAAA,EAAA,KAA8B,CAAA,EAAAC,EAAAG,EAAA,CAAA,CAAA,CAAA,CAHlC,CAAA,CASH,EAED,GAAA,GAAA"}