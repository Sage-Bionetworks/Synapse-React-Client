{"version":3,"file":"SynapseVideo.f852939c.js","sources":["../../src/lib/containers/widgets/SynapseVideo.tsx"],"sourcesContent":["import React from 'react'\nimport { useEffect, useState } from 'react'\nimport { getEntity, getFiles } from '../../utils/SynapseClient'\nimport {\n  FileEntity,\n  FileHandleAssociateType,\n  FileHandleAssociation,\n  BatchFileRequest,\n  BatchFileResult,\n} from '../../utils/synapseTypes'\nimport { SynapseConstants } from '../../utils/'\nimport { useSynapseContext } from '../../utils/SynapseContext'\n\nexport type Props = {\n  params: {\n    width?: string\n    height?: string\n    videoId?: string\n    vimeoId?: string\n    oggSynapseId?: string\n    mp4SynapseId?: string\n    webmSynapseId?: string\n  }\n}\n\nexport default function SynapseVideo({ params }: Props) {\n  const { accessToken } = useSynapseContext()\n  const [externalVideoUrl, setExternalVideoUrl] = useState<string>()\n  const [synapseVideoPresignedUrl, setSynapseVideoPresignedUrl] =\n    useState<string>()\n\n  const videoWidth = params.width ?? ''\n  const videoHeight = params.height ?? ''\n  useEffect(() => {\n    const getVideo = () => {\n      if (params.videoId)\n        setExternalVideoUrl(`https://www.youtube.com/embed/${params.videoId}`)\n      else if (params.vimeoId)\n        setExternalVideoUrl(`https://player.vimeo.com/video/${params.vimeoId}`)\n      else {\n        const videoKey =\n          params.oggSynapseId || params.mp4SynapseId || params.webmSynapseId\n\n        getEntity<FileEntity>(accessToken, videoKey!).then(\n          (data: FileEntity) => {\n            const fileHandleAssociationList: FileHandleAssociation[] = [\n              {\n                associateObjectId: videoKey!,\n                associateObjectType: FileHandleAssociateType.FileEntity,\n                fileHandleId: data.dataFileHandleId,\n              },\n            ]\n            getSynapseFiles(fileHandleAssociationList, data.dataFileHandleId)\n          },\n        )\n      }\n    }\n\n    const getSynapseFiles = (\n      fileHandleAssociationList: FileHandleAssociation[],\n      id: string,\n    ) => {\n      const request: BatchFileRequest = {\n        includeFileHandles: false,\n        includePreSignedURLs: true,\n        includePreviewPreSignedURLs: false,\n        requestedFiles: fileHandleAssociationList,\n      }\n\n      getFiles(request, accessToken)\n        .then((data: BatchFileResult) => {\n          const { preSignedURL } = data.requestedFiles.filter(\n            el => el.fileHandleId === id,\n          )[0]\n          setSynapseVideoPresignedUrl(preSignedURL)\n        })\n        .catch(err => {\n          console.error('Error on getting video ', err)\n        })\n    }\n    getVideo()\n  }, [externalVideoUrl, params, accessToken, videoHeight, videoWidth])\n\n  const RenderVideo = () => {\n    if (synapseVideoPresignedUrl) {\n      if (accessToken) {\n        return (\n          <video\n            controls\n            src={synapseVideoPresignedUrl}\n            width={videoWidth}\n            height={videoHeight}\n            data-testid=\"synapse-video-url\"\n          >\n            It does not support the HTML5 Video element.\n          </video>\n        )\n      } else {\n        // if not logged in, show login button\n        return (\n          <p>\n            You will need to\n            <button\n              data-testid=\"video-login\"\n              className={`${SynapseConstants.SRC_SIGN_IN_CLASS} sign-in-btn default\n                `}\n            >\n              Sign in\n            </button>\n            in for access to that resource.\n          </p>\n        )\n      }\n    } else if (externalVideoUrl) {\n      return (\n        <iframe\n          title=\"video frame\"\n          src={externalVideoUrl}\n          width={videoWidth}\n          height={videoHeight}\n        ></iframe>\n      )\n    } else {\n      return <></>\n    }\n  }\n\n  return <RenderVideo />\n}\n"],"names":["params","accessToken","useEffect","setExternalVideoUrl","getEntity","videoKey","FileEntity","dataFileHandleId","getSynapseFiles","getFiles","fileHandleAssociationList","preSignedURL","setSynapseVideoPresignedUrl","console","getVideo","_jsx","synapseVideoPresignedUrl","videoWidth","videoHeight","_jsxs","SynapseConstants.SRC_SIGN_IN_CLASS","SRC_SIGN_IN_CLASS","externalVideoUrl","_Fragment"],"mappings":"+JACA,KAAA,GAAA,OAAA,MAAA,kCAwBA,WAAA,CAAqC,UAAEA,SACrC,KAAA,CAAM,eAAEC,EAAAA,EACR,CAAA,EAAA,GAAA,EAAA,EACA,CAAA,EAAA,GAAA,EAAA,EAGA,EAAA,KAAA,QAAA,OAAA,GACA,EAAA,KAAA,SAAA,OAAA,GACAC,SAAAA,IAAAA,CACE,KAAA,GAAA,IAAA,CACE,GAAA,EAAA,QACEC,EAAAA,iCAAAA,EAAAA,SAAAA,UAAmB,EAAA,QAEnBA,EAAAA,kCAAAA,EAAAA,SAAAA,MAAmB,CAEnB,KAAA,GAAA,EAAA,cAAA,EAAA,cAAA,EAAA,cAGAC,EAAAA,EAAAA,CAAAA,EAAAA,KAAAA,AAAAA,GAAAA,CAEI,KAAA,GAAA,CAAA,CACE,kBAAA,EACqBC,oBAAAA,EAAAA,WAC0BC,aAAAA,EAAAA,gBAC1BC,CAAAA,EAGvBC,EAAAA,EAAAA,EAAAA,gBAAAA,CAAe,CAAA,CATnB,CAYD,EAGH,EAAA,CAAA,EAAA,IAAA,CAWEC,EAPA,CAAkC,mBAAA,GACZ,qBAAA,GACE,4BAAA,GACO,eAAA,CACbC,EAGlBD,CAAAA,EAAAA,KAAAA,AAAAA,GAAAA,CAEI,KAAA,CAAM,gBAAEE,EAAAA,eAAAA,OAAAA,AAAAA,GAAAA,EAAAA,eAAAA,CAAAA,EAAAA,GAGRC,EAAAA,CAAAA,CAA2B,CAAA,EAAA,MAAA,AAAA,GAAA,CAG3BC,QAAAA,MAAAA,0BAAAA,CAAAA,CAAA,CAAA,CARJ,EAWFC,GAAQ,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,CAAA,CAAA,EA+CVC,EA5CA,IACE,EACE,EACEA,EAAA,QAAA,CACE,SAAA,GAAA,IAAA,EAEOC,MAAAA,EACEC,OAAAA,EACCC,cAAAA,oBACI,SAAA,8CALd,CAAA,EAYFC,EAAA,IAAA,CACE,SAAA,CAAA,mBAAAJ,EAAA,SAAA,CAEE,cAAA,cACc,UAAA,GAAAK;AAAAA,kBACmBC,SAAAA,SAFjC,CAAA,EAAA,iCAAA,CAFF,CAAA,EAYH,EAEDN,EAAA,SAAA,CACE,MAAA,cACQ,IAAA,EACDO,MAAAA,EACEL,OAAAA,CACCC,CAAAA,EAIZH,EAAAQ,EAAA,CAAA,CAAA,EAIJ,CAAA,CAAA,CACD"}