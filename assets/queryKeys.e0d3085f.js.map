{"version":3,"file":"queryKeys.e0d3085f.js","sources":["../../src/lib/utils/hooks/SynapseAPI/entity/queryKeys.ts"],"sourcesContent":["import { QueryClient } from 'react-query'\nimport {\n  EntityBundleRequest,\n  EntityChildrenRequest,\n  QueryBundleRequest,\n} from '../../../synapseTypes'\n\n/**\n * Co-location of react-query keys for queries related to Synapse entity data. Two objectives of this strategy are\n * - minimize the risk of inappropriate cache key collisions\n * - simplify clearing the approprate query caches when the entity data is updated\n *\n * For more information, see https://tkdodo.eu/blog/leveraging-the-query-function-context\n */\nexport const entityQueryKeys = {\n  /** Query key for all entities */\n  all: [{ objectType: 'entity' }],\n  // Data for an entity\n  entity: (id: string) => [{ ...entityQueryKeys.all[0], id: id }],\n  // Data for a particular version of an entity\n  version: (id: string, versionNumber?: string | number) => [\n    {\n      ...entityQueryKeys.entity(id)[0],\n      versionNumber: versionNumber,\n    },\n  ],\n\n  // List of Entity Versions\n  versions: (id: string) => [\n    {\n      ...entityQueryKeys.entity(id)[0],\n      scope: 'versions',\n    },\n  ],\n  versionsQuery: (id: string, limit: number, offset: number) => [\n    {\n      ...entityQueryKeys.versions(id)[0],\n      versionQuery: {\n        limit: limit,\n        offset: offset,\n      },\n    },\n  ],\n\n  // JSON Representation of an entity\n  json: (id: string) => [{ ...entityQueryKeys.entity(id)[0], scope: 'json' }],\n\n  // Entity path\n  path: (id: string) => [{ ...entityQueryKeys.entity(id)[0], scope: 'path' }],\n\n  // Entity bundle\n  bundle: (\n    id: string,\n    versionNumber: string | number | undefined,\n    bundleRequest: EntityBundleRequest,\n  ) => [\n    {\n      ...entityQueryKeys.version(id, versionNumber)[0],\n      scope: 'entityBundle',\n      entityBundleRequest: bundleRequest,\n    },\n  ],\n\n  children: (request: EntityChildrenRequest, infinite: boolean) => [\n    {\n      ...entityQueryKeys.entity(request.parentId ?? 'root')[0],\n      scope: 'children',\n      isInfinite: infinite,\n      entityChildrenRequest: request,\n    },\n  ],\n\n  tableQueryResult: (\n    queryBundleRequest: QueryBundleRequest,\n    infinite: boolean,\n  ) => [\n    {\n      ...entityQueryKeys.entity(queryBundleRequest.entityId)[0],\n      scope: 'tableQueryResult',\n      isInfinite: infinite,\n      tableQueryBundleRequest: queryBundleRequest,\n    },\n  ],\n\n  tableQueryResultWithAsyncStatus: (\n    queryBundleRequest: QueryBundleRequest,\n    infinite: boolean,\n  ) => [\n    {\n      ...entityQueryKeys.entity(queryBundleRequest.entityId)[0],\n      scope: 'tableQueryResultWithAsyncStatus',\n      isInfinite: infinite,\n      tableQueryBundleRequest: queryBundleRequest,\n    },\n  ],\n\n  boundJSONSchema: (id: string) => [\n    {\n      ...entityQueryKeys.entity(id)[0],\n      scope: 'boundJSONSchema',\n    },\n  ],\n\n  schemaValidationResults: (id: string) => [\n    {\n      ...entityQueryKeys.entity(id)[0],\n      scope: 'schemaValidationResults',\n    },\n  ],\n}\n\nexport function invalidateAllQueriesForEntity(\n  queryClient: QueryClient,\n  id: string,\n) {\n  // TODO: Figure out how to handle cases where the change can affect other entities.\n  // Some examples:\n  //  - deleting an entity should invalidate the parent's children\n  //  - moving an entity should invalidate the old and new parent's children\n  return queryClient.invalidateQueries(entityQueryKeys.entity(id))\n}\n"],"names":[],"mappings":"AAcO,KAAM,GAAkB,CAE7B,IAAK,CAAC,CAAE,WAAY,SAAU,EAE9B,OAAQ,AAAC,GAAe,CAAC,CAAE,GAAG,EAAgB,IAAI,GAAI,KAAQ,EAE9D,QAAS,CAAC,EAAY,IAAoC,CACxD,CACE,GAAG,EAAgB,OAAO,CAAE,EAAE,GAC9B,eACF,CACF,EAGA,SAAU,AAAC,GAAe,CACxB,CACE,GAAG,EAAgB,OAAO,CAAE,EAAE,GAC9B,MAAO,UACT,CACF,EACA,cAAe,CAAC,EAAY,EAAe,IAAmB,CAC5D,CACE,GAAG,EAAgB,SAAS,CAAE,EAAE,GAChC,aAAc,CACZ,QACA,QACF,CACF,CACF,EAGA,KAAM,AAAC,GAAe,CAAC,CAAE,GAAG,EAAgB,OAAO,CAAE,EAAE,GAAI,MAAO,OAAQ,EAG1E,KAAM,AAAC,GAAe,CAAC,CAAE,GAAG,EAAgB,OAAO,CAAE,EAAE,GAAI,MAAO,OAAQ,EAG1E,OAAQ,CACN,EACA,EACA,IACG,CACH,CACE,GAAG,EAAgB,QAAQ,EAAI,CAAa,EAAE,GAC9C,MAAO,eACP,oBAAqB,CACvB,CACF,EAEA,SAAU,CAAC,EAAgC,IAAsB,CAjD5D,MAiD4D,OAC/D,CACE,GAAG,EAAgB,OAAO,KAAQ,WAAR,OAAoB,MAAM,EAAE,GACtD,MAAO,WACP,WAAY,EACZ,sBAAuB,CACzB,CACF,GAEA,iBAAkB,CAChB,EACA,IACG,CACH,CACE,GAAG,EAAgB,OAAO,EAAmB,QAAQ,EAAE,GACvD,MAAO,mBACP,WAAY,EACZ,wBAAyB,CAC3B,CACF,EAEA,gCAAiC,CAC/B,EACA,IACG,CACH,CACE,GAAG,EAAgB,OAAO,EAAmB,QAAQ,EAAE,GACvD,MAAO,kCACP,WAAY,EACZ,wBAAyB,CAC3B,CACF,EAEA,gBAAiB,AAAC,GAAe,CAC/B,CACE,GAAG,EAAgB,OAAO,CAAE,EAAE,GAC9B,MAAO,iBACT,CACF,EAEA,wBAAyB,AAAC,GAAe,CACvC,CACE,GAAG,EAAgB,OAAO,CAAE,EAAE,GAC9B,MAAO,yBACT,CACF,CACF,EAEO,WACL,EACA,EACA,CAKA,MAAO,GAAY,kBAAkB,EAAgB,OAAO,CAAE,CAAC,CACjE"}