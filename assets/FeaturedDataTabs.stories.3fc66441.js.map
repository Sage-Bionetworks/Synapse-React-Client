{"version":3,"file":"FeaturedDataTabs.stories.3fc66441.js","sources":["../../src/lib/containers/home_page/featured-data/FacetPlotsCard.tsx","../../src/lib/containers/home_page/featured-data/QueryPerFacetPlotsCard.tsx","../../src/lib/containers/home_page/featured-data/SingleQueryFacetPlotsCards.tsx","../../src/lib/containers/home_page/featured-data/FeaturedDataPlots.tsx","../../src/lib/containers/home_page/featured-data/FeaturedDataTabs.tsx"],"sourcesContent":["import * as React from 'react'\nimport Plotly from 'plotly.js-basic-dist'\nimport * as PlotlyTyped from 'plotly.js'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { SizeMe } from 'react-sizeme'\n\nimport {\n  FacetColumnResultValues,\n  ColumnType,\n  FacetColumnResult,\n  FacetColumnResultValueCount,\n} from '../../../utils/synapseTypes'\n\nimport { getColorPalette } from '../../../containers/ColorGradient'\nimport { unCamelCase } from '../../../utils/functions/unCamelCase'\nimport { useEffect, useState } from 'react'\nimport loadingScreen from '../../LoadingScreen'\nimport {\n  GraphData,\n  extractPlotDataArray,\n  getPlotStyle,\n  FacetPlotLegend,\n} from '../../widgets/facet-nav/FacetNavPanel'\nimport { getFacets } from '../../widgets/facet-nav/FacetNav'\nimport { useSynapseContext } from '../../../utils/SynapseContext'\nimport { useQueryContext } from '../../QueryContext'\nimport { useQueryVisualizationContext } from '../../QueryVisualizationWrapper'\n\nconst Plot = createPlotlyComponent(Plotly)\n\nexport type FacetPlotsCardProps = {\n  title?: string\n  description?: string\n  facetsToPlot?: string[]\n  detailsPagePath?: string\n}\n\nconst layout: Partial<PlotlyTyped.Layout> = {\n  showlegend: false,\n  annotations: [],\n  margin: { l: 0, r: 0, b: 0, t: 0, pad: 0 },\n  yaxis: {\n    visible: false,\n    showgrid: false,\n  },\n  xaxis: {\n    visible: false,\n    showgrid: false,\n  },\n}\n\nconst FacetPlotsCard: React.FunctionComponent<FacetPlotsCardProps> = ({\n  title,\n  description,\n  facetsToPlot,\n  detailsPagePath,\n}: FacetPlotsCardProps): JSX.Element => {\n  const { accessToken } = useSynapseContext()\n  const { data, isLoadingNewBundle } = useQueryContext()\n  const { facetAliases, rgbIndex } = useQueryVisualizationContext()\n  const [facetPlotDataArray, setFacetPlotDataArray] = useState<GraphData[]>([])\n  const [facetDataArray, setFacetDataArray] = useState<FacetColumnResult[]>([])\n  const [selectedFacetValue, setSelectedFacetValue] = useState<string>('')\n  const { colorPalette } = getColorPalette(rgbIndex ?? 0, 2)\n\n  useEffect(() => {\n    if (!facetsToPlot || !data) {\n      return\n    } else {\n      const getColumnType = (\n        facetToPlot: FacetColumnResult,\n      ): ColumnType | undefined =>\n        data?.columnModels?.find(\n          columnModel => columnModel.name === facetToPlot.columnName,\n        )?.columnType as ColumnType\n\n      const facetsDataToPlot = getFacets(data, facetsToPlot)\n      setFacetDataArray(facetsDataToPlot)\n      Promise.all(\n        facetsDataToPlot.map(async (item, index) => {\n          const plotData = await extractPlotDataArray(\n            item as FacetColumnResultValues,\n            getColumnType(item),\n            index + 1, //individual plot rgbIndex\n            'PIE',\n            accessToken,\n          )\n          return plotData\n        }),\n      ).then(newPlotData => setFacetPlotDataArray(newPlotData))\n      // If we are showing a facet selection based card, then set the selectedFacetValue.  For example, facet column \"study\" with value \"ROSMAP\"\n      const selectedFacet: FacetColumnResultValueCount | undefined =\n        data?.facets?.map(item => {\n          const facetValues: FacetColumnResultValueCount[] = (\n            item as FacetColumnResultValues\n          ).facetValues\n          if (facetValues) {\n            const filteredFacetValues: FacetColumnResultValueCount[] =\n              facetValues.filter(facetValue => {\n                return facetValue.isSelected\n              })\n            return filteredFacetValues.length > 0\n              ? filteredFacetValues[0]\n              : undefined\n          } else {\n            return undefined\n          }\n        })[0]\n      if (selectedFacet && selectedFacet.value) {\n        setSelectedFacetValue(selectedFacet?.value)\n      }\n    }\n  }, [facetsToPlot, data])\n\n  if (\n    isLoadingNewBundle ||\n    !facetPlotDataArray ||\n    !facetDataArray ||\n    facetDataArray.length === 0\n  ) {\n    return (\n      <div className=\"FacetPlotsCard FacetPlotsCard__loading SRC-centerContentColumn\">\n        {loadingScreen}\n      </div>\n    )\n  } else {\n    let detailsPageLink = <></>\n    if (detailsPagePath && selectedFacetValue) {\n      detailsPageLink = (\n        <div className=\"FacetPlotsCard__link\">\n          <a href={detailsPagePath}>View {selectedFacetValue}</a>\n        </div>\n      )\n    }\n    const isShowingMultiplePlots = facetPlotDataArray.length > 1\n    const cardTitle =\n      title ??\n      (isShowingMultiplePlots\n        ? selectedFacetValue\n        : unCamelCase(facetDataArray[0].columnName, facetAliases))\n    return (\n      <div className=\"FacetPlotsCard cardContainer\">\n        <div\n          className=\"FacetPlotsCard__titlebar\"\n          style={{ backgroundColor: colorPalette[0].replace(')', ',.05)') }}\n        >\n          <span className=\"FacetPlotsCard__title\">{cardTitle}</span>\n          {description && (\n            <span className=\"FacetPlotsCard__description\">{description}</span>\n          )}\n          {detailsPageLink}\n          {isLoadingNewBundle && (\n            <span style={{ marginLeft: '2px' }} className={'spinner'} />\n          )}\n        </div>\n        <div className=\"FacetPlotsCard__body\">\n          {/* create a plot for every facet to be plotted */}\n          {facetPlotDataArray.map((plotData, index) => {\n            return (\n              <div key={index}>\n                {index !== 0 && <hr></hr>}\n                {isShowingMultiplePlots && (\n                  <div className=\"FacetPlotsCard__body__facetname\">\n                    <span>\n                      {unCamelCase(\n                        facetDataArray[index].columnName,\n                        facetAliases,\n                      )}\n                    </span>\n                  </div>\n                )}\n                <div className=\"FacetPlotsCard__body__row\">\n                  <SizeMe monitorHeight>\n                    {({ size }) => (\n                      <div className=\"FacetPlotsCard__body__plot\">\n                        <Plot\n                          key={`${facetsToPlot![index]}-${size.width}`}\n                          layout={layout}\n                          data={plotData?.data ?? []}\n                          style={getPlotStyle(size.width, 'PIE', 150)}\n                          config={{ displayModeBar: false }}\n                        />\n                      </div>\n                    )}\n                  </SizeMe>\n                  <FacetPlotLegend\n                    labels={plotData?.labels}\n                    colors={plotData?.colors}\n                    isExpanded={false}\n                  />\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default FacetPlotsCard\n","import * as React from 'react'\nimport { SynapseConstants } from '../../../utils'\nimport { parseEntityIdFromSqlStatement } from '../../../utils/functions/sqlFunctions'\nimport { QueryBundleRequest } from '../../../utils/synapseTypes'\nimport { QueryVisualizationWrapper } from '../../QueryVisualizationWrapper'\nimport { QueryWrapper } from '../../QueryWrapper'\nimport { QueryWrapperErrorBanner } from '../../QueryWrapperErrorBanner'\nimport FacetPlotsCard from './FacetPlotsCard'\n\nexport type QueryPerFacetPlotsCardProps = {\n  title?: string\n  description?: string\n  rgbIndex?: number\n  facetsToPlot?: string[]\n  facetAliases?: Record<string, string>\n  selectFacetColumnName: string\n  selectFacetColumnValue: string\n  sql?: string\n  detailsPagePath: string\n}\nexport function getQueryRequest(\n  sql: string,\n  selectFacetColumnName: string,\n  selectFacetColumnValue: string,\n): QueryBundleRequest {\n  const entityId = parseEntityIdFromSqlStatement(sql)\n  return {\n    entityId,\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n      SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n      SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n      SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n    query: {\n      sql,\n      offset: 0,\n      limit: 25,\n      selectedFacets: [\n        {\n          columnName: selectFacetColumnName,\n          facetValues: [selectFacetColumnValue],\n          concreteType:\n            'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest',\n        },\n      ],\n    },\n  }\n}\nconst QueryPerFacetPlotsCard: React.FunctionComponent<\n  QueryPerFacetPlotsCardProps\n> = props => {\n  const {\n    title,\n    description,\n    sql,\n    facetsToPlot,\n    rgbIndex,\n    selectFacetColumnName,\n    selectFacetColumnValue,\n    detailsPagePath,\n    ...rest\n  } = props\n  const initQueryRequest: QueryBundleRequest = getQueryRequest(\n    sql!,\n    selectFacetColumnName,\n    selectFacetColumnValue,\n  )\n  return (\n    <div className=\"QueryPerFacetPlotsCard\">\n      <QueryWrapper {...rest} initQueryRequest={initQueryRequest}>\n        <QueryVisualizationWrapper rgbIndex={rgbIndex} {...rest}>\n          <QueryWrapperErrorBanner />\n          <FacetPlotsCard\n            title={title}\n            description={description}\n            facetsToPlot={facetsToPlot}\n            detailsPagePath={detailsPagePath}\n          />\n        </QueryVisualizationWrapper>\n      </QueryWrapper>\n    </div>\n  )\n}\n\nexport default QueryPerFacetPlotsCard\n","import * as React from 'react'\nimport { SynapseConstants } from '../../../utils'\nimport { parseEntityIdFromSqlStatement } from '../../../utils/functions/sqlFunctions'\nimport { QueryBundleRequest } from '../../../utils/synapseTypes'\nimport { QueryVisualizationWrapper } from '../../QueryVisualizationWrapper'\nimport { QueryWrapper } from '../../QueryWrapper'\nimport { QueryWrapperErrorBanner } from '../../QueryWrapperErrorBanner'\nimport FacetPlotsCard from './FacetPlotsCard'\n\nexport type SingleQueryFacetPlotsCardsProps = {\n  rgbIndex?: number\n  facetsToPlot?: string[]\n  facetAliases?: Record<string, string>\n  sql?: string\n}\nexport function getQueryRequest(sql: string): QueryBundleRequest {\n  const entityId = parseEntityIdFromSqlStatement(sql)\n  return {\n    entityId,\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n      SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n      SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n      SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n    query: {\n      sql,\n      offset: 0,\n      limit: 1,\n    },\n  }\n}\nconst SingleQueryFacetPlotsCards: React.FunctionComponent<\n  SingleQueryFacetPlotsCardsProps\n> = props => {\n  const { sql, facetsToPlot, rgbIndex, facetAliases } = props\n  const initQueryRequest: QueryBundleRequest = getQueryRequest(sql!)\n  return (\n    <div className=\"SingleQueryFacetPlotsCards\">\n      <QueryWrapper initQueryRequest={initQueryRequest}>\n        <QueryVisualizationWrapper\n          rgbIndex={rgbIndex}\n          facetAliases={facetAliases}\n        >\n          <QueryWrapperErrorBanner />\n          {facetsToPlot?.map(facetName => {\n            return (\n              <FacetPlotsCard\n                key={`FacetPlotCard-${facetName}`}\n                facetsToPlot={[facetName]}\n              />\n            )\n          })}\n        </QueryVisualizationWrapper>\n      </QueryWrapper>\n    </div>\n  )\n}\n\nexport default SingleQueryFacetPlotsCards\n","import * as React from 'react'\nimport QueryPerFacetPlotsCard, {\n  QueryPerFacetPlotsCardProps,\n} from './QueryPerFacetPlotsCard'\nimport SingleQueryFacetPlotsCards, {\n  SingleQueryFacetPlotsCardsProps,\n} from './SingleQueryFacetPlotsCards'\n\nexport type QueryFacetPlotsCardsProps =\n  | QueryPerFacetPlotsCardProps\n  | SingleQueryFacetPlotsCardsProps\n\nexport type FeaturedDataPlotsProps = {\n  configs: QueryFacetPlotsCardsProps[]\n  rgbIndex?: number\n  sql?: string\n  explorePagePath?: string\n}\n\nconst FeaturedDataPlots: React.FunctionComponent<\n  FeaturedDataPlotsProps\n> = props => {\n  const { configs, rgbIndex, sql } = props\n  // What mode are we in?  Either every card has a different selected facet (requiring a different query),\n  // or we're showing the facet counts for a single query.  This controls the layout, and how the cards are populated.\n  const isQueryPerCard = (configs[0] as any).selectFacetColumnName\n  return (\n    <div\n      className={`FeaturedDataPlots${\n        isQueryPerCard ? '__queryPerCard' : '__singleQuery'\n      }`}\n    >\n      {configs.map((config: any) => {\n        return (\n          <>\n            {isQueryPerCard && (\n              <QueryPerFacetPlotsCard\n                {...config}\n                rgbIndex={rgbIndex}\n                sql={sql}\n              />\n            )}\n            {!isQueryPerCard && (\n              <SingleQueryFacetPlotsCards\n                {...config}\n                rgbIndex={rgbIndex}\n                sql={sql}\n              />\n            )}\n          </>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default FeaturedDataPlots\n","import * as React from 'react'\nimport { useState } from 'react'\nimport FeaturedDataPlots, { FeaturedDataPlotsProps } from './FeaturedDataPlots'\nimport { Icon } from '../../../containers/row_renderers/utils'\nimport { Button } from 'react-bootstrap'\n\nexport type FeatureDataTabProps = {\n  title: string // type of data being shown, used for the tab title and explore all button\n  icon?: string\n  exploreObjectType?: string\n  explorePagePath?: string\n  plotsConfig: FeaturedDataPlotsProps\n}\n\nexport type FeaturedDataTabsProps = {\n  configs: FeatureDataTabProps[]\n  rgbIndex: number\n  sql: string\n}\n\nconst FeaturedDataTabs: React.FunctionComponent<\n  FeaturedDataTabsProps\n> = props => {\n  const [selectedTabIndex, setSelectedTabIndex] = useState<number>(0)\n  const { configs, rgbIndex, sql } = props\n  // explore all data button\n  const selectedTabProps: FeatureDataTabProps = configs[selectedTabIndex]\n  return (\n    <div className=\"FeaturedDataTabs\">\n      {/* tabs */}\n      <div className=\"FeaturedDataTabs__tabs\">\n        {configs.map((config, index) => {\n          const isSelectedTabIndex: boolean = index === selectedTabIndex\n          return (\n            <div\n              className={`FeaturedDataTabs__tabs__tab ${\n                isSelectedTabIndex\n                  ? 'FeaturedDataTabs__tabs__tab__selected'\n                  : ''\n              }`}\n              key={config.title}\n            >\n              <button\n                className=\"SRC-centerAndJustifyContent\"\n                onClick={() => setSelectedTabIndex(index)}\n              >\n                {config.icon && <Icon type={config.icon}></Icon>}\n                <span>{config.title}</span>\n              </button>\n            </div>\n          )\n        })}\n      </div>\n      {/* tab content */}\n      {selectedTabProps && (\n        <>\n          <FeaturedDataPlots\n            key={`${sql}-${selectedTabIndex}`}\n            {...selectedTabProps.plotsConfig}\n            rgbIndex={rgbIndex}\n            sql={sql}\n            explorePagePath={selectedTabProps.explorePagePath}\n          />\n          {selectedTabProps.explorePagePath && (\n            <div className=\"bootstrap-4-backport FeaturedDataTabs__explore-all\">\n              <Button\n                className=\"pill\"\n                variant=\"secondary\"\n                size=\"lg\"\n                href={selectedTabProps.explorePagePath}\n              >\n                EXPLORE ALL {selectedTabProps.exploreObjectType?.toUpperCase()}\n              </Button>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default FeaturedDataTabs\n"],"names":["title","description","facetsToPlot","detailsPagePath","accessToken","data","isLoadingNewBundle","facetAliases","rgbIndex","useState","colorPalette","useEffect","setFacetDataArray","Promise","plotData","isSelected","undefined","setSelectedFacetValue","_jsx","loadingScreen","_Fragment","detailsPageLink","_jsxs","cardTitle","SizeMe","size","labels","colors","entityId","SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS","SynapseConstants.BUNDLE_MASK_QUERY_FACETS","SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS","SynapseConstants.BUNDLE_MASK_QUERY_RESULTS","BUNDLE_MASK_QUERY_RESULTS","sql","selectFacetColumnName","selectFacetColumnValue","rest","getQueryRequest","configs","config","icon","selectedTabProps","plotsConfig","explorePagePath"],"mappings":"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"}