{"version":3,"file":"CertificationQuiz.stories.36a21d7b.js","sources":["../../src/lib/utils/synapseTypes/CertificationQuiz/Questions.ts","../../src/lib/containers/CertificationQuiz.tsx"],"sourcesContent":["import { WikiPageKey } from '../WikiPageKey'\n\nexport const MULTICHOICE_RESPONSE_CONCRETE_TYPE_VALUE =\n  'org.sagebionetworks.repo.model.quiz.MultichoiceResponse'\nexport type MULTICHOICE_RESPONSE_CONCRETE_TYPE =\n  typeof MULTICHOICE_RESPONSE_CONCRETE_TYPE_VALUE\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/quiz/Question.html\nexport interface Question {\n  questionIndex: number // an index unique in the Quiz, used to refer to this question\n  prompt: string // the user-readable prompt for this question\n  reference: WikiPageKey // Reference to a WikiPage\n  docLink: string // Link to the document that contains information for background reading related to the question.\n  helpText: string // A short text that provides a snippet of help to answer the question.\n  concreteType?: string\n}\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/quiz/QuestionResponse.html\nexport interface QuestionResponse {\n  questionIndex: number // an index unique in the Quiz, used to refer to this question\n  concreteType: string\n}\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/quiz/MultichoiceResponse.html\nexport interface MultichoiceResponse extends QuestionResponse {\n  answerIndex: Set<number>\n  concreteType: MULTICHOICE_RESPONSE_CONCRETE_TYPE\n}\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/quiz/MultichoiceQuestion.html\nexport interface MultichoiceQuestion extends Question {\n  exclusive: boolean // If true then only one response is correct\n  answers: MultichoiceAnswer[] // The possible answers for this question\n}\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/quiz/MultichoiceAnswer.html\nexport interface MultichoiceAnswer {\n  answerIndex: number // An index unique within the scope the multiple choice question\n  prompt: string // The user-readable prompt or label for this answer\n  isCorrect: boolean // True if and only if this is a correct response\n}\n","import React, { useEffect, useState } from 'react'\nimport { SynapseClient } from '../utils'\nimport { useSynapseContext } from '../utils/SynapseContext'\nimport {\n  PassingRecord,\n  QuizResponse,\n  Quiz,\n} from '../utils/synapseTypes/CertificationQuiz/Quiz'\nimport {\n  MULTICHOICE_RESPONSE_CONCRETE_TYPE_VALUE,\n  QuestionResponse,\n} from '../utils/synapseTypes/CertificationQuiz/Questions'\nimport { displayToast } from './ToastMessage'\nimport { Button } from 'react-bootstrap'\nimport { MarkdownPopover } from './MarkdownPopover'\nimport { HelpOutlineTwoTone } from '@material-ui/icons'\nimport Typography from '../utils/typography/Typography'\nimport { useErrorHandler } from 'react-error-boundary'\n\nconst CertificationQuiz: React.FunctionComponent = () => {\n  const { accessToken } = useSynapseContext()\n  const handleError = useErrorHandler()\n  const [quiz, setQuiz] = useState<Quiz | undefined>()\n  const [questionResponse, setQuestionResponse] = useState<QuestionResponse[]>(\n    [],\n  )\n  const [passingRecord, setPassingRecord] = useState<PassingRecord>()\n  const formRef = React.useRef<HTMLFormElement>(null)\n\n  const GETTING_STARTED_URL =\n    'https://help.synapse.org/docs/Getting-Started.2055471150.html'\n\n  const getQuiz = async () => {\n    try {\n      setQuiz(await SynapseClient.getCertifyQuiz(accessToken))\n    } catch (err: any) {\n      handleError(err)\n    }\n  }\n\n  useEffect(() => {\n    getQuiz()\n  }, [accessToken])\n\n  const onUpdateAnswer = (questionIndex: number, answer: number) => {\n    const newState = [\n      ...questionResponse.filter(obj => obj.questionIndex !== questionIndex),\n      {\n        questionIndex,\n        answerIndex: [answer],\n        concreteType: MULTICHOICE_RESPONSE_CONCRETE_TYPE_VALUE,\n      },\n    ]\n    setQuestionResponse(newState)\n  }\n\n  const handleRetakeQuiz = () => {\n    formRef.current?.reset()\n    setQuestionResponse([])\n    setPassingRecord(undefined)\n    getQuiz()\n  }\n\n  const handleSubmit = async () => {\n    try {\n      if (quiz && quiz.questions.length === questionResponse.length) {\n        const quizResponse: QuizResponse = {\n          quizId: quiz.id,\n          questionResponses: questionResponse,\n        }\n        const passRec = await SynapseClient.postCertifiedUserTestResponse(\n          accessToken,\n          quizResponse,\n        )\n        setPassingRecord(passRec)\n        window.scrollTo(0, 0)\n      } else {\n        displayToast(\n          'Please answer all of the questions and try again.',\n          'warning',\n        )\n      }\n    } catch (err: any) {\n      displayToast(err.reason as string, 'danger')\n    }\n  }\n\n  const actionButtonConfig = (helpUrl: string) =>\n    helpUrl\n      ? {\n          content: <>More info</>,\n          closePopoverOnClick: true,\n          onClick: () => window.open(helpUrl, '_blank'),\n          variant: 'primary',\n        }\n      : undefined\n\n  return (\n    <div className=\"bootstrap-4-backport CertificationQuiz\">\n      {passingRecord && (\n        <div>\n          {!passingRecord.passed && (\n            <div className=\"failBanner\">Quiz Failed</div>\n          )}\n          <Typography variant=\"hintText\">\n            Score: {passingRecord.score} / {quiz?.questions.length}\n          </Typography>\n          {passingRecord.passed ? (\n            displayToast(\n              `You passed the Synapse Certification Quiz on ${passingRecord.passedOn}`,\n              'success',\n            )\n          ) : (\n            <Typography variant=\"body1\">\n              Please review the items shown in red below, and{' '}\n              <a\n                href=\"#\"\n                onClick={e => {\n                  e.preventDefault()\n                  handleRetakeQuiz()\n                }}\n              >\n                try again\n              </a>\n              .\n            </Typography>\n          )}\n        </div>\n      )}\n      <div className=\"CertificationQuiz__container\">\n        <Button\n          onClick={() => window.open(GETTING_STARTED_URL, '_blank')}\n          className=\"help-button\"\n          variant=\"light-secondary\"\n        >\n          <HelpOutlineTwoTone\n            className=\"HelpButton\"\n            style={{ marginRight: '4px' }}\n          />\n          Help\n        </Button>\n        {quiz ? (\n          <div dangerouslySetInnerHTML={{ __html: quiz.header }}></div>\n        ) : (\n          ''\n        )}\n        <form ref={formRef} onSubmit={e => e.preventDefault()}>\n          <ol>\n            {quiz?.questions.map(question => (\n              <li\n                key={question.questionIndex}\n                role={question.exclusive ? 'radiogroup' : undefined}\n              >\n                <div\n                  dangerouslySetInnerHTML={{ __html: question.prompt }}\n                  className={\n                    passingRecord &&\n                    (passingRecord.corrections?.find(\n                      quest =>\n                        quest.question.questionIndex === question.questionIndex,\n                    )?.isCorrect\n                      ? ''\n                      : 'incorrectQuestion')\n                  }\n                ></div>\n                {question.answers.map(choice => (\n                  <div key={`${question.questionIndex}-${choice.answerIndex}`}>\n                    <input\n                      id={`${question.questionIndex}-${choice.answerIndex}`}\n                      name={`${question.questionIndex}`}\n                      type={question.exclusive ? 'radio' : 'checkbox'}\n                      value={choice.answerIndex}\n                      onClick={e =>\n                        onUpdateAnswer(\n                          question.questionIndex,\n                          Number(e.currentTarget.value),\n                        )\n                      }\n                      disabled={!!passingRecord}\n                    />\n                    <label\n                      style={{ fontWeight: 400 }}\n                      htmlFor={`${question.questionIndex}-${choice.answerIndex}`}\n                    >\n                      {choice.prompt}\n                    </label>\n                  </div>\n                ))}\n                <MarkdownPopover\n                  contentProps={{ markdown: question.helpText }}\n                  placement=\"right\"\n                  actionButton={actionButtonConfig(question.docLink)}\n                  showCloseButton={true}\n                >\n                  <Typography variant=\"hintText\" color=\"primary\">\n                    <HelpOutlineTwoTone\n                      className=\"HelpButton\"\n                      style={{ marginRight: '4px' }}\n                    />\n                    Need help answering this question?\n                  </Typography>\n                </MarkdownPopover>\n              </li>\n            ))}\n          </ol>\n        </form>\n        <Button\n          className=\"help-button\"\n          variant=\"primary\"\n          onClick={() => handleSubmit()}\n        >\n          Submit\n        </Button>\n      </div>\n    </div>\n  )\n}\n\nexport default CertificationQuiz\n"],"names":["accessToken","setQuiz","handleError","useEffect","getQuiz","questionIndex","MULTICHOICE_RESPONSE_CONCRETE_TYPE_VALUE","setQuestionResponse","formRef","setPassingRecord","id","questionResponse","SynapseClient.postCertifiedUserTestResponse","window","displayToast","_jsx","_Fragment","_jsxs","e","handleRetakeQuiz","header","undefined","prompt","answerIndex","passingRecord","helpText"],"mappings":"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"}