{"version":3,"file":"react-intersection-observer.m.66de6abb.js","sources":["../../node_modules/react-intersection-observer/react-intersection-observer.m.js"],"sourcesContent":["import * as React from 'react';\nimport { useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options, fallbackInView) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (fallbackInView === void 0) {\n    fallbackInView = unsupportedValue;\n  }\n\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap[\"delete\"](id);\n    }\n  };\n}\n\nvar _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay,\n        fallbackInView = _this$props.fallbackInView;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        props = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n\n    return /*#__PURE__*/React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n\n  return InView;\n}(React.Component);\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView,\n      fallbackInView = _ref.fallbackInView;\n\n  var unobserve = React.useRef();\n\n  var _React$useState = React.useState({\n    inView: !!initialInView\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var setRef = React.useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, InView as default, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.m.js.map\n"],"names":[],"mappings":"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"}