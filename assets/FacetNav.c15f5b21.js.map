{"version":3,"file":"FacetNav.c15f5b21.js","sources":["../../src/lib/containers/QueryWrapperErrorBanner.tsx","../../src/lib/containers/widgets/facet-nav/FacetNavPanel.tsx","../../src/lib/containers/widgets/facet-nav/FacetNav.tsx"],"sourcesContent":["import React from 'react'\nimport { ErrorBanner } from './ErrorBanner'\nimport { useQueryContext } from './QueryContext'\n\n/**\n * Error banner that automatically pulls the error from QueryContext.\n */\nexport const QueryWrapperErrorBanner = () => {\n  const { error } = useQueryContext()\n  return <ErrorBanner error={error} />\n}\n","import { InfoOutlined } from '@material-ui/icons'\nimport * as PlotlyTyped from 'plotly.js'\nimport Plotly from 'plotly.js-basic-dist'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { Button, Dropdown, Modal } from 'react-bootstrap'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { SizeMe } from 'react-sizeme'\nimport { SkeletonInlineBlock } from '../../../assets/skeletons/SkeletonInlineBlock'\nimport getColorPalette from '../../../containers/ColorGradient'\nimport { ElementWithTooltip } from '../../../containers/widgets/ElementWithTooltip'\nimport { SynapseClient, SynapseConstants } from '../../../utils'\nimport { unCamelCase } from '../../../utils/functions/unCamelCase'\nimport { useSynapseContext } from '../../../utils/SynapseContext'\nimport {\n  ColumnType,\n  FacetColumnRequest,\n  FacetColumnResultValueCount,\n  FacetColumnResultValues,\n} from '../../../utils/synapseTypes'\nimport loadingScreen from '../../LoadingScreen'\nimport { useQueryVisualizationContext } from '../../QueryVisualizationWrapper'\nimport { useQueryContext } from '../../QueryContext'\nimport { EnumFacetFilter } from '../query-filter/EnumFacetFilter'\nimport {\n  applyChangesToValuesColumn,\n  applyMultipleChangesToValuesColumn,\n} from '../query-filter/QueryFilter'\nimport Tooltip from '../../../utils/tooltip/Tooltip'\n\nconst Plot = createPlotlyComponent(Plotly)\n\nexport type FacetNavPanelProps = {\n  applyChangesToGraphSlice: (\n    facet: FacetColumnResultValues,\n    value: FacetColumnResultValueCount | undefined,\n    isSelected: boolean,\n  ) => void\n  applyChangesToFacetFilter: (facets: FacetColumnRequest[]) => void\n  index: number\n  facetToPlot: FacetColumnResultValues\n  plotType: PlotType\n  onSetPlotType: (plotType: PlotType) => void\n  onHide: () => void\n  isModalView: boolean\n  onCloseModal?: () => void\n}\n\nconst maxLabelLength: number = 19\nconst maxLegendLength: number = 30\n\nexport type PlotType = 'PIE' | 'BAR'\n\nconst layout: Partial<PlotlyTyped.Layout> = {\n  showlegend: false,\n  annotations: [],\n  margin: { l: 0, r: 0, b: 0, t: 0, pad: 0 },\n  yaxis: {\n    visible: false,\n    showgrid: false,\n  },\n  xaxis: {\n    visible: false,\n    showgrid: false,\n  },\n}\n\n// https://github.com/plotly/plotly.js/blob/fa51e33d3e1f8ca0c029b3029f3d006a5205c8f3/src/lib/index.js#L1173\nconst formatPercent = (ratio: number, n: number) => {\n  n = n || 0\n  let str =\n    (Math.round(100 * ratio * Math.pow(10, n)) * Math.pow(0.1, n)).toFixed(n) +\n    '%'\n  for (let i = 0; i < n; i++) {\n    if (str.indexOf('.') !== -1) {\n      str = str.replace('0%', '%')\n      str = str.replace('.%', '%')\n    }\n  }\n  return str\n}\n\nexport type GraphData = {\n  data: PlotlyTyped.Data[]\n  labels: FacetWithLabel[]\n  colors: string[]\n}\n\nexport function truncate(str: string | undefined, n: number) {\n  if (!str) {\n    return str\n  }\n  const trimmedStr: string = str.trim()\n  return trimmedStr.length > n ? trimmedStr.substr(0, n - 1) + 'â€¦' : str\n}\n\nexport async function extractPlotDataArray(\n  facetToPlot: FacetColumnResultValues,\n  columnType: ColumnType | undefined,\n  index: number,\n  plotType: PlotType,\n  accessToken?: string,\n) {\n  const { colorPalette } = getColorPalette(\n    index,\n    facetToPlot.facetValues.length,\n  )\n\n  const getLabels = async (\n    facetValues: FacetColumnResultValueCount[],\n    columnType?: ColumnType,\n    accessToken?: string,\n  ) => {\n    const map = new Map<string, string>()\n    map.set(\n      SynapseConstants.VALUE_NOT_SET,\n      SynapseConstants.FRIENDLY_VALUE_NOT_SET,\n    )\n    // Filter out empties\n    const filteredValues = facetValues\n      .map(value => value.value)\n      .filter(val => val !== SynapseConstants.VALUE_NOT_SET)\n    if (\n      columnType === ColumnType.ENTITYID ||\n      columnType === ColumnType.ENTITYID_LIST\n    ) {\n      // TODO: Pagination\n      const response = await SynapseClient.getEntityHeadersByIds(\n        filteredValues,\n        accessToken,\n      )\n      for (const header of response.results) {\n        map.set(header.id, header.name)\n      }\n    } else if (\n      columnType === ColumnType.USERID ||\n      columnType === ColumnType.USERID_LIST\n    ) {\n      const response = await SynapseClient.getGroupHeadersBatch(\n        filteredValues,\n        accessToken,\n      )\n      for (const header of response.children) {\n        map.set(header.ownerId, header.userName)\n      }\n    }\n\n    return facetValues.map(facetValue => ({\n      facet: facetValue,\n      label: getLabel(facetValue, false, map),\n      truncatedLabel: getLabel(facetValue, true, map),\n      count: facetValue.count,\n    }))\n  }\n\n  const getLabel = (\n    facetValue: FacetColumnResultValueCount,\n    truncateFlag: boolean,\n    labelMap: Map<string, string>,\n  ): string => {\n    let label = labelMap.get(facetValue.value) ?? facetValue.value\n    if (truncateFlag) {\n      label = truncate(label, maxLabelLength)!\n    }\n    return label\n  }\n\n  const labels = await getLabels(\n    facetToPlot.facetValues,\n    columnType,\n    accessToken,\n  )\n  const text = labels.map(el => el.truncatedLabel)\n\n  const anyFacetsSelected = facetToPlot.facetValues.some(\n    value => value.isSelected,\n  )\n\n  const selectionAwareColorPalette = anyFacetsSelected\n    ? facetToPlot.facetValues.map((facetValue, index) =>\n        facetValue.isSelected\n          ? colorPalette[index]\n          : colorPalette[index]\n              .replace('rgb(', 'rgba(')\n              .replace(')', ', 0.25)'),\n      )\n    : colorPalette\n  const singleChartData: PlotlyTyped.Data = {\n    values:\n      plotType === 'PIE'\n        ? facetToPlot.facetValues.map(facet => facet.count)\n        : undefined,\n    labels: labels.map(el => el.label),\n    text,\n    x:\n      plotType === 'BAR'\n        ? facetToPlot.facetValues.map(\n            facet =>\n              labels.find(label => label.facet === facet)?.label ?? facet.value,\n          )\n        : undefined,\n    y:\n      plotType === 'BAR'\n        ? facetToPlot.facetValues.map(facet => facet.count)\n        : undefined,\n    // @ts-ignore\n    facetEnumerationValues: facetToPlot.facetValues.map(\n      facetValue => facetValue.value,\n    ),\n    name: facetToPlot.columnName,\n    hovertemplate:\n      plotType === 'PIE'\n        ? '<b>%{text}</b><br>%{value} (%{percent})<br><extra></extra>'\n        : '<b>%{text}: </b><br>%{value} <br><extra></extra>',\n    textinfo: 'none',\n    type: plotType === 'PIE' ? 'pie' : 'bar',\n    pull:\n      plotType === 'PIE'\n        ? facetToPlot.facetValues.map(facetValue =>\n            facetValue.isSelected ? 0.1 : 0,\n          )\n        : undefined,\n    marker: {\n      colors: plotType === 'PIE' ? selectionAwareColorPalette : undefined,\n      color: plotType === 'BAR' ? selectionAwareColorPalette : undefined,\n    },\n  }\n\n  const result = {\n    data: [singleChartData],\n    labels,\n    colors:\n      plotType === 'PIE'\n        ? ((singleChartData as any).marker?.colors as string[])\n        : ((singleChartData as any).marker?.color as string[]),\n  }\n  return result\n}\n\nconst applyFacetFilter = (\n  event: PlotlyTyped.PlotMouseEvent,\n  allFacetValues: FacetColumnResultValues,\n  callbackApplyFn: FacetNavPanelProps['applyChangesToGraphSlice'],\n) => {\n  if (event.points && event.points[0]) {\n    const plotPointData: any = event.points[0]\n    const facetValueClickedValue =\n      plotPointData.data.facetEnumerationValues[plotPointData.pointNumber]\n    const facetValueClicked = allFacetValues.facetValues.find(\n      facet => facet.value === facetValueClickedValue,\n    )\n    callbackApplyFn(\n      allFacetValues,\n      facetValueClicked,\n      !facetValueClicked!.isSelected,\n    )\n  }\n}\n\nexport function getPlotStyle(\n  parentWidth: number | null,\n  plotType: PlotType,\n  maxHeight: number,\n): { width: string; height: string } {\n  const quotient = plotType === 'BAR' ? 0.8 : 0.6\n  const width = parentWidth ? parentWidth * quotient : 200\n  let height = plotType === 'PIE' ? width : width / 3\n  // max height of .FacetNav row col* is 200px, so the effective plot height max is around 150 unless it's expanded\n  if (height > maxHeight) {\n    height = maxHeight\n  }\n\n  return {\n    width: `${width}px`,\n    height: `${height}px`,\n  }\n}\n\nexport type FacetWithLabel = {\n  label: string\n  count: number\n}\n\ntype FacetPlotLegendProps = {\n  labels?: FacetWithLabel[]\n  colors?: string[]\n  isExpanded: boolean\n}\n\nexport function FacetPlotLegend(props: FacetPlotLegendProps) {\n  const { labels, colors = [], isExpanded } = props\n  if (!labels) {\n    return <></>\n  }\n  const numLegendItems = isExpanded\n    ? Math.min(labels.length, 9)\n    : Math.min(labels.length, 3)\n  if (numLegendItems === 0) {\n    return <></>\n  }\n  const totalCount = labels.reduce(\n    (curValue, curFacet) => curValue + curFacet.count,\n    0,\n  )\n  return (\n    <div\n      className={`FacetNavPanel__body__legend${isExpanded ? '--expanded' : ''}`}\n    >\n      {labels.slice(0, numLegendItems).map((facetValue, index) => {\n        const percent = formatPercent(facetValue.count / totalCount, 1)\n        const label = `(${percent}) ${facetValue.label}`\n        const labelDisplay = truncate(label, maxLegendLength)\n        return (\n          <ElementWithTooltip\n            idForToolTip={facetValue.label}\n            tooltipText={facetValue.label}\n            key={facetValue.label}\n          >\n            <div\n              className=\"FacetNavPanel__body__legend__row\"\n              key={`legendLabel_${index}`}\n              style={{ cursor: 'default' }}\n            >\n              <div style={{ backgroundColor: colors[index] }}></div>\n              <label>{labelDisplay}</label>\n            </div>\n          </ElementWithTooltip>\n        )\n      })}\n    </div>\n  )\n}\n\nconst getClassNameForPlotDiv = (isExpanded: boolean, plotType: PlotType) => {\n  if (!isExpanded) {\n    return 'FacetNavPanel__body__plot'\n  }\n  return `FacetNavPanel__body__plot--expanded${\n    plotType === 'BAR' ? 'Bar' : 'Pie'\n  }`\n}\n\nconst FacetNavPanel: React.FunctionComponent<FacetNavPanelProps> = (\n  props: FacetNavPanelProps,\n): JSX.Element => {\n  const {\n    onHide,\n    isModalView,\n    applyChangesToFacetFilter,\n    applyChangesToGraphSlice,\n    index,\n    facetToPlot,\n    plotType,\n    onSetPlotType,\n  } = props\n  const { accessToken } = useSynapseContext()\n  const { data, isLoadingNewBundle, getLastQueryRequest } = useQueryContext()\n\n  const { facetAliases } = useQueryVisualizationContext()\n\n  const [plotData, setPlotData] = useState<GraphData>()\n  const [showModal, setShowModal] = useState(false)\n\n  const plotTitle = unCamelCase(facetToPlot.columnName, facetAliases)\n\n  const getColumnType = useCallback(\n    (): ColumnType | undefined =>\n      data?.columnModels?.find(\n        columnModel => columnModel.name === facetToPlot.columnName,\n      )?.columnType as ColumnType,\n    [data, facetToPlot.columnName],\n  )\n\n  useEffect(() => {\n    if (!facetToPlot) {\n      return\n    } else {\n      extractPlotDataArray(\n        facetToPlot,\n        getColumnType(),\n        index,\n        plotType,\n        accessToken,\n      ).then(plotData => setPlotData(plotData))\n    }\n  }, [facetToPlot, data, index, plotType, accessToken, getColumnType])\n\n  /* rendering functions */\n  const ChartSelectionToggle = (): JSX.Element => (\n    <div\n      onClick={event => {\n        event.stopPropagation()\n      }}\n      className=\"bootstrap-4-backport SRC-labeled-dropdown\"\n    >\n      <span className=\"SRC-labeled-dropdown__label\">Chart Type</span>\n      <Dropdown>\n        <Dropdown.Toggle className=\"secondary-caret\" variant=\"gray-select\">\n          {plotType === 'PIE' ? 'Pie Chart' : 'Bar Chart'}\n        </Dropdown.Toggle>\n        <Dropdown.Menu className=\"chart-tools\">\n          <Dropdown.Item as=\"button\" onClick={() => onSetPlotType('BAR')}>\n            Bar Chart\n          </Dropdown.Item>\n          <Dropdown.Item as=\"button\" onClick={() => onSetPlotType('PIE')}>\n            Pie Chart\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </div>\n  )\n\n  if ((!data && isLoadingNewBundle) || !facetToPlot) {\n    return (\n      <div className=\"SRC-loadingContainer SRC-centerContentColumn\">\n        {loadingScreen}\n      </div>\n    )\n  } else {\n    return (\n      <>\n        <Modal\n          animation={false}\n          show={showModal}\n          onHide={() => setShowModal(false)}\n          backdrop=\"static\"\n        >\n          <Modal.Header closeButton={true}>\n            <Modal.Title>{plotTitle ?? ''}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <FacetNavPanel {...props} isModalView={true} />\n            <div className=\"bootstrap-4-backport SaveFiltersButtonContainer\">\n              <Button\n                variant=\"secondary\"\n                className=\"pill-xl SaveFiltersButton\"\n                size=\"sm\"\n                onClick={() => setShowModal(false)}\n              >\n                Apply Filters\n              </Button>\n            </div>\n          </Modal.Body>\n        </Modal>\n        <div\n          role=\"graphics-document\"\n          className={`FacetNavPanel${isModalView ? '--expanded' : ''}`}\n        >\n          {!isModalView && (\n            <div className=\"FacetNavPanel__title\">\n              {!data && isLoadingNewBundle ? (\n                <SkeletonInlineBlock width={100} />\n              ) : (\n                <span className=\"FacetNavPanel__title__name\">{plotTitle}</span>\n              )}\n              <div className=\"FacetNavPanel__title__tools\">\n                <EnumFacetFilter\n                  facetValues={facetToPlot.facetValues}\n                  columnModel={\n                    data?.columnModels!.find(\n                      el => el.name === facetToPlot.columnName,\n                    )!\n                  }\n                  facetAliases={facetAliases}\n                  onChange={(facetNamesMap: Record<string, string>) => {\n                    applyMultipleChangesToValuesColumn(\n                      getLastQueryRequest(),\n                      facetToPlot,\n                      applyChangesToFacetFilter,\n                      facetNamesMap,\n                    )\n                  }}\n                  onClear={() => {\n                    applyChangesToValuesColumn(\n                      getLastQueryRequest(),\n                      facetToPlot,\n                      applyChangesToFacetFilter,\n                    )\n                  }}\n                  containerAs=\"Dropdown\"\n                />\n                <ElementWithTooltip\n                  idForToolTip=\"expandGraph\"\n                  tooltipText=\"Expand to large graph\"\n                  key=\"expandGraph\"\n                  callbackFn={() => setShowModal(true)}\n                  className=\"SRC-primary-color\"\n                  darkTheme={false}\n                  icon={'expand'}\n                />\n                <ElementWithTooltip\n                  idForToolTip=\"hideGraph\"\n                  tooltipText=\"Hide graph under Show More\"\n                  key=\"hideGraph\"\n                  callbackFn={() => onHide()}\n                  className=\"SRC-primary-color\"\n                  darkTheme={false}\n                  icon={'close'}\n                />\n              </div>\n            </div>\n          )}\n          {isModalView && (\n            <>\n              <div className={'bootstrap-4-backport SRC-labeled-dropdown'}>\n                <span className=\"SRC-labeled-dropdown__label\">\n                  Filter All Data By\n                </span>\n                <EnumFacetFilter\n                  facetValues={facetToPlot.facetValues}\n                  columnModel={\n                    data?.columnModels!.find(\n                      el => el.name === facetToPlot.columnName,\n                    )!\n                  }\n                  facetAliases={facetAliases}\n                  onChange={(facetNamesMap: Record<string, string>) => {\n                    applyMultipleChangesToValuesColumn(\n                      getLastQueryRequest(),\n                      facetToPlot,\n                      applyChangesToFacetFilter,\n                      facetNamesMap,\n                    )\n                  }}\n                  onClear={() => {\n                    applyChangesToValuesColumn(\n                      getLastQueryRequest(),\n                      facetToPlot,\n                      applyChangesToFacetFilter,\n                    )\n                  }}\n                  containerAs=\"Dropdown\"\n                  dropdownType=\"SelectBox\"\n                />\n                <Tooltip title=\"Selecting items in this dropdown will affect all facets on the Explore page.\">\n                  <InfoOutlined className=\"SRC-hand-cursor SRC-secondary-text-color\" />\n                </Tooltip>\n              </div>\n              <ChartSelectionToggle />\n            </>\n          )}\n          <div\n            className={`FacetNavPanel__body${isModalView ? '--expanded' : ''}`}\n          >\n            <SizeMe monitorHeight>\n              {({ size }) => (\n                <div className={getClassNameForPlotDiv(isModalView, plotType)}>\n                  <Plot\n                    key={`${facetToPlot.columnName}-${plotType}-${size.width}`}\n                    layout={layout}\n                    data={plotData?.data ?? []}\n                    style={getPlotStyle(\n                      size.width,\n                      plotType,\n                      isModalView ? 300 : 150,\n                    )}\n                    config={{ displayModeBar: false }}\n                    onClick={evt =>\n                      applyFacetFilter(\n                        evt,\n                        facetToPlot,\n                        applyChangesToGraphSlice,\n                      )\n                    }\n                  ></Plot>\n                </div>\n              )}\n            </SizeMe>\n            <FacetPlotLegend\n              labels={plotData?.labels}\n              colors={plotData?.colors}\n              isExpanded={isModalView}\n            />\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default FacetNavPanel\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport TotalQueryResults from '../../../containers/TotalQueryResults'\nimport { isSingleNotSetValue } from '../../../utils/functions/queryUtils'\nimport {\n  FacetColumnRequest,\n  FacetColumnResult,\n  FacetColumnResultValueCount,\n  FacetColumnResultValues,\n  QueryResultBundle,\n} from '../../../utils/synapseTypes'\nimport { useQueryVisualizationContext } from '../../QueryVisualizationWrapper'\nimport {\n  QUERY_FILTERS_COLLAPSED_CSS,\n  QUERY_FILTERS_EXPANDED_CSS,\n} from '../../QueryWrapper'\nimport { useQueryContext } from '../../QueryContext'\nimport { applyChangesToValuesColumn } from '../query-filter/QueryFilter'\nimport FacetNavPanel, { PlotType } from './FacetNavPanel'\n\n/*\nTODO: This component has a few bugs when its props are updated with new data, this should be handled\nat some point. As of the moment the portal doesn't have a case when the props will update,\nit will always mount this component.\n*/\n\nexport type FacetNavProps = {\n  facetsToPlot?: string[]\n  showNotch?: boolean\n}\n\ntype UiFacetState = {\n  name: string\n  isHidden: boolean\n  plotType: PlotType\n  index?: number\n}\n\nconst DEFAULT_VISIBLE_FACETS = 2\n\ntype ShowMoreState = 'MORE' | 'LESS' | 'NONE'\n\nexport function getFacets(\n  data: QueryResultBundle | undefined,\n  facetsToPlot?: string[],\n): FacetColumnResult[] {\n  const result =\n    data?.facets?.filter(item => {\n      const isFacetToPlot =\n        item.facetType === 'enumeration' &&\n        (!facetsToPlot?.length || facetsToPlot.indexOf(item.columnName) > -1)\n      // PORTALS-1993: only plot if the facet has count data\n      return (\n        isFacetToPlot &&\n        (item as FacetColumnResultValues).facetValues.length > 0 &&\n        !isSingleNotSetValue(item)\n      )\n    }) ?? []\n  return result\n}\n\nconst FacetNav: React.FunctionComponent<FacetNavProps> = ({\n  facetsToPlot,\n  showNotch = false,\n}: FacetNavProps): JSX.Element => {\n  const {\n    data,\n    getLastQueryRequest,\n    isLoadingNewBundle,\n    executeQueryRequest,\n    error,\n    asyncJobStatus,\n  } = useQueryContext()\n\n  const { topLevelControlsState } = useQueryVisualizationContext()\n  const [facetUiStateArray, setFacetUiStateArray] = useState<UiFacetState[]>([])\n  const [isFirstTime, setIsFirstTime] = useState(true)\n  const { showFacetVisualization, showFacetFilter } = topLevelControlsState\n\n  const lastQueryRequest = getLastQueryRequest()\n\n  useEffect(() => {\n    const result = getFacets(data, facetsToPlot)\n    if (result.length === 0) {\n      return\n    }\n    if (isFirstTime) {\n      setFacetUiStateArray(\n        result.map((item, index) => ({\n          name: item.columnName,\n          isHidden: index >= DEFAULT_VISIBLE_FACETS,\n          plotType: 'PIE',\n        })),\n      )\n      setIsFirstTime(false)\n    }\n  }, [data, isFirstTime, facetsToPlot])\n\n  // when 'show more/less' is clicked\n  const onShowMoreClick = (shouldShowMore: boolean) => {\n    setFacetUiStateArray(facetUiStateArray => {\n      return facetUiStateArray.map((item, index) => {\n        if (shouldShowMore) {\n          // show everything\n          return { ...item, isHidden: false }\n        }\n        // otherwise hide everything except the first three items\n        return { ...item, isHidden: index >= DEFAULT_VISIBLE_FACETS }\n      })\n    })\n  }\n\n  // what needs to happen after the filters are adjusted from the plot\n  const applyChangesFromQueryFilter = (facets: FacetColumnRequest[]) => {\n    lastQueryRequest.query.selectedFacets = facets\n    lastQueryRequest.query.offset = 0\n    executeQueryRequest(lastQueryRequest)\n  }\n\n  // don't show hidden facets\n  const isFacetHiddenInGrid = (columnName: string) => {\n    const itemHidden = facetUiStateArray.find(\n      item => item.name === columnName && item.isHidden === true,\n    )\n    const result = itemHidden !== undefined\n    return result\n  }\n\n  const showMoreButtonState = useMemo<ShowMoreState>(() => {\n    if (\n      // if at least one item is hidden\n      facetUiStateArray.find(item => item.isHidden === true)\n    ) {\n      return 'MORE'\n    } else if (facetUiStateArray.length <= DEFAULT_VISIBLE_FACETS) {\n      return 'NONE'\n    } else {\n      return 'LESS'\n    }\n  }, [facetUiStateArray])\n\n  // hides facet graph\n  const hideFacetInGrid = (columnName: string) => {\n    setUiPropertyForFacet(columnName, 'isHidden', true)\n  }\n\n  const setPlotType = (columnName: string, plotType: PlotType) => {\n    setUiPropertyForFacet(columnName, 'plotType', plotType)\n  }\n\n  const getPlotType = (columnName: string): PlotType => {\n    const plotType = facetUiStateArray.find(\n      item => item.name === columnName,\n    )?.plotType\n    return plotType ?? 'PIE'\n  }\n\n  const setUiPropertyForFacet = (\n    columnName: string,\n    propName: keyof UiFacetState,\n    value: boolean | PlotType, // 'the possible values of the above type' (currently can't be specified in TS using symbols)\n  ) => {\n    setFacetUiStateArray(facetUiStateArray =>\n      facetUiStateArray.map(item =>\n        item.name === columnName ? { ...item, [propName]: value } : item,\n      ),\n    )\n  }\n\n  const hasFacetsOrFilters =\n    (lastQueryRequest?.query.selectedFacets !== undefined &&\n      lastQueryRequest.query.selectedFacets.length > 0) ||\n    (lastQueryRequest?.query.additionalFilters !== undefined &&\n      lastQueryRequest?.query.additionalFilters.length > 0)\n\n  const facets = getFacets(data, facetsToPlot)\n\n  const colorTracker = getFacets(data, facetsToPlot).map((el, index) => {\n    return {\n      columnName: el.columnName,\n      colorIndex: index,\n    }\n  })\n\n  if (error) {\n    return <></>\n  } else if (!data && isLoadingNewBundle) {\n    return (\n      <div className=\"SRC-loadingContainer SRC-centerContentColumn\">\n        {asyncJobStatus?.progressMessage && (\n          <div>\n            <span className=\"spinner\" />\n            {asyncJobStatus.progressMessage}\n          </div>\n        )}\n      </div>\n    )\n  } else {\n    return (\n      <>\n        <TotalQueryResults\n          frontText={''}\n          endText={hasFacetsOrFilters ? 'Filtered By' : ''}\n          showNotch={showNotch}\n        />\n        {facets.length > 0 && (\n          <div\n            className={`FacetNav ${showFacetVisualization ? '' : 'hidden'} ${\n              showFacetFilter\n                ? QUERY_FILTERS_EXPANDED_CSS\n                : QUERY_FILTERS_COLLAPSED_CSS\n            } ${showMoreButtonState === 'LESS' ? 'less' : ''}`}\n          >\n            <div className=\"FacetNav__row\" role=\"list\">\n              {facets.map(facet => (\n                <div\n                  className=\"col-sm-12 col-md-4\"\n                  style={{\n                    display: isFacetHiddenInGrid(facet.columnName)\n                      ? 'none'\n                      : 'block',\n                  }}\n                  key={facet.columnName}\n                >\n                  <FacetNavPanel\n                    index={\n                      colorTracker.find(\n                        el => el.columnName === facet.columnName,\n                      )?.colorIndex!\n                    }\n                    onHide={() => hideFacetInGrid(facet.columnName)}\n                    plotType={getPlotType(facet.columnName)}\n                    onSetPlotType={(plotType: PlotType) =>\n                      setPlotType(facet.columnName, plotType)\n                    }\n                    facetToPlot={facet as FacetColumnResultValues}\n                    /*\n                      TODO: Simplify the nested functions below, all the logic should be contained\n                      in the EnumFacetFilter component.\n                    */\n                    applyChangesToFacetFilter={applyChangesFromQueryFilter}\n                    applyChangesToGraphSlice={(\n                      facet: FacetColumnResultValues,\n                      value: FacetColumnResultValueCount | undefined,\n                      isSelected: boolean,\n                    ) =>\n                      applyChangesToValuesColumn(\n                        lastQueryRequest,\n                        facet,\n                        applyChangesFromQueryFilter,\n                        value?.value,\n                        isSelected,\n                      )\n                    }\n                    isModalView={false}\n                  />\n                </div>\n              ))}\n            </div>\n            {showMoreButtonState !== 'NONE' && (\n              <div className=\"FacetNav__showMoreContainer bootstrap-4-backport\">\n                <Button\n                  variant=\"secondary\"\n                  className=\"pill-xl FacetNav__showMore\"\n                  onClick={() =>\n                    onShowMoreClick(showMoreButtonState === 'MORE')\n                  }\n                  style={{ zIndex: 500 }}\n                >\n                  {showMoreButtonState === 'LESS'\n                    ? 'Hide Charts'\n                    : 'View All Charts'}\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n      </>\n    )\n  }\n}\n\nexport default FacetNav\n"],"names":["error","_jsx","n","str","colorPalette","map","SynapseConstants.VALUE_NOT_SET","SynapseClient.getEntityHeadersByIds","SynapseClient.getGroupHeadersBatch","facetValue","count","label","undefined","text","columnName","labels","color","callbackApplyFn","height","width","isExpanded","_Fragment","index","labelDisplay","onHide","isModalView","applyChangesToFacetFilter","applyChangesToGraphSlice","facetToPlot","plotType","onSetPlotType","accessToken","data","isLoadingNewBundle","getLastQueryRequest","facetAliases","useState","useEffect","extractPlotDataArray","_jsxs","event","loadingScreen","showModal","props","plotTitle","facetValues","applyMultipleChangesToValuesColumn","applyChangesToValuesColumn","SizeMe","size","colors","facetsToPlot","executeQueryRequest","asyncJobStatus","topLevelControlsState","showFacetVisualization","showFacetFilter","setFacetUiStateArray","DEFAULT_VISIBLE_FACETS","setIsFirstTime","item","lastQueryRequest","setUiPropertyForFacet","value","colorIndex","facet","applyChangesFromQueryFilter"],"mappings":"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"}