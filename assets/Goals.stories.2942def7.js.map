{"version":3,"file":"Goals.stories.2942def7.js","sources":["../../src/lib/containers/home_page/goals/Goals.Mobile.tsx","../../src/lib/containers/home_page/goals/Goals.Desktop.tsx","../../src/lib/containers/home_page/goals/Goals.tsx"],"sourcesContent":["import React from 'react'\nimport { GoalsDataProps } from './Goals'\nimport ExpandableContent from '../ExpandableContent'\nimport QueryCount from '../../../containers/QueryCount'\nimport { Button } from 'react-bootstrap'\n\nexport default function GoalsMobile({\n  link,\n  summary,\n  countSql,\n  title,\n}: GoalsDataProps) {\n  const titleElement = (\n    <div className=\"Goals__Mobile__Header\">\n      {countSql && (\n        <span className=\"Goals__Mobile__Header__Count\">\n          <QueryCount parens={false} sql={countSql} />\n        </span>\n      )}\n      <span className=\"Goals__Mobile__Header__Title\"> {title} </span>\n    </div>\n  )\n  const content = (\n    <div className=\"Goals__Mobile__Content bootstrap-4-backport\">\n      <p>{summary}</p>\n      <Button\n        variant=\"secondary\"\n        className=\"pill Goals__Mobile__Content__Link\"\n        href={link}\n      >\n        EXPLORE\n      </Button>\n    </div>\n  )\n  return <ExpandableContent title={titleElement} content={content} />\n}\n","import React from 'react'\nimport { GoalsDataProps } from './Goals'\nimport QueryCount from '../../../containers/QueryCount'\nimport { Button } from 'react-bootstrap'\n\nexport default function GoalsDesktop({\n  asset,\n  link,\n  summary,\n  countSql,\n  title,\n}: GoalsDataProps) {\n  return (\n    <div className=\"Goals__Card bootstrap-4-backport\">\n      <div\n        className=\"Goals__Card__header\"\n        style={{ background: `url('${asset}')` }}\n      >\n        <p>\n          <span className=\"Goals__Card__header__title\"> {title} </span>\n          {countSql && (\n            <span className=\"Goals__Card__header__count\">\n              <QueryCount parens={false} sql={countSql} />\n            </span>\n          )}\n        </p>\n      </div>\n      <div className=\"Goals__Card__summary\">\n        <p> {summary} </p>\n        <Button\n          className=\"pill Goals__Card__summary__link\"\n          variant=\"secondary\"\n          href={link}\n        >\n          EXPLORE\n        </Button>\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport {\n  QueryBundleRequest,\n  FileHandleAssociation,\n  FileHandleAssociateType,\n  BatchFileRequest,\n} from '../../../utils/synapseTypes'\nimport { SynapseConstants } from '../../../utils'\nimport { getFiles } from '../../../utils/SynapseClient'\nimport { SynapseClientError } from '../../../utils/SynapseClientError'\nimport { ErrorBanner } from '../../ErrorBanner'\nimport useGetQueryResultBundle from '../../../utils/hooks/SynapseAPI/entity/useGetQueryResultBundle'\nimport useShowDesktop from '../../../utils/hooks/useShowDesktop'\nimport GoalsMobile from './Goals.Mobile'\nimport GoalsDesktop from './Goals.Desktop'\nimport { getFieldIndex } from '../../../utils/functions/queryUtils'\nimport { useSynapseContext } from '../../../utils/SynapseContext'\n\nexport type GoalsProps = {\n  entityId: string\n}\n\nexport type GoalsDataProps = {\n  countSql?: string\n  title: string\n  summary: string\n  link: string\n  asset: string\n}\n\nenum ExpectedColumns {\n  TABLEID = 'TableId', // Both TableId or CountSql are used to indicate what Table rows to count.\n  COUNT_SQL = 'CountSql', // Code uses CountSql over TableId if defined (if the CountSql column is in the schema and filled in).\n  TITLE = 'Title',\n  SUMMARY = 'Summary',\n  LINK = 'Link',\n  ASSET = 'Asset',\n}\n\nexport const Goals: React.FC<GoalsProps> = (props: GoalsProps) => {\n  const { entityId } = props\n  const { accessToken } = useSynapseContext()\n  const [assets, setAssets] = useState<string[] | undefined>()\n  const [error, setError] = useState<string | SynapseClientError | undefined>()\n  const showDesktop = useShowDesktop()\n  const queryBundleRequest: QueryBundleRequest = {\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    entityId,\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n      SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n    query: {\n      sql: `select * from ${entityId} order by ItemOrder`,\n    },\n  }\n  const { data: queryResultBundle } =\n    useGetQueryResultBundle(queryBundleRequest)\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const assetColumnIndex = getFieldIndex(\n          ExpectedColumns.ASSET,\n          queryResultBundle,\n        )\n        const assets =\n          queryResultBundle?.queryResult!.queryResults.rows.map(\n            el => el.values[assetColumnIndex],\n          ) ?? []\n        if (assets.length === 0) {\n          // wait for data to load\n          return\n        }\n        const fileHandleAssociationList: FileHandleAssociation[] = assets.map(\n          fileId => {\n            return {\n              associateObjectId: entityId!,\n              associateObjectType: FileHandleAssociateType.TableEntity,\n              fileHandleId: fileId,\n            }\n          },\n        )\n        const batchFileRequest: BatchFileRequest = {\n          includeFileHandles: false,\n          includePreSignedURLs: true,\n          includePreviewPreSignedURLs: false,\n          requestedFiles: fileHandleAssociationList,\n        }\n        const files = await getFiles(batchFileRequest, accessToken)\n        setError(undefined)\n        setAssets(\n          files.requestedFiles\n            .filter(el => el.preSignedURL !== undefined)\n            .map(el => el.preSignedURL!),\n        )\n      } catch (e) {\n        console.error('Error on get data', e)\n        setError(e)\n      }\n    }\n    getData()\n  }, [entityId, accessToken, queryResultBundle])\n\n  const tableIdColumnIndex = getFieldIndex(\n    ExpectedColumns.TABLEID,\n    queryResultBundle,\n  )\n  const countSqlColumnIndex = getFieldIndex(\n    ExpectedColumns.COUNT_SQL,\n    queryResultBundle,\n  )\n\n  const titleColumnIndex = getFieldIndex(\n    ExpectedColumns.TITLE,\n    queryResultBundle,\n  )\n  const summaryColumnIndex = getFieldIndex(\n    ExpectedColumns.SUMMARY,\n    queryResultBundle,\n  )\n  const linkColumnIndex = getFieldIndex(ExpectedColumns.LINK, queryResultBundle)\n\n  return (\n    <div className={`Goals${showDesktop ? '__Desktop' : ''}`}>\n      {error && <ErrorBanner error={error} />}\n      {queryResultBundle?.queryResult!.queryResults.rows.map((el, index) => {\n        const values = el.values\n        const tableId =\n          tableIdColumnIndex > -1 ? values[tableIdColumnIndex] : undefined\n        let countSql\n        if (countSqlColumnIndex > -1 && values[countSqlColumnIndex]) {\n          countSql = values[countSqlColumnIndex]\n        } else if (tableId) {\n          countSql = `SELECT * FROM ${tableId}`\n        }\n        const title = values[titleColumnIndex]\n        const summary = values[summaryColumnIndex]\n        const link = values[linkColumnIndex]\n        // assume that we recieve assets in order of rows and there is an asset for each item\n        // can revisit if this isn't the case.\n        const asset = assets?.[index] ?? ''\n        const goalsDataProps: GoalsDataProps = {\n          countSql,\n          title,\n          summary,\n          link,\n          asset,\n        }\n        return showDesktop ? (\n          <GoalsDesktop {...goalsDataProps} />\n        ) : (\n          <GoalsMobile {...goalsDataProps} />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Goals\n"],"names":["link","summary","countSql","title","_jsx","_jsxs","titleElement","asset","entityId","accessToken","BUNDLE_MASK_QUERY_RESULTS","queryResultBundle","useEffect","getData","TableEntity","fileId","fileHandleAssociationList","setError","setAssets","console","countSqlColumnIndex","goalsDataProps"],"mappings":"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"}