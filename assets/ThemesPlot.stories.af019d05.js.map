{"version":3,"file":"ThemesPlot.stories.af019d05.js","sources":["../../src/lib/containers/widgets/themes-plot/DotPlot.tsx","../../src/lib/containers/widgets/themes-plot/BarPlot.tsx","../../src/lib/containers/widgets/themes-plot/ThemesPlot.tsx"],"sourcesContent":["import React, { FunctionComponent /*, useState , useEffect */ } from 'react' // importing FunctionComponent\nimport Plotly from 'plotly.js-basic-dist'\nimport * as PlotlyTyped from 'plotly.js'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { GraphItem, PlotStyle, Dictionary } from './types'\nimport _ from 'lodash-es'\nconst Plot = createPlotlyComponent(Plotly)\n\nexport type DotPlotProps = {\n  plotData: GraphItem[]\n  layoutConfig: Partial<PlotlyTyped.Layout>\n  optionsConfig: Partial<PlotlyTyped.Config>\n  label?: string\n  style?: React.CSSProperties\n  id: string\n  isLegend?: boolean\n  isXAxis?: boolean\n  xMax?: number\n  plotStyle?: PlotStyle\n  markerSymbols?: Dictionary\n  onClick?: Function\n}\n\ntype LayoutOptions = {\n  isLegend: boolean\n  isXAxis: boolean\n  maxValue?: number\n  backgroundColor?: string\n}\n\nfunction getLayout(\n  dotPlotLayoutConfig: Partial<PlotlyTyped.Layout>,\n  layoutOptions?: LayoutOptions,\n): Partial<PlotlyTyped.Layout> {\n  const result = _.cloneDeep(dotPlotLayoutConfig)\n  if (!layoutOptions) {\n    return result\n  }\n  if (layoutOptions.backgroundColor) {\n    result.plot_bgcolor = layoutOptions.backgroundColor\n  }\n  result.yaxis!.showticklabels = false\n  result.xaxis!.range = [-5, layoutOptions.maxValue! + 30]\n  result.xaxis!.visible = layoutOptions.isXAxis\n  result.showlegend = layoutOptions.isLegend\n  result.margin = {\n    t: 0,\n    b: layoutOptions.isXAxis ? 50 : 0,\n    l: 0,\n    r: 0,\n    pad: 15,\n  }\n  let height = 30\n  if (layoutOptions.isLegend) {\n    height = 35\n    result.margin.pad = 0\n    result.xaxis = {\n      visible: false,\n      zeroline: false,\n      showgrid: false,\n      showline: false,\n      range: [0, 1],\n    }\n\n    result.yaxis = {\n      visible: false,\n      showline: false,\n    }\n  }\n  if (layoutOptions.isXAxis) {\n    result.yaxis = {\n      visible: false,\n      showgrid: false,\n      showline: false,\n    }\n    height = 50\n  }\n\n  result.height = height\n\n  return result\n}\n\nfunction createArrayOfGroupValues(\n  headers: string[],\n  items: GraphItem[],\n): any[] {\n  const result = new Array(headers.length)\n  items.forEach(item => {\n    const index = headers.indexOf(item.y)\n    result[index] = item.x\n  })\n  return result\n}\n\nfunction getPlotDataPoints(\n  graphItems: GraphItem[],\n  plotStyle: PlotStyle,\n  ySorted?: string[],\n  markerSymbols?: Dictionary,\n): any[] {\n  const isFakeData = ySorted === undefined\n  var groups = _.uniq(graphItems.map(item => item.group))\n  const data: any = []\n  const defaultSymbols = [\n    'y-down',\n    'triangle-up',\n    'cross-thin-open',\n    'triangle-up-open-dot',\n    'star-square-open',\n    'diamond-x',\n  ]\n\n  groups.forEach((group, i) => {\n    data.push({\n      type: 'scatter',\n\n      x: isFakeData\n        ? [-10] // fake datavalue outside of the bounds\n        : createArrayOfGroupValues(\n            ySorted!,\n            graphItems.filter(row => row.group === group),\n          ),\n      y: ySorted,\n      text: [group],\n      hovertemplate: `%{x} %{text}<extra></extra>`,\n      mode: 'markers',\n      name: group,\n      marker: {\n        color: plotStyle.markerFill,\n        line: {\n          color: plotStyle.markerLine,\n          width: 1,\n        },\n\n        symbol: markerSymbols ? markerSymbols[group] : defaultSymbols[i],\n        size: plotStyle.markerSize,\n      },\n    })\n  })\n  return data\n}\n\nconst DotPlot: FunctionComponent<DotPlotProps> = ({\n  plotData,\n  optionsConfig,\n  layoutConfig,\n  label,\n  id,\n  xMax,\n  style = { width: '100%', height: '100%' },\n  markerSymbols,\n  plotStyle = {\n    markerFill: '#515359',\n    markerLine: '#515359',\n    markerSize: 9,\n    backgroundColor: 'transparent',\n  },\n  onClick,\n  isLegend = false,\n  isXAxis = false,\n}: DotPlotProps) => {\n  const pointsTypes = label ? [label] : undefined\n\n  return (\n    <Plot\n      key={`dotPlot_${id}`}\n      layout={getLayout(layoutConfig, {\n        isLegend: isLegend,\n        isXAxis: isXAxis,\n        maxValue: xMax,\n        backgroundColor: plotStyle.backgroundColor,\n      })}\n      style={style}\n      data={getPlotDataPoints(plotData, plotStyle, pointsTypes, markerSymbols)}\n      config={optionsConfig}\n      onClick={(e: any) => (onClick ? onClick(e) : _.noop)}\n    />\n  )\n}\n\nexport default DotPlot\n","import React, { FunctionComponent } from 'react'\nimport Plotly from 'plotly.js-basic-dist'\nimport * as PlotlyTyped from 'plotly.js'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { GraphItem, BarPlotColors, PlotStyle } from './types'\nimport _ from 'lodash-es'\n\nconst Plot = createPlotlyComponent(Plotly)\n\nexport type BarPlotProps = {\n  isTop: boolean\n  style?: React.CSSProperties\n  plotData: GraphItem[]\n  layoutConfig: Partial<PlotlyTyped.Layout>\n  optionsConfig: Partial<PlotlyTyped.Config>\n  label: string\n  xMax: number\n  colors?: BarPlotColors\n  plotStyle?: PlotStyle\n  onClick?: Function\n}\n\ntype LayoutOptions = {\n  isTop: boolean\n  maxValue: number\n  isLegend?: boolean\n  backgroundColor?: string\n}\n\nfunction getBarPlotDataPoints(\n  data: any[],\n  filter?: string,\n  colors?: BarPlotColors,\n): any[] {\n  if (filter) {\n    data = data.filter(item => item.y === filter)\n  }\n  var groups = _.uniq(data.map(item => item['group'])).sort()\n  const result: any[] = []\n  const defaultColors = [`(28,118,175,1)`, `rgba(91,176,181,1)`]\n\n  groups.forEach((group, i) => {\n    const items = data.filter(item => item.group === group)\n    result.push({\n      x: items.map(item => item.x),\n      y: items.map(item => item.y),\n      name: group,\n      orientation: 'h',\n      marker: {\n        color: colors ? colors[group] : defaultColors[i],\n        width: 1,\n      },\n      text: [group],\n      hovertemplate: `%{x} %{text}<extra></extra>`,\n      type: 'bar',\n    })\n  })\n\n  return result\n}\n\nfunction getLayout(\n  layoutConfig: Partial<PlotlyTyped.Layout>,\n  { isTop, maxValue, backgroundColor }: LayoutOptions,\n): Partial<PlotlyTyped.Layout> {\n  const layout = _.cloneDeep(layoutConfig)\n  layout.xaxis = {\n    visible: false,\n    range: [0, maxValue],\n  }\n  if (backgroundColor) {\n    layout.plot_bgcolor = backgroundColor\n    layout.paper_bgcolor = backgroundColor\n  }\n  if (!isTop) {\n    layout.hoverlabel = {\n      font: {\n        size: 10,\n      },\n    }\n  }\n  layout.showlegend = false\n  layout.height = isTop ? 40 : 20\n  return layout\n}\n\nconst BarPlot: FunctionComponent<BarPlotProps> = ({\n  plotData,\n  optionsConfig,\n  isTop,\n  layoutConfig,\n  label,\n  xMax,\n  colors,\n  plotStyle = { backgroundColor: 'transparent' },\n  style = { width: '100%', height: '100%' },\n  onClick,\n}: BarPlotProps) => {\n  return (\n    <Plot\n      style={style}\n      layout={getLayout(layoutConfig, {\n        isTop,\n        maxValue: xMax,\n        backgroundColor: plotStyle.backgroundColor,\n      })}\n      config={optionsConfig}\n      data={getBarPlotDataPoints(plotData, label, colors)}\n      onClick={(e: any) => (onClick ? onClick(e) : _.noop)}\n    />\n  )\n}\n\nexport default BarPlot\n","import React, { FunctionComponent, useState, useEffect } from 'react' // importing FunctionComponent\nimport * as PlotlyTyped from 'plotly.js'\n\nimport { ElementWithTooltip, TooltipVisualProps } from '../ElementWithTooltip'\nimport { unCamelCase } from '../../../utils/functions/unCamelCase'\n\nimport { SynapseConstants } from '../../../utils'\nimport { getFullQueryTableResults } from '../../../utils/SynapseClient'\nimport {\n  QueryResultBundle,\n  QueryBundleRequest,\n  RowSet,\n} from '../../../utils/synapseTypes'\nimport { resultToJson } from '../../../utils/functions/sqlFunctions'\nimport {\n  GraphItem,\n  PlotProps,\n  BarPlotColors,\n  ClickCallbackParams,\n} from './types'\nimport _ from 'lodash-es'\nimport DotPlot from './DotPlot'\nimport BarPlot from './BarPlot'\nimport loadingScreen from '../../LoadingScreen'\nimport { useSynapseContext } from '../../../utils/SynapseContext'\n\nexport type ThemesPlotProps = {\n  onPointClick: ({ facetValue, type, event }: ClickCallbackParams) => void\n  dotPlot: PlotProps\n  topBarPlot: PlotProps\n  sideBarPlot: PlotProps\n  tooltipProps?: TooltipVisualProps\n  dotPlotYAxisLabel?: string\n}\n\ntype TotalsGroupByY = { y: string; count: number }\ntype TotalsGroupByGroup = { group: string; count: number }\n\nconst optionsConfig: Partial<PlotlyTyped.Config> = {\n  displayModeBar: false,\n  responsive: true,\n  scrollZoom: false,\n  editable: false,\n  autosizable: true,\n}\n\nconst tooltipVisualProps: TooltipVisualProps = {\n  delayShow: 0,\n  place: 'right',\n  type: 'light',\n  effect: 'solid',\n  border: true,\n}\nconst dotPlotLayoutConfig: Partial<PlotlyTyped.Layout> = {\n  showlegend: true,\n  dragmode: false,\n  legend: {\n    font: {\n      size: 11,\n    },\n\n    y: 1.1,\n    xanchor: 'right',\n    x: 1,\n\n    orientation: 'h',\n  },\n  xaxis: {\n    visible: true,\n    fixedrange: true,\n    zeroline: false,\n    showgrid: false,\n    showline: true,\n    linecolor: '#ddd', //bottom line\n    autotick: true,\n    ticks: 'outside',\n    tickcolor: '#ddd',\n  },\n\n  yaxis: {\n    fixedrange: true,\n    zeroline: false,\n    gridcolor: '#ddd', //horizontal lines\n    automargin: true,\n  },\n\n  margin: {\n    pad: 20,\n  },\n  hovermode: 'closest',\n}\n\nconst barLayoutConfig: Partial<PlotlyTyped.Layout> = {\n  barmode: 'stack',\n  showlegend: false,\n  dragmode: false,\n  hovermode: 'closest',\n  yaxis: { visible: false, fixedrange: true },\n  margin: {\n    l: 0,\n    r: 0,\n    b: 0,\n    t: 0,\n    pad: 0,\n  },\n}\n\nfunction fetchData(\n  token: string,\n  { xField, yField, groupField, entityId, whereClause, infoField }: PlotProps,\n): Promise<RowSet> {\n  const sql = `SELECT ${xField} as \"x\", ${yField} as \"y\", ${\n    infoField ? infoField + ' as \"info\", ' : ''\n  }   ${groupField} as \"group\" FROM ${entityId} ${\n    whereClause ? ' WHERE ' + whereClause : ''\n  }`\n\n  const queryRequest: QueryBundleRequest = {\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    partMask: SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n    entityId: entityId,\n    query: {\n      sql: sql,\n    },\n  }\n\n  return getFullQueryTableResults(queryRequest, token).then(\n    (data: QueryResultBundle) => {\n      return data.queryResult!.queryResults\n    },\n  )\n}\n\nfunction getTotalsByProp<T>(data: GraphItem[], prop: string): T[] {\n  const resultObject = data.reduce((res, obj) => {\n    res[obj[prop]] =\n      (obj[prop] in res ? Number(res[obj[prop]]) : 0) + Number(obj.x)\n    return res\n  }, {})\n  const result = []\n  for (const property in resultObject) {\n    result.push({\n      [prop]: property,\n      count: resultObject[property] as number,\n    } as unknown as T)\n  }\n  return result\n}\n\nconst getClickTargetData = (\n  e: PlotlyTyped.PlotMouseEvent,\n  swap: boolean,\n): ClickCallbackParams => {\n  const pointData = e.points[0].data\n\n  let facetValue = pointData.y[0] as string\n  let type = pointData.name\n\n  if (swap) {\n    // @ts-ignore\n    ;[facetValue, type] = [type, facetValue]\n  }\n  return { facetValue, type, event: e.event }\n}\n\nconst renderTopBarLegend = (\n  colors: BarPlotColors | undefined,\n  xLabels: string[],\n): JSX.Element => (\n  <div className=\"ThemesPlot__barPlotLegend\">\n    {xLabels.map((item, i) => (\n      <div style={{ float: 'left' }} key={`topBar_${i}`}>\n        <div\n          className=\"ThemesPlot__barPlotLegend__label\"\n          key=\"topBar_label\"\n          style={{\n            backgroundColor: `${colors ? colors[item] : 'transparent'}`,\n          }}\n        ></div>\n        <div className=\"ThemesPlot__barPlotLegend__graph\" key=\"topBar_graph\">\n          {item}\n        </div>{' '}\n      </div>\n    ))}\n  </div>\n)\n\nconst fadeColors = (colors: { [key: string]: string }, opacity: string) => {\n  for (let key in colors) {\n    colors[key] = colors[key]\n      .replace(',1)', `, ${opacity})`)\n      .replace(',1.0)', `, ${opacity})`)\n  }\n  return colors\n}\n\nconst getTooltip = (data: GraphItem[], filter: string) => {\n  return _.first(data.filter(item => item.y === filter).map(item => item.info))\n}\n\nconst ThemesPlot: FunctionComponent<ThemesPlotProps> = ({\n  dotPlot,\n  topBarPlot,\n  sideBarPlot,\n  tooltipProps = tooltipVisualProps,\n  onPointClick,\n  dotPlotYAxisLabel = 'Research Themes',\n}: ThemesPlotProps) => {\n  const { accessToken } = useSynapseContext()\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [dotPlotQueryData, setDotPlotQueryData] = useState<GraphItem[]>([])\n  const [topBarPlotData, setTopBarQueryData] = useState<GraphItem[]>([])\n  const [sideBarPlotData, setSideBarQueryData] = useState<GraphItem[]>([])\n\n  useEffect(() => {\n    const dotPlotData = fetchData(accessToken!, dotPlot)\n    const topBarPlotData = fetchData(accessToken!, topBarPlot)\n    const sideBarPlotData = fetchData(accessToken!, sideBarPlot)\n    Promise.all([dotPlotData, topBarPlotData, sideBarPlotData])\n      .then(result => {\n        setDotPlotQueryData(resultToJson(result[0].headers, result[0].rows))\n        setTopBarQueryData(resultToJson(result[1].headers, result[1].rows))\n        setSideBarQueryData(resultToJson(result[2].headers, result[2].rows))\n        setIsLoaded(true)\n      })\n      .catch(err => {\n        throw err\n      })\n    return () => {}\n  }, [accessToken, dotPlot, topBarPlot, sideBarPlot])\n  let yLabelsForDotPlot: string[] = []\n  let xLabelsForTopBarPlot: string[] = []\n  let xMaxForDotPlot = 0\n  let xMaxForSideBarPlot = 0\n  let topBarPlotDataSorted: TotalsGroupByY[] = []\n  let totalsByDotPlotY: TotalsGroupByY[] = []\n  if (isLoaded) {\n    totalsByDotPlotY = getTotalsByProp(sideBarPlotData, 'y')\n    yLabelsForDotPlot = totalsByDotPlotY\n      .sort((a, b) => b.count - a.count)\n      .map(item => item.y)\n    xMaxForSideBarPlot = Math.max(...totalsByDotPlotY.map(item => item.count))\n    xMaxForDotPlot = Math.max(...dotPlotQueryData.map(item => Number(item.x)))\n    topBarPlotDataSorted = _.orderBy(getTotalsByProp(topBarPlotData, 'y'), [\n      'y',\n    ])\n    xLabelsForTopBarPlot = _.orderBy(\n      getTotalsByProp<TotalsGroupByGroup>(topBarPlotData, 'group'),\n      ['group'],\n    ).map(item => item.group)\n  }\n\n  return (\n    <>\n      {!isLoaded && loadingScreen}\n\n      {isLoaded && (\n        <div className=\"ThemesPlot\">\n          <div className=\"ThemesPlot__dotPlotLegend\">\n            <DotPlot\n              id=\"head\"\n              plotData={dotPlotQueryData}\n              isLegend={true}\n              markerSymbols={dotPlot.markerSymbols}\n              style={{ width: '100%', height: '100%' }}\n              layoutConfig={dotPlotLayoutConfig}\n              optionsConfig={{\n                ...optionsConfig,\n                responsive: true,\n                staticPlot: true,\n              }}\n              plotStyle={{\n                ...dotPlot.plotStyle!,\n                backgroundColor: 'transparent',\n              }}\n            ></DotPlot>\n          </div>\n          {topBarPlot.colors &&\n            renderTopBarLegend(topBarPlot.colors, xLabelsForTopBarPlot)}\n          {topBarPlotDataSorted.map((item, i) => (\n            <div className=\"ThemesPlot__topBarPlot\" key={`topBarDiv_${i}`}>\n              <div className=\"ThemesPlot__topBarPlot__label\">\n                {item.count}&nbsp;{unCamelCase(item.y)}\n              </div>\n              <div className=\"ThemesPlot__topBarPlot__plot\">\n                <BarPlot\n                  style={{ width: '100%', height: '100%' }}\n                  layoutConfig={_.cloneDeep(barLayoutConfig)}\n                  optionsConfig={{ ...optionsConfig }}\n                  plotData={topBarPlotData}\n                  isTop={true}\n                  label={item.y}\n                  xMax={item.count}\n                  onClick={(e: any) =>\n                    onPointClick(getClickTargetData(e, true))\n                  }\n                  colors={\n                    // we are not actually fading colors for now. But keeping implemenation in case it changes\n                    i % 2 === 0\n                      ? topBarPlot.colors\n                      : fadeColors({ ...topBarPlot.colors }, '1')\n                  }\n                />\n              </div>\n            </div>\n          ))}\n          <div style={{ display: 'flex', position: 'relative' }}>\n            <div className=\"ThemesPlot__dotPlotYLabel\">{dotPlotYAxisLabel}</div>\n            <div className=\"ThemesPlot__dotPlot\">\n              {yLabelsForDotPlot.map((label, i) => (\n                <div\n                  key={`plotDiv_${+i}`}\n                  className=\"ThemesPlot__dotPlot__row\"\n                  style={{\n                    backgroundColor: dotPlot.plotStyle?.backgroundColor,\n                  }}\n                >\n                  <div className=\"ThemesPlot__dotPlot__barColumn\">\n                    <ElementWithTooltip\n                      idForToolTip={`plotDiv1_${+i}`}\n                      tooltipText={`${getTooltip(dotPlotQueryData, label)} `}\n                      tooltipVisualProps={tooltipProps}\n                      callbackFn={() => _.noop}\n                    >\n                      <div>\n                        <span className=\"ThemesPlot__dotPlot__themeLabel\">\n                          {label}\n                        </span>\n                        <br />\n                        <span className=\"ThemesPlot__dotPlot__countLabel\">\n                          {totalsByDotPlotY[i].count} {sideBarPlot.countLabel}\n                        </span>\n                        <br />\n                        <BarPlot\n                          style={{ width: '100%' }}\n                          layoutConfig={barLayoutConfig}\n                          optionsConfig={optionsConfig}\n                          plotData={sideBarPlotData}\n                          isTop={false}\n                          xMax={xMaxForSideBarPlot}\n                          label={label}\n                          colors={fadeColors({ ...topBarPlot.colors }, '1')}\n                        />\n                      </div>\n                    </ElementWithTooltip>\n                  </div>\n                  <div className=\"ThemesPlot__dotPlot__dotPlotColumn\">\n                    <div\n                      style={{\n                        width: '100%',\n                        backgroundColor: dotPlot.plotStyle?.backgroundColor,\n                      }}\n                    >\n                      <DotPlot\n                        id={i + ''}\n                        onClick={(e: any) =>\n                          onPointClick(getClickTargetData(e, false))\n                        }\n                        plotData={dotPlotQueryData}\n                        plotStyle={dotPlot.plotStyle}\n                        markerSymbols={dotPlot.markerSymbols}\n                        xMax={xMaxForDotPlot}\n                        label={label}\n                        layoutConfig={dotPlotLayoutConfig}\n                        optionsConfig={{\n                          ...optionsConfig,\n                          responsive: false,\n                        }}\n                      ></DotPlot>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              <div className=\"ThemesPlot__dotPlot__row\">\n                <div\n                  className=\"ThemesPlot__dotPlot__barColumn\"\n                  style={{ textAlign: 'right' }}\n                >\n                  VOLUME:\n                </div>\n                <div\n                  className=\"ThemesPlot__dotPlot__dotPlotColumn\"\n                  style={{ marginTop: '0px' }}\n                >\n                  <DotPlot\n                    id={'footer'}\n                    plotData={dotPlotQueryData}\n                    isXAxis={true}\n                    xMax={xMaxForDotPlot}\n                    layoutConfig={dotPlotLayoutConfig}\n                    optionsConfig={{ ...optionsConfig, responsive: false }}\n                  ></DotPlot>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div></div>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default ThemesPlot\n"],"names":["Plot","_","result","height","items","x","groups","data","ySorted","group","markerFill","markerLine","i","markerSize","plotData","optionsConfig","layoutConfig","label","id","xMax","markerSymbols","onClick","_jsx","getLayout","isLegend","isXAxis","backgroundColor","noop","isTop","maxValue","layout","colors","xField","yField","groupField","entityId","whereClause","infoField","SynapseConstants.BUNDLE_MASK_QUERY_RESULTS","BUNDLE_MASK_QUERY_RESULTS","sql","queryResults","res","property","facetValue","type","event","_jsxs","item","dotPlot","topBarPlot","sideBarPlot","tooltipVisualProps","onPointClick","accessToken","useEffect","Promise","setDotPlotQueryData","setTopBarQueryData","setSideBarQueryData","setIsLoaded","err","totalsByDotPlotY","yLabelsForDotPlot","xMaxForSideBarPlot","xMaxForDotPlot","topBarPlotDataSorted","xLabelsForTopBarPlot","_Fragment","dotPlotQueryData","dotPlotLayoutConfig","plotStyle","topBarPlotData","y","count","dotPlotYAxisLabel","tooltipProps","barLayoutConfig","sideBarPlotData"],"mappings":"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"}