import{m as Y,a as W,A as h,M as c,b as p,c as u,d as $,e as Z,f as d,g,h as P,i as q,j as J,k as z,n as Q}from"./mockAccessRequirements.fca2fcd2.js";import{E as F,w as X,x as R,y as x,z as ee,A as M,B as te,C as se,D as ne,U as oe,F as j,G as re,H as ie,I as ae,J as de,K as ce,P as me,N as le,L as ye,M as ue,O as pe,R as fe}from"./index.0297a0cb.js";import{g as C,B as w,M as Ie}from"./getEndpoint.f1f195f5.js";import{R as Ee}from"./RestrictionInformation.edfbac5a.js";import{U as ge}from"./UploadDestination.dcbd5975.js";const S=u.id,Se=u.name,I="syn123",b="My mock file entity",be="45745485",l={id:I,parentId:S,dataFileHandleId:$,name:b,concreteType:"org.sagebionetworks.repo.model.FileEntity",createdBy:c.toString(),modifiedBy:c.toString(),etag:"00000000-0000-0000-0000-000000000000",versionNumber:3,versionLabel:"a label for version 3",isLatestVersion:!0,createdOn:"2021-03-02T15:05:34.973Z",modifiedOn:"2021-03-05T11:31:24.521Z"},ve=[{id:I,modifiedBy:c.toString(),versionNumber:1,versionLabel:"a label for version 1",versionComment:"a comment",contentSize:"100",contentMd5:"d836adae5632872014783b05cd2f76d7",modifiedByPrincipalId:c.toString(),modifiedOn:"2021-03-02T15:05:34.973Z",isLatestVersion:!1},{id:I,modifiedBy:c.toString(),versionNumber:3,versionLabel:"a label for version 3",versionComment:"a comment about version 3",contentSize:"100",contentMd5:"bc91a4a16ccb21944fcee55275dc4574",modifiedByPrincipalId:c.toString(),modifiedOn:"2021-03-05T11:31:24.521Z",isLatestVersion:!0}],Te={3:{id:I,parentId:S,dataFileHandleId:$,name:b,concreteType:"org.sagebionetworks.repo.model.FileEntity",createdBy:c.toString(),modifiedBy:c.toString(),etag:"00000000-0000-0000-0000-000000000000",versionNumber:3,versionLabel:"a label for version 3",isLatestVersion:!0},1:{id:I,parentId:S,dataFileHandleId:$,name:b,concreteType:"org.sagebionetworks.repo.model.FileEntity",createdBy:c.toString(),modifiedBy:c.toString(),etag:"00000000-0000-0000-0000-000000000000",versionNumber:1,versionLabel:"a label for version 1",isLatestVersion:!1}},H={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:Se,id:S,type:"org.sagebionetworks.repo.model.Project"},{name:b,id:I,type:"org.sagebionetworks.repo.model.FileEntity"}]},De={entity:l,entityType:F.FILE,fileHandles:[Y,W],annotations:{id:I,etag:"00000000-0000-0000-0000-000000000000",annotations:{myStringKey:{type:h.STRING,value:["myValue"]},myIntegerKey:{type:h.LONG,value:[4325435345213,4321]},myFloatKey:{type:h.LONG,value:[1.5,17/13]}}},rootWikiId:be,fileName:l.name,benefactorAcl:{id:S,creationDate:"2020-11-18T20:05:06.540Z",etag:"f143bbfd-ba09-4a42-b1e9-f9368777ad9b",resourceAccess:[{principalId:c,accessType:[p.DELETE,p.CHANGE_SETTINGS,p.MODERATE,p.CHANGE_PERMISSIONS,p.UPDATE,p.READ,p.DOWNLOAD,p.CREATE]},{principalId:273948,accessType:[p.READ]},{principalId:273949,accessType:[p.READ]}]},permissions:{canView:!0,canEdit:!0,canMove:!0,canAddChild:!0,canCertifiedUserEdit:!0,canCertifiedUserAddChild:!0,isCertifiedUser:!0,canChangePermissions:!0,canChangeSettings:!0,canDelete:!0,canDownload:!0,canUpload:!0,canEnableInheritance:!0,ownerPrincipalId:3350396,canPublicRead:!0,canModerate:!0,isCertificationRequired:!0,isEntityOpenData:!1},threadCount:5,path:H,restrictionInformation:{restrictionLevel:Ee.OPEN,hasUnmetAccessRequirement:!1}},ke={id:l.id,name:l.name,etag:l.etag,createdOn:l.createdOn,modifiedOn:l.modifiedOn,createdBy:l.createdBy,modifiedBy:l.modifiedBy,parentId:"syn4489",concreteType:"org.sagebionetworks.repo.model.Project",myStringKey:"myValue",myIntegerKey:[4325435345213,4321],myFloatKey:[1.5,17/13]},he={id:l.id,name:l.name,type:l.concreteType,versionNumber:3,versionLabel:"a label for version 3",benefactorId:123,createdOn:l.createdOn,modifiedOn:l.modifiedOn,createdBy:c.toString(),modifiedBy:Z.toString(),isLatestVersion:!0},D={id:I,name:b,entity:l,bundle:De,json:ke,versions:Te,versionInfo:ve,entityHeader:he,path:H},E="syn234",k="A Mocked Dataset",T={id:E,parentId:u.id,name:k,concreteType:"org.sagebionetworks.repo.model.table.Dataset",createdBy:c.toString(),modifiedBy:c.toString(),versionNumber:3,versionLabel:"in progress",versionComment:"in progress",isLatestVersion:!0,etag:"00000000-0000-0000-0000-000000000000",items:[],columnIds:[],isSearchEnabled:!1},Ne={id:E,type:"org.sagebionetworks.repo.model.table.Dataset",name:k,benefactorId:parseInt(u.id),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",createdBy:c.toString(),modifiedBy:c.toString(),versionNumber:3,versionLabel:"in progress",isLatestVersion:!0},U={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:u.name,id:u.id,type:"org.sagebionetworks.repo.model.Project"},{name:k,id:E,type:"org.sagebionetworks.repo.model.FileEntity"}]},_e={1:{...T,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1},2:{...T,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1}},$e=[{id:E,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1,modifiedBy:c.toString(),modifiedByPrincipalId:c.toString(),modifiedOn:"2022-03-22T18:50:22.336Z"},{id:E,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1,modifiedBy:c.toString(),modifiedByPrincipalId:c.toString(),modifiedOn:"2022-03-22T18:47:34.797Z"}],Ce={entity:T,entityType:F.DATASET,path:U,permissions:{canView:!0,canEdit:!0,canMove:!0,canAddChild:!0,canCertifiedUserEdit:!0,canCertifiedUserAddChild:!0,isCertifiedUser:!0,canChangePermissions:!0,canChangeSettings:!0,canDelete:!0,canDownload:!0,canUpload:!0,canEnableInheritance:!0,ownerPrincipalId:3350396,canPublicRead:!0,canModerate:!0,isCertificationRequired:!0,isEntityOpenData:!1}},V={id:E,name:k,entity:T,entityHeader:Ne,path:U,bundle:Ce,versions:_e,versionInfo:$e},A="syn654651",L="A Mocked Dataset Collection",we={id:A,parentId:u.id,name:L,concreteType:"org.sagebionetworks.repo.model.table.DatasetCollection",createdBy:c.toString(),modifiedBy:c.toString(),etag:"00000000-0000-0000-0000-000000000000",items:[{entityId:V.id,versionNumber:1}],columnIds:[]},Ae={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:u.name,id:u.id,type:"org.sagebionetworks.repo.model.Project"},{name:L,id:A,type:"org.sagebionetworks.repo.model.FileEntity"}]},Le={id:A,name:L,entity:we,path:Ae},f=[D,u,V,Le],Oe=u.id,N=u.entity;D.name;const Pe=D.entityHeader,Re="syn1234",Me="A $@*#$% terribly named Project",_={id:Re,parentId:Oe,name:"my folder name",concreteType:"org.sagebionetworks.repo.model.Folder"},je={id:_.id,name:_.name,type:_.concreteType,versionNumber:1,versionLabel:"Version label",benefactorId:1234,createdOn:"",modifiedOn:"",createdBy:"",modifiedBy:""},Be={totalNumberOfResults:2,results:[Pe,je]};N.id,N.name,N.modifiedOn,c;var K=(i=>(i.entity="entity",i))(K||{}),G=(i=>(i.entity="entity",i))(G||{});const B=D.entity,O={jsonSchemaVersionInfo:{organizationId:"1",organizationName:"org.sagebionetworks",schemaId:"1",schemaName:"Mock Schema",versionId:"555",$id:"org.sagebionetworks-MockSchema",jsonSHA256Hex:"5f2cd73c0fe25b30cbee2f213b6d633951f1873ca1911f494d4654f702a69e95",createdOn:"2021-04-01T08:00:00.000Z",createdBy:"1"},objectId:3333,objectType:K.entity,createdOn:"2021-04-01T08:00:00.000Z",createdBy:"1"};B.id,G.entity,B.etag,`${O.jsonSchemaVersionInfo.$id}`;`${O.jsonSchemaVersionInfo.$id}`;const Fe=i=>[d.rest.post(`${i}${X}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a matching mock entity for this request : ${JSON.stringify(n.body)}`};if(n.body){const t=n.body,a=f.find(m=>m.name===t.name);a?(r=a.entity,s=200):t.name===Me&&(r.reason="Invalid project name",s=403)}return o(e.status(s),e.json(r))}),d.rest.get(`${i}${R(":entityId")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a mock entity with ID ${n.params.entityId}`};const t=f.find(a=>a.id===n.params.entityId);return t&&(r=t.entity,s=200),o(e.status(s),e.json(r))}),d.rest.get(`${i}${x(":entityId")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find mock entity versions for ID ${n.params.entityId}`};const t=f.find(a=>a.id===n.params.entityId);return t&&t.versionInfo&&(r={results:t.versionInfo},s=200),o(e.status(s),e.json(r))}),d.rest.get(`${i}${ee(":entityId",":versionNumber")}`,async(n,o,e)=>{let s=404;const r=n.params.entityId,t=n.params.versionNumber.toString(),a=parseInt(t);let m={reason:`Mock Service worker could not find a mock versioned entity with ID ${r}.${t}`};const y=f.find(v=>v.id===n.params.entityId);return y&&y.versions&&y.versions[a]&&(m=y.versions[a],s=200),o(e.status(s),e.json(m))}),d.rest.post(`${i}${M(":entityId")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=f.find(a=>a.id===n.params.entityId);return t&&(r=t.bundle,s=200),o(e.status(s),e.json(r))}),d.rest.post(`${i}${M(":entityId",":versionNumber")}`,async(n,o,e)=>{const s=n.params.entityId,r=parseInt(n.params.versionNumber);let t=404,a={reason:`Mock Service worker could not find a mock entity bundle with ID ${s}`};const m=f.find(y=>y.id===s);if(m){const y=m.bundle;m.versions&&m.versions[r]?a={...y,entity:m.versions[r]}:a=y,t=200}return o(e.status(t),e.json(a))}),d.rest.get(`${i}${te(":entityId")}`,async(n,o,e)=>o(e.status(200),e.json(O))),d.rest.get(`${i}${se(":entityId")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=f.find(a=>a.id===n.params.entityId);return t&&(r=t.json,s=200),o(e.status(s),e.json(r))}),d.rest.post(`${i}${ne}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=n.body,a=f.filter(m=>t.references.find(y=>y.targetId===m.id)).map(m=>m.entityHeader);return a&&(r={results:a},s=200),o(e.status(s),e.json(r))}),d.rest.get(`${i}${R(":entityId")}/path`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a mock entity path using ID ${n.params.entityId}`};const t=f.find(a=>n.params.entityId===a.id);return t&&t.path&&(r=t.path,s=200),o(e.status(s),e.json(r))}),d.rest.get(`${C(w.REPO_ENDPOINT)}/file/v1/entity/:id/uploadDestination`,async(n,o,e)=>{const s={banner:"",storageLocationId:1,uploadType:ge.S3,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"};return o(e.status(200),e.json(s))})],He=i=>[d.rest.get(`${i}${oe(":id")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a user profile with ID ${n.params.id}`};const t=g.find(a=>a.id.toString()===n.params.id);return t&&t.userProfile&&(r=t.userProfile,s=200),o(e.status(s),e.json(r))}),d.rest.get(`${i}${j}`,async(n,o,e)=>{const s=q,r=200;return o(e.status(r),e.json(s))}),d.rest.get(`${C(w.REPO_ENDPOINT)}${re}`,async(n,o,e)=>{const s=P;return o(e.status(200),e.json(s))}),d.rest.get(`${i}${ie(":id")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a user bundle with ID ${n.params.id}`};const t=g.find(a=>a.id.toString()===n.params.id);return t&&t.userBundle&&(r=t.userBundle,s=200),o(e.status(s),e.json(r))}),d.rest.get(`${i}${ae}`,async(n,o,e)=>o(e.status(200),e.json(Be))),d.rest.get(`${i}${de}`,async(n,o,e)=>{const s=n.url.searchParams.get("ids").split(","),r={children:g.filter(t=>s.includes(t.id.toString())).map(t=>t.userGroupHeader)};return o(e.status(200),e.json(r))}),d.rest.post(`${i}${j}`,async(n,o,e)=>{const s=(await n.json()).list,r={list:g.filter(t=>s.includes(t.id.toString())).map(t=>t.userProfile).filter(t=>t!=null)};return o(e.status(200),e.json(r))}),d.rest.get(`${i}${ce}`,async(n,o,e)=>{const s=n.url.searchParams.get("prefix"),r={children:g.filter(t=>{var a,m,y,v;return t.userGroupHeader.userName.toLowerCase().startsWith((a=s.toLowerCase())!=null?a:"")||(t.userGroupHeader.firstName||"").toLowerCase().startsWith((m=s.toLowerCase())!=null?m:"")||(t.userGroupHeader.displayName||"").toLowerCase().startsWith((y=s.toLowerCase())!=null?y:"")||(t.userGroupHeader.lastName||"").toLowerCase().startsWith((v=s.toLowerCase())!=null?v:"")}).map(t=>t.userGroupHeader)};return o(e.status(200),e.json(r))}),d.rest.get(`${i}${me(":userId")}`,async(n,o,e)=>o(e.status(404),e.json({reason:"user has no profile image"}))),d.rest.get(`${i}${le}`,async(n,o,e)=>{var s;return o(e.status(200),e.json({email:(s=P.userProfile)==null?void 0:s.email}))})],Ue=i=>[d.rest.get(`${i}${ye(":id")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find an access requirement with ID ${n.params.id}`};const t=J.find(a=>a.id.toString()===n.params.id);return t&&(r=t,s=200),o(e.status(s),e.json(r))}),d.rest.get(`${Ie}${ue(":id")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find an access requirement wiki page key with AR ID ${n.params.id}`};const t=z.find(a=>(a.ownerObjectType===pe.ACCESS_REQUIREMENT&&a.ownerObjectId.toString())===n.params.id);return t&&(r=t,s=200),o(e.status(s),e.json(r))})],Ve=i=>[d.rest.get(`${i}${fe(":arId",":wikiId")}`,async(n,o,e)=>{let s=404,r={reason:`Mock Service worker could not find a wiki page with ID ${n.params.wikiId}`};const t=Q.find(a=>a.id===n.params.wikiId);return t&&(r=t,s=200),o(e.status(s),e.json(r))})],Ke=i=>[d.rest.options("*",async(n,o,e)=>o(e.status(200))),d.rest.get(`${i}/auth/v1/authenticatedOn`,async(n,o,e)=>o(e.status(200),e.json({authenticatedOn:new Date().toISOString()}))),...Fe(i),...He(i),...Ve(i),...Ue(i)];Ke(C(w.REPO_ENDPOINT));export{Ke as g,D as m};
