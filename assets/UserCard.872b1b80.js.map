{"version":3,"file":"UserCard.872b1b80.js","sources":["../../src/lib/utils/hooks/usePreFetchResource.ts","../../src/lib/utils/functions/getUserData.ts","../../src/lib/assets/icons/ValidatedProfile.tsx","../../src/lib/containers/UserCardContextMenu.tsx","../../src/lib/assets/icons/CertifiedUser.tsx","../../src/lib/containers/UserCardLarge.tsx","../../src/lib/containers/UserCardMedium.tsx","../../src/lib/utils/hooks/useOverlay.tsx","../../src/lib/containers/Avatar.tsx","../../src/lib/containers/UserCardSmall.tsx","../../src/lib/containers/UserCard.tsx"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nexport async function preFetchResource(url: string) {\n  const response = await fetch(url)\n  const blob = await response.blob()\n  return URL.createObjectURL(blob)\n}\n\nexport function releaseResourceUrl(resourceUrl: string) {\n  URL.revokeObjectURL(resourceUrl)\n}\n\n/**\n * Custom hook for retrieving a resource and assigning it a localhost URL. This is useful for\n * fetching resources from URLs that may expire before the resource renders.\n * @param preSignedURL\n * @returns a localhost URL referencing the prefetched resource\n */\nexport default function usePreFetchResource(\n  preSignedURL?: string,\n): string | undefined {\n  const [resourceURL, setResourceURL] = useState<string | undefined>(undefined)\n\n  useEffect(() => {\n    let isMounted = true\n    const getData = async (url: string) => {\n      try {\n        const resourceUrl = await preFetchResource(url)\n        if (isMounted) {\n          setResourceURL(resourceUrl)\n        }\n      } catch (e) {\n        console.error(\n          `Failed to fetch object with presigned URL ${url}. See network log for details`,\n        )\n      }\n    }\n    if (preSignedURL) {\n      getData(preSignedURL)\n    }\n\n    return () => {\n      isMounted = false\n    }\n  }, [preSignedURL])\n\n  useEffect(() => {\n    return () => {\n      // When we no longer need the object, we release it.\n      // See https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n      if (resourceURL) {\n        releaseResourceUrl(resourceURL)\n      }\n    }\n  }, [resourceURL])\n\n  return resourceURL\n}\n","import { SynapseClient } from '..'\nimport { BackendDestinationEnum, getEndpoint } from './getEndpoint'\n\n/*\n  Utility functions for UserCards\n*/\n\nexport async function getUserProfileWithProfilePicAttached(\n  principalIds: string[],\n) {\n  const userProfiles = await SynapseClient.getUserProfiles(principalIds)\n  const profilesWithPictures = userProfiles.list.map(profile => {\n    if (profile.profilePicureFileHandleId) {\n      return {\n        ...profile,\n        clientPreSignedURL: `${getEndpoint(\n          BackendDestinationEnum.REPO_ENDPOINT,\n        )}/repo/v1/userProfile/${profile.ownerId}/image/preview?redirect=true`,\n      }\n    } else {\n      return profile\n    }\n  })\n  return { list: profilesWithPictures }\n}\n\nconst COLORS: string[] = [\n  'chocolate',\n  'black',\n  'firebrick',\n  'maroon',\n  'olive',\n  'green',\n  'forestgreen',\n  'darkturquoise',\n  'teal',\n  'blue',\n  'navy',\n  'darkmagenta',\n  'purple',\n  'blue',\n  'orangered',\n  'blueviolet',\n]\n\nconst hash = (userName: string) => {\n  const val = userName\n    .split('')\n    .reduce(\n      (prevHash, currVal) =>\n        ((prevHash << 5) - prevHash + currVal.charCodeAt(0)) | 0,\n      0,\n    )\n  return Math.abs(val)\n}\n\nexport const getColor = (userName: string) => {\n  const hashedUserName = hash(userName)\n  return COLORS[hashedUserName % COLORS.length]\n}\n","import * as React from 'react'\n\nconst svg = (\n  <span className=\"SRC-validatedProfileIcon\">\n    <svg\n      width=\"18\"\n      height=\"18\"\n      viewBox=\"0 0 18 18\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M1.21612 12.9284C1.00431 13.5978 1.46323 14.3024 2.16925 14.4081L2.62816 14.4786C3.12238 14.5491 3.51069 14.9366 3.61659 15.4299L3.68719 15.8879C3.7931 16.5925 4.49912 17.0153 5.20514 16.8039L5.66405 16.663C6.15827 16.5221 6.68778 16.6982 6.97019 17.121L7.2526 17.5086C7.67621 18.0723 8.48813 18.178 9.01765 17.6847L9.37066 17.3676C9.75897 17.0153 10.2885 16.9448 10.7474 17.1915L11.171 17.4029C11.8064 17.7552 12.5831 17.4733 12.8302 16.8039L13.0067 16.3811C13.1832 15.9231 13.6774 15.606 14.1716 15.6413L14.6305 15.6765C15.3365 15.7117 15.9367 15.1128 15.8661 14.4081L15.8307 13.9501C15.7954 13.4569 16.0779 12.9636 16.5721 12.7875L16.9957 12.6113C17.6664 12.3294 17.9135 11.5543 17.5605 10.9554L17.2428 10.5678C16.9957 10.145 17.0663 9.58133 17.384 9.19378L17.7017 8.84145C18.1606 8.31297 18.09 7.50264 17.4899 7.07985L17.1016 6.83322C16.678 6.55137 16.5015 6.02289 16.6427 5.52964L16.7839 5.07162C16.9957 4.40221 16.5368 3.69757 15.8307 3.59187L15.3718 3.52141C14.8776 3.45094 14.4893 3.06339 14.3834 2.57014L14.3128 2.11212C14.2069 1.40748 13.5009 0.984696 12.7949 1.19609L12.3359 1.33702C11.8417 1.47795 11.3122 1.30179 11.0298 0.879L10.7474 0.491447C10.3238 -0.072267 9.51186 -0.177963 8.98235 0.315286L8.62934 0.632375C8.24103 0.984696 7.71151 1.05516 7.2526 0.808536L6.82899 0.597143C6.19357 0.244822 5.41694 0.526679 5.16984 1.19609L4.99333 1.61887C4.81683 2.07689 4.32261 2.39398 3.8284 2.35875L3.44009 2.28828C2.73407 2.25305 2.13395 2.852 2.20455 3.55664L2.23985 4.01466C2.27515 4.50791 1.99274 5.00116 1.49853 5.17732L1.07492 5.35348C0.404196 5.63533 0.15709 6.41044 0.5101 7.00939L0.757207 7.39694C1.00431 7.81972 0.933712 8.38344 0.616003 8.77099L0.298294 9.12331C-0.16062 9.65179 -0.0900176 10.4621 0.5101 10.8849L0.898411 11.1315C1.32202 11.4134 1.49853 11.9419 1.35732 12.4351L1.21612 12.9284ZM6.37007 7.6788L7.92332 9.26424L11.6652 5.56487L13.2891 7.18555L9.54716 10.8497L7.92332 12.4704L6.29947 10.8497L4.74622 9.29947L6.37007 7.6788Z\"\n        fill=\"#28A745\"\n      />\n    </svg>\n  </span>\n)\nexport default svg\n","import * as React from 'react'\nimport { UserProfile } from '../utils/synapseTypes/'\nimport { SEPERATOR } from '../utils/SynapseConstants'\n\nexport type MenuAction = {\n  field: string\n  callback?: (userProfile: UserProfile) => void\n}\n\nexport type UserCardContextMenuProps = {\n  userProfile: UserProfile\n  menuActions: MenuAction[]\n}\n\nconst UserCardContextMenu: React.FC<UserCardContextMenuProps> = (\n  props: UserCardContextMenuProps,\n) => {\n  const { menuActions = [], userProfile } = props\n  return (\n    <div className=\"dropdown open\">\n      <ul\n        className=\"dropdown-menu dropdown-menu-right\"\n        aria-labelledby=\"dropdownMenu1\"\n      >\n        {menuActions.map((menuAction, index) => {\n          const callback = () => menuAction.callback!(userProfile)\n          if (menuAction.field === SEPERATOR) {\n            return (\n              <hr className=\"SRC-break\" key={`${menuAction.field}_${index}`} />\n            )\n          }\n          return (\n            <li\n              role=\"menuitem\"\n              key={menuAction.field}\n              style={{ listStyle: 'none' }}\n              className=\"SRC-menu-item SRC-table-dropdown-list SRC-primary-background-color-hover\"\n              onClick={callback}\n              onKeyPress={callback}\n            >\n              <button className=\"SRC-menuAction\">{menuAction.field}</button>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default UserCardContextMenu\n","import * as React from 'react'\n\nconst svg = (\n  <span className=\"SRC-certified-user-icon\">\n    <svg\n      width=\"17\"\n      height=\"20\"\n      viewBox=\"0 0 17 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M5.63578 14.1759C5.53042 14.0916 5.40399 14.0284 5.27756 14.0284L4.39256 13.9652C3.48648 13.902 2.68576 13.4384 2.15897 12.7641L0.0518096 17.2523C-0.137835 17.6738 0.220382 18.1584 0.683957 18.0741L2.5804 17.7159C2.81219 17.6738 3.06505 17.7791 3.19148 18.0109L4.11862 19.6966C4.35041 20.1181 4.94042 20.097 5.13006 19.6545L7.174 15.2927C6.85793 15.1663 6.584 14.9977 6.31007 14.7659L5.63578 14.1759Z\"\n        fill=\"#58A158\"\n      />\n      <path\n        d=\"M16.6564 17.2523L14.5492 12.7641C14.0224 13.4384 13.2217 13.8809 12.3156 13.9652L11.4306 14.0284C11.2831 14.0495 11.1778 14.0916 11.0724 14.1759L10.3981 14.7448C10.1453 14.9555 9.85025 15.1452 9.53418 15.2716L11.5781 19.6334C11.7678 20.0549 12.3788 20.0759 12.5896 19.6756L13.5167 17.9899C13.6431 17.7791 13.8749 17.6527 14.1278 17.6948L16.0242 18.0531C16.4878 18.1374 16.8671 17.6738 16.6564 17.2523Z\"\n        fill=\"#58A158\"\n      />\n      <path\n        d=\"M10.2503 13.2277C10.5453 12.9748 10.9246 12.8063 11.3249 12.7852L12.2099 12.722C13.1371 12.6588 13.8746 11.9212 13.9378 10.9941L14.001 10.1091C14.0221 9.70873 14.1906 9.32944 14.4435 9.03444L15.0335 8.36015C15.6446 7.64372 15.6446 6.61121 15.0335 5.91585L14.4435 5.24156C14.1906 4.94655 14.0221 4.56727 14.001 4.16691L13.9378 3.2819C13.8746 2.35475 13.1371 1.61724 12.2099 1.55403L11.3249 1.49081C10.9246 1.46974 10.5453 1.30117 10.2503 1.04831L9.57597 0.458307C8.85954 -0.152769 7.82703 -0.152769 7.13167 0.458307L6.45738 0.985097C6.16237 1.23796 5.78309 1.40653 5.38273 1.4276L4.49772 1.49081C3.57057 1.55403 2.83306 2.29153 2.76985 3.21868L2.70664 4.10369C2.68556 4.50405 2.51699 4.88334 2.26413 5.17834L1.67413 5.85263C1.06305 6.56907 1.06305 7.60157 1.67413 8.29694L2.26413 8.97123C2.51699 9.26623 2.68556 9.64552 2.70664 10.0459L2.76985 10.9309C2.83306 11.858 3.57057 12.5955 4.49772 12.6588L5.38273 12.722C5.78309 12.743 6.16237 12.9116 6.45738 13.1645L7.13167 13.7545C7.8481 14.3656 8.88061 14.3656 9.57597 13.7545L10.2503 13.2277ZM4.39236 7.11693C4.39236 4.92548 6.16237 3.15547 8.35382 3.15547C10.5453 3.15547 12.3153 4.92548 12.3153 7.11693C12.3153 9.30837 10.5453 11.0784 8.35382 11.0784C6.16237 11.0784 4.39236 9.2873 4.39236 7.11693Z\"\n        fill=\"#58A158\"\n      />\n      <path\n        d=\"M10.5875 6.0844L9.49182 5.87368C9.38646 5.85261 9.28111 5.7894 9.23896 5.68404L8.6911 4.69367C8.5436 4.44081 8.16431 4.44081 8.03788 4.69367L7.49002 5.68404C7.42681 5.7894 7.34252 5.85261 7.23716 5.87368L6.14144 6.0844C5.84644 6.14761 5.74108 6.50583 5.93072 6.71654L6.6893 7.53834C6.77359 7.62262 6.79466 7.72798 6.79466 7.83334L6.66823 8.95013C6.62609 9.24513 6.94216 9.45585 7.19502 9.32942L8.20646 8.84477C8.31181 8.80263 8.41717 8.80263 8.52253 8.84477L9.53396 9.32942C9.8079 9.45585 10.1029 9.24513 10.0608 8.95013L9.93433 7.83334C9.91325 7.72798 9.9554 7.60155 10.0397 7.53834L10.7983 6.71654C10.9879 6.48476 10.8825 6.14761 10.5875 6.0844Z\"\n        fill=\"#C94281\"\n      />\n    </svg>\n  </span>\n)\nexport default svg\n","import * as React from 'react'\nimport CertifiedUserIcon from '../assets/icons/CertifiedUser'\nimport { UserProfile } from '../utils/synapseTypes/'\n\ntype UserCardLargeProps = {\n  userProfile: UserProfile\n  isCertified?: boolean\n}\n\n/**\n * UserCardLarge wraps around UserCardMedium\n *\n * @export UserCardLarge\n * @param {UserCardLargeProps} { userProfile }\n */\n// Disable function name because compiler has to know that its a class\n// tslint:disable-next-line:function-name\nexport function UserCardLarge({\n  userProfile,\n  isCertified,\n}: UserCardLargeProps) {\n  const { summary, industry, location, url } = userProfile\n\n  return (\n    <div className=\"SRC-cardMetaData\">\n      <div className=\"SRC-cardMetaData-scroll\">\n        {summary && (\n          <div>\n            <p className=\"SRC-card-metadata-title\"> Bio </p>\n            <p>{summary}</p>\n          </div>\n        )}\n        {url && (\n          <div>\n            <p className=\"SRC-card-metadata-title\"> More Info </p>\n            <p>{url}</p>\n          </div>\n        )}\n        {industry && (\n          <div>\n            <p className=\"SRC-card-metadata-title\"> Industry </p>\n            <p>{industry}</p>\n          </div>\n        )}\n        {location && (\n          <div>\n            <p className=\"SRC-card-metadata-title\"> Location </p>\n            <p>{location}</p>\n          </div>\n        )}\n        {isCertified && (\n          <div>\n            <p className=\"SRC-card-metadata-title\"> Access </p>\n            <p>{CertifiedUserIcon} Certified Account</p>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n","import { Skeleton } from '@material-ui/lab'\nimport React, { useEffect, useRef, useState } from 'react'\nimport ReactTooltip from 'react-tooltip'\nimport IconCopy from '../assets/icons/IconCopy'\nimport ValidatedProfileIcon from '../assets/icons/ValidatedProfile'\nimport { SkeletonTable } from '../assets/skeletons/SkeletonTable'\nimport { SynapseConstants } from '../utils'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../utils/functions/getEndpoint'\nimport { useGetUserBundle } from '../utils/hooks/SynapseAPI/useUserBundle'\nimport { UserProfile } from '../utils/synapseTypes/'\nimport { Avatar } from './Avatar'\nimport IconSvg from './IconSvg'\nimport { ToastMessage } from './ToastMessage'\nimport UserCardContextMenu, { MenuAction } from './UserCardContextMenu'\nimport { UserCardLarge } from './UserCardLarge'\n\nexport type UserCardMediumProps = {\n  userProfile: UserProfile\n  menuActions?: MenuAction[]\n  imageURL?: string\n  hideEmail?: boolean\n  isLarge?: boolean\n  link?: string\n  openLinkInNewTab?: boolean\n  disableLink?: boolean\n  isCertified?: boolean\n  isValidated?: boolean\n  isLoadingAvatar?: boolean\n}\n\n/**\n * Function handles copying to clipboard the user's email address\n *\n * @param {string} value the email address of the user\n * @returns\n */\nconst copyToClipboard =\n  (\n    ref: React.MutableRefObject<HTMLElement | null>,\n    value: string,\n    onCopy: () => void,\n  ) =>\n  (event: React.SyntheticEvent) => {\n    event.preventDefault()\n\n    // use the Clipboard API\n    // https://caniuse.com/mdn-api_clipboard_writetext\n    navigator.clipboard.writeText(value).then(() => {\n      onCopy()\n    })\n  }\n\nexport const UserCardMedium: React.FC<UserCardMediumProps> = ({\n  userProfile,\n  menuActions,\n  isLarge = false,\n  imageURL,\n  hideEmail = false,\n  disableLink = false,\n  link,\n  openLinkInNewTab = false,\n  isValidated,\n  isCertified,\n  isLoadingAvatar,\n}) => {\n  const [showModal, setShowModal] = useState(false)\n  const [isContextMenuOpen, setIsContextMenuOpen] = useState(false)\n\n  const copyToClipboardRef = useRef<HTMLParagraphElement>(null)\n\n  const onCopyToClipboard = () => {\n    // show modal and hide after 4 seconds, the timing is per Material Design\n    setShowModal(true)\n    // hide after 4 seconds\n    setTimeout(() => {\n      setShowModal(false)\n    }, 4000)\n  }\n\n  const { displayName, userName, firstName, lastName, position, company } =\n    userProfile\n\n  useEffect(() => {\n    const pageClick = (_event: any) => {\n      if (!isContextMenuOpen) {\n        return\n      }\n      // hide content menu (deferred, to allow menu action to process)\n      setTimeout(() => {\n        if (isContextMenuOpen) {\n          toggleContextMenu(_event)\n        }\n      }, 10)\n    }\n    // SWC-4778: https://stackoverflow.com/questions/23821768/how-to-listen-for-click-events-that-are-outside-of-a-component\n    window.addEventListener('mouseup', pageClick, false)\n    return () => {\n      window.removeEventListener('mouseup', pageClick, false)\n    }\n  }, [])\n\n  const { data: userBundle } = useGetUserBundle(\n    userProfile.ownerId,\n    SynapseConstants.USER_BUNDLE_MASK_ORCID,\n  )\n\n  const ORCID = userBundle?.ORCID\n\n  const toggleContextMenu = (_event: any) => {\n    setIsContextMenuOpen(isOpen => !isOpen)\n  }\n\n  const validatedUserProfileTooltipId = `${userName}-tooltip`\n  let name = ''\n  const linkLocation = link\n    ? link\n    : `${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Profile:${userProfile.ownerId}`\n  // linkLocation is overriden by custom click handler\n  const email = `${userName}@synapse.org`\n  if (displayName) {\n    name = displayName\n  } else if (firstName && lastName) {\n    name = `${firstName} ${lastName}`\n  } else if (userName) {\n    name = userName\n  }\n  const avatar = (\n    <Avatar\n      userProfile={userProfile}\n      imageURL={imageURL}\n      avatarSize={'LARGE'}\n      isLoadingAvatar={isLoadingAvatar}\n    />\n  )\n  const mediumCard = (\n    <React.Fragment>\n      {!hideEmail && (\n        <ToastMessage\n          show={showModal}\n          text=\"Email address copied to clipboard\"\n          autohide={true}\n        ></ToastMessage>\n      )}\n      {disableLink && avatar}\n      {!disableLink && (\n        // eslint-disable-next-line react/jsx-no-target-blank\n        <a\n          href={linkLocation}\n          target={openLinkInNewTab ? '_blank' : ''}\n          rel={openLinkInNewTab ? 'noreferrer' : ''}\n          className={`SRC-no-border-bottom-imp ${\n            isLarge ? 'SRC-isLargeCard' : ''\n          }`}\n        >\n          {avatar}\n        </a>\n      )}\n      <div className=\"SRC-cardContent\">\n        <p className=\"SRC-eqHeightRow SRC-userCardName\">\n          {/*\n              if its a medium component the header should be clickable (unless disableLink is set),\n              if its large then it should NOT be clickable\n            */}\n          {/* make SRC-whiteText overridable with a good name! */}\n          {isLarge || disableLink ? (\n            <span className={isLarge ? 'SRC-whiteText' : 'SRC-blackText'}>\n              {name}\n            </span>\n          ) : (\n            // consolidate click events\n            // eslint-disable-next-line react/jsx-no-target-blank\n            <a\n              href={linkLocation}\n              target={openLinkInNewTab ? '_blank' : ''}\n              rel={openLinkInNewTab ? 'noreferrer' : ''}\n              tabIndex={0}\n              className={'SRC-hand-cursor'}\n            >\n              {name}\n            </a>\n          )}\n          {isValidated && (\n            <span\n              data-for={validatedUserProfileTooltipId}\n              data-tip=\"This user profile has been validated.\"\n            >\n              <ReactTooltip\n                delayShow={300}\n                place=\"bottom\"\n                type=\"dark\"\n                effect=\"solid\"\n                id={validatedUserProfileTooltipId}\n              />\n              {ValidatedProfileIcon}\n            </span>\n          )}\n        </p>\n        {(position || company) && (\n          <p className={`${isLarge ? 'SRC-whiteText' : ''}`}>\n            {position} {position ? ' / ' : ''} {company}\n          </p>\n        )}\n        {!hideEmail && (\n          <p\n            ref={copyToClipboardRef}\n            className={`${isLarge ? 'SRC-whiteText' : ''}\n              SRC-hand-cursor SRC-eqHeightRow SRC-inlineFlex SRC-emailText SRC-cardSvg`}\n            onClick={copyToClipboard(\n              copyToClipboardRef,\n              email,\n              onCopyToClipboard,\n            )}\n            onKeyPress={copyToClipboard(\n              copyToClipboardRef,\n              email,\n              onCopyToClipboard,\n            )}\n            tabIndex={0}\n          >\n            <span style={{ paddingRight: '5px', paddingBottom: '2px' }}>\n              <a className={`link ${isLarge ? 'SRC-whiteText' : ''}`}>\n                {`${userName}@synapse.org`}\n              </a>\n            </span>\n            <IconCopy />\n          </p>\n        )}\n        {ORCID && (\n          <a\n            href={ORCID}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={{ width: 'fit-content' }}\n            tabIndex={0}\n            className={isLarge ? 'SRC-whiteText' : ''}\n          >\n            View ORCID\n          </a>\n        )}\n      </div>\n      {/* conditionally render menu actions, if its not defined then we don't show the button */}\n      {menuActions && (\n        <React.Fragment>\n          <span\n            role=\"menu\"\n            className={`SRC-extraPadding SRC-hand-cursor SRC-primary-background-color-hover SRC-inlineBlock\n              SRC-cardMenuButton ${\n                isContextMenuOpen ? 'SRC-primary-background-color' : ''\n              }`}\n            style={{ outline: 'none' }}\n            tabIndex={0}\n            onClick={toggleContextMenu}\n            onKeyPress={toggleContextMenu}\n          >\n            <span\n              className={\n                isContextMenuOpen || isLarge\n                  ? 'SRC-whiteText'\n                  : 'SRC-primary-text-color'\n              }\n            >\n              <IconSvg options={{ icon: 'verticalEllipsis' }} />\n            </span>\n          </span>\n          {isContextMenuOpen && (\n            <UserCardContextMenu\n              menuActions={menuActions}\n              userProfile={userProfile}\n            />\n          )}\n        </React.Fragment>\n      )}\n      {!menuActions && <span style={{ padding: '0px 0px 0px 35px' }} />}\n    </React.Fragment>\n  )\n\n  if (!isLarge) {\n    return (\n      <div\n        style={{ border: '1px solid #DDDDDF', backgroundColor: 'white' }}\n        className={`cardContainer SRC-userCard SRC-userCardMediumUp ${\n          isContextMenuOpen ? 'SRC-hand-cursor' : ''\n        }`}\n        onClick={isContextMenuOpen ? toggleContextMenu : undefined}\n      >\n        {mediumCard}\n      </div>\n    )\n  }\n  // else return medium card inside large component\n  // when the component is large we have to set the click handler to wrap both the top and bottom portion\n  return (\n    <div\n      className={\n        isContextMenuOpen ? 'SRC-hand-cursor cardContainer' : 'cardContainer'\n      }\n      onClick={isContextMenuOpen ? toggleContextMenu : undefined}\n    >\n      <div\n        className={`SRC-primary-background-color SRC-userCard SRC-userCardMediumUp ${\n          isContextMenuOpen ? 'SRC-hand-cursor' : ''\n        }`}\n      >\n        {mediumCard}\n      </div>\n      {isLarge ? (\n        <UserCardLarge userProfile={userProfile} isCertified={isCertified} />\n      ) : (\n        false\n      )}\n    </div>\n  )\n}\n\nexport const LoadingUserCardMedium: React.FunctionComponent = () => {\n  return (\n    <div\n      className=\"cardContainer SRC-userCard SRC-userCardMediumUp\"\n      style={{ width: '380px' }}\n    >\n      <Skeleton variant=\"circle\" width=\"80px\" height=\"80px\" />\n      <div style={{ width: '250px' }}>\n        <SkeletonTable numCols={1} numRows={2} />\n      </div>\n    </div>\n  )\n}\n\nexport default UserCardMedium\n","import React, {\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport { Overlay } from 'react-bootstrap'\nimport { Placement } from 'react-bootstrap/esm/Overlay'\n\nfunction resetTimer(timer: NodeJS.Timeout | null) {\n  if (timer) {\n    clearTimeout(timer)\n  }\n}\n\nconst DEFAULT_DELAY_SHOW_MS = 250\nconst DEFAULT_DELAY_HIDE_MS = 500\n\nexport function useOverlay(\n  children: JSX.Element,\n  targetRef: RefObject<any>,\n  delayShow = DEFAULT_DELAY_SHOW_MS,\n  delayHide = DEFAULT_DELAY_HIDE_MS,\n  placement: Placement = 'top-start',\n) {\n  const isMounted = useRef(false)\n  const timer = useRef<NodeJS.Timeout | null>(null)\n  const [isShowing, setIsShowing] = useState(false)\n\n  useEffect(() => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n\n  const toggle = useCallback(\n    (show: boolean = isShowing, withDelay: boolean = true) => {\n      resetTimer(timer.current)\n      if (withDelay) {\n        timer.current = setTimeout(\n          () => {\n            if (isMounted.current) {\n              setIsShowing(show)\n            }\n          },\n          show ? delayShow : delayHide,\n        )\n      } else {\n        setIsShowing(show)\n      }\n    },\n    [delayHide, delayShow, isShowing],\n  )\n\n  const toggleShow = useCallback(\n    (withDelay: boolean = true) => {\n      toggle(true, withDelay)\n    },\n    [toggle],\n  )\n\n  const toggleHide = useCallback(\n    (withDelay: boolean = true) => {\n      toggle(false, withDelay)\n    },\n    [toggle],\n  )\n\n  const OverlayComponent = useCallback(\n    () => (\n      <Overlay\n        target={targetRef.current}\n        show={isShowing}\n        placement={placement}\n      >\n        {({ placement, arrowProps, show: _show, popper, ...props }) => {\n          return (\n            <div\n              className=\"bootstrap-4-backport\"\n              onMouseEnter={() => {\n                toggle(true, false)\n              }}\n              onMouseLeave={() => {\n                toggleHide(true)\n              }}\n              {...props}\n              style={{\n                ...props.style,\n                width: 'max-content',\n                minWidth: '300px',\n              }}\n            >\n              {children}\n            </div>\n          )\n        }}\n      </Overlay>\n    ),\n    [children, isShowing, placement, targetRef, toggle, toggleHide],\n  )\n\n  return { OverlayComponent, isShowing, toggleShow, toggleHide, toggle }\n}\n","import React, { useRef } from 'react'\nimport { getColor } from '../utils/functions/getUserData'\nimport { UserProfile } from '../utils/synapseTypes'\nimport UserCardMedium from './UserCardMedium'\nimport { useOverlay } from '../utils/hooks/useOverlay'\nimport { Skeleton } from '@material-ui/lab'\n\nconst TIMER_DELAY_SHOW = 250 // milliseconds\nconst TIMER_DELAY_HIDE = 500\n\nexport type AvatarSize = 'SMALL' | 'MEDIUM' | 'LARGE'\n\nexport type AvatarProps = {\n  userProfile: UserProfile\n  avatarSize?: AvatarSize\n  imageURL?: string\n  showCardOnHover?: boolean\n  isLoadingAvatar?: boolean\n}\n\nexport const Avatar: React.FunctionComponent<AvatarProps> = ({\n  userProfile,\n  avatarSize = 'LARGE',\n  imageURL,\n  showCardOnHover = false,\n  isLoadingAvatar = false,\n}) => {\n  const target = useRef(null)\n\n  const mediumUserCard = (\n    <UserCardMedium userProfile={userProfile} imageURL={imageURL} />\n  )\n  const {\n    OverlayComponent,\n    isShowing: isShowingOverlay,\n    toggleShow,\n    toggleHide,\n  } = useOverlay(mediumUserCard, target, TIMER_DELAY_SHOW, TIMER_DELAY_HIDE)\n\n  let sizeClass\n  switch (avatarSize) {\n    case 'SMALL':\n      sizeClass = 'SRC-userImgSmall'\n      break\n    case 'MEDIUM':\n      sizeClass = 'SRC-userImgMedium'\n      break\n    case 'LARGE':\n      sizeClass = 'SRC-userImg'\n      break\n    default:\n      break\n  }\n\n  const cursorStyle = showCardOnHover ? 'pointer' : 'unset'\n\n  const hasProfileImage = !!imageURL\n\n  const conditionalStyles: React.CSSProperties = hasProfileImage\n    ? {\n        backgroundImage: `url(${imageURL})`,\n      }\n    : { background: getColor(userProfile.userName) }\n\n  if (isLoadingAvatar) {\n    return <Skeleton className={sizeClass} variant=\"circle\" />\n  }\n\n  let content: JSX.Element | string = <></>\n\n  if (!hasProfileImage) {\n    content = userProfile.firstName\n      ? userProfile.firstName[0]\n      : userProfile.userName[0]\n  }\n\n  return (\n    <>\n      {showCardOnHover && <OverlayComponent />}\n      <div\n        ref={target}\n        role=\"img\"\n        onMouseEnter={() => toggleShow()}\n        onMouseLeave={() => toggleHide()}\n        onClick={event => {\n          if (showCardOnHover) {\n            event.stopPropagation()\n          }\n          isShowingOverlay ? toggleHide(false) : toggleShow(false)\n        }}\n        className={`${sizeClass} SRC-centerContentInline`}\n        style={{\n          cursor: cursorStyle,\n          ...conditionalStyles,\n        }}\n      >\n        {content}\n      </div>\n    </>\n  )\n}\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { SynapseConstants } from '../utils'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../utils/functions/getEndpoint'\nimport { useGetUserBundle } from '../utils/hooks/SynapseAPI/useUserBundle'\nimport { useOverlay } from '../utils/hooks/useOverlay'\nimport { UserProfile } from '../utils/synapseTypes/'\nimport { Avatar, AvatarSize } from './Avatar'\nimport IconSvg from './IconSvg'\nimport UserCardMedium from './UserCardMedium'\n\nexport type UserCardSmallProps = {\n  userProfile: UserProfile\n  showCardOnHover?: boolean\n  disableLink?: boolean\n  link?: string\n  showAccountLevelIcon?: boolean\n  openLinkInNewTab?: boolean\n  withAvatar?: boolean\n  avatarSize?: AvatarSize\n  isLoadingAvatar?: boolean\n  imageURL?: string\n  className?: string\n  showFullName?: boolean\n}\n\nconst TIMER_DELAY_SHOW = 250 // milliseconds\nconst TIMER_DELAY_HIDE = 500\n\nexport const UserCardSmall = (props: UserCardSmallProps) => {\n  const {\n    userProfile,\n    showCardOnHover = true,\n    disableLink,\n    showAccountLevelIcon = false,\n    openLinkInNewTab,\n    withAvatar = false,\n    avatarSize = 'SMALL',\n    imageURL,\n    className,\n    showFullName = false,\n    isLoadingAvatar,\n    ...rest\n  } = props\n  let { link } = props\n\n  const [accountLevelIcon, setAccountLevelIcon] = useState<JSX.Element>(\n    <IconSvg options={{ icon: 'accountRegistered' }} />,\n  )\n  const target = useRef(null)\n  const certificationOrVerification =\n    SynapseConstants.USER_BUNDLE_MASK_IS_CERTIFIED |\n    SynapseConstants.USER_BUNDLE_MASK_IS_VERIFIED\n\n  const { data: userBundle } = useGetUserBundle(\n    userProfile.ownerId,\n    certificationOrVerification,\n  )\n\n  useEffect(() => {\n    if (userBundle?.isCertified) {\n      setAccountLevelIcon(<IconSvg options={{ icon: 'accountCertified' }} />)\n    }\n    if (userBundle?.isVerified) {\n      setAccountLevelIcon(<IconSvg options={{ icon: 'accountValidated' }} />)\n    }\n  }, [showAccountLevelIcon, userBundle?.isCertified, userBundle?.isVerified])\n\n  const mediumUserCard = useMemo(\n    () => (\n      <UserCardMedium userProfile={userProfile} imageURL={imageURL} {...rest} />\n    ),\n    [imageURL, rest, userProfile],\n  )\n\n  if (link == null) {\n    link = `${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Profile:${userProfile.ownerId}`\n  }\n\n  const { OverlayComponent, toggleShow, toggleHide } = useOverlay(\n    mediumUserCard,\n    target,\n    TIMER_DELAY_SHOW,\n    TIMER_DELAY_HIDE,\n  )\n\n  const avatar = withAvatar ? (\n    <span className=\"SRC-inline-avatar\">\n      <Avatar\n        userProfile={userProfile}\n        avatarSize={avatarSize}\n        imageURL={imageURL}\n        isLoadingAvatar={isLoadingAvatar}\n      />\n    </span>\n  ) : (\n    <></>\n  )\n\n  const fullName = showFullName ? (\n    <span className={'user-fullname'}>\n      &nbsp;\n      {`${userProfile.firstName ?? ''}`}&nbsp;{`${userProfile.lastName ?? ''}`}\n    </span>\n  ) : (\n    <></>\n  )\n\n  return showCardOnHover ? (\n    <>\n      <OverlayComponent />\n      <a\n        ref={target}\n        href={disableLink ? undefined : link}\n        onMouseEnter={() => toggleShow()}\n        onMouseLeave={() => toggleHide()}\n        onClick={event => {\n          event.preventDefault()\n          // if someone explicitly set the disable link,\n          // we just return without going to the Synapse's user profile page\n          if (disableLink) {\n            return\n          }\n          window.open(link, '_blank')\n        }}\n        className={`SRC-userCard UserCardSmall ${className ?? ''}`}\n        style={{ whiteSpace: 'nowrap' }}\n      >\n        {avatar}\n        {`@${userProfile.userName}`}\n        {fullName}\n        {showAccountLevelIcon && (\n          <span className={'account-level-icon'}>{accountLevelIcon}</span>\n        )}\n      </a>\n    </>\n  ) : disableLink ? (\n    <span\n      className=\"SRC-userCard UserCardSmall SRC-boldText\"\n      style={{ cursor: 'unset' }}\n    >\n      {avatar}\n      {`@${userProfile.userName}`}\n      {fullName}\n    </span>\n  ) : (\n    <a>\n      {avatar}\n      {/* eslint-disable-next-line react/jsx-no-target-blank*/}\n      <a\n        className=\"SRC-userCard UserCardSmall\"\n        target={openLinkInNewTab ? '_blank' : ''}\n        rel={openLinkInNewTab ? 'noreferrer' : ''}\n        href={link}\n      >\n        {`@${userProfile.userName}`}\n      </a>\n    </a>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { SynapseClient, SynapseConstants } from '../utils/'\nimport { useGetUserProfile } from '../utils/hooks/SynapseAPI/useUserBundle'\nimport usePreFetchResource from '../utils/hooks/usePreFetchResource'\nimport { getPrincipalAliasRequest } from '../utils/SynapseClient'\nimport { useSynapseContext } from '../utils/SynapseContext'\nimport { UserProfile } from '../utils/synapseTypes/'\nimport { Avatar, AvatarProps, AvatarSize } from './Avatar'\nimport { MenuAction } from './UserCardContextMenu'\nimport UserCardMedium, { UserCardMediumProps } from './UserCardMedium'\nimport { UserCardSmall, UserCardSmallProps } from './UserCardSmall'\n\nexport type UserCardSize =\n  | 'AVATAR'\n  | 'SMALL USER CARD'\n  | 'MEDIUM USER CARD'\n  | 'LARGE USER CARD'\n\nexport type UserCardProps = {\n  /** A UserProfile may be used for data for the card. You must supply one of `userProfile`, `alias`, `ownerId` */\n  userProfile?: UserProfile\n  /** An alias that resolves the ownerId for the UserProfile. You must supply one of `userProfile`, `alias`, `ownerId` */\n  alias?: string\n  /** The unique ownerId of the UserProfile. You must supply one of `userProfile`, `alias`, `ownerId` */\n  ownerId?: string\n  /** Whether or not to hide the user's Synapse email address */\n  hideEmail?: boolean\n  /** If set, the corresponding image will be shown for the user. */\n  preSignedURL?: string\n  /** Specifies the card size */\n  size: UserCardSize\n  /** For the small user card or avatar, shows the medium user card on mouseover */\n  showCardOnHover?: boolean\n  /** For the small user card, hides the tooltip observed when hovering over the profile image. */\n  hideTooltip?: boolean\n  /** Specifies the dropdown menu functionality for the ellipsis on medium/large cards. If field === 'SEPERATOR' then a break will occur in the menu. If left undefined, the menu will not render to the screen. */\n  menuActions?: MenuAction[]\n  /** The link to point to on the user name, defaults to https://www.synapse.org/#!Profile:${userProfile.ownerId} */\n  link?: string\n  openLinkInNewTab?: boolean\n  /** Disables the `@username` link for the small user card (if `showCardOnHover` is false). For the medium user card, disables linking the user's name to their profile (or other specified destination) */\n  disableLink?: boolean\n  isCertified?: boolean\n  isValidated?: boolean\n  /** Determines the size of the avatar when size === 'AVATAR' or (size === 'SMALL' and withAvatar is true) */\n  avatarSize?: AvatarSize\n  /** Whether to show the avatar with the name for the small user card */\n  withAvatar?: boolean\n  /** Whether to show the full name in the small user card */\n  showFullName?: boolean\n  className?: string\n}\n\nexport const UserCard: React.FunctionComponent<UserCardProps> = (\n  props: UserCardProps,\n) => {\n  const {\n    userProfile: initialProfile,\n    preSignedURL: initialPreSignedURL,\n    size,\n    ownerId,\n    alias,\n    ...rest\n  } = props\n  const { accessToken } = useSynapseContext()\n  const [principalId, setPrincipalId] = useState(ownerId)\n  const [isLoading, setIsLoading] = useState(true)\n  // if null, the user has no profile image. if undefined, the profile image is still being fetched\n  const [fetchedPresignedUrl, setFetchedPresignedUrl] = useState<\n    string | null | undefined\n  >(undefined)\n\n  // If we weren't provided an initialProfile, fetch from Synapse\n  const { data: fetchedProfile } = useGetUserProfile(principalId!, {\n    enabled: !!principalId && !initialProfile,\n  })\n  const userProfile = initialProfile ?? fetchedProfile\n\n  useEffect(() => {\n    let isCanceled = false\n    // If we weren't provided an inital presigned URL for the image, fetch from Synapse.\n    if (!initialPreSignedURL && (ownerId || userProfile?.ownerId)) {\n      SynapseClient.getProfilePicPreviewPresignedUrl(\n        (ownerId ?? userProfile?.ownerId)!,\n      ).then(result => {\n        if (!isCanceled) {\n          setFetchedPresignedUrl(result)\n        }\n      })\n    }\n    return () => {\n      isCanceled = true\n    }\n  }, [initialPreSignedURL, ownerId, userProfile?.ownerId])\n\n  const presignedUrl = initialPreSignedURL ?? fetchedPresignedUrl\n\n  const mayHaveProfileImage = presignedUrl !== null\n  const imageURL = usePreFetchResource(\n    mayHaveProfileImage ? presignedUrl : undefined,\n  )\n  const isLoadingAvatar = mayHaveProfileImage && !imageURL\n\n  useEffect(() => {\n    let isCanceled = false\n    if (userProfile) {\n      setIsLoading(false)\n    } else if (alias) {\n      // Before we can get the profile, we must get the principal ID using the alias\n      getPrincipalAliasRequest(accessToken, alias, 'USER_NAME').then(\n        aliasData => {\n          if (!isCanceled) {\n            setPrincipalId(aliasData.principalId.toString())\n          }\n        },\n      )\n    }\n    return () => {\n      isCanceled = true\n    }\n  }, [userProfile, alias, accessToken])\n\n  function Card(props: {\n    cardSize: UserCardSize\n    propsForChild: AvatarProps | UserCardSmallProps | UserCardMediumProps\n  }) {\n    const { cardSize, propsForChild } = props\n    switch (cardSize) {\n      case SynapseConstants.AVATAR:\n        return <Avatar {...propsForChild} />\n      case SynapseConstants.SMALL_USER_CARD:\n        return <UserCardSmall {...propsForChild} />\n      case SynapseConstants.MEDIUM_USER_CARD:\n        return <UserCardMedium {...propsForChild} />\n      case SynapseConstants.LARGE_USER_CARD:\n        return <UserCardMedium isLarge={true} {...propsForChild} />\n      default:\n        return <span />\n    }\n  }\n\n  return isLoading || userProfile == null ? (\n    <></>\n  ) : (\n    <Card\n      cardSize={size}\n      propsForChild={{\n        userProfile,\n        imageURL,\n        isLoadingAvatar,\n        ...rest,\n      }}\n    />\n  )\n}\nexport default UserCard\n"],"names":["useEffect","useState","SynapseClient.getUserProfiles","svg","userProfile","_jsx","callback","field","isCertified","summary","industry","location","url","_jsxs","CertifiedUserIcon","event","navigator","onCopy","menuActions","imageURL","link","isValidated","isLoadingAvatar","useRef","setShowModal","setTimeout","displayName","userName","firstName","lastName","position","company","toggleContextMenu","window","userBundle","setIsContextMenuOpen","name","showModal","linkLocation","avatar","validatedUserProfileTooltipId","copyToClipboardRef","ORCID","undefined","mediumCard","timer","clearTimeout","DEFAULT_DELAY_SHOW_MS","DEFAULT_DELAY_HIDE_MS","children","targetRef","delayShow","delayHide","placement","isMounted","isShowing","setIsShowing","current","toggle","useCallback","show","withDelay","resetTimer","toggleShow","toggleHide","OverlayComponent","arrowProps","_show","popper","props","style","width","minWidth","TIMER_DELAY_SHOW","TIMER_DELAY_HIDE","isShowingOverlay","avatarSize","sizeClass","_Fragment","content","target","cursorStyle","conditionalStyles","disableLink","openLinkInNewTab","className","rest","SynapseConstants.USER_BUNDLE_MASK_IS_CERTIFIED","SynapseConstants.USER_BUNDLE_MASK_IS_VERIFIED","setAccountLevelIcon","accountLevelIcon","initialProfile","initialPreSignedURL","size","ownerId","alias","accessToken","fetchedProfile","SynapseClient","setFetchedPresignedUrl","isCanceled","setIsLoading","getPrincipalAliasRequest","setPrincipalId","cardSize","propsForChild","SynapseConstants.SMALL_USER_CARD","SynapseConstants.MEDIUM_USER_CARD","SynapseConstants.LARGE_USER_CARD"],"mappings":"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"}