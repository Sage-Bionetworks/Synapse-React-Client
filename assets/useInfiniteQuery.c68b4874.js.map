{"version":3,"file":"useInfiniteQuery.c68b4874.js","sources":["../../node_modules/react-query/es/core/infiniteQueryObserver.js","../../node_modules/react-query/es/react/useInfiniteQuery.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { QueryObserver } from './queryObserver';\nimport { hasNextPage, hasPreviousPage, infiniteQueryBehavior } from './infiniteQueryBehavior';\nexport var InfiniteQueryObserver = /*#__PURE__*/function (_QueryObserver) {\n  _inheritsLoose(InfiniteQueryObserver, _QueryObserver);\n\n  // Type override\n  // Type override\n  // Type override\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  function InfiniteQueryObserver(client, options) {\n    return _QueryObserver.call(this, client, options) || this;\n  }\n\n  var _proto = InfiniteQueryObserver.prototype;\n\n  _proto.bindMethods = function bindMethods() {\n    _QueryObserver.prototype.bindMethods.call(this);\n\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  };\n\n  _proto.setOptions = function setOptions(options, notifyOptions) {\n    _QueryObserver.prototype.setOptions.call(this, _extends({}, options, {\n      behavior: infiniteQueryBehavior()\n    }), notifyOptions);\n  };\n\n  _proto.getOptimisticResult = function getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return _QueryObserver.prototype.getOptimisticResult.call(this, options);\n  };\n\n  _proto.fetchNextPage = function fetchNextPage(options) {\n    var _options$cancelRefetc;\n\n    return this.fetch({\n      // TODO consider removing `?? true` in future breaking change, to be consistent with `refetch` API (see https://github.com/tannerlinsley/react-query/issues/2617)\n      cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n      throwOnError: options == null ? void 0 : options.throwOnError,\n      meta: {\n        fetchMore: {\n          direction: 'forward',\n          pageParam: options == null ? void 0 : options.pageParam\n        }\n      }\n    });\n  };\n\n  _proto.fetchPreviousPage = function fetchPreviousPage(options) {\n    var _options$cancelRefetc2;\n\n    return this.fetch({\n      // TODO consider removing `?? true` in future breaking change, to be consistent with `refetch` API (see https://github.com/tannerlinsley/react-query/issues/2617)\n      cancelRefetch: (_options$cancelRefetc2 = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc2 : true,\n      throwOnError: options == null ? void 0 : options.throwOnError,\n      meta: {\n        fetchMore: {\n          direction: 'backward',\n          pageParam: options == null ? void 0 : options.pageParam\n        }\n      }\n    });\n  };\n\n  _proto.createResult = function createResult(query, options) {\n    var _state$data, _state$data2, _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet;\n\n    var state = query.state;\n\n    var result = _QueryObserver.prototype.createResult.call(this, query, options);\n\n    return _extends({}, result, {\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),\n      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),\n      isFetchingNextPage: state.isFetching && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === 'forward',\n      isFetchingPreviousPage: state.isFetching && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === 'backward'\n    });\n  };\n\n  return InfiniteQueryObserver;\n}(QueryObserver);","import { InfiniteQueryObserver } from '../core/infiniteQueryObserver';\nimport { parseQueryArgs } from '../core/utils';\nimport { useBaseQuery } from './useBaseQuery'; // HOOK\n\nexport function useInfiniteQuery(arg1, arg2, arg3) {\n  var options = parseQueryArgs(arg1, arg2, arg3);\n  return useBaseQuery(options, InfiniteQueryObserver);\n}"],"names":[],"mappings":"+LAIO,GAAI,GAAqC,SAAU,EAAgB,CACxE,EAAe,EAAuB,CAAc,EAMpD,WAA+B,EAAQ,EAAS,CAC9C,MAAO,GAAe,KAAK,KAAM,EAAQ,CAAO,GAAK,IACtD,CAED,GAAI,GAAS,EAAsB,UAEnC,SAAO,YAAc,UAAuB,CAC1C,EAAe,UAAU,YAAY,KAAK,IAAI,EAE9C,KAAK,cAAgB,KAAK,cAAc,KAAK,IAAI,EACjD,KAAK,kBAAoB,KAAK,kBAAkB,KAAK,IAAI,CAC7D,EAEE,EAAO,WAAa,SAAoB,EAAS,EAAe,CAC9D,EAAe,UAAU,WAAW,KAAK,KAAM,EAAS,CAAE,EAAE,EAAS,CACnE,SAAU,EAAuB,CACvC,CAAK,EAAG,CAAa,CACrB,EAEE,EAAO,oBAAsB,SAA6B,EAAS,CACjE,SAAQ,SAAW,IACZ,EAAe,UAAU,oBAAoB,KAAK,KAAM,CAAO,CAC1E,EAEE,EAAO,cAAgB,SAAuB,EAAS,CACrD,GAAI,GAEJ,MAAO,MAAK,MAAM,CAEhB,cAAgB,GAAwB,GAAW,KAAO,OAAS,EAAQ,gBAAkB,KAAO,EAAwB,GAC5H,aAAc,GAAW,KAAO,OAAS,EAAQ,aACjD,KAAM,CACJ,UAAW,CACT,UAAW,UACX,UAAW,GAAW,KAAO,OAAS,EAAQ,SAC/C,CACF,CACP,CAAK,CACL,EAEE,EAAO,kBAAoB,SAA2B,EAAS,CAC7D,GAAI,GAEJ,MAAO,MAAK,MAAM,CAEhB,cAAgB,GAAyB,GAAW,KAAO,OAAS,EAAQ,gBAAkB,KAAO,EAAyB,GAC9H,aAAc,GAAW,KAAO,OAAS,EAAQ,aACjD,KAAM,CACJ,UAAW,CACT,UAAW,WACX,UAAW,GAAW,KAAO,OAAS,EAAQ,SAC/C,CACF,CACP,CAAK,CACL,EAEE,EAAO,aAAe,SAAsB,EAAO,EAAS,CAC1D,GAAI,GAAa,EAAc,EAAkB,EAAuB,EAAmB,EAEvF,EAAQ,EAAM,MAEd,EAAS,EAAe,UAAU,aAAa,KAAK,KAAM,EAAO,CAAO,EAE5E,MAAO,GAAS,CAAE,EAAE,EAAQ,CAC1B,cAAe,KAAK,cACpB,kBAAmB,KAAK,kBACxB,YAAa,EAAY,EAAU,GAAc,EAAM,OAAS,KAAO,OAAS,EAAY,KAAK,EACjG,gBAAiB,EAAgB,EAAU,GAAe,EAAM,OAAS,KAAO,OAAS,EAAa,KAAK,EAC3G,mBAAoB,EAAM,YAAgB,IAAmB,EAAM,YAAc,MAAiB,GAAwB,EAAiB,YAAc,KAAjE,OAAiF,EAAsB,aAAe,UAC9M,uBAAwB,EAAM,YAAgB,IAAoB,EAAM,YAAc,MAAiB,GAAwB,EAAkB,YAAc,KAAlE,OAAkF,EAAsB,aAAe,UAC1N,CAAK,CACL,EAES,CACT,EAAE,CAAa,ECjFR,WAA0B,EAAM,EAAM,EAAM,CACjD,GAAI,GAAU,EAAe,EAAM,EAAM,CAAI,EAC7C,MAAO,GAAa,EAAS,CAAqB,CACpD"}