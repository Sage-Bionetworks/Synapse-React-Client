{"version":3,"file":"UserOrTeamBadge.3d230f40.js","sources":["../../src/lib/utils/hooks/SynapseAPI/user/useUserGroupHeader.ts","../../src/lib/containers/TeamBadge.tsx","../../src/lib/containers/UserOrTeamBadge.tsx"],"sourcesContent":["import { useQuery, UseQueryOptions } from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { UserGroupHeader } from '../../../synapseTypes'\n\nexport function useGetUserGroupHeader(\n  principalId: string,\n  options?: UseQueryOptions<UserGroupHeader, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryKey = ['userGroupHeader', principalId]\n\n  return useQuery<UserGroupHeader, SynapseClientError>(\n    queryKey,\n    async () => {\n      const responsePage = await SynapseClient.getGroupHeadersBatch(\n        [principalId],\n        accessToken,\n      )\n      if (responsePage.children.length !== 1) {\n        throw new Error(\n          `Expected one response in useGetUserGroupHeader for id: ${principalId}, got ${responsePage.children.length}`,\n        )\n      }\n      return responsePage.children[0]\n    },\n    options,\n  )\n}\n","import React from 'react'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../utils/functions/getEndpoint'\nimport IconSvg from './IconSvg'\n\nexport type TeamBadgeProps = {\n  teamId: string | number\n  teamName: string\n  disableHref?: boolean\n}\n\nexport default function TeamBadge(props: TeamBadgeProps) {\n  const { teamId, teamName, disableHref } = props\n\n  return (\n    <span>\n      <IconSvg options={{ icon: 'team' }} />\n      <a\n        style={{ marginLeft: '5px' }}\n        href={\n          disableHref\n            ? undefined\n            : `${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Team:${teamId}`\n        }\n      >\n        {teamName}\n      </a>\n    </span>\n  )\n}\n","import { Skeleton } from '@material-ui/lab'\nimport React, { useEffect, useState } from 'react'\nimport { useGetUserGroupHeader } from '../utils/hooks/SynapseAPI/user/useUserGroupHeader'\nimport { SMALL_USER_CARD } from '../utils/SynapseConstants'\nimport { useSynapseContext } from '../utils/SynapseContext'\nimport { UserGroupHeader } from '../utils/synapseTypes'\nimport TeamBadge from './TeamBadge'\nimport UserCard from './UserCard'\n\ntype UserOrTeamBadgeProps = {\n  /* The principal ID of the user or team. Required if userGroupHeader is undefined. */\n  principalId?: string | number\n  /* The userGroupHeader of the user or team. Required if principalId is undefined. */\n  userGroupHeader?: UserGroupHeader\n  showFullName?: boolean\n  disableHref?: boolean\n}\n\nexport default function UserOrTeamBadge(props: UserOrTeamBadgeProps) {\n  let principalId = props.principalId\n  const {\n    disableHref,\n    showFullName,\n    userGroupHeader: providedUserGroupHeader,\n  } = props\n\n  if (principalId == null) {\n    principalId = providedUserGroupHeader?.ownerId\n  }\n\n  const { accessToken } = useSynapseContext()\n  const [userGroupHeader, setUserGroupHeader] = useState<\n    UserGroupHeader | undefined\n  >(providedUserGroupHeader)\n\n  const { data: fetchedUserGroupHeader } = useGetUserGroupHeader(\n    (principalId ?? '').toString(),\n    {\n      enabled: !providedUserGroupHeader,\n    },\n  )\n\n  useEffect(() => {\n    if (principalId && userGroupHeader == undefined && fetchedUserGroupHeader) {\n      setUserGroupHeader(fetchedUserGroupHeader)\n    }\n  }, [accessToken, principalId, userGroupHeader, fetchedUserGroupHeader])\n\n  if (principalId == null && providedUserGroupHeader == null) {\n    console.error(\n      'Expected one of principalId or userGroupHeader to be defined but both were null or undefined',\n    )\n    return <></>\n  } else if (userGroupHeader === undefined) {\n    return <Skeleton width={125} height={30} />\n  } else if (userGroupHeader.isIndividual) {\n    return (\n      <UserCard\n        ownerId={principalId!.toString()}\n        size={SMALL_USER_CARD}\n        disableLink={disableHref}\n        showFullName={showFullName}\n      />\n    )\n  } else {\n    return (\n      <TeamBadge\n        teamId={principalId!}\n        teamName={userGroupHeader.userName}\n        disableHref={disableHref}\n      />\n    )\n  }\n}\n"],"names":["SynapseClient.getGroupHeadersBatch","teamId","teamName","disableHref","_jsxs","_jsx","showFullName","providedUserGroupHeader","principalId","accessToken","fetchedUserGroupHeader","useEffect","setUserGroupHeader","console","_Fragment","SMALL_USER_CARD","userName"],"mappings":"wSAMO,WACL,EACA,EACA,CACM,KAAA,CAAE,eAAgB,IAGjB,MAAA,GAFU,CAAC,kBAAmB,CAAW,EAI9C,SAAY,CACV,KAAM,GAAe,KAAMA,GACzB,CAAC,CAAW,EACZ,CACF,EACI,GAAA,EAAa,SAAS,SAAW,EACnC,KAAM,IAAI,OACR,0DAA0D,UAAoB,EAAa,SAAS,QACtG,EAEF,MAAO,GAAa,SAAS,IAE/B,CACF,CACF,CCnBA,WAAA,EAAA,CACE,KAAA,CAAM,SAAEC,WAAQC,eAAUC,EAE1B,MAAAC,GAAA,OAAA,CACE,SAAA,CAAAC,EAAA,EAAA,CACE,QAAA,CAAkB,KAAA,MAAQ,CAAR,CAAA,EAAAA,EAAA,IAAA,CAClB,MAAA,CACS,WAAA,KAAc,EAAd,KAAA,EAAA,OAAA,GAAA,EAAA,gBAAA,IAI6CJ,SAAAA,CAGnDC,CAAAA,CAAAA,CAVL,CAAA,CAcH,6lBC3BD,KAAA,GAAA,OAAA,MAAA,kCAiBA,WAAA,EAAA,CACE,GAAA,GAAA,EAAA,YACA,KAAA,CAAM,cACJC,eACAG,gBAAAA,GACiBC,EAGnB,AAAA,GAAA,MACEC,GAAAA,iBAAAA,SAGF,KAAA,CAAM,eAAEC,EAAAA,EACR,CAAA,EAAA,GAAA,EAAA,CAAA,EAIA,CAAM,KAAA,GAAQC,EAAAA,WAAAA,IAAAA,SAAAA,EAAAA,CAEZ,QAAA,CAAA,CACYH,CAAAA,EAUd,MANAI,GAAAA,IAAAA,CACE,AAAA,GAAA,GAAA,MAAA,GACEC,EAAAA,CAAAA,CACD,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA,EAGH,GAAA,MAAA,GAAA,KACEC,SAAAA,MAAAA,8FAAAA,EAGAR,EAAAS,EAAA,CAAA,CAAA,GAAA,IAAA,OAEAT,EAAA,EAAA,CAAO,MAAA,IAAiB,OAAA,EAAa,CAAA,EAArC,EAAA,aAEAA,EAAA,EAAA,CACE,QAAA,EAAA,SAAA,EAAA,KAAA,EAEQU,YAAAA,EACOZ,cACb,CAAA,EAIJE,EAAA,EAAA,CACE,OAAA,EACUG,SAAAA,EAAAA,SACkBQ,aAC1B,CAAA,CAIP"}