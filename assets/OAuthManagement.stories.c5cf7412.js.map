{"version":3,"file":"OAuthManagement.stories.c5cf7412.js","sources":["../../src/lib/utils/hooks/SynapseAPI/oauth/useOAuthClient.ts","../../src/lib/containers/oauth/CreateOAuthClient.tsx","../../src/lib/containers/oauth/OAuthManagement.tsx"],"sourcesContent":["import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { OAuthClient, OAuthClientList } from '../../../synapseTypes/OAuthClient'\n\nconst oAuthQueryKeys = {\n  all: (accessToken: string) => ['oAuthClient', accessToken],\n}\n\nexport function useGetOAuthClientInfinite(\n  options?: UseInfiniteQueryOptions<OAuthClientList, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  return useInfiniteQuery<OAuthClientList, SynapseClientError>(\n    oAuthQueryKeys.all(accessToken!),\n    async context =>\n      await SynapseClient.getOAuth2(accessToken!, context.pageParam),\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useDeleteOAuthClient(\n  options?: UseMutationOptions<void, SynapseClientError, string>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, string>(\n    (clientId: string) =>\n      SynapseClient.deleteOAuthClient(clientId, accessToken!),\n    {\n      ...options,\n      onSuccess: async (updatedClient, clientId, ctx) => {\n        await queryClient.invalidateQueries(oAuthQueryKeys.all(accessToken!))\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedClient, clientId, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useMutateOAuthClient(\n  options?: UseMutationOptions<OAuthClient, SynapseClientError, OAuthClient>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  const update = (props: {\n    client: OAuthClient\n    action: 'UPDATE' | 'CREATE'\n  }): Promise<OAuthClient> => {\n    const { client, action } = props\n    switch (action) {\n      case 'UPDATE':\n        return SynapseClient.updateOAuthClient(client, accessToken!)\n      case 'CREATE':\n        return SynapseClient.createOAuthClient(client, accessToken!)\n      default:\n        throw Error('Unknown action')\n    }\n  }\n\n  return useMutation(update, {\n    onSuccess: async (updatedClient, variables, ctx) => {\n      await queryClient.invalidateQueries(oAuthQueryKeys.all(accessToken!))\n      if (options?.onSuccess) {\n        await options.onSuccess(updatedClient, variables.client, ctx)\n      }\n    },\n  })\n}\n","import React, { useEffect, useState } from 'react'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { Button, Col, Form, Modal, Row } from 'react-bootstrap'\nimport { displayToast } from '../ToastMessage'\nimport Typography from '../../utils/typography/Typography'\nimport { OAuthClient } from '../../utils/synapseTypes/OAuthClient'\nimport {\n  useDeleteOAuthClient,\n  useMutateOAuthClient,\n} from '../../utils/hooks/SynapseAPI'\nimport IconSvg from '../IconSvg'\nimport { WarningModal } from '../synapse_form_wrapper/WarningModal'\nimport { HelpOutlineTwoTone } from '@material-ui/icons'\nimport Tooltip from '../../utils/tooltip/Tooltip'\n\nexport type CreateOAuthModalProps = {\n  isShowingModal: boolean\n  isEdit: boolean\n  onClose: () => void\n  setSelectedClient: (client: OAuthClient | undefined) => void\n  setIsShowingConfirmModal: (a: boolean) => void\n  isShowingConfirmModal: boolean\n  client?: OAuthClient\n}\n\nexport const CreateOAuthModal: React.FunctionComponent<\n  CreateOAuthModalProps\n> = ({\n  isShowingModal = false,\n  isEdit,\n  onClose,\n  client,\n  setSelectedClient,\n  setIsShowingConfirmModal,\n  isShowingConfirmModal,\n}) => {\n  const { accessToken } = useSynapseContext()\n  const [clientName, setClientName] = useState('')\n  const [redirectUris, setRedirectUris] = useState([{ uri: '' }])\n  const [policyUri, setPolicyUri] = useState<string>()\n  const [clientUri, setClientUri] = useState<string>()\n  const [sectorUri, setSectorUri] = useState<string | undefined>()\n  const [tosUri, setTosUri] = useState<string>()\n  const [warnTrigger, setWarnTrigger] = useState(false)\n  const [isDelete, setIsDelete] = useState<boolean>(false)\n  const [updatedClient, setUpdatedClient] = useState<OAuthClient>()\n\n  const warningHeader = 'Are you absolutely sure?'\n  const warningBody =\n    'Editing this detail will render your client invalid and will require you to resubmit verification. This action cannot be undone.'\n  const uriHelpMessage = 'Click Add URI to add more Redirect URIs'\n  useEffect(() => {\n    setClientName(client?.client_name ?? '')\n    setRedirectUris(\n      client?.redirect_uris.map(str => ({ uri: str })) ?? [{ uri: '' }],\n    )\n    setPolicyUri(client?.policy_uri ?? '')\n    setClientUri(client?.client_uri ?? '')\n    setSectorUri(client?.sector_identifier_uri ?? undefined)\n    setTosUri(client?.tos_uri ?? '')\n  }, [isShowingModal])\n\n  useEffect(() => {\n    const stateArr = redirectUris?.map(str => str.uri)\n    const propArr = client?.redirect_uris\n\n    client &&\n    (stateArr?.length !== propArr?.length ||\n      !stateArr?.every(el => propArr?.includes(el)) ||\n      sectorUri != client?.sector_identifier_uri)\n      ? setWarnTrigger(true)\n      : setWarnTrigger(false)\n  }, [redirectUris, sectorUri])\n\n  const hide = () => {\n    setClientName('')\n    setRedirectUris([{ uri: '' }])\n    setPolicyUri('')\n    setClientUri('')\n    setSectorUri('')\n    setTosUri('')\n    onClose()\n  }\n\n  const hideConfirmModal = () => {\n    setIsShowingConfirmModal(false)\n    setIsDelete(false)\n    setSelectedClient(undefined)\n  }\n\n  const { mutate } = useMutateOAuthClient({\n    onSuccess: () => {\n      displayToast(`Successfully saved`, 'success')\n      hide()\n    },\n    onError: (err: any) => {\n      displayToast(err.reason as string, 'danger')\n    },\n  })\n\n  const { mutate: deleteClient } = useDeleteOAuthClient({\n    onSuccess: () => {\n      displayToast('Successfully deleted', 'success')\n      onClose()\n    },\n  })\n\n  const onCreateClient = () => {\n    try {\n      if (accessToken) {\n        const oAuthClient: OAuthClient = {\n          client_id: client?.client_id,\n          client_name: clientName,\n          redirect_uris: redirectUris?.map(str => str.uri) ?? [''],\n          policy_uri: policyUri,\n          client_uri: clientUri,\n          sector_identifier_uri: sectorUri ?? '',\n          tos_uri: tosUri,\n          etag: client?.etag,\n        }\n        setUpdatedClient(oAuthClient)\n        if (warnTrigger === true) {\n          setIsShowingConfirmModal(true)\n          hide()\n        } else {\n          if (isEdit) {\n            mutate({ action: 'UPDATE', client: oAuthClient })\n          } else {\n            mutate({ action: 'CREATE', client: oAuthClient })\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err.reason)\n    }\n  }\n\n  const handleRedirectUriAdd = () => {\n    if (redirectUris) {\n      setRedirectUris([...redirectUris, { uri: '' }])\n    }\n  }\n\n  const handleRedirectUriRemove = (index: number) => {\n    if (redirectUris) {\n      const list = [...redirectUris]\n      list.splice(index, 1)\n      setRedirectUris(list)\n    }\n  }\n\n  const handleUriChange = (e: any, index: number) => {\n    if (redirectUris) {\n      const { name, value } = e.target\n      const list = [...redirectUris]\n      list[index][name] = value\n      setRedirectUris(list)\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport\">\n      <Modal\n        show={isShowingModal}\n        animation={false}\n        backdrop=\"static\"\n        onHide={hide}\n        size=\"lg\"\n        className=\"OAuthDialog\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>\n            <Typography variant=\"headline1\">\n              {isEdit ? 'Client Details' : 'Create New OAuth Client'}\n            </Typography>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Typography variant=\"body1\">\n            To protect you and your users, your consent screen and application\n            will need to be verified by Sage Bionetworks. Before your consent\n            screen and application are verified by Sage Bionetworks, you can\n            still test your application with limitations.\n          </Typography>\n\n          {isEdit && (\n            <Typography style={{ marginTop: '16px' }} variant=\"label\">\n              Client ID: {client?.client_id}\n            </Typography>\n          )}\n          <Row>\n            <Col lg={6} md={6} sm={12} xs={12}>\n              <Form.Group className=\"required\">\n                <Form.Label htmlFor=\"clientName\">Client Name</Form.Label>\n                <Form.Control\n                  required\n                  onChange={e => setClientName(e.target.value)}\n                  placeholder=\"Client Name\"\n                  type=\"text\"\n                  value={clientName}\n                  id=\"clientName\"\n                />\n              </Form.Group>\n            </Col>\n            <Col lg={6} md={6} sm={12} xs={12}>\n              <Form.Label className=\"required\" htmlFor=\"clientUri\">\n                Client Homepage\n              </Form.Label>\n              <Form.Control\n                onChange={e => setClientUri(e.target.value)}\n                placeholder=\"https://\"\n                type=\"text\"\n                value={clientUri}\n                id=\"clientUri\"\n              />\n            </Col>\n          </Row>\n          <Row>\n            {!isEdit && (\n              <>\n                <Col lg={6} md={6} sm={12} xs={12}>\n                  <Form.Group className=\"required\">\n                    <Form.Label htmlFor=\"redirect-uri-0\">\n                      Redirect URI(s)\n                    </Form.Label>\n                    <Tooltip title={uriHelpMessage} placement=\"top\">\n                      <HelpOutlineTwoTone className={`HelpButton`} />\n                    </Tooltip>\n                    {redirectUris?.map((singleUri, idx) => (\n                      <div key={idx}>\n                        <Form.Control\n                          name=\"uri\"\n                          required\n                          id={`redirect-uri-${idx}`}\n                          onChange={e => handleUriChange(e, idx)}\n                          value={singleUri.uri}\n                          placeholder=\"https://\"\n                          type=\"text\"\n                        />\n                        {redirectUris.length > 1 && (\n                          <button onClick={() => handleRedirectUriRemove(idx)}>\n                            <IconSvg\n                              options={{ icon: 'delete', color: '#f44336' }}\n                            />\n                          </button>\n                        )}\n\n                        {redirectUris.length - 1 === idx && (\n                          <Button\n                            onClick={handleRedirectUriAdd}\n                            disabled={singleUri.uri.length === 0}\n                          >\n                            Add URI\n                          </Button>\n                        )}\n                      </div>\n                    ))}\n                  </Form.Group>\n                </Col>\n                <Col lg={6} md={6} sm={12} xs={12}>\n                  <Form.Label>Sector Identifier URI</Form.Label>\n                  <Form.Control\n                    onChange={e => setSectorUri(e.target.value)}\n                    placeholder=\"https://\"\n                    type=\"text\"\n                  />\n                </Col>\n              </>\n            )}\n          </Row>\n          <Row>\n            <Col lg={6} md={6} sm={12} xs={12}>\n              <Form.Label>Link to Privacy Policy</Form.Label>\n              <Form.Control\n                onChange={e => setPolicyUri(e.target.value)}\n                placeholder=\"https://\"\n                type=\"text\"\n                value={policyUri}\n              />\n            </Col>\n            <Col lg={6} md={6} sm={12} xs={12}>\n              <Form.Label>Links to Terms of Service</Form.Label>\n              <Form.Control\n                onChange={e => setTosUri(e.target.value)}\n                placeholder=\"https://\"\n                type=\"text\"\n                value={tosUri}\n              />\n            </Col>\n          </Row>\n          {isEdit && (\n            <div className=\"danger\">\n              <Typography\n                style={{ marginTop: '8px' }}\n                color=\"error\"\n                variant=\"headline3\"\n              >\n                DANGER ZONE\n              </Typography>\n              <Typography variant=\"smallText1\">\n                Editing the following information will render your client\n                invalid and will require you to create it again and resubmit\n                verification if needed.\n              </Typography>\n              <Row>\n                <Col lg={6} md={6} sm={12} xs={12}>\n                  <Form.Label htmlFor=\"redirect-uri-0\">\n                    Redirect URI(s)\n                  </Form.Label>\n                  <Tooltip title={uriHelpMessage} placement=\"top\">\n                    <HelpOutlineTwoTone className={`HelpButton`} />\n                  </Tooltip>\n\n                  {redirectUris?.map((singleUri, idx) => (\n                    <div key={idx}>\n                      <Form.Control\n                        id={`redirect-uri-${idx}`}\n                        required\n                        name=\"uri\"\n                        onChange={e => handleUriChange(e, idx)}\n                        value={singleUri.uri}\n                        placeholder=\"https://\"\n                        type=\"text\"\n                      />\n                      {redirectUris.length > 1 && (\n                        <button onClick={() => handleRedirectUriRemove(idx)}>\n                          <IconSvg\n                            options={{ icon: 'delete', color: '#f44336' }}\n                          />\n                        </button>\n                      )}\n\n                      {redirectUris.length - 1 === idx && (\n                        <Button\n                          onClick={handleRedirectUriAdd}\n                          disabled={singleUri.uri.length === 0}\n                        >\n                          Add Uri\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                </Col>\n                <Col lg={6} md={6} sm={12} xs={12}>\n                  <Form.Label>Sector Identifier URI</Form.Label>\n                  <Form.Control\n                    onChange={e => setSectorUri(e.target.value)}\n                    placeholder=\"https://\"\n                    type=\"text\"\n                    value={sectorUri}\n                  />\n                </Col>\n              </Row>\n\n              <button\n                className=\"delete-button\"\n                onClick={() => {\n                  setIsDelete(true)\n                  setIsShowingConfirmModal(true)\n                  hide()\n                }}\n              >\n                <IconSvg options={{ icon: 'delete', color: '#f44336' }} />\n                DELETE CLIENT\n              </button>\n            </div>\n          )}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"default\" onClick={hide}>\n            CANCEL\n          </Button>\n          <Button variant=\"primary\" onClick={onCreateClient}>\n            Save\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <WarningModal\n        show={isShowingConfirmModal}\n        title={warningHeader}\n        modalBody={warningBody}\n        onCancel={hideConfirmModal}\n        onConfirm={() => {\n          isDelete\n            ? deleteClient(client?.client_id!)\n            : mutate({ action: 'UPDATE', client: updatedClient! })\n          hideConfirmModal()\n        }}\n        confirmButtonVariant=\"danger\"\n        confirmButtonText=\"Yes, Continue\"\n      />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Button, Modal, Table } from 'react-bootstrap'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport moment from 'moment'\nimport { useGetOAuthClientInfinite } from '../../utils/hooks/SynapseAPI'\nimport { CreateOAuthModal } from './CreateOAuthClient'\nimport { OAuthClient } from '../../utils/synapseTypes/OAuthClient'\nimport WarningModal from '../synapse_form_wrapper/WarningModal'\nimport { SynapseClient } from '../../utils'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport Typography from '../../utils/typography/Typography'\nimport CopyToClipboardInput from '../CopyToClipboardInput'\nimport { displayToast } from '../ToastMessage'\n\nexport const OAuthManagement: React.FunctionComponent = () => {\n  const { accessToken } = useSynapseContext()\n  const [isShowingCreateClientModal, setIsShowingCreateClientModal] =\n    useState(false)\n  const [isEdit, setIsEdit] = useState<boolean>(false)\n  const [selectedClient, setSelectedClient] = useState<OAuthClient>()\n  const [isShowingConfirmModal, setIsShowingConfirmModal] = useState(false)\n  const [isShowingSecretWarning, setIsShowingSecretWarning] = useState(false)\n  const [isShowingSecret, setIsShowingSecret] = useState(false)\n  const [secret, setSecret] = useState<string>()\n  const [isShowingVerification, setIsShowingVerification] = useState(false)\n\n  const { data, hasNextPage, fetchNextPage } = useGetOAuthClientInfinite()\n  const oAuthClientList = data?.pages.flatMap(page => page.results) ?? []\n\n  const warningHeader = 'Are you absolutely sure?'\n  const warningBody =\n    'If you have an existing secret, generating a new secret will make your application invalid after generation. This action cannot be undone.'\n\n  const onShowSecret = async () => {\n    setIsShowingSecretWarning(false)\n    try {\n      const secret = await SynapseClient.createOAuthClientSecret(\n        accessToken!,\n        selectedClient?.client_id!,\n      )\n      setSelectedClient(undefined)\n      setIsShowingSecret(true)\n      setSecret(secret.client_secret)\n    } catch (err) {\n      displayToast(err.reason as string, 'danger')\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport OAuthEditor\">\n      <Button\n        onClick={() => {\n          setIsShowingCreateClientModal(true)\n          setIsEdit(false)\n        }}\n      >\n        Create New Client\n      </Button>\n      <Table striped>\n        <thead>\n          <tr>\n            <th>Created</th>\n            <th>Modified</th>\n            <th>Client</th>\n            <th>Verified</th>\n            <th>App Secret</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {oAuthClientList.map(item => {\n            return (\n              <tr key={item.client_id}>\n                <td>{formatDate(moment(item.createdOn))}</td>\n                <td>{formatDate(moment(item.modifiedOn))}</td>\n                <td>{item.client_name}</td>\n                <td>\n                  {item.verified ? (\n                    'Yes'\n                  ) : (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setIsShowingVerification(true)}\n                    >\n                      SUBMIT VERIFICATION\n                    </Button>\n                  )}\n                </td>\n                <td>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setSelectedClient(item)\n                      setIsShowingSecretWarning(true)\n                    }}\n                    size=\"sm\"\n                  >\n                    GENERATE SECRET\n                  </Button>\n                </td>\n                <td>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setSelectedClient(item)\n                      setIsEdit(true)\n                      setIsShowingCreateClientModal(true)\n                    }}\n                    size=\"sm\"\n                  >\n                    EDIT\n                  </Button>\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </Table>\n      {hasNextPage && (\n        <div className=\"text-center\">\n          <Button variant=\"primary\" onClick={() => fetchNextPage()}>\n            Load more\n          </Button>\n        </div>\n      )}\n\n      {(isShowingCreateClientModal || isShowingConfirmModal) && (\n        <CreateOAuthModal\n          onClose={() => {\n            setIsShowingCreateClientModal(false)\n          }}\n          isShowingModal={isShowingCreateClientModal}\n          client={isEdit ? selectedClient : undefined}\n          isEdit={isEdit}\n          setSelectedClient={setSelectedClient}\n          setIsShowingConfirmModal={setIsShowingConfirmModal}\n          isShowingConfirmModal={isShowingConfirmModal}\n        />\n      )}\n\n      <Modal\n        show={isShowingVerification}\n        animation={false}\n        backdrop=\"static\"\n        onHide={() => setIsShowingVerification(false)}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>\n            <Typography variant=\"headline1\">Submit Verification</Typography>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>\n            In order to verify an OAuth client please submit a request to the{' '}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://sagebionetworks.jira.com/servicedesk/customer/portal/9\"\n            >\n              Synapse Service Desk.\n            </a>\n          </p>\n          <b>Please list the following items in your request:</b>\n          <ul>\n            <li>Your name</li>\n            <li>\n              The ID of the client to be verified <br />\n              <i>(You can find this within Actions)</i>\n            </li>\n            <li>A description of your application</li>\n          </ul>\n          {/* <p>\n            Verification can take up to X weeks and we will notify you via X.\n          </p> */}\n        </Modal.Body>\n      </Modal>\n\n      <WarningModal\n        show={isShowingSecretWarning}\n        title={warningHeader}\n        modalBody={warningBody}\n        onCancel={() => {\n          setIsShowingSecretWarning(false)\n          setSelectedClient(undefined)\n        }}\n        onConfirm={onShowSecret}\n        confirmButtonVariant=\"danger\"\n        confirmButtonText=\"Yes, Continue\"\n      />\n      {secret && (\n        <Modal\n          show={isShowingSecret}\n          animation={false}\n          backdrop=\"static\"\n          onHide={() => {\n            setIsShowingSecret(false)\n            setSecret(undefined)\n          }}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              <Typography variant=\"headline1\">App Secret</Typography>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n              <b>This secret will not be able to be retrieved again.</b> If\n              needed, in order to generate a new secret select Generate from the\n              Client List.\n            </p>\n            <CopyToClipboardInput value={secret} inputWidth={'350px'} />\n          </Modal.Body>\n        </Modal>\n      )}\n    </div>\n  )\n}\n"],"names":["SynapseClient.getOAuth2","SynapseClient.deleteOAuthClient","SynapseClient.updateOAuthClient","SynapseClient.createOAuthClient","isEdit","onClose","client","setSelectedClient","setIsShowingConfirmModal","isShowingConfirmModal","accessToken","useState","useEffect","setClientName","setRedirectUris","str","setPolicyUri","setClientUri","setSectorUri","setTosUri","setIsDelete","mutate","displayToast","hide","deleteClient","client_id","clientName","policyUri","clientUri","tosUri","etag","setUpdatedClient","oAuthClient","console","list","name","value","_jsxs","isShowingModal","_jsx","_Fragment","uriHelpMessage","idx","uri","handleRedirectUriAdd","sectorUri","onCreateClient","warningHeader","warningBody","hideConfirmModal","isDelete","updatedClient","data","hasNextPage","fetchNextPage","setIsShowingSecretWarning","SynapseClient.createOAuthClientSecret","setIsShowingSecret","setSecret","setIsShowingCreateClientModal","setIsEdit","moment","client_name","isShowingCreateClientModal","undefined","isShowingVerification","isShowingSecretWarning","onShowSecret","isShowingSecret","secret"],"mappings":"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"}