{"version":3,"file":"ElementWithTooltip.703da3d5.js","sources":["../../src/lib/utils/functions/unCamelCase.ts","../../src/lib/containers/widgets/ElementWithTooltip.tsx"],"sourcesContent":["// SWC-5982: check once, which means this value should be set before loading the react component\nconst forceDisplayOriginalColumnName =\n  localStorage.getItem('force-display-original-column-names') === 'true'\n\nexport const unCamelCase = (\n  str: string | undefined,\n  facetAliases?: Record<string, string>,\n): string | undefined => {\n  // https://stackoverflow.com/questions/4149276/how-to-convert-camelcase-to-camel-case\n  // SWC-5982: if force-display-original-column-names is set, then just return the string\n  if (!str || forceDisplayOriginalColumnName) {\n    return str\n  }\n  if (facetAliases?.[str]) {\n    return facetAliases[str]\n  }\n  return (\n    str\n      // insert a space between lower & upper\n      .replace(/([a-z])([A-Z])/g, '$1 $2')\n      // space before last upper in a sequence followed by lower\n      .replace(/\\b([A-Z]+)([A-Z])([a-z])/, '$1 $2$3')\n      // uppercase the first character\n      .replace(/^./, (str: string) => {\n        return str.toUpperCase()\n      })\n  )\n}\n","import React, { FunctionComponent } from 'react'\nimport ReactTooltip from 'react-tooltip'\nimport { TOOLTIP_DELAY_SHOW } from '../table/SynapseTableConstants'\nimport { Dropdown } from 'react-bootstrap'\nimport { Icon } from '../row_renderers/utils'\nimport IconSvg, { IconSvgOptions } from '../IconSvg'\n\ntype CustomImageProps = {\n  svgImg: React.ComponentElement<any, any>\n  altText: string\n}\n\nexport type TooltipVisualProps = {\n  delayShow: number\n  place: 'top' | 'right' | 'bottom' | 'left'\n  type: 'dark' | 'success' | 'warning' | 'error' | 'info' | 'light'\n  effect: 'float' | 'solid'\n  border?: boolean\n}\n\n/*****************************************\n *  The control needs to either have a child element or needs to have an image supplied\n *  If the child element is supplied the control renders the child applying additional properties\n *  If the image is supplied the control renders a clickable image\n *  If there are no children and callback Fn is not supplied it is assumed to be a a dropdown trigger\n */\n\ntype ElementWithTooltipProps = {\n  image?: IconSvgOptions | CustomImageProps\n  imageColor?: string\n  idForToolTip: string\n  tooltipText: string\n  callbackFn?: () => void\n  className?: string\n  tooltipVisualProps?: TooltipVisualProps\n  darkTheme?: boolean\n  size?: string\n  icon?: string\n}\n\nfunction getTooltipTriggerContents(\n  image: IconSvgOptions | CustomImageProps,\n  imageColor: string | undefined,\n  size: IconSvgOptions['size'] | undefined,\n): JSX.Element {\n  if ('svgImg' in image) {\n    return image.svgImg\n  } else {\n    return <IconSvg options={{ size, color: imageColor, ...image }} />\n  }\n}\n\nexport const ElementWithTooltip: FunctionComponent<ElementWithTooltipProps> = ({\n  image,\n  idForToolTip,\n  callbackFn,\n  tooltipText,\n  className = '',\n  imageColor,\n  tooltipVisualProps = { place: 'top', type: 'dark', effect: 'solid' },\n  children,\n  darkTheme,\n  size,\n  icon,\n}) => {\n  const { place, type, effect, border } = tooltipVisualProps\n  const iconComponent = icon ? <Icon type={icon}></Icon> : undefined\n  const tooltipTriggerContents = iconComponent\n    ? iconComponent\n    : image\n    ? getTooltipTriggerContents(image, imageColor, size)\n    : children || <></>\n\n  //if there is no callbackFn - assume it's a toggle\n\n  let tooltipTrigger: JSX.Element\n  if (!children) {\n    tooltipTrigger = callbackFn ? (\n      <button\n        tabIndex={0}\n        id={idForToolTip}\n        data-for={idForToolTip}\n        data-tip={tooltipText}\n        className={`ElementWithTooltip SRC-hand-cursor SRC-primary-background-color-hover ${className} ${\n          darkTheme ? 'dark-theme' : ''\n        } `}\n        onKeyPress={() => callbackFn()}\n        onClick={() => callbackFn()}\n        aria-label={tooltipText}\n      >\n        {tooltipTriggerContents}\n      </button>\n    ) : (\n      <Dropdown.Toggle\n        data-for={idForToolTip}\n        data-tip={tooltipText}\n        id={idForToolTip}\n        className={`ElementWithTooltip SRC-hand-cursor SRC-primary-background-color-hover ${className} ${\n          darkTheme ? 'dark-theme' : ''\n        } `}\n        variant={'light'}\n        aria-label={tooltipText}\n      >\n        {tooltipTriggerContents}\n      </Dropdown.Toggle>\n    )\n  } else {\n    const outerChild = children as JSX.Element\n    tooltipTrigger = React.cloneElement(outerChild, {\n      className: `${outerChild.props.className} SRC-hand-cursor`,\n      id: idForToolTip,\n      'data-for': idForToolTip,\n      'data-tip': tooltipText,\n    })\n  }\n\n  return (\n    <>\n      {tooltipTrigger}\n      <ReactTooltip\n        delayShow={TOOLTIP_DELAY_SHOW}\n        place={place}\n        type={type}\n        effect={effect}\n        border={border ? true : false}\n        id={idForToolTip}\n      />\n    </>\n  )\n}\n"],"names":["_jsx","size","imageColor","image","idForToolTip","callbackFn","tooltipText","children","darkTheme","icon","place","type","effect","border","_Fragment","tooltipTrigger","tooltipTriggerContents","className","_jsxs","TOOLTIP_DELAY_SHOW"],"mappings":"4RACA,KAAM,GACJ,aAAa,QAAQ,qCAAqC,IAAM,OAErD,EAAc,CACzB,EACA,IAII,CAAC,GAAO,EACH,EAEL,WAAe,GACV,EAAa,GAGpB,EAEG,QAAQ,kBAAmB,OAAO,EAElC,QAAQ,2BAA4B,SAAS,EAE7C,QAAQ,KAAM,AAAC,GACP,EAAI,aACZ,ECzBP,EAAA,OAAA,MAwCA,WAAA,EAAA,EAAA,EAAA,CAKE,MAAA,UAAA,GACE,EAAA,OAEAA,EAAA,EAAA,CAAO,QAAA,CAAkB,OAAEC,MAAAA,EAAaC,GAAAA,CAAeC,CAA9B,CAAA,CAE5B,CAEM,KAAA,GAAA,CAAA,CAAwE,QAC7EA,eACAC,aACAC,cACAC,YAAAA,GACY,aACZJ,qBAAAA,CACqB,MAAA,MAAS,KAAA,OAAa,OAAA,OAAgB,EAAtC,WACrBK,YACAC,OACAP,UACAQ,CAEA,KAAA,CAAM,QAAEC,OAAOC,SAAMC,UAAQC,EAC7B,EAAA,EAAAb,EAAA,EAAA,CAA6B,KAAA,CAAYS,CAAAA,EAAAA,OACzC,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAAT,EAAAc,EAAA,CAAA,CAAA,GAQA,GAAA,GACA,GAAA,CAAA,EACEC,EAAAA,EAAAA,EAAAA,SAAAA,CACE,SAAA,EACY,GAAA,EACNX,WAAAA,EACMA,WAAAA,EACAE,UAAAA,yEAAAA,KAAAA,EAAAA,aAAAA,MAEmB,WAAA,IAAA,EAAA,EAN/B,QAAA,IAAA,EAAA,EAAA,aAAA,EAUcA,SAAAA,CAEXU,CAAAA,EAAAA,EAAAA,EAAAA,OAAAA,CAGH,WAAA,EACYZ,WAAAA,EACAE,GAAAA,EACNF,UAAAA,yEAAAA,KAAAA,EAAAA,aAAAA,MAEyB,QAAA,QAEpB,aAAA,EACGE,SAAAA,CAEXU,CAAAA,MA1BL,CA8BA,KAAA,GAAA,EACAD,EAAAA,EAAAA,aAAAA,EAAAA,CAAgD,UAAA,GAAA,EAAA,MAAA,4BACfE,GAAAA,EAC3Bb,WAAAA,EACQA,WAAAA,CACAE,CAAAA,CAJG,CAQnB,MAAAY,GAAAJ,EAAA,CACE,SAAA,CAAA,EAAAd,EAAA,EAAA,CAEE,UAAA,EACamB,QACX,OACA,SACA,OAAA,IACwB,GAAA,CACpBf,CAAAA,CAAAA,CARR,CAAA,CAYH"}