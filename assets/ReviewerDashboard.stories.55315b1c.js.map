{"version":3,"file":"ReviewerDashboard.stories.55315b1c.js","sources":["../../node_modules/react-router-dom/esm/react-router-dom.js","../../src/lib/utils/hooks/useDebouncedEffect.ts","../../src/lib/utils/hooks/SynapseAPI/dataaccess/useAccessApprovals.ts","../../src/lib/containers/AccessApprovalsTable.tsx","../../src/lib/containers/AccessRequestSubmissionTable.tsx","../../src/lib/containers/dataaccess/AccessHistoryDashboard.tsx","../../src/lib/containers/dataaccess/AccessRequirementTable.tsx","../../src/lib/containers/dataaccess/AccessRequirementDashboard.tsx","../../src/lib/containers/dataaccess/AccessSubmissionDashboard.tsx","../../src/lib/utils/hooks/SynapseAPI/dataaccess/useDataAccessSubmission.ts","../../src/lib/containers/dataaccess/SubmissionPage.tsx","../../src/lib/containers/dataaccess/ReviewerDashboard.tsx"],"sourcesContent":["import { Router, __RouterContext, matchPath } from 'react-router';\nexport { MemoryRouter, Prompt, Redirect, Route, Router, StaticRouter, Switch, generatePath, matchPath, useHistory, useLocation, useParams, useRouteMatch, withRouter } from 'react-router';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport React from 'react';\nimport { createBrowserHistory, createHashHistory, createLocation, createPath } from 'history';\nimport PropTypes from 'prop-types';\nimport warning from 'tiny-warning';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport invariant from 'tiny-invariant';\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\n\nvar BrowserRouter = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(BrowserRouter, _React$Component);\n\n  function BrowserRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createBrowserHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = BrowserRouter.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/React.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return BrowserRouter;\n}(React.Component);\n\nif (process.env.NODE_ENV !== \"production\") {\n  BrowserRouter.propTypes = {\n    basename: PropTypes.string,\n    children: PropTypes.node,\n    forceRefresh: PropTypes.bool,\n    getUserConfirmation: PropTypes.func,\n    keyLength: PropTypes.number\n  };\n\n  BrowserRouter.prototype.componentDidMount = function () {\n    process.env.NODE_ENV !== \"production\" ? warning(!this.props.history, \"<BrowserRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { BrowserRouter as Router }`.\") : void 0;\n  };\n}\n\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\n\nvar HashRouter = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(HashRouter, _React$Component);\n\n  function HashRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createHashHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = HashRouter.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/React.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return HashRouter;\n}(React.Component);\n\nif (process.env.NODE_ENV !== \"production\") {\n  HashRouter.propTypes = {\n    basename: PropTypes.string,\n    children: PropTypes.node,\n    getUserConfirmation: PropTypes.func,\n    hashType: PropTypes.oneOf([\"hashbang\", \"noslash\", \"slash\"])\n  };\n\n  HashRouter.prototype.componentDidMount = function () {\n    process.env.NODE_ENV !== \"production\" ? warning(!this.props.history, \"<HashRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { HashRouter as Router }`.\") : void 0;\n  };\n}\n\nvar resolveToLocation = function resolveToLocation(to, currentLocation) {\n  return typeof to === \"function\" ? to(currentLocation) : to;\n};\nvar normalizeToLocation = function normalizeToLocation(to, currentLocation) {\n  return typeof to === \"string\" ? createLocation(to, null, null, currentLocation) : to;\n};\n\nvar forwardRefShim = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef = React.forwardRef;\n\nif (typeof forwardRef === \"undefined\") {\n  forwardRef = forwardRefShim;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nvar LinkAnchor = forwardRef(function (_ref, forwardedRef) {\n  var innerRef = _ref.innerRef,\n      navigate = _ref.navigate,\n      _onClick = _ref.onClick,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"innerRef\", \"navigate\", \"onClick\"]);\n\n  var target = rest.target;\n\n  var props = _extends({}, rest, {\n    onClick: function onClick(event) {\n      try {\n        if (_onClick) _onClick(event);\n      } catch (ex) {\n        event.preventDefault();\n        throw ex;\n      }\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && ( // ignore everything but left clicks\n      !target || target === \"_self\") && // let browser handle \"target=_blank\" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n          navigate();\n        }\n    }\n  }); // React 15 compat\n\n\n  if (forwardRefShim !== forwardRef) {\n    props.ref = forwardedRef || innerRef;\n  } else {\n    props.ref = innerRef;\n  }\n  /* eslint-disable-next-line jsx-a11y/anchor-has-content */\n\n\n  return /*#__PURE__*/React.createElement(\"a\", props);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  LinkAnchor.displayName = \"LinkAnchor\";\n}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nvar Link = forwardRef(function (_ref2, forwardedRef) {\n  var _ref2$component = _ref2.component,\n      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,\n      replace = _ref2.replace,\n      to = _ref2.to,\n      innerRef = _ref2.innerRef,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"component\", \"replace\", \"to\", \"innerRef\"]);\n\n  return /*#__PURE__*/React.createElement(__RouterContext.Consumer, null, function (context) {\n    !context ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You should not use <Link> outside a <Router>\") : invariant(false) : void 0;\n    var history = context.history;\n    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);\n    var href = location ? history.createHref(location) : \"\";\n\n    var props = _extends({}, rest, {\n      href: href,\n      navigate: function navigate() {\n        var location = resolveToLocation(to, context.location);\n        var isDuplicateNavigation = createPath(context.location) === createPath(normalizeToLocation(location));\n        var method = replace || isDuplicateNavigation ? history.replace : history.push;\n        method(location);\n      }\n    }); // React 15 compat\n\n\n    if (forwardRefShim !== forwardRef) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return /*#__PURE__*/React.createElement(component, props);\n  });\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  var toType = PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func]);\n  var refType = PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.shape({\n    current: PropTypes.any\n  })]);\n  Link.displayName = \"Link\";\n  Link.propTypes = {\n    innerRef: refType,\n    onClick: PropTypes.func,\n    replace: PropTypes.bool,\n    target: PropTypes.string,\n    to: toType.isRequired\n  };\n}\n\nvar forwardRefShim$1 = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef$1 = React.forwardRef;\n\nif (typeof forwardRef$1 === \"undefined\") {\n  forwardRef$1 = forwardRefShim$1;\n}\n\nfunction joinClassnames() {\n  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classnames[_key] = arguments[_key];\n  }\n\n  return classnames.filter(function (i) {\n    return i;\n  }).join(\" \");\n}\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\n\n\nvar NavLink = forwardRef$1(function (_ref, forwardedRef) {\n  var _ref$ariaCurrent = _ref[\"aria-current\"],\n      ariaCurrent = _ref$ariaCurrent === void 0 ? \"page\" : _ref$ariaCurrent,\n      _ref$activeClassName = _ref.activeClassName,\n      activeClassName = _ref$activeClassName === void 0 ? \"active\" : _ref$activeClassName,\n      activeStyle = _ref.activeStyle,\n      classNameProp = _ref.className,\n      exact = _ref.exact,\n      isActiveProp = _ref.isActive,\n      locationProp = _ref.location,\n      sensitive = _ref.sensitive,\n      strict = _ref.strict,\n      styleProp = _ref.style,\n      to = _ref.to,\n      innerRef = _ref.innerRef,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"aria-current\", \"activeClassName\", \"activeStyle\", \"className\", \"exact\", \"isActive\", \"location\", \"sensitive\", \"strict\", \"style\", \"to\", \"innerRef\"]);\n\n  return /*#__PURE__*/React.createElement(__RouterContext.Consumer, null, function (context) {\n    !context ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You should not use <NavLink> outside a <Router>\") : invariant(false) : void 0;\n    var currentLocation = locationProp || context.location;\n    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);\n    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n\n    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n    var match = escapedPath ? matchPath(currentLocation.pathname, {\n      path: escapedPath,\n      exact: exact,\n      sensitive: sensitive,\n      strict: strict\n    }) : null;\n    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);\n    var className = typeof classNameProp === \"function\" ? classNameProp(isActive) : classNameProp;\n    var style = typeof styleProp === \"function\" ? styleProp(isActive) : styleProp;\n\n    if (isActive) {\n      className = joinClassnames(className, activeClassName);\n      style = _extends({}, style, activeStyle);\n    }\n\n    var props = _extends({\n      \"aria-current\": isActive && ariaCurrent || null,\n      className: className,\n      style: style,\n      to: toLocation\n    }, rest); // React 15 compat\n\n\n    if (forwardRefShim$1 !== forwardRef$1) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return /*#__PURE__*/React.createElement(Link, props);\n  });\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n  var ariaCurrentType = PropTypes.oneOf([\"page\", \"step\", \"location\", \"date\", \"time\", \"true\", \"false\"]);\n  NavLink.propTypes = _extends({}, Link.propTypes, {\n    \"aria-current\": ariaCurrentType,\n    activeClassName: PropTypes.string,\n    activeStyle: PropTypes.object,\n    className: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    exact: PropTypes.bool,\n    isActive: PropTypes.func,\n    location: PropTypes.object,\n    sensitive: PropTypes.bool,\n    strict: PropTypes.bool,\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.func])\n  });\n}\n\nexport { BrowserRouter, HashRouter, Link, NavLink };\n//# sourceMappingURL=react-router-dom.js.map\n","import { useEffect } from 'react'\n\n/**\n * Debounces execution of an effect based on a specified delay.\n * See https://stackoverflow.com/a/61127960\n * @param effect\n * @param deps\n * @param delay\n */\nexport const useDebouncedEffect = (\n  effect: React.EffectCallback,\n  deps: React.DependencyList,\n  delay: number,\n) => {\n  useEffect(() => {\n    const handler = setTimeout(() => effect(), delay)\n\n    return () => clearTimeout(handler)\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, react-hooks/exhaustive-deps\n  }, [...(deps || []), delay])\n}\n","import { useInfiniteQuery, UseInfiniteQueryOptions } from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClient'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport {\n  AccessApprovalSearchRequest,\n  AccessApprovalSearchResponse,\n} from '../../../synapseTypes'\n\nexport function useSearchAccessApprovalsInfinite(\n  params: AccessApprovalSearchRequest,\n  options?: UseInfiniteQueryOptions<\n    AccessApprovalSearchResponse,\n    SynapseClientError\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n\n  return useInfiniteQuery<AccessApprovalSearchResponse, SynapseClientError>(\n    ['accessApprovalSearch', params],\n    async context => {\n      return await SynapseClient.searchAccessApprovals(\n        {\n          ...params,\n          nextPageToken: context.pageParam,\n        },\n        accessToken,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n","import moment from 'moment'\nimport React, { useMemo, useState } from 'react'\nimport { Button, Table } from 'react-bootstrap'\nimport { SMALL_USER_CARD } from '../utils/SynapseConstants'\nimport {\n  AccessApprovalSearchRequest,\n  AccessApprovalSearchSort,\n  AccessApprovalSortField,\n  Direction,\n} from '../utils/synapseTypes'\nimport Typography from '../utils/typography/Typography'\nimport UserCard from './UserCard'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../utils/functions/getEndpoint'\nimport { useSearchAccessApprovalsInfinite } from '../utils/hooks/SynapseAPI/dataaccess/useAccessApprovals'\nimport { SynapseSpinner } from './LoadingScreen'\nimport SortIcon from '../assets/icons/Sort'\nimport { formatDate } from '../utils/functions/DateFormatter'\nimport { upperFirst } from 'lodash-es'\n\nexport type AccessApprovalsTableProps = {\n  accessorId: string\n  accessRequirementId?: string\n}\nexport const AccessApprovalsTable: React.FunctionComponent<\n  AccessApprovalsTableProps\n> = ({ accessorId, accessRequirementId }) => {\n  const [sort, setSort] = useState<AccessApprovalSearchSort>({\n    field: AccessApprovalSortField.MODIFIED_ON,\n    direction: Direction.DESC,\n  })\n\n  const searchRequest: AccessApprovalSearchRequest = useMemo(\n    () => ({\n      accessorId,\n      accessRequirementId,\n      sort: [sort],\n    }),\n    [accessorId, accessRequirementId, sort],\n  )\n\n  const { data, hasNextPage, fetchNextPage, isLoading } =\n    useSearchAccessApprovalsInfinite(searchRequest)\n  const accessApprovals = data?.pages.flatMap(page => page.results) ?? []\n\n  const onSort = (field: AccessApprovalSortField) => {\n    if (sort.field === field) {\n      setSort({\n        field,\n        direction:\n          sort.direction === Direction.DESC ? Direction.ASC : Direction.DESC,\n      })\n    } else {\n      setSort({ field, direction: Direction.DESC })\n    }\n  }\n  return (\n    <div className=\"AccessApprovalsTable bootstrap-4-backport\">\n      <Table striped borderless bordered={false}>\n        <thead>\n          <tr>\n            <th>AR ID</th>\n            <th>Access Requirement Name</th>\n            <th>Submitter</th>\n            <th>Status</th>\n            <th>\n              <span className=\"SRC-split\">\n                <span>Modified Date</span>\n                <SortIcon\n                  role=\"button\"\n                  active={sort.field === AccessApprovalSortField.MODIFIED_ON}\n                  direction={\n                    sort.field === 'MODIFIED_ON'\n                      ? sort.direction === 'DESC'\n                        ? Direction.DESC\n                        : Direction.ASC\n                      : Direction.DESC\n                  }\n                  onClick={() => onSort(AccessApprovalSortField.MODIFIED_ON)}\n                />\n              </span>\n            </th>\n            <th>\n              <span className=\"SRC-split\">\n                <span>Expires</span>\n                <SortIcon\n                  role=\"button\"\n                  active={sort.field === AccessApprovalSortField.EXPIRED_ON}\n                  direction={\n                    sort.field === 'EXPIRED_ON'\n                      ? sort.direction === 'DESC'\n                        ? Direction.DESC\n                        : Direction.ASC\n                      : Direction.DESC\n                  }\n                  onClick={() => onSort(AccessApprovalSortField.EXPIRED_ON)}\n                />\n              </span>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {accessApprovals.map(item => {\n            return (\n              <tr key={item.id}>\n                <td>\n                  <a\n                    href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!AccessRequirement:AR_ID=${item.accessRequirementId}`}\n                  >\n                    {item.accessRequirementId}\n                  </a>\n                </td>\n                <td>{item.accessRequirementName}</td>\n                <td>\n                  <UserCard size={SMALL_USER_CARD} ownerId={item.submitterId} />\n                </td>\n                <td>{upperFirst(item.state.toLocaleLowerCase())}</td>\n                <td>{formatDate(moment(item.modifiedOn))}</td>\n                <td\n                  className={`${\n                    item.expiredOn\n                      ? new Date() > new Date(item.expiredOn)\n                        ? 'expired'\n                        : ''\n                      : 'non-expire'\n                  } remove-border`}\n                >\n                  {item.expiredOn\n                    ? formatDate(moment(item.expiredOn))\n                    : 'Never'}\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </Table>\n      {isLoading && (\n        <div className=\"SRC-center-text\">\n          <SynapseSpinner size={40} />\n        </div>\n      )}\n      {!isLoading && accessApprovals.length === 0 && (\n        <Typography className=\"SRC-center-text\" variant=\"body1\">\n          No Results\n        </Typography>\n      )}\n      {!hasNextPage ? (\n        ''\n      ) : (\n        <Button variant=\"outline\" onClick={() => fetchNextPage}>\n          Show More\n        </Button>\n      )}\n    </div>\n  )\n}\n","import { upperFirst } from 'lodash-es'\nimport moment from 'moment'\nimport React, { useMemo, useState } from 'react'\nimport { Button, Table } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport SortIcon from '../assets/icons/Sort'\nimport { formatDate } from '../utils/functions/DateFormatter'\nimport { useSearchAccessSubmissionsInfinite } from '../utils/hooks/SynapseAPI/dataaccess/useSearchAccessSubmissionsInfinite'\nimport { ACT_TEAM_ID, SMALL_USER_CARD } from '../utils/SynapseConstants'\nimport { Direction, SubmissionState } from '../utils/synapseTypes'\nimport {\n  SubmissionReviewerFilterType,\n  SubmissionSearchRequest,\n  SubmissionSearchSort,\n  SubmissionSortField,\n} from '../utils/synapseTypes/AccessSubmission'\nimport { SynapseSpinner } from './LoadingScreen'\nimport UserCard from './UserCard'\nimport Typography from '../utils/typography/Typography'\nimport UserOrTeamBadge from './UserOrTeamBadge'\n\nexport type AccessRequestSubmissionTableProps = {\n  showSubmitter?: boolean\n  showStatus?: boolean\n  showRequesters?: boolean\n  accessorId?: string\n  accessRequirementId?: string\n  reviewerId?: string\n  submissionState?: SubmissionState\n  reviewerFilterType?: SubmissionReviewerFilterType\n}\n\nexport const AccessRequestSubmissionTable: React.FunctionComponent<\n  AccessRequestSubmissionTableProps\n> = ({\n  showSubmitter,\n  showStatus,\n  showRequesters,\n  accessorId,\n  accessRequirementId,\n  reviewerId,\n  submissionState,\n  reviewerFilterType,\n}) => {\n  const [sort, setSort] = useState<SubmissionSearchSort>({\n    field: SubmissionSortField.CREATED_ON,\n    direction: Direction.DESC,\n  })\n\n  const searchRequest: SubmissionSearchRequest = useMemo(\n    () => ({\n      accessorId,\n      accessRequirementId,\n      submissionState,\n      reviewerId,\n      reviewerFilterType,\n      sort: [sort],\n    }),\n    [\n      accessorId,\n      accessRequirementId,\n      submissionState,\n      reviewerId,\n      reviewerFilterType,\n      sort,\n    ],\n  )\n\n  const { data, hasNextPage, fetchNextPage, isLoading } =\n    useSearchAccessSubmissionsInfinite(searchRequest)\n\n  const accessSubmissions = data?.pages.flatMap(page => page.results) ?? []\n\n  const onSort = (field: SubmissionSortField) => {\n    if (sort.field === field) {\n      setSort({ field, direction: sort.direction === 'DESC' ? 'ASC' : 'DESC' })\n    } else {\n      setSort({ field, direction: 'DESC' })\n    }\n  }\n  return (\n    <div className=\"bootstrap-4-backport AccessSubmissionTable\">\n      <Table striped borderless bordered={false}>\n        <thead>\n          <tr>\n            <th>REQUEST</th>\n            <th>Access Requirement Name</th>\n            {showSubmitter && <th>Submitter</th>}\n            {showStatus && <th>Status</th>}\n            {showRequesters && <th>Requesters</th>}\n            <th>Reviewer(s)</th>\n            <th>\n              Created Date\n              <SortIcon\n                role=\"button\"\n                style={{ float: 'right' }}\n                active={sort.field === 'CREATED_ON'}\n                aria-label=\"Sort by Created On\"\n                direction={\n                  sort.field === 'CREATED_ON'\n                    ? sort.direction === 'DESC'\n                      ? 'DESC'\n                      : 'ASC'\n                    : 'DESC'\n                }\n                onClick={() => onSort(SubmissionSortField.CREATED_ON)}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {accessSubmissions.map(item => {\n            return (\n              <tr key={item.id}>\n                <td>\n                  <Link to={`/Submissions/${item.id}`}>{item.id}</Link>\n                </td>\n                <td>{item.accessRequirementName}</td>\n                {showSubmitter && (\n                  <td>\n                    <UserOrTeamBadge principalId={item.submitterId} />\n                  </td>\n                )}\n                {showStatus && (\n                  <td>{upperFirst(item.state.toLocaleLowerCase())}</td>\n                )}\n                {showRequesters && (\n                  <td>\n                    <UserOrTeamBadge principalId={item.submitterId} />\n                    {item.accessorChanges\n                      .filter(user => item.submitterId !== user.userId)\n                      .map(requester => (\n                        <li key={requester.userId}>\n                          <UserCard\n                            size={SMALL_USER_CARD}\n                            ownerId={requester.userId}\n                            className=\"requester\"\n                          />\n                        </li>\n                      ))}\n                  </td>\n                )}\n                <td>\n                  {item.accessRequirementReviewerIds.length === 0 ? (\n                    <UserOrTeamBadge principalId={ACT_TEAM_ID} />\n                  ) : (\n                    item.accessRequirementReviewerIds.map(reviewerId => (\n                      <UserOrTeamBadge\n                        key={reviewerId}\n                        principalId={reviewerId}\n                      />\n                    ))\n                  )}\n                </td>\n                <td>{formatDate(moment(item.createdOn))}</td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </Table>\n      {isLoading && (\n        <div className=\"SRC-center-text\">\n          <SynapseSpinner size={40} />\n        </div>\n      )}\n      {!isLoading && accessSubmissions.length == 0 && (\n        <Typography className=\"SRC-center-text\" variant=\"body1\">\n          No Results\n        </Typography>\n      )}\n      {!hasNextPage ? (\n        ''\n      ) : (\n        <Button variant=\"outline\" onClick={() => fetchNextPage()}>\n          Show More\n        </Button>\n      )}\n    </div>\n  )\n}\n","import { omitBy } from 'lodash-es'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { FormLabel } from 'react-bootstrap'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useDebouncedEffect } from '../../utils/hooks/useDebouncedEffect'\nimport { TYPE_FILTER } from '../../utils/synapseTypes'\nimport Typography from '../../utils/typography/Typography'\nimport {\n  AccessApprovalsTable,\n  AccessApprovalsTableProps,\n} from '../AccessApprovalsTable'\nimport {\n  AccessRequestSubmissionTable,\n  AccessRequestSubmissionTableProps,\n} from '../AccessRequestSubmissionTable'\nimport UserOrTeamBadge from '../UserOrTeamBadge'\nimport UserSearchBoxV2 from '../UserSearchBoxV2'\nimport AccessRequirementSearchBox from './AccessRequirementSearchBox'\n\nexport const UserHistoryDashboard = () => {\n  const [accessRequirementId, setAccessRequirementId] = useState<\n    string | undefined\n  >()\n  const [accessorId, setAccessorId] = useState<string>('')\n  const [approvalTableProps, setApprovalTableProps] =\n    useState<AccessApprovalsTableProps>({\n      accessorId,\n      accessRequirementId,\n    })\n  const [submissionTableProps, setSubmissionTableProps] =\n    useState<AccessRequestSubmissionTableProps>({\n      showStatus: true,\n      showSubmitter: true,\n      accessorId,\n      accessRequirementId,\n    })\n\n  const location = useLocation()\n  const history = useHistory()\n  const INPUT_CHANGE_DEBOUNCE_DELAY_MS = 500\n\n  const onAccessorChange = useCallback((selected: string | null) => {\n    if (selected) {\n      setAccessorId(selected)\n    } else {\n      setAccessorId('')\n    }\n  }, [])\n\n  useEffect(() => {\n    const initializeFromSearchParam = () => {\n      const initialParams = new URLSearchParams(location.search)\n      setAccessRequirementId(\n        initialParams.get('accessRequirementId') ?? undefined,\n      )\n      setAccessorId(initialParams.get('accessorId') ?? '')\n    }\n    initializeFromSearchParam()\n  }, [location.search])\n\n  useDebouncedEffect(\n    () => {\n      const updateQueryParams = (\n        accessRequirementId: string | undefined,\n        accessorId: string,\n      ) => {\n        const params = new URLSearchParams(\n          omitBy(\n            {\n              accessRequirementId,\n              accessorId,\n            },\n            item => item === undefined || item === '',\n          ) as Record<string, string>,\n        )\n        history.replace({\n          pathname: location.pathname,\n          search: params.toString(),\n        })\n      }\n\n      updateQueryParams(accessRequirementId, accessorId)\n      setApprovalTableProps({\n        accessorId,\n        accessRequirementId,\n      })\n      setSubmissionTableProps({\n        showStatus: true,\n        showSubmitter: true,\n        accessorId,\n        accessRequirementId,\n      })\n    },\n    [accessRequirementId, accessorId, history, location],\n    INPUT_CHANGE_DEBOUNCE_DELAY_MS,\n  )\n\n  const NoSearchResultComponent = () => {\n    return (\n      <div className=\"text-center\">\n        <img\n          className=\"SearchPlaceholderImage\"\n          alt=\"Begin searching\"\n          src=\"https://s3.amazonaws.com/static.synapse.org/images/search-happy.svg\"\n        />\n        <Typography variant=\"body2\">\n          Enter a user or team name in the search field above to view their data\n          access history\n        </Typography>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"UserHistoryDashboard bootstrap-4-backport\">\n      <div className=\"InputPanel SubmissionGrid\">\n        <div>\n          <FormLabel htmlFor=\"user-filter\">\n            Select a user to view their access history\n          </FormLabel>\n          <UserSearchBoxV2\n            inputId=\"user-filter\"\n            onChange={onAccessorChange}\n            defaultValue={accessorId}\n            placeholder=\"Search for a user name\"\n            typeFilter={TYPE_FILTER.USERS_ONLY}\n          />\n        </div>\n\n        {accessorId && (\n          <div>\n            <FormLabel htmlFor=\"arName-filter\">\n              Filter by Access Requirement Name\n            </FormLabel>\n            <AccessRequirementSearchBox\n              inputId=\"arName-filter\"\n              placeholder=\"Search for an Access Requirement Name \"\n              onChange={setAccessRequirementId}\n            />\n          </div>\n        )}\n      </div>\n\n      {accessorId ? (\n        <>\n          <Typography variant=\"headline3\">\n            Submissions including <UserOrTeamBadge principalId={accessorId} />\n          </Typography>\n          <AccessRequestSubmissionTable {...submissionTableProps} />\n\n          <Typography variant=\"headline3\">\n            Status in Access Requirements\n          </Typography>\n          <AccessApprovalsTable {...approvalTableProps} />\n        </>\n      ) : (\n        <NoSearchResultComponent />\n      )}\n    </div>\n  )\n}\n","import moment from 'moment'\nimport React, { useMemo, useState } from 'react'\nimport { Button, Table } from 'react-bootstrap'\nimport SortIcon from '../../assets/icons/Sort'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { useSearchAccessRequirementsInfinite } from '../../utils/hooks/SynapseAPI/dataaccess/useGetAccessRequirement'\nimport { ACT_TEAM_ID } from '../../utils/SynapseConstants'\nimport { ACCESS_TYPE } from '../../utils/synapseTypes'\nimport {\n  AccessRequirementSearchRequest,\n  AccessRequirementSearchSort,\n} from '../../utils/synapseTypes/AccessRequirement/AccessRequirementSearch'\nimport Typography from '../../utils/typography/Typography'\nimport { EntityLink } from '../EntityLink'\nimport IconSvg from '../IconSvg'\nimport { SynapseSpinner } from '../LoadingScreen'\nimport UserOrTeamBadge from '../UserOrTeamBadge'\n\nexport type AccessRequirementTableProps = {\n  nameContains?: string\n  relatedProjectId?: string\n  reviewerId?: string\n  accessType?: ACCESS_TYPE\n  onCreateNewAccessRequirementClicked?: () => void\n}\n\nexport function AccessRequirementTable(props: AccessRequirementTableProps) {\n  const {\n    nameContains,\n    relatedProjectId,\n    reviewerId,\n    accessType,\n    onCreateNewAccessRequirementClicked,\n  } = props\n\n  const [sort, setSort] = useState<AccessRequirementSearchSort>({\n    field: 'CREATED_ON',\n    direction: 'DESC',\n  })\n\n  const searchRequest: Omit<AccessRequirementSearchRequest, 'nextPageToken'> =\n    useMemo(\n      () => ({\n        nameContains,\n        relatedProjectId,\n        reviewerId,\n        accessType,\n        sort: [sort],\n      }),\n      [nameContains, relatedProjectId, reviewerId, accessType, sort],\n    )\n\n  const { data, hasNextPage, fetchNextPage, isLoading } =\n    useSearchAccessRequirementsInfinite(searchRequest)\n\n  const accessRequirements = data?.pages.flatMap(page => page.results) ?? []\n  const onSort = (field: AccessRequirementSearchSort['field']) => {\n    if (sort.field === field) {\n      setSort({ field, direction: sort.direction === 'DESC' ? 'ASC' : 'DESC' })\n    } else {\n      setSort({ field, direction: 'DESC' })\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport\">\n      <div className=\"SRC-split\">\n        <Typography variant=\"headline3\" style={{ marginBottom: 0 }}>\n          Access Requirements\n        </Typography>\n        {onCreateNewAccessRequirementClicked && (\n          <Button\n            variant={'outline'}\n            onClick={onCreateNewAccessRequirementClicked}\n          >\n            <IconSvg options={{ icon: 'favTwoTone', padding: 'right' }} />\n            New Access Requirement\n          </Button>\n        )}\n      </div>\n\n      <div className=\"AccessRequirementsTable\">\n        <Table striped borderless bordered={false}>\n          <thead className=\"access-requirements-header\">\n            <tr>\n              <th>AR ID</th>\n              <th>\n                <span className=\"SRC-split\">\n                  <span>Access Requirement Name</span>\n                  <SortIcon\n                    role=\"button\"\n                    onClick={() => onSort('NAME')}\n                    aria-label=\"Sort by Name\"\n                    active={sort.field === 'NAME'}\n                    direction={sort.field === 'NAME' ? sort.direction : 'DESC'}\n                  />\n                </span>\n              </th>\n              <th>Related to Projects</th>\n              <th>Reviewer</th>\n              <th>Last Modified</th>\n              <th>\n                <span className=\"SRC-split\">\n                  <span>Created On</span>\n                  <SortIcon\n                    role=\"button\"\n                    onClick={() => onSort('CREATED_ON')}\n                    active={sort.field === 'CREATED_ON'}\n                    aria-label=\"Sort by Created On\"\n                    direction={\n                      sort.field === 'CREATED_ON' ? sort.direction : 'DESC'\n                    }\n                  />\n                </span>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {accessRequirements.map(ar => {\n              return (\n                <tr key={ar.id}>\n                  <td>\n                    <a\n                      href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!AccessRequirement:AR_ID=${ar.id}`}\n                    >\n                      {ar.id}\n                    </a>\n                  </td>\n                  <td>{ar.name}</td>\n                  <td>\n                    {ar.relatedProjectIds.map(projectId => (\n                      <React.Fragment key={projectId}>\n                        <EntityLink entity={projectId} />{' '}\n                        <span className=\"InlineLabel\">({projectId})</span>\n                        <br />\n                      </React.Fragment>\n                    ))}\n                  </td>\n                  <td>\n                    {ar.reviewerIds.length === 0 ? (\n                      <UserOrTeamBadge principalId={ACT_TEAM_ID} />\n                    ) : (\n                      ar.reviewerIds.map(reviewerId => (\n                        <UserOrTeamBadge\n                          key={reviewerId}\n                          principalId={reviewerId}\n                        />\n                      ))\n                    )}\n                  </td>\n                  <td>{formatDate(moment(ar.modifiedOn))}</td>\n                  <td>{formatDate(moment(ar.createdOn))}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </Table>\n        {isLoading && (\n          <div className=\"SRC-center-text\">\n            <SynapseSpinner size={40} />\n          </div>\n        )}\n        {!isLoading && accessRequirements.length === 0 && (\n          <Typography className=\"SRC-center-text\" variant=\"body1\">\n            No Results\n          </Typography>\n        )}\n        {!hasNextPage ? (\n          <></>\n        ) : (\n          <Button\n            variant=\"outline\"\n            onClick={() => {\n              fetchNextPage()\n            }}\n          >\n            Show More\n          </Button>\n        )}\n      </div>\n    </div>\n  )\n}\n","import { omitBy } from 'lodash-es'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { Button, FormControl, FormLabel, InputGroup } from 'react-bootstrap'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useDebouncedEffect } from '../../utils/hooks/useDebouncedEffect'\nimport { EntityType } from '../../utils/synapseTypes'\nimport { EntityFinderModal } from '../entity_finder/EntityFinderModal'\nimport { FinderScope } from '../entity_finder/tree/EntityTree'\nimport IconSvg from '../IconSvg'\nimport UserSearchBoxV2 from '../UserSearchBoxV2'\nimport {\n  AccessRequirementTable,\n  AccessRequirementTableProps,\n} from './AccessRequirementTable'\n\nexport type AccessRequirementDashboardProps = {\n  onCreateNewAccessRequirementClicked?: () => void\n}\n\nexport function AccessRequirementDashboard(\n  props: AccessRequirementDashboardProps,\n) {\n  // Amount of time to wait after an input value changes before sending a new request\n  const INPUT_CHANGE_DEBOUNCE_DELAY_MS = 500\n\n  const { onCreateNewAccessRequirementClicked } = props\n\n  const location = useLocation()\n  const history = useHistory()\n\n  const [nameContains, setNameContains] = useState<string>('')\n  const [relatedProjectId, setRelatedProjectId] = useState<string | undefined>(\n    undefined,\n  )\n  const [reviewerId, setReviewerId] = useState<string | undefined>(undefined)\n\n  useEffect(() => {\n    function initializeFromSearchParams() {\n      const initialParams = new URLSearchParams(location.search as string)\n      setNameContains(initialParams.get('nameContains') ?? '')\n      setRelatedProjectId(initialParams.get('relatedProjectId') ?? undefined)\n      setReviewerId(initialParams.get('reviewerId') ?? undefined)\n    }\n    initializeFromSearchParams()\n  }, [location.search])\n\n  const [showEntityFinder, setShowEntityFinder] = useState(false)\n\n  const [tableProps, setTableProps] = useState<AccessRequirementTableProps>({\n    nameContains,\n    relatedProjectId,\n    reviewerId,\n    onCreateNewAccessRequirementClicked,\n  })\n\n  /**\n   * When an input changes, update the props passed to the table and update the search params.\n   *\n   * Debounced to prevent firing many queries while the user is entering text.\n   */\n  useDebouncedEffect(\n    () => {\n      function updateQueryParams(\n        nameContains: string | undefined,\n        relatedProjectId: string | undefined,\n        reviewerId: string | undefined,\n      ) {\n        // Don't include undefined/empty parameters\n        const params = omitBy(\n          {\n            nameContains,\n            relatedProjectId,\n            reviewerId,\n          },\n          item => item === undefined || item === '',\n        ) as Record<string, string>\n\n        // Add the new params to the URL\n        // Replace history because intuitively, the user has not navigated to a new page\n        const paramsObject = new URLSearchParams(params)\n        history.replace({\n          pathname: location.pathname,\n          search: paramsObject.toString(),\n        })\n      }\n\n      setTableProps({\n        nameContains,\n        relatedProjectId,\n        reviewerId,\n        onCreateNewAccessRequirementClicked,\n      })\n      updateQueryParams(nameContains, relatedProjectId, reviewerId)\n    },\n    [\n      nameContains,\n      relatedProjectId,\n      reviewerId,\n      onCreateNewAccessRequirementClicked,\n      history,\n      location,\n    ],\n    INPUT_CHANGE_DEBOUNCE_DELAY_MS,\n  )\n\n  const onReviewerChange = useCallback((selected: string | null) => {\n    if (selected) {\n      setReviewerId(selected)\n    } else {\n      setReviewerId(undefined)\n    }\n  }, [])\n\n  return (\n    <div className=\"AccessRequirementDashboard bootstrap-4-backport\">\n      <EntityFinderModal\n        configuration={{\n          initialScope: FinderScope.ALL_PROJECTS,\n          initialContainer: null,\n          selectMultiple: false,\n          selectableTypes: [EntityType.PROJECT],\n        }}\n        show={showEntityFinder}\n        onClose={() => {\n          setShowEntityFinder(false)\n        }}\n        onCancel={() => {\n          setShowEntityFinder(false)\n        }}\n        title={'Select Project to Filter Access Requirements'}\n        promptCopy={\n          'Select a project to find Access Requirements that are associated with that project. Access Requirements will be found if the Access Requirement is applied to the project, or if it is applied to any item inside the project.'\n        }\n        onConfirm={selected => {\n          setRelatedProjectId(selected[0].targetId)\n          setShowEntityFinder(false)\n        }}\n        confirmButtonCopy={'Select'}\n      />\n      <div className=\"InputPanel\">\n        <div>\n          <FormLabel htmlFor=\"ar-name-filter\">\n            Filter by Access Requirement Name\n          </FormLabel>\n\n          <InputGroup>\n            <FormControl\n              id=\"ar-name-filter\"\n              type=\"text\"\n              placeholder=\"Search for an Access Requirement Name\"\n              value={nameContains}\n              onChange={e => {\n                setNameContains(e.target.value)\n              }}\n            />\n            <IconSvg options={{ icon: 'searchOutlined' }} />\n          </InputGroup>\n        </div>\n        <div>\n          <FormLabel htmlFor=\"project-id-filter\">Filter by Project</FormLabel>\n          <div className=\"ProjectIdInputGroup\">\n            <FormControl\n              id=\"project-id-filter\"\n              type=\"text\"\n              placeholder=\"Enter a project SynID\"\n              value={relatedProjectId}\n              onChange={e => {\n                const newValue = e.target.value\n                if (newValue === '') {\n                  setRelatedProjectId(undefined)\n                } else {\n                  setRelatedProjectId(newValue)\n                }\n              }}\n            />\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setShowEntityFinder(true)\n              }}\n            >\n              Browse\n            </Button>\n          </div>\n        </div>\n        <div>\n          <FormLabel htmlFor=\"reviewer-filter\">Filter by Reviewer</FormLabel>\n          <UserSearchBoxV2\n            inputId=\"reviewer-filter\"\n            placeholder=\"Search for a username or team name\"\n            defaultValue={reviewerId}\n            onChange={onReviewerChange}\n          />\n        </div>\n      </div>\n      <AccessRequirementTable {...tableProps} />\n    </div>\n  )\n}\n\nexport default AccessRequirementDashboard\n","import { omitBy } from 'lodash-es'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { FormLabel } from 'react-bootstrap'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useDebouncedEffect } from '../../utils/hooks/useDebouncedEffect'\nimport { SubmissionState } from '../../utils/synapseTypes'\nimport { TYPE_FILTER } from '../../utils/synapseTypes'\nimport Typography from '../../utils/typography/Typography'\nimport {\n  AccessRequestSubmissionTable,\n  AccessRequestSubmissionTableProps,\n} from '../AccessRequestSubmissionTable'\nimport UserSearchBoxV2 from '../UserSearchBoxV2'\nimport AccessRequirementSearchBox from './AccessRequirementSearchBox'\n\nexport const DataAccessSubmissionDashboard = () => {\n  const [accessRequirementId, setAccessRequirementId] = useState<\n    string | undefined\n  >()\n  const [accessorId, setAccessorId] = useState<string | undefined>()\n  const [reviewerId, setReviewerId] = useState<string | undefined>()\n  const [tableProps, setTableProps] =\n    useState<AccessRequestSubmissionTableProps>({\n      accessRequirementId,\n      accessorId,\n      reviewerId,\n      showRequesters: true,\n      submissionState: SubmissionState.SUBMITTED,\n    })\n\n  const location = useLocation()\n  const history = useHistory()\n  const INPUT_CHANGE_DEBOUNCE_DELAY_MS = 500\n\n  useEffect(() => {\n    const initializeFromSearchParam = () => {\n      const initialParams = new URLSearchParams(location.search)\n      setAccessRequirementId(\n        initialParams.get('accessRequirementId') ?? undefined,\n      )\n      setAccessorId(initialParams.get('accessorId') ?? undefined)\n      setReviewerId(initialParams.get('reviewerId') ?? undefined)\n    }\n    initializeFromSearchParam()\n  }, [location.search])\n\n  const onRequesterChange = useCallback((selected: string | null) => {\n    if (selected) {\n      setAccessorId(selected)\n    } else {\n      setAccessorId(undefined)\n    }\n  }, [])\n\n  const onReviewerChange = useCallback((selected: string | null) => {\n    if (selected) {\n      setReviewerId(selected)\n    } else {\n      setReviewerId(undefined)\n    }\n  }, [])\n\n  useDebouncedEffect(\n    () => {\n      const updateQueryParams = (\n        accessRequirementId: string | undefined,\n        accessorId: string | undefined,\n        reviewerId: string | undefined,\n      ) => {\n        const params = new URLSearchParams(\n          omitBy(\n            {\n              accessRequirementId,\n              accessorId,\n              reviewerId,\n            },\n            item => item === undefined || item === '',\n          ) as Record<string, string>,\n        )\n        history.replace({\n          pathname: location.pathname,\n          search: params.toString(),\n        })\n      }\n\n      updateQueryParams(accessRequirementId, accessorId, reviewerId)\n      setTableProps({\n        accessRequirementId,\n        accessorId,\n        reviewerId,\n        showRequesters: true,\n        submissionState: SubmissionState.SUBMITTED,\n      })\n    },\n    [accessRequirementId, accessorId, reviewerId, history, location],\n    INPUT_CHANGE_DEBOUNCE_DELAY_MS,\n  )\n\n  return (\n    <div className=\"AccessSubmissionDashboard bootstrap-4-backport\">\n      <div className=\"InputPanel SubmissionGrid\">\n        <div>\n          <FormLabel htmlFor=\"arId-filter\">\n            Filter by Access Requirement Name\n          </FormLabel>\n          <AccessRequirementSearchBox\n            inputId=\"arId-filter\"\n            onChange={setAccessRequirementId}\n            placeholder=\"Search for an Access Requirement Name \"\n          />\n        </div>\n        <div>\n          <FormLabel htmlFor=\"requester-filter\">Filter by Requester</FormLabel>\n          <UserSearchBoxV2\n            inputId=\"requester-filter\"\n            placeholder=\"Search for a user name\"\n            defaultValue={accessorId}\n            onChange={onRequesterChange}\n            typeFilter={TYPE_FILTER.USERS_ONLY}\n          />\n        </div>\n        <div>\n          <FormLabel htmlFor=\"reviewer-filter\">Filter by Reviewer</FormLabel>\n          <UserSearchBoxV2\n            inputId=\"reviewer-filter\"\n            placeholder=\"Search for a user or team name\"\n            defaultValue={reviewerId}\n            onChange={onReviewerChange}\n          />\n        </div>\n      </div>\n\n      <Typography variant=\"headline3\">Access Request Submissions</Typography>\n      <AccessRequestSubmissionTable {...tableProps} />\n    </div>\n  )\n}\n","import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClient'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { Submission } from '../../../synapseTypes/AccessRequirement/Submission'\nimport { SubmissionStateChangeRequest } from '../../../synapseTypes/AccessRequirement/SubmissionStateChangeRequest'\nimport {\n  SubmissionSearchRequest,\n  SubmissionSearchResponse,\n} from '../../../synapseTypes/AccessSubmission'\n\nconst dataAccessSubmissionQueryKeys = {\n  submission: (id: string | number) => ['dataAccessSubmission', id],\n  search: (params?: SubmissionSearchRequest) =>\n    params ? ['accessSubmissionSearch', params] : ['accessSubmissionSearch'],\n}\n\nexport default function useGetDataAccessSubmission(\n  submissionId: string | number,\n  options?: UseQueryOptions<Submission, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n\n  return useQuery<Submission, SynapseClientError>(\n    dataAccessSubmissionQueryKeys.submission(submissionId),\n    () => SynapseClient.getSubmissionById(submissionId, accessToken),\n    options,\n  )\n}\n\nexport function useSearchAccessSubmissionsInfinite(\n  params: SubmissionSearchRequest,\n  options?: UseInfiniteQueryOptions<\n    SubmissionSearchResponse,\n    SynapseClientError\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n\n  return useInfiniteQuery<SubmissionSearchResponse, SynapseClientError>(\n    dataAccessSubmissionQueryKeys.search(params),\n    async context => {\n      return await SynapseClient.searchAccessSubmission(\n        {\n          ...params,\n          nextPageToken: context.pageParam,\n        },\n        accessToken,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useUpdateDataAccessSubmissionState(\n  options?: UseMutationOptions<\n    Submission,\n    SynapseClientError,\n    SubmissionStateChangeRequest\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<\n    Submission,\n    SynapseClientError,\n    SubmissionStateChangeRequest\n  >(\n    (request: SubmissionStateChangeRequest): Promise<Submission> =>\n      SynapseClient.updateSubmissionStatus(request, accessToken),\n    {\n      ...options,\n      onSuccess: async (updatedSubmission, variables, ctx) => {\n        // Invalidate all searches, since updating the status will affect filtered search results\n        queryClient.invalidateQueries(dataAccessSubmissionQueryKeys.search())\n        // Update the query data for the updated submission\n        queryClient.setQueryData(\n          dataAccessSubmissionQueryKeys.submission(variables.submissionId),\n          updatedSubmission,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedSubmission, variables, ctx)\n        }\n      },\n    },\n  )\n}\n","import { Skeleton } from '@material-ui/lab'\nimport { toLower, upperFirst } from 'lodash-es'\nimport moment from 'moment'\nimport React, { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport useGetDataAccessSubmission, {\n  useUpdateDataAccessSubmissionState,\n} from '../../utils/hooks/SynapseAPI/dataaccess/useDataAccessSubmission'\nimport useGetAccessRequirement, {\n  useGetAccessRequirementACL,\n  useGetAccessRequirementWikiPageKey,\n} from '../../utils/hooks/SynapseAPI/dataaccess/useGetAccessRequirement'\nimport { ACT_TEAM_ID } from '../../utils/SynapseConstants'\nimport {\n  FileHandleAssociateType,\n  ManagedACTAccessRequirement,\n  SubmissionState,\n} from '../../utils/synapseTypes'\nimport Typography from '../../utils/typography/Typography'\nimport { SynapseErrorBoundary } from '../ErrorBanner'\nimport MarkdownSynapse from '../MarkdownSynapse'\nimport WarningModal, {\n  WarningModalProps,\n} from '../synapse_form_wrapper/WarningModal'\nimport UserCard from '../UserCard'\nimport UserOrTeamBadge from '../UserOrTeamBadge'\nimport { FileHandleLink } from '../widgets/FileHandleLink'\n\nexport type SubmissionPageProps = {\n  /** The ID of the submission to view */\n  submissionId: string | number\n  /** Invoked when a reviewer clicks \"Reject\". Provides a parameter for an external component to provide a reason for rejection, which will reject the submission when invoked. */\n  onRejectClicked: (onReject: (rejectedReason: string) => void) => void\n}\n\nfunction DataAccessSubmissionFileHandleLink(props: {\n  submissionId: string\n  fileHandleId: string\n}) {\n  const { submissionId, fileHandleId } = props\n  const fileHandleAssociation = React.useMemo(\n    () => ({\n      fileHandleId: fileHandleId,\n      associateObjectId: submissionId,\n      associateObjectType:\n        FileHandleAssociateType.DataAccessSubmissionAttachment,\n    }),\n    [fileHandleId, submissionId],\n  )\n  return (\n    <FileHandleLink\n      key={fileHandleId}\n      showDownloadIcon={true}\n      fileHandleAssociation={fileHandleAssociation}\n    />\n  )\n}\n\nfunction ApproveConfirmationModal(\n  props: Pick<WarningModalProps, 'show' | 'onConfirm' | 'onCancel'>,\n) {\n  return (\n    <WarningModal\n      show={props.show}\n      title=\"Approve Request?\"\n      modalBody={\n        <>\n          <Typography variant=\"body1\">\n            Approving the request will grant access to controlled data.\n          </Typography>\n          <Typography variant=\"body1\">\n            In addition, the user will receive an email notification alerting\n            them that the request has been granted.\n          </Typography>\n        </>\n      }\n      onConfirm={props.onConfirm}\n      onConfirmCallbackArgs={[]}\n      onCancel={props.onCancel}\n      confirmButtonText=\"Approve\"\n    />\n  )\n}\n\ntype AccessRequirementWikiType = {\n  accessRequirementId: string\n}\n\nfunction AccessRequirementWiki(props: AccessRequirementWikiType) {\n  const { data: wikiPageKey } = useGetAccessRequirementWikiPageKey(\n    props.accessRequirementId,\n    {\n      useErrorBoundary: true,\n    },\n  )\n\n  return wikiPageKey ? (\n    <div className=\"AccessRequirementWikiContainer\">\n      <div className=\"AccessRequirementWikiContent\">\n        <Typography variant=\"headline1\">Access Requirement</Typography>\n        <hr />\n        <MarkdownSynapse\n          wikiId={wikiPageKey?.wikiPageId}\n          ownerId={wikiPageKey?.ownerObjectId}\n          objectType={wikiPageKey?.ownerObjectType}\n        />\n      </div>\n    </div>\n  ) : (\n    <Skeleton width={'100%'} height={'600px'} />\n  )\n}\n\n/**\n * Page for a Data Access Submission that a designated reviewer can view, and choose to approve or reject.\n */\nexport default function SubmissionPage(props: SubmissionPageProps) {\n  const { submissionId, onRejectClicked } = props\n\n  const handleError = useErrorHandler()\n  const { data: submission, refetch } = useGetDataAccessSubmission(\n    submissionId,\n    { useErrorBoundary: true },\n  )\n\n  const { mutateAsync } = useUpdateDataAccessSubmissionState()\n\n  const { data: accessRequirement } =\n    useGetAccessRequirement<ManagedACTAccessRequirement>(\n      parseInt(submission?.accessRequirementId!),\n      { enabled: !!submission },\n    )\n\n  const { data: acl } = useGetAccessRequirementACL(\n    submission?.accessRequirementId!,\n    { enabled: !!submission, useErrorBoundary: true },\n  )\n\n  const [showApprovalConfirmation, setShowApprovalConfirmation] =\n    useState(false)\n\n  function approveSubmission() {\n    return mutateAsync({\n      submissionId: submission?.id ?? '',\n      newState: SubmissionState.APPROVED,\n    })\n  }\n\n  function rejectSubmission(reason: string) {\n    return mutateAsync({\n      submissionId: submission?.id ?? '',\n      newState: SubmissionState.REJECTED,\n      rejectedReason: reason,\n    })\n  }\n\n  return (\n    <div className=\"SubmissionPage\">\n      <ApproveConfirmationModal\n        show={showApprovalConfirmation}\n        onCancel={() => {\n          setShowApprovalConfirmation(false)\n        }}\n        onConfirm={async () => {\n          try {\n            await approveSubmission()\n          } catch (e) {\n            handleError(e)\n          }\n          setShowApprovalConfirmation(false)\n          refetch()\n        }}\n      />\n      <div className=\"SubmissionSummary\">\n        <Typography variant=\"dataFieldKey\">Status</Typography>\n        <Typography variant=\"headline3\">\n          {submission ? submission.state : <Skeleton width={100} />}\n        </Typography>\n        <br />\n        {submission ? (\n          submission.state === 'SUBMITTED' && (\n            <div className=\"bootstrap-4-backport ButtonContainer\">\n              <Button\n                onClick={() => {\n                  setShowApprovalConfirmation(true)\n                }}\n                variant=\"success\"\n              >\n                Approve\n              </Button>\n              <Button\n                onClick={() => {\n                  onRejectClicked(reason => {\n                    rejectSubmission(reason)\n                  })\n                }}\n                variant=\"danger\"\n              >\n                Reject\n              </Button>\n            </div>\n          )\n        ) : (\n          <Skeleton width={200} />\n        )}\n        <Typography variant=\"dataFieldKey\">Access Requirement Name</Typography>\n        <Typography variant=\"smallText1\">\n          {accessRequirement?.name ?? <Skeleton width={100} />}\n        </Typography>\n        <br />\n        <Typography variant=\"dataFieldKey\">Assigned Reviewer</Typography>\n        <Typography variant=\"smallText1\">\n          {acl !== undefined ? (\n            acl !== null ? (\n              acl.resourceAccess.map(ra => {\n                return (\n                  <UserOrTeamBadge\n                    key={ra.principalId}\n                    principalId={ra.principalId}\n                  />\n                )\n              })\n            ) : (\n              <UserOrTeamBadge principalId={ACT_TEAM_ID} />\n            )\n          ) : (\n            <Skeleton width={100} />\n          )}\n        </Typography>\n        <br />\n        <Typography variant=\"dataFieldKey\">Conditions</Typography>\n        {accessRequirement ? (\n          <Typography variant=\"smallText1\">\n            <ul>\n              <li>\n                Expiration period:{' '}\n                {moment\n                  .duration(accessRequirement.expirationPeriod, 'milliseconds')\n                  .asDays()}{' '}\n                day(s)\n                {accessRequirement.expirationPeriod === 0 && ' (no expiration)'}\n              </li>\n\n              {accessRequirement.isCertifiedUserRequired && (\n                <li>User must be Certified</li>\n              )}\n              {accessRequirement.isValidatedProfileRequired && (\n                <li>User Profile must be Validated</li>\n              )}\n              {accessRequirement.isDUCRequired && <li>DUC is required</li>}\n              {accessRequirement.isIDURequired && <li>IDU is required</li>}\n              {accessRequirement.isIDUPublic && (\n                <li>IDU will be made public</li>\n              )}\n              {accessRequirement.isIRBApprovalRequired && (\n                <li>IRB Approval is required</li>\n              )}\n              {accessRequirement.areOtherAttachmentsRequired && (\n                <li>Other attachments are required</li>\n              )}\n            </ul>\n          </Typography>\n        ) : (\n          <Skeleton width={100} />\n        )}\n        <br />\n        <div className=\"SubmissionSummaryGrid\">\n          <Typography variant=\"dataFieldKey\">Submitted By</Typography>\n          <Typography variant=\"smallText1\">\n            {submission ? (\n              <UserCard\n                size={'SMALL USER CARD'}\n                ownerId={submission.submittedBy}\n              />\n            ) : (\n              <Skeleton width={100} />\n            )}\n          </Typography>\n          <Typography variant=\"dataFieldKey\">Submitted On</Typography>\n          <Typography variant=\"smallText1\">\n            {submission ? (\n              formatDate(moment(submission.submittedOn))\n            ) : (\n              <Skeleton width={100} />\n            )}\n          </Typography>\n          <Typography variant=\"dataFieldKey\">Modified By</Typography>\n          <Typography variant=\"smallText1\">\n            {submission ? (\n              <UserCard\n                size={'SMALL USER CARD'}\n                ownerId={submission.modifiedBy}\n              />\n            ) : (\n              <Skeleton width={100} />\n            )}\n          </Typography>\n          <Typography variant=\"dataFieldKey\">Modified On</Typography>\n          <Typography variant=\"smallText1\">\n            {submission ? (\n              formatDate(moment(submission.modifiedOn))\n            ) : (\n              <Skeleton width={100} />\n            )}\n          </Typography>\n          <Typography className=\"Key\" variant=\"dataFieldKey\">\n            Data Requesters\n            {`${submission ? ` (${submission.accessorChanges.length})` : ''}`}\n          </Typography>\n          {submission ? (\n            submission.accessorChanges.map(accessorChange => (\n              <React.Fragment key={accessorChange.userId}>\n                <Typography className=\"Key DataAccessor\" variant=\"smallText1\">\n                  <span style={{ whiteSpace: 'nowrap' }}>\n                    <UserCard\n                      key={accessorChange.userId}\n                      size=\"SMALL USER CARD\"\n                      ownerId={accessorChange.userId}\n                    />\n                  </span>\n                </Typography>\n                <Typography className=\"Value DataAccessor\" variant=\"smallText1\">\n                  {upperFirst(\n                    toLower(\n                      accessorChange.type.substring(\n                        0,\n                        accessorChange.type.indexOf('_'),\n                      ),\n                    ),\n                  )}\n                </Typography>\n              </React.Fragment>\n            ))\n          ) : (\n            <Skeleton width={100} />\n          )}\n          <Typography className=\"Key\" variant=\"dataFieldKey\">\n            Institution\n          </Typography>\n          <Typography className=\"Value\" variant=\"smallText1\">\n            {submission ? (\n              submission.researchProjectSnapshot.institution\n            ) : (\n              <Skeleton width={100} />\n            )}\n          </Typography>\n          <Typography className=\"Key\" variant=\"dataFieldKey\">\n            Project Lead\n          </Typography>\n          <Typography className=\"Value\" variant=\"smallText1\">\n            {submission ? (\n              submission.researchProjectSnapshot.projectLead\n            ) : (\n              <Skeleton width={100} />\n            )}\n          </Typography>\n        </div>\n      </div>\n      <div className=\"SubmissionRightPane\">\n        <SynapseErrorBoundary>\n          {submission ? (\n            <AccessRequirementWiki\n              accessRequirementId={submission.accessRequirementId}\n            />\n          ) : (\n            <></>\n          )}\n        </SynapseErrorBoundary>\n        <div>\n          {submission?.rejectedReason && (\n            <>\n              <Typography variant=\"headline1\">\n                Reason for rejection given by reviewer\n              </Typography>\n              <hr />\n              <Typography variant=\"body1\" style={{ whiteSpace: 'pre-line' }}>\n                {submission.rejectedReason}\n              </Typography>\n            </>\n          )}\n          <Typography variant=\"headline1\">\n            Contents of the Access Request\n          </Typography>\n          <hr />\n          {submission?.researchProjectSnapshot.intendedDataUseStatement && (\n            <>\n              <Typography variant=\"headline2\">\n                Intended Data Use Statement\n              </Typography>\n              <Typography variant=\"body1\" style={{ whiteSpace: 'pre-line' }}>\n                {submission.researchProjectSnapshot.intendedDataUseStatement}\n              </Typography>\n            </>\n          )}\n          <Typography variant=\"headline2\">Documents</Typography>\n          {submission?.ducFileHandleId && (\n            <>\n              <Typography variant=\"smallText2\">\n                Data Use Certificate (DUC)\n              </Typography>\n              <DataAccessSubmissionFileHandleLink\n                submissionId={submission.id}\n                fileHandleId={submission.ducFileHandleId}\n              />\n            </>\n          )}\n          {submission?.irbFileHandleId && (\n            <>\n              <Typography variant=\"smallText2\">IRB Approval Letter</Typography>\n              <DataAccessSubmissionFileHandleLink\n                submissionId={submission.id}\n                fileHandleId={submission.irbFileHandleId}\n              />\n            </>\n          )}\n          {submission?.attachments && (\n            <>\n              <Typography variant=\"smallText2\">Other Attachments</Typography>\n              {submission.attachments.map(fileHandleId => (\n                <>\n                  <DataAccessSubmissionFileHandleLink\n                    key={fileHandleId}\n                    submissionId={submission.id}\n                    fileHandleId={fileHandleId}\n                  />\n                  <br />\n                </>\n              ))}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useCallback } from 'react'\nimport {\n  BrowserRouter,\n  MemoryRouter,\n  NavLink,\n  Route,\n  Switch,\n  useParams,\n} from 'react-router-dom'\nimport { useGetCurrentUserBundle } from '../../utils/hooks/SynapseAPI/useUserBundle'\nimport Typography from '../../utils/typography/Typography'\nimport { SynapseErrorBoundary } from '../ErrorBanner'\nimport IconSvg, { Icon } from '../IconSvg'\nimport { SynapseSpinner } from '../LoadingScreen'\nimport { UserHistoryDashboard } from './AccessHistoryDashboard'\nimport { AccessRequirementDashboard } from './AccessRequirementDashboard'\nimport { DataAccessSubmissionDashboard } from './AccessSubmissionDashboard'\nimport SubmissionPage from './SubmissionPage'\n\nfunction LinkTab(props: {\n  href: string\n  children: React.ReactNode\n  icon: Icon\n}) {\n  const { href, children, icon } = props\n  return (\n    <NavLink className=\"Tab\" role=\"tab\" to={href}>\n      <IconSvg\n        options={{\n          icon: icon,\n          padding: 'right',\n        }}\n      />\n      <Typography variant=\"buttonLink\">{children}</Typography>\n    </NavLink>\n  )\n}\n\ntype ReviewerDashboardProps = {\n  /** Used to determine the base path for the component. Default is #!DataAccessManagement:default */\n  routerBaseName?: string\n  /** If true use a MemoryRouter, which prevents the browser URL from updating. For demo purposes only. */\n  useMemoryRouter?: boolean\n  /** Used to show the reject submission dialog */\n  onRejectSubmissionClicked: (onReject: (reason: string) => void) => void\n}\n\nexport function ReviewerDashboard(props: ReviewerDashboardProps) {\n  const {\n    routerBaseName = '#!DataAccessManagement:default',\n    useMemoryRouter = false,\n    onRejectSubmissionClicked,\n  } = props\n\n  const { data: userBundle, isLoading } = useGetCurrentUserBundle()\n\n  const hasActPermissions = userBundle?.isACTMember\n  const hasReviewerPermissions =\n    userBundle?.isACTMember || userBundle?.isARReviewer\n\n  const Router = useCallback(\n    props => {\n      if (useMemoryRouter) {\n        return <MemoryRouter {...props} />\n      } else {\n        return <BrowserRouter {...props} />\n      }\n    },\n    [useMemoryRouter],\n  )\n\n  if (isLoading) {\n    return <SynapseSpinner size={50} />\n  }\n\n  return (\n    <Router basename={routerBaseName}>\n      <div className=\"ReviewerDashboard\">\n        <div className=\"Tabs\" role=\"tablist\">\n          {hasActPermissions && (\n            <LinkTab href=\"/AccessRequirements\" icon=\"accessClosed\">\n              Access Requirements\n            </LinkTab>\n          )}\n          {hasReviewerPermissions && (\n            <LinkTab href=\"/Submissions\" icon=\"discussion\">\n              Submissions\n            </LinkTab>\n          )}\n          {hasActPermissions && (\n            <LinkTab href=\"/UserAccessHistory\" icon=\"history\">\n              User Access History\n            </LinkTab>\n          )}\n        </div>\n        <div className=\"TabContentContainer\">\n          <SynapseErrorBoundary>\n            <Switch>\n              {hasActPermissions && (\n                <Route path=\"/AccessRequirements\">\n                  <AccessRequirementDashboard />\n                </Route>\n              )}\n              {hasReviewerPermissions && [\n                <Route exact path=\"/Submissions\" key=\"/Submissions\">\n                  <DataAccessSubmissionDashboard />\n                </Route>,\n\n                <Route path=\"/Submissions/:id\" key=\"/Submissions/:id\">\n                  <SubmissionPageRouteRenderer\n                    onRejectSubmissionClicked={onRejectSubmissionClicked}\n                  />\n                </Route>,\n              ]}\n              {\n                <Route exact path=\"/UserAccessHistory\">\n                  <UserHistoryDashboard />\n                </Route>\n              }\n            </Switch>\n          </SynapseErrorBoundary>\n        </div>\n      </div>\n    </Router>\n  )\n}\n\nfunction SubmissionPageRouteRenderer(props: {\n  onRejectSubmissionClicked: (onReject: (reason: string) => void) => void\n}) {\n  const { id } = useParams<{ id: string }>()\n  return (\n    <SubmissionPage\n      submissionId={id}\n      onRejectClicked={props.onRejectSubmissionClicked}\n    />\n  )\n}\n\nexport default ReviewerDashboard\n"],"names":["React","__RouterContext","useEffect","SynapseClient.searchAccessApprovals","useMemo","accessorId","accessRequirementId","useState","MODIFIED_ON","DESC","data","hasNextPage","fetchNextPage","isLoading","setSort","field","_jsxs","_jsx","EXPIRED_ON","accessRequirementName","SMALL_USER_CARD","submitterId","moment","showSubmitter","showStatus","showRequesters","reviewerId","submissionState","reviewerFilterType","CREATED_ON","id","userId","ACT_TEAM_ID","useCallback","UserHistoryDashboard","setAccessRequirementId","setAccessorId","approvalTableProps","setApprovalTableProps","submissionTableProps","setSubmissionTableProps","location","useLocation","history","useHistory","INPUT_CHANGE_DEBOUNCE_DELAY_MS","onAccessorChange","selected","initialParams","URLSearchParams","search","get","undefined","useDebouncedEffect","updateQueryParams","params","omitBy","item","replace","pathname","toString","NoSearchResultComponent","TYPE_FILTER","USERS_ONLY","_Fragment","nameContains","relatedProjectId","accessType","onCreateNewAccessRequirementClicked","name","projectId","setNameContains","setRelatedProjectId","setReviewerId","initializeFromSearchParams","setTableProps","ALL_PROJECTS","showEntityFinder","setShowEntityFinder","onReviewerChange","tableProps","DataAccessSubmissionDashboard","SubmissionState","SUBMITTED","onRequesterChange","SynapseClient.getSubmissionById","SynapseClient.updateSubmissionStatus","submissionId","fileHandleId","DataAccessSubmissionAttachment","show","onConfirm","onCancel","wikiPageKey","wikiPageId","ownerObjectId","ownerObjectType","onRejectClicked","submission","refetch","mutateAsync","accessRequirement","acl","APPROVED","REJECTED","reason","showApprovalConfirmation","setShowApprovalConfirmation","handleError","rejectSubmission","principalId","submittedBy","modifiedBy","rejectedReason","intendedDataUseStatement","ducFileHandleId","irbFileHandleId","href","children","icon","onRejectSubmissionClicked","userBundle","props","routerBaseName"],"mappings":"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"}