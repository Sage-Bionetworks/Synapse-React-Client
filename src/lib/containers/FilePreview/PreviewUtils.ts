import {
  FileHandle,
  implementsCloudProviderFileHandleInterface,
} from '../../utils/synapseTypes'
import { PreviewRendererType } from './PreviewRendererType'

export const IMAGE_CONTENT_TYPES = [
  'image/bmp',
  'image/pjpeg',
  'image/jpeg',
  'image/jpg',
  'image/jpe',
  'image/gif',
  'image/png',
  'image/svg+xml',
]
const MP4_EXTENSIONS = ['.mp4', '.m4a', '.m4p', '.m4b', '.m4r', '.m4v']
const OGG_EXTENSIONS = ['.ogv', '.ogg']
export const VIDEO_EXTENSIONS = [...MP4_EXTENSIONS, ...OGG_EXTENSIONS, '.webm']
export const CODE_EXTENSIONS = [
  '.cwl',
  '.wdl',
  '.json',
  '.awk',
  '.bat',
  '.btm',
  '.c',
  '.cmd',
  '.cpp',
  '.cxx',
  '.def',
  '.dlg',
  '.dpc',
  '.dpj',
  '.dtd',
  '.h',
  '.hdl',
  '.hpp',
  '.hrc',
  '.html',
  '.hxx',
  '.inc',
  '.ini',
  '.inl',
  '.ins',
  '.ipy',
  '.java',
  '.js',
  '.jsp',
  '.l',
  '.lgt',
  '.ll',
  '.par',
  '.pl',
  '.py',
  '.r',
  '.rc',
  '.rdb',
  '.res',
  '.s',
  '.sbl',
  '.scp',
  '.sh',
  '.sql',
  '.src',
  '.srs',
  '.xml',
  '.xrb',
  '.y',
  '.yaml',
  '.yxx',
]
export const MARKDOWN_EXTENSIONS = ['.md', '.markdown', '.rmd']

function getFileExtension(fileName: string): string | null {
  const index = fileName.lastIndexOf('.')
  if (index === -1) {
    return null
  }
  return fileName.substring(index)
}

/**
 * Given a file handle that represents a link to original data, return the type of renderer that we could use to
 * display the file contents in the browser.
 *
 * @returns the PreviewRendererType that would be used to render the file contents, or NONE if the file cannot be rendered
 */
export function getOriginalFileHandleRenderer(
  dataFileHandle: FileHandle,
): PreviewRendererType {
  if (!implementsCloudProviderFileHandleInterface(dataFileHandle)) {
    return PreviewRendererType.NONE
  }

  const fileExtension = getFileExtension(dataFileHandle.fileName)

  if (fileExtension && VIDEO_EXTENSIONS.includes(fileExtension)) {
    return PreviewRendererType.VIDEO
  }

  if (fileExtension === '.ipynb') {
    return PreviewRendererType.IPYNB
  }

  if (IMAGE_CONTENT_TYPES.includes(dataFileHandle.contentType)) {
    return PreviewRendererType.IMAGE
  }

  if (dataFileHandle.contentType === 'text/html') {
    return PreviewRendererType.HTML
  }

  if (dataFileHandle.contentType.toLowerCase().startsWith('application/pdf')) {
    return PreviewRendererType.PDF
  }

  if (fileExtension && CODE_EXTENSIONS.includes(fileExtension)) {
    return PreviewRendererType.CODE
  }

  if (fileExtension && MARKDOWN_EXTENSIONS.includes(fileExtension)) {
    return PreviewRendererType.MARKDOWN
  }

  if (dataFileHandle.contentType === 'image/tiff') {
    return PreviewRendererType.TIFF
  }

  return PreviewRendererType.NONE
}

/**
 * Given a file handle that represents a preview of original data (which is generated by Synapse), return the type of renderer that we could use to
 * display the preview file contents in the browser.
 *
 * @param previewFileHandle the file handle that represents a preview of original data
 * @param originalFileHandle the file handle that represents the original data that the preview captures.
 * @returns the PreviewRendererType that would be used to render the preview file contents, or NONE if the file cannot be rendered
 */
export function getPreviewFileHandleRenderer(
  previewFileHandle: FileHandle,
  originalFileHandle: FileHandle,
): PreviewRendererType {
  const contentType = previewFileHandle.contentType
  if (!implementsCloudProviderFileHandleInterface(previewFileHandle)) {
    return PreviewRendererType.NONE
  }
  if (IMAGE_CONTENT_TYPES.includes(previewFileHandle.contentType)) {
    return PreviewRendererType.IMAGE
  }

  if (contentType.toLowerCase().startsWith('text/')) {
    if (contentType.toLowerCase() === 'text/csv') {
      if (originalFileHandle.contentType === 'application/zip') {
        return PreviewRendererType.ZIP
      } else {
        return PreviewRendererType.CSV
      }
    } else if (contentType.toLowerCase() === 'text/tab-separated-values') {
      return PreviewRendererType.TAB
    } else {
      return PreviewRendererType.PLAINTEXT
    }
  }

  if (contentType.toLowerCase().startsWith('application/pdf')) {
    return PreviewRendererType.PDF
  }

  return PreviewRendererType.NONE
}
